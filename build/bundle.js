import '../../../../../../jqwidgets-scripts/jqwidgets/jqxcore.js';
import '../../../../../../jqwidgets-scripts/jqwidgets/jqxmenu.js';
import '../../../../../../is-base64';
import '../../../../../../nano-time';
import '../../../../../../semver';
import require$$0$1 from 'stream';
import require$$0 from 'util';
import fs from 'fs';
import path from 'path';
import EventEmitter from 'events';
import childProcess from 'child_process';
import '../../../../../../request';
import '../../../../../../fs-path';
import fs$1 from '../../../../../../fs';
import '../../../../../../child_process';
import readline from '../../../../../../readline';
import net from '../../../../../../net';

//Convert Class

class Convert{
	//Private
    //This is used to prevent functions from altering outside arrays
    static deep_copy(arg){
        //return JSON.parse(JSON.stringify(arg))
    	if (typeof(arg) == "number"){
        	return arg
        }else {
        	let result = [];
        	for(var i = 0; i < arg.length; i++){
            	let elt = arg[i];
                if (typeof(elt) !== "number"){
                    elt = elt.slice(0);
                }
                result.push(elt);
            }
            return result
        }
    }


    //*******************************************
    //Rotation representation conversions:

    static angles_to_DCM(angles = [0, 0, 0], sequence = "XYZ"){
    	//default could be ZX'Z'
        
        var result = [];
        let elt = "";
        for(let char of sequence){
        	if(elt.length == 1){
            	if(char == "'"){
                	elt += char;
                    result.push(elt);
                    elt = "";
                }else {
                	result.push(elt);
                    elt = char;
                }
            }else {
            	elt = char;
            } 
        }
        if((elt != "'") && (elt.length == 1)){
        	result.push(elt);
        }

    	let DCM = Vector$1.identity_matrix(3);
        if(result.length == 3){
        	for(var i = 0; i < 3; i++){
        		DCM = Vector$1.rotate_DCM(DCM, result[i], angles[i]); 
            }
        }
        return Vector$1.transpose(DCM)
    }
    //Convert.angles_to_DCM([Convert.degrees_to_arcseconds(45), Convert.degrees_to_arcseconds(45), 0])

    static DCM_to_angles(DCM, sequence = "XYZ"){
    	
    }

    static quat_to_DCM(quaternion = [1, 0, 0, 0]){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/
    	let w = quaternion[0];
        let x = quaternion[1];
        let y = quaternion[2];
        let z = quaternion[3];
        
        let DCM = Vector$1.make_matrix(3,3);
        DCM[0][0] = 1-2*y*y-2*z*z;
        DCM[1][0] = 2*x*y+2*z*w;
        DCM[2][0] = 2*x*z-2*y*w;
        DCM[0][1] = 2*x*y-2*z*w;
        DCM[1][1] = 1-2*x*x-2*z*z;
        DCM[2][1] = 2*y*z+2*x*w;
        DCM[0][2] = 2*x*z+2*y*w;
        DCM[1][2] = 2*y*z-2*x*w;
        DCM[2][2] = 1-2*x*x-2*y*y;
        return DCM
    }


    static DCM_to_quat(DCM){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/
    	let trace = DCM[0][0] + DCM[1][1] + DCM[2][2];
        let S, w, x, y, z, quaternion;
        if(trace > 0){
        	S = Math.sqrt(1.0 + trace) * 2;
			w = .25 * S;
            x = (DCM[2][1] - DCM[1][2]) / S;
            y = (DCM[2][1] - DCM[1][2]) / S;
            z = (DCM[2][1] - DCM[1][2]) / S;
        }else if(DCM[0][0] > DCM[1][1] && DCM[0][0] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[0][0] - DCM[1][1] - DCM[2][2]);
            w = (DCM[2][1] - DCM[1][2]) / S;
            x = .25 * S;
            y = (DCM[0][1] + DCM[1][0]) / S;
            z = (DCM[0][2] + DCM[2][0]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[1][1] - DCM[0][0] - DCM[2][2]);
            w = (DCM[0][2] - DCM[2][0]) / S;
            x = (DCM[0][1] + DCM[1][0]) / S;
            y = .25 * S;
            z = (DCM[1][2] + DCM[2][1]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[2][2] - DCM[0][0] - DCM[1][1]);
            w = (DCM[1][0] - DCM[0][1]) / S;
            x = (DCM[0][2] + DCM[2][0]) / S;
            y = (DCM[1][2] + DCM[2][1]) / S;
            z = .25 * S;
        }
    	quaternion = [w, x, y, z];
        return quaternion
    }
    
}

//James Wigglesworth
//Started: 6_23_17
//Updated: 6_29_17

function sind(theta){
	if(theta%180 == 0){
    	return 0
    }
	return Math.sin(theta*Math.PI/180)
}

function cosd(theta){
	if((theta+90)%180 == 0){
    	return 0
    }
	return Math.cos(theta*Math.PI/180)
}


function acosd(ratio){
	return Math.acos(ratio)*180/Math.PI
}

function atan2d(num1, num2){
	return Math.atan2(num1, num2)*180/Math.PI
}

Instruction$1.Dexter = class Dexter extends Instruction$1{};

//only used for Dexter.dexter0.get_robot_status() like calls, not for Dexter.get_robot_status() calls.
//this instance is needed because we need the instruction on the do_list to contain
//the robot so that Socket.on_receive and its aux fn, find_dexter_instance_from_robot_status
//know what robot that the on_received robot status belongs to.
Instruction$1.Dexter.get_robot_status = class get_robot_status extends Instruction$1.Dexter{
    constructor (status_mode, robot) {
        super();
        this.status_mode = status_mode; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot; //if this is undefined, we will use the default robot of the job.
    }
    do_item (job_instance){
        if(!this.robot) { //this.robot = job_instance.robot
            this.set_instruction_robot_from_job(job_instance); //might error which is good
        }
        if(this.status_mode === null){
            job_instance.send(make_ins("g"), this.robot);
        }
        else {
            job_instance.send(make_ins("g", this.status_mode), this.robot);
        }
    }
    toString(){
        return "{instanceof: get_robot_status " + this.status_mode + "}"
    }
    to_source_code(args){
        let arg_src;
        if(this.status_mode == null) { arg_src = ""; }
        else { arg_src = "" + this.status_mode; }
        args.indent = "";
        return args.indent + "Dexter." + this.robot.name + ".get_robot_status(" + arg_src + ")"
    }
};

Instruction$1.Dexter.move_all_joints = class move_all_joints extends Instruction$1.Dexter{
    constructor (array_of_angles, robot) {
        super();
        this.array_of_angles = array_of_angles; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot; //if this is undefined, we will use the default robot of the job.
    }
    do_item (job_instance){
        if(!this.robot) { //this.robot = job_instance.robot
            this.set_instruction_robot_from_job(job_instance); //might error which is good
        }
        let angles = [];
        for (let i = 0; i < 5; i++){
            let ang = this.array_of_angles[i];
            if ((ang === undefined) || //happens when array is less than 5 long
                Number.isNaN(ang)) {
                angles.push(this.robot.angles[i]); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        //angles is now 5 long
        for(let i = 5; i < this.array_of_angles.length; i++) {
            let ang = this.array_of_angles[i];
            if ((ang === undefined) ||
                Number.isNaN(ang) ||
                (Array.isArray(ang) && (ang.length == 1) && (ang[0] == 0))) { //ie [0] means move relative amount of 0. in which case, don't more at all, not even what we THINK is to the same place.
                angles.push(NaN); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        //angles is at least 5 long, could be 6 or 7
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Robot.move_all_joints([" + angles + "])");
            job_instance.set_up_next_do(0);
        }
        else  {
            //this.robot.angles = angles
            for(let i = 0; i < angles.length; i++) { this.robot.angles[i] = angles[i]; }
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //effectively done in robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: move_all_joints " + this.array_of_angles + "}"
    }
    to_source_code(args){
        args = jQuery.extend({}, args);
        args.value = this.array_of_angles;
        args.indent = "";
        return args.indent + "Dexter.move_all_joints(" + to_source_code(args) + ")"
    }
};

Instruction$1.Dexter.pid_move_all_joints = class pid_move_all_joints extends Instruction$1.Dexter{
    constructor (array_of_angles, robot) {
        super();
        this.array_of_angles = array_of_angles; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let angles = [];
        for (let i = 0; i < 5; i++){
            let ang = this.array_of_angles[i];
            if ((ang === undefined) || //happens when array is less than 5 long
                Number.isNaN(ang)) {
                angles.push(this.robot.pid_angles[i]); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.pid_angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        //angles is now 5 long
        for(let i = 5; i < this.array_of_angles.length; i++) {
            let ang = this.array_of_angles[i];
            if ((ang === undefined) ||
                Number.isNaN(ang)) {
                angles.push(NaN); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.pid_angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Robot.pid_move_all_joints([" + angles + "])");
            job_instance.set_up_next_do(0);
        }
        else  {
            for(let i = 0; i < angles.length; i++) { this.robot.pid_angles[i] = angles[i]; }
            //job_instance.insert_single_instruction(make_ins("P", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("P", ...angles), this.robot);
            // job_instance.set_up_next_do(1) //called by robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: pid_move_all_joints " + this.array_of_angles + "}"
    }
    to_source_code(args){
        args        = jQuery.extend({}, args);
        args.value  = this.array_of_angles;
        args.indent = "";
        return args.indent + "Dexter.pid_move_all_joints(" + to_source_code(args) + ")"
    }
};

Instruction$1.Dexter.move_all_joints_relative = class move_all_joints_relative extends Instruction$1.Dexter{
    constructor (delta_angles, robot) {
        super();
        this.delta_angles = delta_angles; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance);}
        let angles = []; //the absolute angles after the rel has been added in
        for (let i = 0; i < 5; i++){
            let ang = this.delta_angles[i];
            if ((ang === undefined) || //happens when array is less than 5 long
                Number.isNaN(ang)) {
                angles.push(this.robot.angles[i]); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                //angles.push(this.robot.angles[i] + ang[0])
                dde_error("move_all_joints_relative passed an array: " + ang +
                    " but can only accept numbers as these are already relative.");
            }
            else { angles.push(this.robot.angles[i] + ang); }
        }
        //angles is now 5 long
        for(let i = 5; i < this.delta_angles.length; i++) {
            let ang = this.delta_angles[i];
            if ((ang === undefined) ||
                Number.isNaN(ang)) {
                angles.push(NaN); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {
                dde_error("move_all_joints_relative passed an array: " + ang +
                    " but can only accept numbers as these are already relative.");

            }
            else { angles.push(this.robot.angles[i] + ang); }
        }
        //angles is at least 5 long, could be 6 or 7
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Robot.move_all_joints_relative([" + angles + "])");
            job_instance.set_up_next_do(0);
        }
        else  {
            //this.robot.angles = angles
            for(let i = 0; i < angles.length; i++) { this.robot.angles[i] = angles[i]; }
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //effectively done in robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: move_all_joints_relative " + this.delta_angles + "}"
    }
    to_source_code(args){
        args        = jQuery.extend({}, args);
        args.value  = this.delta_angles;
        args.indent = "";
        return args.indent + "Dexter.move_all_joints_relative(" + to_source_code(args) + ")"
    }
};

Instruction$1.Dexter.move_to = class move_to extends Instruction$1.Dexter{
    constructor (xyz           = [],
                 J5_direction  = [0, 0, -1], //pointing down
                 config        = Dexter.RIGHT_UP_OUT,
                 workspace_pose = null, //default's to the job's default_workspace_pose
                 j6_angle = [0], //default is to move relatively 0, ie don't change
                 j7_angle = [0],
                 robot
    ){
        super();
        this.xyz            = xyz;
        this.J5_direction   = J5_direction;
        this.config         = config;
        this.workspace_pose = ((workspace_pose === null) ? undefined : workspace_pose);
        this.j6_angle       = j6_angle;
        this.j7_angle       = j7_angle;
        this.robot          = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let xyz          = this.xyz;
        let J5_direction = this.J5_direction;
        let config       = this.config;
        let pose         = this.workspace_pose;
        if(Dexter.is_position(this.xyz)){
            pose         = J5_direction;
            xyz          = this.xyz[0];
            J5_direction = this.xyz[1];
            config       = this.xyz[2];

        }
        let [existing_xyz, existing_direction, existing_config] = Kin.J_angles_to_xyz(this.robot.angles, this.robot.pose); //just to get defaults.
        if(J5_direction === null) { J5_direction = existing_direction; }
        if(config       === null) { config       = existing_config; }
        if(Array.isArray(J5_direction) &&
            (J5_direction.length == 2) &&
            (Math.abs(J5_direction[0]) == 90) &&
            (Math.abs(J5_direction[1]) == 90)){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to([" + xyz + "], [" + J5_direction + "])\n" +
                "was passed an invalid J5_direction." +
                "\n[90, 90], [-90, 90], [90, -90] and [-90, -90]\n are all invalid.");
        }
        let xyz_copy = xyz.slice(0);
        for(let i = 0; i < 3; i++){
            let new_x_y_or_z = xyz_copy[i];
            if (xyz_copy.length <= i)             { xyz_copy.push(existing_xyz[i]); }
            else if (new_x_y_or_z == null)        { xyz_copy[i] = existing_xyz[i];  } //does not hit if new_x_y_or_z is 0
            else if (Array.isArray(new_x_y_or_z)) { xyz_copy[i] = existing_xyz[i] + new_x_y_or_z[0]; } //relative "new val"
        }
        if(pose == null) { pose = job_instance.default_workspace_pose; }

        if (Object.isNewObject(pose)) { pose = pose.pose; }
        if (Object.isNewObject(J5_direction)) {
            J5_direction = J5_direction.pose;
            config       = undefined;
            pose         = undefined;
        }
        else if (Array.isArray(J5_direction)) {
            if (Array.isArray(J5_direction[0])) { //J5_direciton is a 2d array
                config = undefined;
                pose   = undefined;
            }
            //else its a 1D array, so use config and pose as they are
        }
        else {
            dde_error("Dexter.move_to passed invalid 5_direction of: " + J5_direction);
        }
        let angles;
        try {
            angles = Kin.xyz_to_J_angles(xyz_copy, J5_direction, config, pose); //was: job_instance.robot.pose
            //angles is now 5 long
        }
        catch(err){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to([" + xyz + "], [" + J5_direction + "])" +
                "\nwas passed invalid xyz.\n " +
                err.message);
            job_instance.set_up_next_do(0);
            return
        }
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " +
                job_instance.program_counter +
                "\nin Dexter.move_to([" + xyz + "])" +
                "\nout of range xyz.");
            job_instance.set_up_next_do(0);
        }
        else {
            if(Array.isArray(this.j6_angle)) {
                angles.push(this.robot.angles[5] + this.j6_angle[0]);
            }
            else { angles.push(this.j6_angle); }
            if(Array.isArray(this.j7_angle)) {
                angles.push(this.robot.angles[6] + this.j7_angle[0]);
            }
            else { angles.push(this.j7_angle); }
            this.robot.angles       = angles;
            //Job.insert_instruction(make_ins("a", ...angles), {job: job_instance, offset: "after_program_counter"})
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            this.computed_angles = angles; //for debugging purposes
            if(Array.isArray(this.j7_angle) &&
                (this.j7_angle.length === 1) &&
                (this.j7_angle[0] === 0)){
                if(Array.isArray(this.j6_angle) &&
                    (this.j6_angle.length === 1) &&
                    (this.j6_angle[0] === 0)){
                    angles = angles.slice(0, 5);
                }
                else { //only j7 is [0] so keep j6 in the array
                    angles = angles.slice(0, 6);
                }
            }
            //we're keeping j7, but maybe not j6
            else if (Array.isArray(this.j6_angle) &&
                    (this.j6_angle.length === 1) &&
                    (this.j6_angle[0] === 0)){
                    angles[5] = "N"; //means don't move J6.
            }
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //effectively done in robot_done_with_instruction
        }
    }

    toString(){ return "{instanceof: move_to " + this.xyz + "}" }

    to_source_code(args){
        args        = jQuery.extend({}, args);
        args.indent = "";

        args.value  = this.xyz;
        let xyx_src = to_source_code(args);

        args.value  = this.J5_direction;
        let J5_direction_src = to_source_code(args);

        args.value  = this.config;
        let config_src = to_source_code(args);

        return args.indent + "Dexter.move_to(" +
            xyx_src          + ", " +
            J5_direction_src + ", " +
            config_src       +
            ")"
    }
};

Instruction$1.Dexter.pid_move_to = class pid_move_to extends Instruction$1.Dexter{
    constructor (xyz           = [],
                 J5_direction  = [0, 0, -1],
                 config        = Dexter.RIGHT_UP_OUT,
                 workspace_pose = undefined, //default's to the job's default_workspace_pos
                 j6_angle = [0], //default is to move relatively 0, ie don't change
                 j7_angle = [0],
                 robot
    ){
        super();
        this.xyz            = xyz;
        this.J5_direction   = J5_direction;
        this.config         = config;
        this.workspace_pose = ((workspace_pose === null) ? undefined : workspace_pose);
        this.j6_angle       = j6_angle;
        this.j7_angle       = j7_angle;
        this.robot          = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let xyz          = this.xyz;
        let J5_direction = this.J5_direction;
        let config       = this.config;
        let pose         = this.workspace_pose;
        if(Dexter.is_position(this.xyz)){
            pose         = J5_direction;
            xyz          = this.xyz[0];
            J5_direction = this.xyz[1];
            config       = this.xyz[2];
        }
        let [existing_xyz, existing_direction, existing_config] = Kin.J_angles_to_xyz(this.robot.pid_angles, this.robot.pose); //just to get defaults.
        if(J5_direction === null) { J5_direction = existing_direction; }
        if(config       === null) { config       = existing_config; }
        if(Array.isArray(J5_direction) &&
            (J5_direction.length == 2) &&
            (Math.abs(J5_direction[0]) == 90) &&
            (Math.abs(J5_direction[1]) == 90)){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.pid_move_to([" + xyz + "], [" + J5_direction + "])\n" +
                "was passed an invalid J5_direction." +
                "\n[90, 90], [-90, 90], [90, -90] and [-90, -90]\n are all invalid.");
        }
        let xyz_copy = xyz.slice(0);
        for(let i = 0; i < 3; i++){
            let new_x_y_or_z = xyz_copy[i];
            if      (xyz_copy.length <= i)        { xyz_copy.push(existing_xyz[i]); }
            else if (xyz_copy[i] == null)         { xyz_copy[i] = existing_xyz[i];  }
            else if (Array.isArray(new_x_y_or_z)) { xyz_copy[i] = existing_xyz[i] + new_x_y_or_z[0]; } //relative "new val"
        }
        if(pose == null) { pose = job_instance.default_workspace_pose; }
        if (Object.isNewObject(pose)) { pose = pose.pose; }
        if (Object.isNewObject(J5_direction)) {
            J5_direction = J5_direction.pose;
            config       = undefined;
            pose         = undefined;
        }
        else if (Array.isArray(J5_direction)) {
            if (Array.isArray(J5_direction[0])) { //J5_direciton is a 2d array
                config = undefined;
                pose   = undefined;
            }
            //else its a 1D array, so use config and pose as they are
        }
        else {
            dde_error("Dexter.move_to passed invalid 5_direction of: " + J5_direction);
        }
        let angles;
        try {
            angles = Kin.xyz_to_J_angles(xyz_copy, J5_direction, config, pose); //job_instance.robot.pose
            //angles is now 5 long
        }
        catch(err){
            //job_instance.stop_for_reason("errored",
            //    "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
            //    "\nDexter.pid_move_to([" + xyz + "], [" + J5_direction + "])" +
            //    "\nwas passed invalid xyz.\n " +
            // err.message)
            //job_instance.set_up_next_do(0)
            //return
            throw new Error("in pid_move_to do_item method. Call to Kin.xyz_to_J_angles has errored")
        }
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Dexter.pid_move_to([" + xyz + "])");
            job_instance.set_up_next_do(0);
        }
        else {
            if(Array.isArray(this.j6_angle)) {
                angles.push(this.robot.pid_angles[5] + this.j6_angle[0]);
            }
            else { angles.push(this.j6_angle); }
            if(Array.isArray(this.j7_angle)) {
                angles.push(this.robot.pid_angles[6] + this.j7_angle[0]);
            }
            else { angles.push(this.j7_angle); }
            this.robot.pid_angles       = angles;  //angles is 7 long
            //Job.insert_instruction(make_ins("P", ...angles), {job: job_instance, offset: "after_program_counter"})
            //job_instance.insert_single_instruction(make_ins("P", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("P", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //called by robot_done_with_instruction
        }
    }

    toString(){ return "{instanceof: pid_move_to " + this.xyz + "}" }

    to_source_code(args){
        args        = jQuery.extend({}, args);
        args.indent = "";

        args.value  = this.xyz;
        let xyx_src = to_source_code(args);

        args.value  = this.J5_direction;
        let J5_direction_src = to_source_code(args);

        args.value  = this.config;
        let config_src = to_source_code(args);

        return args.indent + "Dexter.pid_move_to(" +
            xyx_src          + ", " +
            J5_direction_src + ", " +
            config_src       +
            ")"
    }
};
Instruction$1.Dexter.move_to_relative = class move_to_relative extends Instruction$1.Dexter{
    constructor (delta_xyz = [0, 0, 0], workspace_pose=undefined, j6_delta_angle=0, j7_delta_angle=0, robot){
        super();
        if (delta_xyz.length == 1) {
            delta_xyz.push(0);
            delta_xyz.push(0);
        }
        else if (delta_xyz.length == 2) {  delta_xyz.push(0); }
        this.delta_xyz      = delta_xyz;
        this.workspace_pose = ((workspace_pose === null)? undefined : workspace_pose);
        this.j6_delta_angle = j6_delta_angle;
        this.j7_delta_angle = j7_delta_angle;
        this.robot          = robot;
    }
    do_item(job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let [old_xyz, J5_direction, config] = Kin.J_angles_to_xyz(this.robot.angles, this.workspace_pose); //job_instance.robot.pose
        let new_xyz = Vector.add(old_xyz, this.delta_xyz); //makes a new array
        let angles;
        try {
            angles = Kin.xyz_to_J_angles(new_xyz, J5_direction, config, this.workspace_pose); //job_instance.robot.pose)
            //now of length 5
        }
        catch(err){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to_relative([" + this.delta_xyz + "])" +
                "\ncalled with out of range delta_xyz\n" +
                err.message);
            job_instance.set_up_next_do(0);
            return
        }
        angles.push(this.robot.angles[5] + this.j6_delta_angle);
        angles.push(this.robot.angles[6] + this.j7_delta_angle);

        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Dexter.move_to_relative([" + this.delta_xyz + "])");
            job_instance.set_up_next_do(0);
        }
        else {
            this.robot.angles = angles;
            //return make_ins("a", ...angles) // Dexter.move_all_joints(angles)
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //called by robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: move_to_relative " + this.delta_xyz + "}"
    }
    to_source_code(args){
        let prop_args        = jQuery.extend({}, args);
        prop_args.indent     = "";
        prop_args.value      = this.delta_xyz;
        return args.indent + "Dexter.move_to_relative(" + to_source_code(prop_args) + ")"
    }
};

Instruction$1.Dexter.move_to_straight = class move_to_straight extends Instruction$1.Dexter{
    constructor ({xyz           = [],
                  J5_direction   = [0, 0, -1],
                  config         = Dexter.RIGHT_UP_OUT,
                  workspace_pose = undefined,
                  tool_speed     = 5*_mm / _s,
                  resolution     = 0.5*_mm,
                  j6_angle       = [0],
                  j7_angle       = [0],
                  single_instruction = false, //false means make up all the make_ins for this here in DDE,
                                                 //true means create just 1 make_ins "T" instruction
                  robot}) {
        super();
        this.xyz            = xyz;
        this.J5_direction   = J5_direction;
        this.config         = config;
        this.workspace_pos  = ((workspace_pose === null) ? undefined : workspace_pose);
        this.tool_speed     = tool_speed;
        this.resolution     = resolution;
        this.j6_angle       = j6_angle;
        this.j7_angle       = j7_angle;
        this.single_instruction = single_instruction;
        this.robot          = robot;
        if(!single_instruction) { this.inserting_instruction = true; }
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let [existing_xyz, existing_J5_direction, existing_config] =
            Kin.J_angles_to_xyz(this.robot.angles, this.robot.pose);
        let xyz_copy = this.xyz.slice(0);
        for(let i = 0; i < 3; i++){
            let new_x_y_or_z = xyz_copy[i];
            if (xyz_copy.length <= i)             { xyz_copy.push(existing_xyz[i]); }
            else if (new_x_y_or_z == null)        { xyz_copy[i] = existing_xyz[i];  } //does not hit if new_x_y_or_z is 0
            else if (Array.isArray(new_x_y_or_z)) { xyz_copy[i] = existing_xyz[i] + new_x_y_or_z[0]; } //relative "new val"
        }
        let angles;
        try { angles = Kin.xyz_to_J_angles(xyz_copy, this.J5_direction, this.config, this.robot.pose);} //job_instance.robot.pose ?
        catch(err){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to_straight([" + this.xyz + "])" +
                "\ncalled with out of range xyz\n" +
                err.message);
            job_instance.set_up_next_do(0);
            return
        }
        let new_j6_angle;
        if(Array.isArray(this.j6_angle)) {
            new_j6_angle = this.robot.angles[5] + this.j6_angle[0];
        }
        else {  new_j6_angle = this.j6_angle; }
        angles.push(new_j6_angle);

        let new_j7_angle;
        if(Array.isArray(this.j7_angle)) {
            new_j7_angle =  this.robot.angles[6] + this.j7_angle[0];
        }
        else { new_j7_angle = this.j7_angle; }
        angles.push(new_j7_angle);

        this.robot.angles = angles;
        if(this.single_instruction) {
            let ins = make_ins("T",
                xyz_copy[0], xyz_copy[1], xyz_copy[2], //args 0, 1, 2
                this.J5_direction[0], this.J5_direction[1], this.J5_direction[2],
                this.config[0], this.config[1], this.config[2],
                this.tool_speed, this.resolution,
                new_j6_angle, new_j7_angle); //args 11, 12
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(ins, this.robot);
            //job_instance.set_up_next_do(1) //will be called by robot_done_with_instruction
        }
        else {
            try {
                let instrs = this.move_to_straight_aux(existing_xyz,
                    xyz_copy,
                    this.J5_direction,
                    this.config,
                    this.robot.pose,
                    this.tool_speed,
                    this.resolution,
                    this.robot);
                //Job.insert_instruction(instrs, {job: job_instance, offset: "after_program_counter"})
                job_instance.insert_instructions(instrs);
                job_instance.set_up_next_do(1);
            }
            catch(err){
                job_instance.stop_for_reason("errored",
                    "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                    "Dexter.move_to_straight({xyz: [" + this.xyz + "]})\n" +
                    "passed invalid xyz.\n" +
                    err.message);
            }
        }
    }
    move_to_straight_aux (xyz_1, xyz_2, J5_direction, config,  robot_pose, tool_speed = 5*_mm / _s, resolution = .5*_mm, robot){
        let movCMD = [];
        let U1 = xyz_1;
        let U2 = xyz_2;
        let U21 = Vector.subtract(U2, U1);
        let v21 = Vector.normalize(U21);
        let mag = Vector.magnitude(U21);
        let div = 1;
        let step = Infinity;
        while(resolution < step){
            div++;
            step = mag / div;
        }
        let angular_velocity;
        let Ui, new_J_angles;
        let old_J_angles = Kin.xyz_to_J_angles(U1, J5_direction, config, robot_pose);
        for(let i = 1; i < div+1; i++){
            Ui = Vector.add(U1, Vector.multiply(i*step, v21));
            new_J_angles = Kin.xyz_to_J_angles(Ui, J5_direction, config, robot_pose);
            angular_velocity = Kin.tip_speed_to_angle_speed(old_J_angles, new_J_angles, tool_speed);
            old_J_angles = new_J_angles;
            movCMD.push(robot.make_ins("S", "MaxSpeed", angular_velocity));
            movCMD.push(robot.make_ins("S", "StartSpeed", angular_velocity));
            movCMD.push(robot.move_to(Ui, J5_direction, config, robot_pose));
        }
        return movCMD
    }
    toString(){
        return "{instanceof: move_to_straignt " + this.xyz + "}"
    }
    to_source_code(args){
        args        = jQuery.extend({}, args);
        args.indent = "";

        args.value  = this.xyz;
        let xyx_src = to_source_code(args);

        args.value  = this.J5_direction;
        let J5_direction_src = to_source_code(args);

        args.value  = this.config;
        let config_src = to_source_code(args);

        args.value  = this.tool_speed;
        let tool_speed_src = to_source_code(args);

        args.value  = this.resolution;
        let resolution_src = to_source_code(args);

        return args.indent + "Dexter.move_to_straight(" +
            xyx_src          + ", " +
            J5_direction_src + ", " +
            config_src       + ", " +
            tool_speed_src   + ", " +
            resolution_src   +
            ")"
    }
};

Instruction$1.Dexter.read_file = class read_file extends Instruction$1.Dexter{
    constructor (source        , //a file name path string
                 destination   = "read_file_content", //user data variable
                 robot         = null //null means use the default robot of the job.
    ){
        if (typeof(source) != "string") {
            dde_error("Dexter.read_file passed non-string for 'source' of: " + source);
        }
        if (typeof(destination) != "string") {
            dde_error("Dexter.read_file passed non-string for 'destination' of: " + destination);
        }
        super();
        this.source = source; //Instruction.Dexter.read_file.add_default_file_prefix_maybe(source)
              //add_default no longer used. We pass teh users path straight thru.
              //if it starts with a letter (not slash or special char like *)
              //it gets file from /srv/samba/share
        this.destination = destination;
        this.first_do_item_call = true;
        this.is_done = false;
        this.processing_r_instruction = false;
        this.robot = robot;
        this.inserting_instruction = true;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        if (this.first_do_item_call) {
            const sim_actual = Robot.get_simulate_actual(this.robot.simulate);
            //have to check for dexter_file_systems or else the 2nd time I run the job, it will
            //have a double length path with 2 dexter_file_systems parts
            if (!this.source.startsWith("/") && (sim_actual === true) && !this.source.startsWith("dexter_file_systems")) {
                this.fuller_source = "dexter_file_systems/" + this.robot.name + "/" + this.source;
            }
            else { this.fuller_source = this.source; }
            job_instance.user_data[this.destination] = "";
            this.first_do_item_call = false;
            this.is_done = false;
            this.processing_r_instruction = false;
        }
        //the below can never happen
        //if (this.is_done) {
        //    this.processing_r_instruction = false
        //    return Control.break()
        //}
        let read_file_instance = this;
        let robot = this.robot; //closed over
        job_instance.insert_single_instruction(Control.loop(true, function(content_hunk_index){
                if (read_file_instance.is_done) {
                    //init this inst just in case it gets used again
                    read_file_instance.is_done = false;
                    read_file_instance.first_do_item_call = true;
                    read_file_instance.processing_r_instruction = false;
                    return Control.break()
                }
                else {
                    read_file_instance.processing_r_instruction = true;
                    return [make_ins("r", content_hunk_index, read_file_instance.fuller_source, robot),
                            Control.wait_until(function(){
                                return !read_file_instance.processing_r_instruction
                             })
                           ]
                }
            })
        );
        job_instance.set_up_next_do(1);
    }

    //back up over dolist and return the first Instruction.Dexter.read_file found
    //called from got_content_hunk AND Dexter.done_with_instruction
    static find_read_file_instance_on_do_list(job_instance, starting_ins_id){
        for (let i = starting_ins_id; i >= 0; i--){
            let an_instruction = job_instance.do_list[i];
            if(an_instruction instanceof Instruction$1.Dexter.read_file){
                    return an_instruction
            }
        }
        shouldnt("find_read_file_instance_on_do_list failed to find<br/>" +
            "an instance of Dexter.read_file on Job." + job_instance.name + ".do_list<br/>" +
            "at or before instruction: " + starting_ins_id);
    }

    //called from socket.js
    //payload_string_maybe is a string or an error code (an int > 0)
    static got_content_hunk(job_id, ins_id, payload_string_maybe){
        let job_instance = Job.job_id_to_job_instance(job_id);
        if (job_instance == null){
            throw new Error("Dexter.robot_done_with_instruction passed job_id: " + job_id +
                " but couldn't find a Job instance with that job_id.")
        }
        let read_file_instance = this.find_read_file_instance_on_do_list(job_instance, ins_id);
        read_file_instance.processing_r_instruction = false;
        if(typeof(payload_string_maybe) == "string"){ //do the usual
            job_instance.user_data[read_file_instance.destination] += payload_string_maybe;
            if(payload_string_maybe.length < Instruction$1.Dexter.read_file.payload_max_chars){
                read_file_instance.is_done = true;
            }
        }
        else if(typeof(payload_string_maybe) == "number"){ //an error number.
            job_instance.user_data[read_file_instance.destination] = payload_string_maybe; //set, don't append
            read_file_instance.is_done = true;
        }
    }

    //used by Dexter.write_file to prepare path for passing it to make_ins("W" ...)
    //because the path used for write_file defaults to "srv/samba/share/dde_apps",
    //whereas the path for make_ins("W" ...) defaults to srv/samba/share
    //see Dexter.srv_samba_share_default_to_absolute_path to do the opposite
    //no longer used.
    /*static add_default_file_prefix_maybe(path){
        if      (path.startsWith("/"))   { return path }
        else if (path.startsWith("#"))   { return path }
        else if (path.startsWith("./"))  { return "dde_apps/" + path.substring(2) }
        else if (path.startsWith("../")) { return path.substring(3) } //will go to dexrun's default folder, ie /srv/samba/share/
        else                             { return "dde_apps/" + path }
    }*/

    to_source_code(args){
        let result = "Dexter.";
        if(this.robot) { result += this.robot.name + "."; }
        result += args.indent +
                  "read_file(" +
                  to_source_code({value: this.source}) + ", " +
                  to_source_code({value: this.destination}) +
                  ")";
        return result
    }
};
Instruction$1.Dexter.read_file.payload_max_chars = 62;

//Robot Status Class (as distinguished from the robot_status 1D array of 60 elts.

var RobotStatus$1 = class RobotStatus{
    //below work for g0 and g1
    constructor({robot_status="required"}){
        this.robot_status = robot_status; //for g0, the array has degrees, etc.
                                         //for g1+ the array has low level numbers, ie arcseconds,
                                         //unchanged from what Dexter sends to DDE.
                                         //But methods like measured_angle return degrees.
    }
    job_id()                        { return this.robot_status[Dexter$1.JOB_ID]}
    instruction_id()                { return this.robot_status[Dexter$1.INSTRUCTION_ID]}
    start_time()                    { return this.robot_status[Dexter$1.START_TIME]}
    stop_time()                     { return this.robot_status[Dexter$1.STOP_TIME]}
    instruction_type()              { return this.robot_status[Dexter$1.INSTRUCTION_TYPE]}
    error_code()                    { return this.robot_status[Dexter$1.ERROR_CODE]}
    dma_read_data()                 { return this.robot_status[Dexter$1.DMA_READ_INSTRUCTION]}
    read_block_count()              { return this.robot_status[Dexter$1.READ_BLOCK_COUNT]}
    end_effector_io_in()            { return this.robot_status[Dexter$1.END_EFFECTOR_IO_IN]} //was end_effector_io_in

    status_mode(){
        return RobotStatus.array_status_mode(this.robot_status)
    }

    static array_status_mode(robot_status_array){
        let raw = robot_status_array[Dexter$1.STATUS_MODE];
        if      (typeof(raw) === "string") { return parseInt(raw) }
        else if (typeof(raw === "number")) { return raw }
    }

    static is_other_status_mode(sm){ //such status_modes will use generic table display.
        return ![0, 1, 2].includes(sm)
    }

    supports_measured_angles(){
        return (this.status_mode() < 3)
    }

    value_at_index(index){
        if((index < 0) || (index > 59)) {
            return this.robot_status(index)
        }
        else {
            dde_error("RobotStatus.value_at_index called with index that's not between 0 and 59 iclusive: " + index);
        }
    }

    //below for g0 only
    angle(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_ANGLE";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else {
                  dde_error("RobotStatus.angle passed joint_number: " + joint_number +
                             "<br/> but the value of that is: " + result +
                             "<br/> when it should be a number." +
                             "<br/>The whole robot status is: " + this.robot_status);

                 }
        }
        else {
            dde_error("RobotStatus.angle is invalid for status_mode: " + sm);
        }
    }

    angles(joint_count=5){
        let sm = this.status_mode();
        if(sm === 0) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.angle(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.angles is invalid for status_mode: " + sm);
        }
    }

    delta(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_DELTA";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.delta passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.delta is invalid for status_mode: " + sm);
        }
    }

    deltas(joint_count=5){
        let sm = this.status_mode();
        if(sm === 0) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.delta(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.deltas is invalid for status_mode: " + sm);
        }
    }

    pid_delta(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_PID_DELTA";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.pid_delta passed joint_number: " + joint_number + " which isn't valid."); }
        }
        if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_PID_DELTA_G2";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.pid_delta passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.pid_delta is invalid for status_mode: " + sm);
        }
    }

    pid_deltas(joint_count=5){
        let sm = this.status_mode();
        if(sm === 0) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.pid_delta(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.pid_deltas is invalid for status_mode: " + sm);
        }
    }

    /*force_calc_angle(joint_number){
        let result = this.robot_status["J" + joint_number + "_FORCE_CALC_ANGLE"]
        if(typeof(result) == "number") { return result}
        else { dde_error("RobotStatus.force_calc_angle passed joint_number: " + joint_number + " which isn't valid.") }
    }

    force_calc_angles(joint_count=5){
        let result = []
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.force_calc_angle(j_number))
        }
        return result
    }*/

    a2d_sin(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_A2D_SIN";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_sin passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_A2D_SIN_G2";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_sin passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.a2d_sin is invalid for status_mode: " + sm);
        }
    }

    a2d_sins(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.a2d_sin(j_number));
        }
        return result
    }

    a2d_cos(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_A2D_COS";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_cos passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_A2D_COS_G2";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_cos passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.a2d_cos is invalid for status_mode: " + sm);
        }
    }

    a2d_coses(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.a2d_cos(j_number));
        }
        return result

    }

    sent(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_SENT";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) === "number") { return result}
            else { dde_error("RobotStatus.sent passed joint_number: " + joint_number + " which isn't valid."); }
        }
        if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_SENT";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) === "number") { return result}
            else { dde_error("RobotStatus.sent passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.sent is invalid for status_mode: " + sm);
        }
    }

    sents(joint_count=5){
        let sm = this.status_mode();
        if((sm === 0) || (sm === 2)) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.sent(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.sents is invalid for status_mode: " + sm);
        }
    }

    //works for g0 & g1  returns angle in degrees except
    //if raw=true, then return the number in the array without converting
    //used in
    measured_angle(joint_number, raw=false) {
        let sm = this.status_mode();
        if(sm === 0) {
            if      (joint_number == 1) { return this.robot_status[Dexter$1.J1_MEASURED_ANGLE] }
            else if (joint_number == 2) { return this.robot_status[Dexter$1.J2_MEASURED_ANGLE] }
            else if (joint_number == 3) { return this.robot_status[Dexter$1.J3_MEASURED_ANGLE] }
            else if (joint_number == 4) { return this.robot_status[Dexter$1.J4_MEASURED_ANGLE] }
            else if (joint_number == 5) { return this.robot_status[Dexter$1.J5_MEASURED_ANGLE] }
            else if (joint_number == 6) { return this.robot_status[Dexter$1.J6_MEASURED_ANGLE] }
            else if (joint_number == 7) { return this.robot_status[Dexter$1.J7_MEASURED_ANGLE] }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                          "<br/>Valid numbers are 1 through 7.");
            }
        }
        else if (sm === 1) {
            if((joint_number >= 0) && (joint_number <= 10)){
                let index = 9 + joint_number;
                let result = this.robot_status[index];
                if(!raw) { result = result / 3600; } //the usual case
                return result
            }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                          "<br/>Valid numbers are 1 through 7.");
            }
        }
        if(sm === 2) {
            if((joint_number >= 0) && (joint_number <= 7)) {
                if      (joint_number == 1) { return this.robot_status[Dexter$1.J1_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 2) { return this.robot_status[Dexter$1.J2_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 3) { return this.robot_status[Dexter$1.J3_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 4) { return this.robot_status[Dexter$1.J4_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 5) { return this.robot_status[Dexter$1.J5_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 6) { return this.robot_status[Dexter$1.J6_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 7) { return this.robot_status[Dexter$1.J7_MEASURED_ANGLE_G2] / 3600 }
            }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 7.");
            }
        }
        else {
            dde_error("RobotStatus.measured_angle isn't supported for status_mode of " + sm);
        }
    }

    //works for g0 & g1 returns angle in degrees
    measured_angles(joint_count=7, raw=false){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.measured_angle(j_number, raw));
        }
        return result
    }

    //array_of_measured_angles is in degrees
    //if raw is true, don't modify array_of_measured_angles when shoving them into the array
    //array_of_measured_angles expected to be in degrees, but if raw = true, it doesn't matter.
    set_measured_angles(array_of_measured_angles, raw=false){
        let rs_array = this.robot_status;
        let sm = this.status_mode();
        if(sm === 0) { //angles in rs_array are in degrees
            rs_array[Dexter$1.J1_MEASURED_ANGLE] = array_of_measured_angles[0];
            rs_array[Dexter$1.J2_MEASURED_ANGLE] = array_of_measured_angles[1];
            rs_array[Dexter$1.J3_MEASURED_ANGLE] = array_of_measured_angles[2];
            rs_array[Dexter$1.J4_MEASURED_ANGLE] = array_of_measured_angles[3];
            rs_array[Dexter$1.J5_MEASURED_ANGLE] = array_of_measured_angles[4];
            rs_array[Dexter$1.J6_MEASURED_ANGLE] = array_of_measured_angles[5];
            rs_array[Dexter$1.J7_MEASURED_ANGLE] = array_of_measured_angles[6];
        }
        else if (sm === 1) { //angles in rs_array are in arcseconds
            for(let i = 0; i < 7; i++){
                let new_val = array_of_measured_angles[i];
                if(!raw) { new_val = new_val * 3600; } //usual
                rs_array[10 + i] = new_val;
            }
        }
        else if(sm === 2) { //angles in rs_array are in degrees
            rs_array[Dexter$1.J1_MEASURED_ANGLE_G2] = array_of_measured_angles[0];
            rs_array[Dexter$1.J2_MEASURED_ANGLE_G2] = array_of_measured_angles[1];
            rs_array[Dexter$1.J3_MEASURED_ANGLE_G2] = array_of_measured_angles[2];
            rs_array[Dexter$1.J4_MEASURED_ANGLE_G2] = array_of_measured_angles[3];
            rs_array[Dexter$1.J5_MEASURED_ANGLE_G2] = array_of_measured_angles[4];
            rs_array[Dexter$1.J6_MEASURED_ANGLE_G2] = array_of_measured_angles[5];
            rs_array[Dexter$1.J7_MEASURED_ANGLE_G2] = array_of_measured_angles[6];
        }
        else {
            dde_error("RobotStatus.set_measured_angles can't handle status_mode: " + sm);
        }
    }

    //works only for g1
    torque(joint_number) {
        if(this.status_mode() === 1) {
            if((joint_number >= 0) && (joint_number <= 7)) {
                let index = 19 + joint_number;
                return this.robot_status[index] / 1000000
            }
            else {
                dde_error("RobotStatus.torque passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 7.");
            }
        }
        else {
            dde_error("RobotStatus.torque called using status_mode " + sm + ", but it only works for 1.");
        }
    }

    //works only for g1
    torques(joint_count=7){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.torque(j_number));
        }
        return result
    }

    //works only for g1 returned value is in degrees per second
    velocity(joint_number) {
        if(this.status_mode() === 1) {
            if((joint_number >= 0) && (joint_number <= 7)) {
                let index = 29 + joint_number;
                return this.robot_status[index] / 3600
            }
            else {
                dde_error("RobotStatus.velocity passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 7.");
            }
        }
        else {
            dde_error("RobotStatus.velocity called using status_mode " + sm + ", but it only works for 1.");
        }
    }

    //works only for g1  returned values are in degrees per second
    velocities(joint_count=7){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.velocity(j_number));
        }
        return result
    }

    raw_encoder_angle(joint_number) {
        let sm = this.status_mode();
        if(sm === 2) {
            if      (joint_number == 1) { return this.robot_status[Dexter$1.J1_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 2) { return this.robot_status[Dexter$1.J2_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 3) { return this.robot_status[Dexter$1.J3_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 4) { return this.robot_status[Dexter$1.J4_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 5) { return this.robot_status[Dexter$1.J5_RAW_ENCODER_ANGLE_FXP_G2] }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 5.");
            }
        }
        else {
            dde_error("RobotStatus.raw_encoder_angle called using status_mode: " + sm + ", but it only works for 2.");
        }
    }

    raw_encoder_angles(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.raw_encoder_angle(j_number));
        }
        return result
    }

    eye_number(joint_number) {
        let sm = this.status_mode();
        if(sm === 2) {
            if      (joint_number == 1) { return this.robot_status[Dexter$1.J1_EYE_NUMBER_G2] }
            else if (joint_number == 2) { return this.robot_status[Dexter$1.J2_EYE_NUMBER_G2] }
            else if (joint_number == 3) { return this.robot_status[Dexter$1.J3_EYE_NUMBER_G2] }
            else if (joint_number == 4) { return this.robot_status[Dexter$1.J4_EYE_NUMBER_G2] }
            else if (joint_number == 5) { return this.robot_status[Dexter$1.J5_EYE_NUMBER_G2] }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 5.");
            }
        }
        else {
            dde_error("RobotStatus.raw_encoder_angle called using status_mode: " + sm + ", but it only works for 2.");
        }
    }

    eye_numbers(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.eye_number(j_number));
        }
        return result
    }


    //returns array. First elt is an array of x,y,z
    xyz(){
        let joint_angles = this.measured_angles(5);
        return Kin.J_angles_to_xyz(joint_angles)
    }

    static fill_robot_status_array_with_another(rs_array_to_modify, source_of_values_rs_array, raw=false){
       for(let i = 0; i < 10; i++){
           if(i !== Dexter$1.STATUS_MODE) { //don't change the status_mode of rs_array_to_modify, as that's the real reason we're calling this whole method
                rs_array_to_modify[i] = source_of_values_rs_array[i];
           }
       }
       let arr_mod_RS = new RobotStatus({robot_status: rs_array_to_modify});
       let arr_src_RS = new RobotStatus({robot_status: source_of_values_rs_array});
       let arr_src_mes_angs = arr_src_RS.measured_angles(7, raw);
       arr_mod_RS.set_measured_angles(arr_src_mes_angs, raw);
    }

};

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn) {
  var module = { exports: {} };
	return fn(module, module.exports), module.exports;
}

function commonjsRequire (target) {
	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
}

var esprima = createCommonjsModule(function (module, exports) {
(function webpackUniversalModuleDefinition(root, factory) {
/* istanbul ignore next */
	module.exports = factory();
})(commonjsGlobal, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/* istanbul ignore if */
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {
	/*
	  Copyright JS Foundation and other contributors, https://js.foundation/

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	var comment_handler_1 = __webpack_require__(1);
	var jsx_parser_1 = __webpack_require__(3);
	var parser_1 = __webpack_require__(8);
	var tokenizer_1 = __webpack_require__(15);
	function parse(code, options, delegate) {
	    var commentHandler = null;
	    var proxyDelegate = function (node, metadata) {
	        if (delegate) {
	            delegate(node, metadata);
	        }
	        if (commentHandler) {
	            commentHandler.visit(node, metadata);
	        }
	    };
	    var parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;
	    var collectComment = false;
	    if (options) {
	        collectComment = (typeof options.comment === 'boolean' && options.comment);
	        var attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);
	        if (collectComment || attachComment) {
	            commentHandler = new comment_handler_1.CommentHandler();
	            commentHandler.attach = attachComment;
	            options.comment = true;
	            parserDelegate = proxyDelegate;
	        }
	    }
	    var isModule = false;
	    if (options && typeof options.sourceType === 'string') {
	        isModule = (options.sourceType === 'module');
	    }
	    var parser;
	    if (options && typeof options.jsx === 'boolean' && options.jsx) {
	        parser = new jsx_parser_1.JSXParser(code, options, parserDelegate);
	    }
	    else {
	        parser = new parser_1.Parser(code, options, parserDelegate);
	    }
	    var program = isModule ? parser.parseModule() : parser.parseScript();
	    var ast = program;
	    if (collectComment && commentHandler) {
	        ast.comments = commentHandler.comments;
	    }
	    if (parser.config.tokens) {
	        ast.tokens = parser.tokens;
	    }
	    if (parser.config.tolerant) {
	        ast.errors = parser.errorHandler.errors;
	    }
	    return ast;
	}
	exports.parse = parse;
	function parseModule(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'module';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseModule = parseModule;
	function parseScript(code, options, delegate) {
	    var parsingOptions = options || {};
	    parsingOptions.sourceType = 'script';
	    return parse(code, parsingOptions, delegate);
	}
	exports.parseScript = parseScript;
	function tokenize(code, options, delegate) {
	    var tokenizer = new tokenizer_1.Tokenizer(code, options);
	    var tokens;
	    tokens = [];
	    try {
	        while (true) {
	            var token = tokenizer.getNextToken();
	            if (!token) {
	                break;
	            }
	            if (delegate) {
	                token = delegate(token);
	            }
	            tokens.push(token);
	        }
	    }
	    catch (e) {
	        tokenizer.errorHandler.tolerate(e);
	    }
	    if (tokenizer.errorHandler.tolerant) {
	        tokens.errors = tokenizer.errors();
	    }
	    return tokens;
	}
	exports.tokenize = tokenize;
	var syntax_1 = __webpack_require__(2);
	exports.Syntax = syntax_1.Syntax;
	// Sync with *.json manifests.
	exports.version = '4.0.1';


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	var CommentHandler = (function () {
	    function CommentHandler() {
	        this.attach = false;
	        this.comments = [];
	        this.stack = [];
	        this.leading = [];
	        this.trailing = [];
	    }
	    CommentHandler.prototype.insertInnerComments = function (node, metadata) {
	        //  innnerComments for properties empty block
	        //  `function a() {/** comments **\/}`
	        if (node.type === syntax_1.Syntax.BlockStatement && node.body.length === 0) {
	            var innerComments = [];
	            for (var i = this.leading.length - 1; i >= 0; --i) {
	                var entry = this.leading[i];
	                if (metadata.end.offset >= entry.start) {
	                    innerComments.unshift(entry.comment);
	                    this.leading.splice(i, 1);
	                    this.trailing.splice(i, 1);
	                }
	            }
	            if (innerComments.length) {
	                node.innerComments = innerComments;
	            }
	        }
	    };
	    CommentHandler.prototype.findTrailingComments = function (metadata) {
	        var trailingComments = [];
	        if (this.trailing.length > 0) {
	            for (var i = this.trailing.length - 1; i >= 0; --i) {
	                var entry_1 = this.trailing[i];
	                if (entry_1.start >= metadata.end.offset) {
	                    trailingComments.unshift(entry_1.comment);
	                }
	            }
	            this.trailing.length = 0;
	            return trailingComments;
	        }
	        var entry = this.stack[this.stack.length - 1];
	        if (entry && entry.node.trailingComments) {
	            var firstComment = entry.node.trailingComments[0];
	            if (firstComment && firstComment.range[0] >= metadata.end.offset) {
	                trailingComments = entry.node.trailingComments;
	                delete entry.node.trailingComments;
	            }
	        }
	        return trailingComments;
	    };
	    CommentHandler.prototype.findLeadingComments = function (metadata) {
	        var leadingComments = [];
	        var target;
	        while (this.stack.length > 0) {
	            var entry = this.stack[this.stack.length - 1];
	            if (entry && entry.start >= metadata.start.offset) {
	                target = entry.node;
	                this.stack.pop();
	            }
	            else {
	                break;
	            }
	        }
	        if (target) {
	            var count = target.leadingComments ? target.leadingComments.length : 0;
	            for (var i = count - 1; i >= 0; --i) {
	                var comment = target.leadingComments[i];
	                if (comment.range[1] <= metadata.start.offset) {
	                    leadingComments.unshift(comment);
	                    target.leadingComments.splice(i, 1);
	                }
	            }
	            if (target.leadingComments && target.leadingComments.length === 0) {
	                delete target.leadingComments;
	            }
	            return leadingComments;
	        }
	        for (var i = this.leading.length - 1; i >= 0; --i) {
	            var entry = this.leading[i];
	            if (entry.start <= metadata.start.offset) {
	                leadingComments.unshift(entry.comment);
	                this.leading.splice(i, 1);
	            }
	        }
	        return leadingComments;
	    };
	    CommentHandler.prototype.visitNode = function (node, metadata) {
	        if (node.type === syntax_1.Syntax.Program && node.body.length > 0) {
	            return;
	        }
	        this.insertInnerComments(node, metadata);
	        var trailingComments = this.findTrailingComments(metadata);
	        var leadingComments = this.findLeadingComments(metadata);
	        if (leadingComments.length > 0) {
	            node.leadingComments = leadingComments;
	        }
	        if (trailingComments.length > 0) {
	            node.trailingComments = trailingComments;
	        }
	        this.stack.push({
	            node: node,
	            start: metadata.start.offset
	        });
	    };
	    CommentHandler.prototype.visitComment = function (node, metadata) {
	        var type = (node.type[0] === 'L') ? 'Line' : 'Block';
	        var comment = {
	            type: type,
	            value: node.value
	        };
	        if (node.range) {
	            comment.range = node.range;
	        }
	        if (node.loc) {
	            comment.loc = node.loc;
	        }
	        this.comments.push(comment);
	        if (this.attach) {
	            var entry = {
	                comment: {
	                    type: type,
	                    value: node.value,
	                    range: [metadata.start.offset, metadata.end.offset]
	                },
	                start: metadata.start.offset
	            };
	            if (node.loc) {
	                entry.comment.loc = node.loc;
	            }
	            node.type = type;
	            this.leading.push(entry);
	            this.trailing.push(entry);
	        }
	    };
	    CommentHandler.prototype.visit = function (node, metadata) {
	        if (node.type === 'LineComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (node.type === 'BlockComment') {
	            this.visitComment(node, metadata);
	        }
	        else if (this.attach) {
	            this.visitNode(node, metadata);
	        }
	    };
	    return CommentHandler;
	}());
	exports.CommentHandler = CommentHandler;


/***/ },
/* 2 */
/***/ function(module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Syntax = {
	    AssignmentExpression: 'AssignmentExpression',
	    AssignmentPattern: 'AssignmentPattern',
	    ArrayExpression: 'ArrayExpression',
	    ArrayPattern: 'ArrayPattern',
	    ArrowFunctionExpression: 'ArrowFunctionExpression',
	    AwaitExpression: 'AwaitExpression',
	    BlockStatement: 'BlockStatement',
	    BinaryExpression: 'BinaryExpression',
	    BreakStatement: 'BreakStatement',
	    CallExpression: 'CallExpression',
	    CatchClause: 'CatchClause',
	    ClassBody: 'ClassBody',
	    ClassDeclaration: 'ClassDeclaration',
	    ClassExpression: 'ClassExpression',
	    ConditionalExpression: 'ConditionalExpression',
	    ContinueStatement: 'ContinueStatement',
	    DoWhileStatement: 'DoWhileStatement',
	    DebuggerStatement: 'DebuggerStatement',
	    EmptyStatement: 'EmptyStatement',
	    ExportAllDeclaration: 'ExportAllDeclaration',
	    ExportDefaultDeclaration: 'ExportDefaultDeclaration',
	    ExportNamedDeclaration: 'ExportNamedDeclaration',
	    ExportSpecifier: 'ExportSpecifier',
	    ExpressionStatement: 'ExpressionStatement',
	    ForStatement: 'ForStatement',
	    ForOfStatement: 'ForOfStatement',
	    ForInStatement: 'ForInStatement',
	    FunctionDeclaration: 'FunctionDeclaration',
	    FunctionExpression: 'FunctionExpression',
	    Identifier: 'Identifier',
	    IfStatement: 'IfStatement',
	    ImportDeclaration: 'ImportDeclaration',
	    ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	    ImportSpecifier: 'ImportSpecifier',
	    Literal: 'Literal',
	    LabeledStatement: 'LabeledStatement',
	    LogicalExpression: 'LogicalExpression',
	    MemberExpression: 'MemberExpression',
	    MetaProperty: 'MetaProperty',
	    MethodDefinition: 'MethodDefinition',
	    NewExpression: 'NewExpression',
	    ObjectExpression: 'ObjectExpression',
	    ObjectPattern: 'ObjectPattern',
	    Program: 'Program',
	    Property: 'Property',
	    RestElement: 'RestElement',
	    ReturnStatement: 'ReturnStatement',
	    SequenceExpression: 'SequenceExpression',
	    SpreadElement: 'SpreadElement',
	    Super: 'Super',
	    SwitchCase: 'SwitchCase',
	    SwitchStatement: 'SwitchStatement',
	    TaggedTemplateExpression: 'TaggedTemplateExpression',
	    TemplateElement: 'TemplateElement',
	    TemplateLiteral: 'TemplateLiteral',
	    ThisExpression: 'ThisExpression',
	    ThrowStatement: 'ThrowStatement',
	    TryStatement: 'TryStatement',
	    UnaryExpression: 'UnaryExpression',
	    UpdateExpression: 'UpdateExpression',
	    VariableDeclaration: 'VariableDeclaration',
	    VariableDeclarator: 'VariableDeclarator',
	    WhileStatement: 'WhileStatement',
	    WithStatement: 'WithStatement',
	    YieldExpression: 'YieldExpression'
	};


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {
/* istanbul ignore next */
	var __extends = (this && this.__extends) || (function () {
	    var extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return function (d, b) {
	        extendStatics(d, b);
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	})();
	Object.defineProperty(exports, "__esModule", { value: true });
	var character_1 = __webpack_require__(4);
	var JSXNode = __webpack_require__(5);
	var jsx_syntax_1 = __webpack_require__(6);
	var Node = __webpack_require__(7);
	var parser_1 = __webpack_require__(8);
	var token_1 = __webpack_require__(13);
	var xhtml_entities_1 = __webpack_require__(14);
	token_1.TokenName[100 /* Identifier */] = 'JSXIdentifier';
	token_1.TokenName[101 /* Text */] = 'JSXText';
	// Fully qualified element name, e.g. <svg:path> returns "svg:path"
	function getQualifiedElementName(elementName) {
	    var qualifiedName;
	    switch (elementName.type) {
	        case jsx_syntax_1.JSXSyntax.JSXIdentifier:
	            var id = elementName;
	            qualifiedName = id.name;
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXNamespacedName:
	            var ns = elementName;
	            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +
	                getQualifiedElementName(ns.name);
	            break;
	        case jsx_syntax_1.JSXSyntax.JSXMemberExpression:
	            var expr = elementName;
	            qualifiedName = getQualifiedElementName(expr.object) + '.' +
	                getQualifiedElementName(expr.property);
	            break;
	    }
	    return qualifiedName;
	}
	var JSXParser = (function (_super) {
	    __extends(JSXParser, _super);
	    function JSXParser(code, options, delegate) {
	        return _super.call(this, code, options, delegate) || this;
	    }
	    JSXParser.prototype.parsePrimaryExpression = function () {
	        return this.match('<') ? this.parseJSXRoot() : _super.prototype.parsePrimaryExpression.call(this);
	    };
	    JSXParser.prototype.startJSX = function () {
	        // Unwind the scanner before the lookahead token.
	        this.scanner.index = this.startMarker.index;
	        this.scanner.lineNumber = this.startMarker.line;
	        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
	    };
	    JSXParser.prototype.finishJSX = function () {
	        // Prime the next lookahead.
	        this.nextToken();
	    };
	    JSXParser.prototype.reenterJSX = function () {
	        this.startJSX();
	        this.expectJSX('}');
	        // Pop the closing '}' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	    };
	    JSXParser.prototype.createJSXNode = function () {
	        this.collectComments();
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.createJSXChildNode = function () {
	        return {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    };
	    JSXParser.prototype.scanXHTMLEntity = function (quote) {
	        var result = '&';
	        var valid = true;
	        var terminated = false;
	        var numeric = false;
	        var hex = false;
	        while (!this.scanner.eof() && valid && !terminated) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === quote) {
	                break;
	            }
	            terminated = (ch === ';');
	            result += ch;
	            ++this.scanner.index;
	            if (!terminated) {
	                switch (result.length) {
	                    case 2:
	                        // e.g. '&#123;'
	                        numeric = (ch === '#');
	                        break;
	                    case 3:
	                        if (numeric) {
	                            // e.g. '&#x41;'
	                            hex = (ch === 'x');
	                            valid = hex || character_1.Character.isDecimalDigit(ch.charCodeAt(0));
	                            numeric = numeric && !hex;
	                        }
	                        break;
	                    default:
	                        valid = valid && !(numeric && !character_1.Character.isDecimalDigit(ch.charCodeAt(0)));
	                        valid = valid && !(hex && !character_1.Character.isHexDigit(ch.charCodeAt(0)));
	                        break;
	                }
	            }
	        }
	        if (valid && terminated && result.length > 2) {
	            // e.g. '&#x41;' becomes just '#x41'
	            var str = result.substr(1, result.length - 2);
	            if (numeric && str.length > 1) {
	                result = String.fromCharCode(parseInt(str.substr(1), 10));
	            }
	            else if (hex && str.length > 2) {
	                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));
	            }
	            else if (!numeric && !hex && xhtml_entities_1.XHTMLEntities[str]) {
	                result = xhtml_entities_1.XHTMLEntities[str];
	            }
	        }
	        return result;
	    };
	    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.
	    JSXParser.prototype.lexJSX = function () {
	        var cp = this.scanner.source.charCodeAt(this.scanner.index);
	        // < > / : = { }
	        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {
	            var value = this.scanner.source[this.scanner.index++];
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index - 1,
	                end: this.scanner.index
	            };
	        }
	        // " '
	        if (cp === 34 || cp === 39) {
	            var start = this.scanner.index;
	            var quote = this.scanner.source[this.scanner.index++];
	            var str = '';
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source[this.scanner.index++];
	                if (ch === quote) {
	                    break;
	                }
	                else if (ch === '&') {
	                    str += this.scanXHTMLEntity(quote);
	                }
	                else {
	                    str += ch;
	                }
	            }
	            return {
	                type: 8 /* StringLiteral */,
	                value: str,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // ... or .
	        if (cp === 46) {
	            var n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);
	            var n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);
	            var value = (n1 === 46 && n2 === 46) ? '...' : '.';
	            var start = this.scanner.index;
	            this.scanner.index += value.length;
	            return {
	                type: 7 /* Punctuator */,
	                value: value,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        // `
	        if (cp === 96) {
	            // Only placeholder, since it will be rescanned as a real assignment expression.
	            return {
	                type: 10 /* Template */,
	                value: '',
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: this.scanner.index,
	                end: this.scanner.index
	            };
	        }
	        // Identifer can not contain backslash (char code 92).
	        if (character_1.Character.isIdentifierStart(cp) && (cp !== 92)) {
	            var start = this.scanner.index;
	            ++this.scanner.index;
	            while (!this.scanner.eof()) {
	                var ch = this.scanner.source.charCodeAt(this.scanner.index);
	                if (character_1.Character.isIdentifierPart(ch) && (ch !== 92)) {
	                    ++this.scanner.index;
	                }
	                else if (ch === 45) {
	                    // Hyphen (char code 45) can be part of an identifier.
	                    ++this.scanner.index;
	                }
	                else {
	                    break;
	                }
	            }
	            var id = this.scanner.source.slice(start, this.scanner.index);
	            return {
	                type: 100 /* Identifier */,
	                value: id,
	                lineNumber: this.scanner.lineNumber,
	                lineStart: this.scanner.lineStart,
	                start: start,
	                end: this.scanner.index
	            };
	        }
	        return this.scanner.lex();
	    };
	    JSXParser.prototype.nextJSXToken = function () {
	        this.collectComments();
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = this.lexJSX();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        if (this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.nextJSXText = function () {
	        this.startMarker.index = this.scanner.index;
	        this.startMarker.line = this.scanner.lineNumber;
	        this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        var start = this.scanner.index;
	        var text = '';
	        while (!this.scanner.eof()) {
	            var ch = this.scanner.source[this.scanner.index];
	            if (ch === '{' || ch === '<') {
	                break;
	            }
	            ++this.scanner.index;
	            text += ch;
	            if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.scanner.lineNumber;
	                if (ch === '\r' && this.scanner.source[this.scanner.index] === '\n') {
	                    ++this.scanner.index;
	                }
	                this.scanner.lineStart = this.scanner.index;
	            }
	        }
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        var token = {
	            type: 101 /* Text */,
	            value: text,
	            lineNumber: this.scanner.lineNumber,
	            lineStart: this.scanner.lineStart,
	            start: start,
	            end: this.scanner.index
	        };
	        if ((text.length > 0) && this.config.tokens) {
	            this.tokens.push(this.convertToken(token));
	        }
	        return token;
	    };
	    JSXParser.prototype.peekJSXToken = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.lexJSX();
	        this.scanner.restoreState(state);
	        return next;
	    };
	    // Expect the next JSX token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    JSXParser.prototype.expectJSX = function (value) {
	        var token = this.nextJSXToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next JSX token matches the specified punctuator.
	    JSXParser.prototype.matchJSX = function (value) {
	        var next = this.peekJSXToken();
	        return next.type === 7 /* Punctuator */ && next.value === value;
	    };
	    JSXParser.prototype.parseJSXIdentifier = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 100 /* Identifier */) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));
	    };
	    JSXParser.prototype.parseJSXElementName = function () {
	        var node = this.createJSXNode();
	        var elementName = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = elementName;
	            this.expectJSX(':');
	            var name_1 = this.parseJSXIdentifier();
	            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_1));
	        }
	        else if (this.matchJSX('.')) {
	            while (this.matchJSX('.')) {
	                var object = elementName;
	                this.expectJSX('.');
	                var property = this.parseJSXIdentifier();
	                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));
	            }
	        }
	        return elementName;
	    };
	    JSXParser.prototype.parseJSXAttributeName = function () {
	        var node = this.createJSXNode();
	        var attributeName;
	        var identifier = this.parseJSXIdentifier();
	        if (this.matchJSX(':')) {
	            var namespace = identifier;
	            this.expectJSX(':');
	            var name_2 = this.parseJSXIdentifier();
	            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name_2));
	        }
	        else {
	            attributeName = identifier;
	        }
	        return attributeName;
	    };
	    JSXParser.prototype.parseJSXStringLiteralAttribute = function () {
	        var node = this.createJSXNode();
	        var token = this.nextJSXToken();
	        if (token.type !== 8 /* StringLiteral */) {
	            this.throwUnexpectedToken(token);
	        }
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    JSXParser.prototype.parseJSXExpressionAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.finishJSX();
	        if (this.match('}')) {
	            this.tolerateError('JSX attributes must only be assigned a non-empty expression');
	        }
	        var expression = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXAttributeValue = function () {
	        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :
	            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
	    };
	    JSXParser.prototype.parseJSXNameValueAttribute = function () {
	        var node = this.createJSXNode();
	        var name = this.parseJSXAttributeName();
	        var value = null;
	        if (this.matchJSX('=')) {
	            this.expectJSX('=');
	            value = this.parseJSXAttributeValue();
	        }
	        return this.finalize(node, new JSXNode.JSXAttribute(name, value));
	    };
	    JSXParser.prototype.parseJSXSpreadAttribute = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        this.expectJSX('...');
	        this.finishJSX();
	        var argument = this.parseAssignmentExpression();
	        this.reenterJSX();
	        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));
	    };
	    JSXParser.prototype.parseJSXAttributes = function () {
	        var attributes = [];
	        while (!this.matchJSX('/') && !this.matchJSX('>')) {
	            var attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :
	                this.parseJSXNameValueAttribute();
	            attributes.push(attribute);
	        }
	        return attributes;
	    };
	    JSXParser.prototype.parseJSXOpeningElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXBoundaryElement = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('<');
	        if (this.matchJSX('/')) {
	            this.expectJSX('/');
	            var name_3 = this.parseJSXElementName();
	            this.expectJSX('>');
	            return this.finalize(node, new JSXNode.JSXClosingElement(name_3));
	        }
	        var name = this.parseJSXElementName();
	        var attributes = this.parseJSXAttributes();
	        var selfClosing = this.matchJSX('/');
	        if (selfClosing) {
	            this.expectJSX('/');
	        }
	        this.expectJSX('>');
	        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));
	    };
	    JSXParser.prototype.parseJSXEmptyExpression = function () {
	        var node = this.createJSXChildNode();
	        this.collectComments();
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        return this.finalize(node, new JSXNode.JSXEmptyExpression());
	    };
	    JSXParser.prototype.parseJSXExpressionContainer = function () {
	        var node = this.createJSXNode();
	        this.expectJSX('{');
	        var expression;
	        if (this.matchJSX('}')) {
	            expression = this.parseJSXEmptyExpression();
	            this.expectJSX('}');
	        }
	        else {
	            this.finishJSX();
	            expression = this.parseAssignmentExpression();
	            this.reenterJSX();
	        }
	        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));
	    };
	    JSXParser.prototype.parseJSXChildren = function () {
	        var children = [];
	        while (!this.scanner.eof()) {
	            var node = this.createJSXChildNode();
	            var token = this.nextJSXText();
	            if (token.start < token.end) {
	                var raw = this.getTokenRaw(token);
	                var child = this.finalize(node, new JSXNode.JSXText(token.value, raw));
	                children.push(child);
	            }
	            if (this.scanner.source[this.scanner.index] === '{') {
	                var container = this.parseJSXExpressionContainer();
	                children.push(container);
	            }
	            else {
	                break;
	            }
	        }
	        return children;
	    };
	    JSXParser.prototype.parseComplexJSXElement = function (el) {
	        var stack = [];
	        while (!this.scanner.eof()) {
	            el.children = el.children.concat(this.parseJSXChildren());
	            var node = this.createJSXChildNode();
	            var element = this.parseJSXBoundaryElement();
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXOpeningElement) {
	                var opening = element;
	                if (opening.selfClosing) {
	                    var child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));
	                    el.children.push(child);
	                }
	                else {
	                    stack.push(el);
	                    el = { node: node, opening: opening, closing: null, children: [] };
	                }
	            }
	            if (element.type === jsx_syntax_1.JSXSyntax.JSXClosingElement) {
	                el.closing = element;
	                var open_1 = getQualifiedElementName(el.opening.name);
	                var close_1 = getQualifiedElementName(el.closing.name);
	                if (open_1 !== close_1) {
	                    this.tolerateError('Expected corresponding JSX closing tag for %0', open_1);
	                }
	                if (stack.length > 0) {
	                    var child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));
	                    el = stack[stack.length - 1];
	                    el.children.push(child);
	                    stack.pop();
	                }
	                else {
	                    break;
	                }
	            }
	        }
	        return el;
	    };
	    JSXParser.prototype.parseJSXElement = function () {
	        var node = this.createJSXNode();
	        var opening = this.parseJSXOpeningElement();
	        var children = [];
	        var closing = null;
	        if (!opening.selfClosing) {
	            var el = this.parseComplexJSXElement({ node: node, opening: opening, closing: closing, children: children });
	            children = el.children;
	            closing = el.closing;
	        }
	        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));
	    };
	    JSXParser.prototype.parseJSXRoot = function () {
	        // Pop the opening '<' added from the lookahead.
	        if (this.config.tokens) {
	            this.tokens.pop();
	        }
	        this.startJSX();
	        var element = this.parseJSXElement();
	        this.finishJSX();
	        return element;
	    };
	    JSXParser.prototype.isStartOfExpression = function () {
	        return _super.prototype.isStartOfExpression.call(this) || this.match('<');
	    };
	    return JSXParser;
	}(parser_1.Parser));
	exports.JSXParser = JSXParser;


/***/ },
/* 4 */
/***/ function(module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	// See also tools/generate-unicode-regex.js.
	var Regex = {
	    // Unicode v8.0.0 NonAsciiIdentifierStart:
	    NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/,
	    // Unicode v8.0.0 NonAsciiIdentifierPart:
	    NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	};
	exports.Character = {
	    /* tslint:disable:no-bitwise */
	    fromCodePoint: function (cp) {
	        return (cp < 0x10000) ? String.fromCharCode(cp) :
	            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
	                String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
	    },
	    // https://tc39.github.io/ecma262/#sec-white-space
	    isWhiteSpace: function (cp) {
	        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||
	            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);
	    },
	    // https://tc39.github.io/ecma262/#sec-line-terminators
	    isLineTerminator: function (cp) {
	        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);
	    },
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    isIdentifierStart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(exports.Character.fromCodePoint(cp)));
	    },
	    isIdentifierPart: function (cp) {
	        return (cp === 0x24) || (cp === 0x5F) ||
	            (cp >= 0x41 && cp <= 0x5A) ||
	            (cp >= 0x61 && cp <= 0x7A) ||
	            (cp >= 0x30 && cp <= 0x39) ||
	            (cp === 0x5C) ||
	            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(exports.Character.fromCodePoint(cp)));
	    },
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    isDecimalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39); // 0..9
	    },
	    isHexDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x39) ||
	            (cp >= 0x41 && cp <= 0x46) ||
	            (cp >= 0x61 && cp <= 0x66); // a..f
	    },
	    isOctalDigit: function (cp) {
	        return (cp >= 0x30 && cp <= 0x37); // 0..7
	    }
	};


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var jsx_syntax_1 = __webpack_require__(6);
	/* tslint:disable:max-classes-per-file */
	var JSXClosingElement = (function () {
	    function JSXClosingElement(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXClosingElement;
	        this.name = name;
	    }
	    return JSXClosingElement;
	}());
	exports.JSXClosingElement = JSXClosingElement;
	var JSXElement = (function () {
	    function JSXElement(openingElement, children, closingElement) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXElement;
	        this.openingElement = openingElement;
	        this.children = children;
	        this.closingElement = closingElement;
	    }
	    return JSXElement;
	}());
	exports.JSXElement = JSXElement;
	var JSXEmptyExpression = (function () {
	    function JSXEmptyExpression() {
	        this.type = jsx_syntax_1.JSXSyntax.JSXEmptyExpression;
	    }
	    return JSXEmptyExpression;
	}());
	exports.JSXEmptyExpression = JSXEmptyExpression;
	var JSXExpressionContainer = (function () {
	    function JSXExpressionContainer(expression) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXExpressionContainer;
	        this.expression = expression;
	    }
	    return JSXExpressionContainer;
	}());
	exports.JSXExpressionContainer = JSXExpressionContainer;
	var JSXIdentifier = (function () {
	    function JSXIdentifier(name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXIdentifier;
	        this.name = name;
	    }
	    return JSXIdentifier;
	}());
	exports.JSXIdentifier = JSXIdentifier;
	var JSXMemberExpression = (function () {
	    function JSXMemberExpression(object, property) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXMemberExpression;
	        this.object = object;
	        this.property = property;
	    }
	    return JSXMemberExpression;
	}());
	exports.JSXMemberExpression = JSXMemberExpression;
	var JSXAttribute = (function () {
	    function JSXAttribute(name, value) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXAttribute;
	        this.name = name;
	        this.value = value;
	    }
	    return JSXAttribute;
	}());
	exports.JSXAttribute = JSXAttribute;
	var JSXNamespacedName = (function () {
	    function JSXNamespacedName(namespace, name) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXNamespacedName;
	        this.namespace = namespace;
	        this.name = name;
	    }
	    return JSXNamespacedName;
	}());
	exports.JSXNamespacedName = JSXNamespacedName;
	var JSXOpeningElement = (function () {
	    function JSXOpeningElement(name, selfClosing, attributes) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXOpeningElement;
	        this.name = name;
	        this.selfClosing = selfClosing;
	        this.attributes = attributes;
	    }
	    return JSXOpeningElement;
	}());
	exports.JSXOpeningElement = JSXOpeningElement;
	var JSXSpreadAttribute = (function () {
	    function JSXSpreadAttribute(argument) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXSpreadAttribute;
	        this.argument = argument;
	    }
	    return JSXSpreadAttribute;
	}());
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	var JSXText = (function () {
	    function JSXText(value, raw) {
	        this.type = jsx_syntax_1.JSXSyntax.JSXText;
	        this.value = value;
	        this.raw = raw;
	    }
	    return JSXText;
	}());
	exports.JSXText = JSXText;


/***/ },
/* 6 */
/***/ function(module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.JSXSyntax = {
	    JSXAttribute: 'JSXAttribute',
	    JSXClosingElement: 'JSXClosingElement',
	    JSXElement: 'JSXElement',
	    JSXEmptyExpression: 'JSXEmptyExpression',
	    JSXExpressionContainer: 'JSXExpressionContainer',
	    JSXIdentifier: 'JSXIdentifier',
	    JSXMemberExpression: 'JSXMemberExpression',
	    JSXNamespacedName: 'JSXNamespacedName',
	    JSXOpeningElement: 'JSXOpeningElement',
	    JSXSpreadAttribute: 'JSXSpreadAttribute',
	    JSXText: 'JSXText'
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var syntax_1 = __webpack_require__(2);
	/* tslint:disable:max-classes-per-file */
	var ArrayExpression = (function () {
	    function ArrayExpression(elements) {
	        this.type = syntax_1.Syntax.ArrayExpression;
	        this.elements = elements;
	    }
	    return ArrayExpression;
	}());
	exports.ArrayExpression = ArrayExpression;
	var ArrayPattern = (function () {
	    function ArrayPattern(elements) {
	        this.type = syntax_1.Syntax.ArrayPattern;
	        this.elements = elements;
	    }
	    return ArrayPattern;
	}());
	exports.ArrayPattern = ArrayPattern;
	var ArrowFunctionExpression = (function () {
	    function ArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = false;
	    }
	    return ArrowFunctionExpression;
	}());
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	var AssignmentExpression = (function () {
	    function AssignmentExpression(operator, left, right) {
	        this.type = syntax_1.Syntax.AssignmentExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentExpression;
	}());
	exports.AssignmentExpression = AssignmentExpression;
	var AssignmentPattern = (function () {
	    function AssignmentPattern(left, right) {
	        this.type = syntax_1.Syntax.AssignmentPattern;
	        this.left = left;
	        this.right = right;
	    }
	    return AssignmentPattern;
	}());
	exports.AssignmentPattern = AssignmentPattern;
	var AsyncArrowFunctionExpression = (function () {
	    function AsyncArrowFunctionExpression(params, body, expression) {
	        this.type = syntax_1.Syntax.ArrowFunctionExpression;
	        this.id = null;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = expression;
	        this.async = true;
	    }
	    return AsyncArrowFunctionExpression;
	}());
	exports.AsyncArrowFunctionExpression = AsyncArrowFunctionExpression;
	var AsyncFunctionDeclaration = (function () {
	    function AsyncFunctionDeclaration(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionDeclaration;
	}());
	exports.AsyncFunctionDeclaration = AsyncFunctionDeclaration;
	var AsyncFunctionExpression = (function () {
	    function AsyncFunctionExpression(id, params, body) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = false;
	        this.expression = false;
	        this.async = true;
	    }
	    return AsyncFunctionExpression;
	}());
	exports.AsyncFunctionExpression = AsyncFunctionExpression;
	var AwaitExpression = (function () {
	    function AwaitExpression(argument) {
	        this.type = syntax_1.Syntax.AwaitExpression;
	        this.argument = argument;
	    }
	    return AwaitExpression;
	}());
	exports.AwaitExpression = AwaitExpression;
	var BinaryExpression = (function () {
	    function BinaryExpression(operator, left, right) {
	        var logical = (operator === '||' || operator === '&&');
	        this.type = logical ? syntax_1.Syntax.LogicalExpression : syntax_1.Syntax.BinaryExpression;
	        this.operator = operator;
	        this.left = left;
	        this.right = right;
	    }
	    return BinaryExpression;
	}());
	exports.BinaryExpression = BinaryExpression;
	var BlockStatement = (function () {
	    function BlockStatement(body) {
	        this.type = syntax_1.Syntax.BlockStatement;
	        this.body = body;
	    }
	    return BlockStatement;
	}());
	exports.BlockStatement = BlockStatement;
	var BreakStatement = (function () {
	    function BreakStatement(label) {
	        this.type = syntax_1.Syntax.BreakStatement;
	        this.label = label;
	    }
	    return BreakStatement;
	}());
	exports.BreakStatement = BreakStatement;
	var CallExpression = (function () {
	    function CallExpression(callee, args) {
	        this.type = syntax_1.Syntax.CallExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return CallExpression;
	}());
	exports.CallExpression = CallExpression;
	var CatchClause = (function () {
	    function CatchClause(param, body) {
	        this.type = syntax_1.Syntax.CatchClause;
	        this.param = param;
	        this.body = body;
	    }
	    return CatchClause;
	}());
	exports.CatchClause = CatchClause;
	var ClassBody = (function () {
	    function ClassBody(body) {
	        this.type = syntax_1.Syntax.ClassBody;
	        this.body = body;
	    }
	    return ClassBody;
	}());
	exports.ClassBody = ClassBody;
	var ClassDeclaration = (function () {
	    function ClassDeclaration(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassDeclaration;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassDeclaration;
	}());
	exports.ClassDeclaration = ClassDeclaration;
	var ClassExpression = (function () {
	    function ClassExpression(id, superClass, body) {
	        this.type = syntax_1.Syntax.ClassExpression;
	        this.id = id;
	        this.superClass = superClass;
	        this.body = body;
	    }
	    return ClassExpression;
	}());
	exports.ClassExpression = ClassExpression;
	var ComputedMemberExpression = (function () {
	    function ComputedMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = true;
	        this.object = object;
	        this.property = property;
	    }
	    return ComputedMemberExpression;
	}());
	exports.ComputedMemberExpression = ComputedMemberExpression;
	var ConditionalExpression = (function () {
	    function ConditionalExpression(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.ConditionalExpression;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return ConditionalExpression;
	}());
	exports.ConditionalExpression = ConditionalExpression;
	var ContinueStatement = (function () {
	    function ContinueStatement(label) {
	        this.type = syntax_1.Syntax.ContinueStatement;
	        this.label = label;
	    }
	    return ContinueStatement;
	}());
	exports.ContinueStatement = ContinueStatement;
	var DebuggerStatement = (function () {
	    function DebuggerStatement() {
	        this.type = syntax_1.Syntax.DebuggerStatement;
	    }
	    return DebuggerStatement;
	}());
	exports.DebuggerStatement = DebuggerStatement;
	var Directive = (function () {
	    function Directive(expression, directive) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	        this.directive = directive;
	    }
	    return Directive;
	}());
	exports.Directive = Directive;
	var DoWhileStatement = (function () {
	    function DoWhileStatement(body, test) {
	        this.type = syntax_1.Syntax.DoWhileStatement;
	        this.body = body;
	        this.test = test;
	    }
	    return DoWhileStatement;
	}());
	exports.DoWhileStatement = DoWhileStatement;
	var EmptyStatement = (function () {
	    function EmptyStatement() {
	        this.type = syntax_1.Syntax.EmptyStatement;
	    }
	    return EmptyStatement;
	}());
	exports.EmptyStatement = EmptyStatement;
	var ExportAllDeclaration = (function () {
	    function ExportAllDeclaration(source) {
	        this.type = syntax_1.Syntax.ExportAllDeclaration;
	        this.source = source;
	    }
	    return ExportAllDeclaration;
	}());
	exports.ExportAllDeclaration = ExportAllDeclaration;
	var ExportDefaultDeclaration = (function () {
	    function ExportDefaultDeclaration(declaration) {
	        this.type = syntax_1.Syntax.ExportDefaultDeclaration;
	        this.declaration = declaration;
	    }
	    return ExportDefaultDeclaration;
	}());
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	var ExportNamedDeclaration = (function () {
	    function ExportNamedDeclaration(declaration, specifiers, source) {
	        this.type = syntax_1.Syntax.ExportNamedDeclaration;
	        this.declaration = declaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ExportNamedDeclaration;
	}());
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	var ExportSpecifier = (function () {
	    function ExportSpecifier(local, exported) {
	        this.type = syntax_1.Syntax.ExportSpecifier;
	        this.exported = exported;
	        this.local = local;
	    }
	    return ExportSpecifier;
	}());
	exports.ExportSpecifier = ExportSpecifier;
	var ExpressionStatement = (function () {
	    function ExpressionStatement(expression) {
	        this.type = syntax_1.Syntax.ExpressionStatement;
	        this.expression = expression;
	    }
	    return ExpressionStatement;
	}());
	exports.ExpressionStatement = ExpressionStatement;
	var ForInStatement = (function () {
	    function ForInStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForInStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	        this.each = false;
	    }
	    return ForInStatement;
	}());
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = (function () {
	    function ForOfStatement(left, right, body) {
	        this.type = syntax_1.Syntax.ForOfStatement;
	        this.left = left;
	        this.right = right;
	        this.body = body;
	    }
	    return ForOfStatement;
	}());
	exports.ForOfStatement = ForOfStatement;
	var ForStatement = (function () {
	    function ForStatement(init, test, update, body) {
	        this.type = syntax_1.Syntax.ForStatement;
	        this.init = init;
	        this.test = test;
	        this.update = update;
	        this.body = body;
	    }
	    return ForStatement;
	}());
	exports.ForStatement = ForStatement;
	var FunctionDeclaration = (function () {
	    function FunctionDeclaration(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionDeclaration;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionDeclaration;
	}());
	exports.FunctionDeclaration = FunctionDeclaration;
	var FunctionExpression = (function () {
	    function FunctionExpression(id, params, body, generator) {
	        this.type = syntax_1.Syntax.FunctionExpression;
	        this.id = id;
	        this.params = params;
	        this.body = body;
	        this.generator = generator;
	        this.expression = false;
	        this.async = false;
	    }
	    return FunctionExpression;
	}());
	exports.FunctionExpression = FunctionExpression;
	var Identifier = (function () {
	    function Identifier(name) {
	        this.type = syntax_1.Syntax.Identifier;
	        this.name = name;
	    }
	    return Identifier;
	}());
	exports.Identifier = Identifier;
	var IfStatement = (function () {
	    function IfStatement(test, consequent, alternate) {
	        this.type = syntax_1.Syntax.IfStatement;
	        this.test = test;
	        this.consequent = consequent;
	        this.alternate = alternate;
	    }
	    return IfStatement;
	}());
	exports.IfStatement = IfStatement;
	var ImportDeclaration = (function () {
	    function ImportDeclaration(specifiers, source) {
	        this.type = syntax_1.Syntax.ImportDeclaration;
	        this.specifiers = specifiers;
	        this.source = source;
	    }
	    return ImportDeclaration;
	}());
	exports.ImportDeclaration = ImportDeclaration;
	var ImportDefaultSpecifier = (function () {
	    function ImportDefaultSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportDefaultSpecifier;
	        this.local = local;
	    }
	    return ImportDefaultSpecifier;
	}());
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	var ImportNamespaceSpecifier = (function () {
	    function ImportNamespaceSpecifier(local) {
	        this.type = syntax_1.Syntax.ImportNamespaceSpecifier;
	        this.local = local;
	    }
	    return ImportNamespaceSpecifier;
	}());
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
	var ImportSpecifier = (function () {
	    function ImportSpecifier(local, imported) {
	        this.type = syntax_1.Syntax.ImportSpecifier;
	        this.local = local;
	        this.imported = imported;
	    }
	    return ImportSpecifier;
	}());
	exports.ImportSpecifier = ImportSpecifier;
	var LabeledStatement = (function () {
	    function LabeledStatement(label, body) {
	        this.type = syntax_1.Syntax.LabeledStatement;
	        this.label = label;
	        this.body = body;
	    }
	    return LabeledStatement;
	}());
	exports.LabeledStatement = LabeledStatement;
	var Literal = (function () {
	    function Literal(value, raw) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	    }
	    return Literal;
	}());
	exports.Literal = Literal;
	var MetaProperty = (function () {
	    function MetaProperty(meta, property) {
	        this.type = syntax_1.Syntax.MetaProperty;
	        this.meta = meta;
	        this.property = property;
	    }
	    return MetaProperty;
	}());
	exports.MetaProperty = MetaProperty;
	var MethodDefinition = (function () {
	    function MethodDefinition(key, computed, value, kind, isStatic) {
	        this.type = syntax_1.Syntax.MethodDefinition;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.static = isStatic;
	    }
	    return MethodDefinition;
	}());
	exports.MethodDefinition = MethodDefinition;
	var Module = (function () {
	    function Module(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'module';
	    }
	    return Module;
	}());
	exports.Module = Module;
	var NewExpression = (function () {
	    function NewExpression(callee, args) {
	        this.type = syntax_1.Syntax.NewExpression;
	        this.callee = callee;
	        this.arguments = args;
	    }
	    return NewExpression;
	}());
	exports.NewExpression = NewExpression;
	var ObjectExpression = (function () {
	    function ObjectExpression(properties) {
	        this.type = syntax_1.Syntax.ObjectExpression;
	        this.properties = properties;
	    }
	    return ObjectExpression;
	}());
	exports.ObjectExpression = ObjectExpression;
	var ObjectPattern = (function () {
	    function ObjectPattern(properties) {
	        this.type = syntax_1.Syntax.ObjectPattern;
	        this.properties = properties;
	    }
	    return ObjectPattern;
	}());
	exports.ObjectPattern = ObjectPattern;
	var Property = (function () {
	    function Property(kind, key, computed, value, method, shorthand) {
	        this.type = syntax_1.Syntax.Property;
	        this.key = key;
	        this.computed = computed;
	        this.value = value;
	        this.kind = kind;
	        this.method = method;
	        this.shorthand = shorthand;
	    }
	    return Property;
	}());
	exports.Property = Property;
	var RegexLiteral = (function () {
	    function RegexLiteral(value, raw, pattern, flags) {
	        this.type = syntax_1.Syntax.Literal;
	        this.value = value;
	        this.raw = raw;
	        this.regex = { pattern: pattern, flags: flags };
	    }
	    return RegexLiteral;
	}());
	exports.RegexLiteral = RegexLiteral;
	var RestElement = (function () {
	    function RestElement(argument) {
	        this.type = syntax_1.Syntax.RestElement;
	        this.argument = argument;
	    }
	    return RestElement;
	}());
	exports.RestElement = RestElement;
	var ReturnStatement = (function () {
	    function ReturnStatement(argument) {
	        this.type = syntax_1.Syntax.ReturnStatement;
	        this.argument = argument;
	    }
	    return ReturnStatement;
	}());
	exports.ReturnStatement = ReturnStatement;
	var Script = (function () {
	    function Script(body) {
	        this.type = syntax_1.Syntax.Program;
	        this.body = body;
	        this.sourceType = 'script';
	    }
	    return Script;
	}());
	exports.Script = Script;
	var SequenceExpression = (function () {
	    function SequenceExpression(expressions) {
	        this.type = syntax_1.Syntax.SequenceExpression;
	        this.expressions = expressions;
	    }
	    return SequenceExpression;
	}());
	exports.SequenceExpression = SequenceExpression;
	var SpreadElement = (function () {
	    function SpreadElement(argument) {
	        this.type = syntax_1.Syntax.SpreadElement;
	        this.argument = argument;
	    }
	    return SpreadElement;
	}());
	exports.SpreadElement = SpreadElement;
	var StaticMemberExpression = (function () {
	    function StaticMemberExpression(object, property) {
	        this.type = syntax_1.Syntax.MemberExpression;
	        this.computed = false;
	        this.object = object;
	        this.property = property;
	    }
	    return StaticMemberExpression;
	}());
	exports.StaticMemberExpression = StaticMemberExpression;
	var Super = (function () {
	    function Super() {
	        this.type = syntax_1.Syntax.Super;
	    }
	    return Super;
	}());
	exports.Super = Super;
	var SwitchCase = (function () {
	    function SwitchCase(test, consequent) {
	        this.type = syntax_1.Syntax.SwitchCase;
	        this.test = test;
	        this.consequent = consequent;
	    }
	    return SwitchCase;
	}());
	exports.SwitchCase = SwitchCase;
	var SwitchStatement = (function () {
	    function SwitchStatement(discriminant, cases) {
	        this.type = syntax_1.Syntax.SwitchStatement;
	        this.discriminant = discriminant;
	        this.cases = cases;
	    }
	    return SwitchStatement;
	}());
	exports.SwitchStatement = SwitchStatement;
	var TaggedTemplateExpression = (function () {
	    function TaggedTemplateExpression(tag, quasi) {
	        this.type = syntax_1.Syntax.TaggedTemplateExpression;
	        this.tag = tag;
	        this.quasi = quasi;
	    }
	    return TaggedTemplateExpression;
	}());
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	var TemplateElement = (function () {
	    function TemplateElement(value, tail) {
	        this.type = syntax_1.Syntax.TemplateElement;
	        this.value = value;
	        this.tail = tail;
	    }
	    return TemplateElement;
	}());
	exports.TemplateElement = TemplateElement;
	var TemplateLiteral = (function () {
	    function TemplateLiteral(quasis, expressions) {
	        this.type = syntax_1.Syntax.TemplateLiteral;
	        this.quasis = quasis;
	        this.expressions = expressions;
	    }
	    return TemplateLiteral;
	}());
	exports.TemplateLiteral = TemplateLiteral;
	var ThisExpression = (function () {
	    function ThisExpression() {
	        this.type = syntax_1.Syntax.ThisExpression;
	    }
	    return ThisExpression;
	}());
	exports.ThisExpression = ThisExpression;
	var ThrowStatement = (function () {
	    function ThrowStatement(argument) {
	        this.type = syntax_1.Syntax.ThrowStatement;
	        this.argument = argument;
	    }
	    return ThrowStatement;
	}());
	exports.ThrowStatement = ThrowStatement;
	var TryStatement = (function () {
	    function TryStatement(block, handler, finalizer) {
	        this.type = syntax_1.Syntax.TryStatement;
	        this.block = block;
	        this.handler = handler;
	        this.finalizer = finalizer;
	    }
	    return TryStatement;
	}());
	exports.TryStatement = TryStatement;
	var UnaryExpression = (function () {
	    function UnaryExpression(operator, argument) {
	        this.type = syntax_1.Syntax.UnaryExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = true;
	    }
	    return UnaryExpression;
	}());
	exports.UnaryExpression = UnaryExpression;
	var UpdateExpression = (function () {
	    function UpdateExpression(operator, argument, prefix) {
	        this.type = syntax_1.Syntax.UpdateExpression;
	        this.operator = operator;
	        this.argument = argument;
	        this.prefix = prefix;
	    }
	    return UpdateExpression;
	}());
	exports.UpdateExpression = UpdateExpression;
	var VariableDeclaration = (function () {
	    function VariableDeclaration(declarations, kind) {
	        this.type = syntax_1.Syntax.VariableDeclaration;
	        this.declarations = declarations;
	        this.kind = kind;
	    }
	    return VariableDeclaration;
	}());
	exports.VariableDeclaration = VariableDeclaration;
	var VariableDeclarator = (function () {
	    function VariableDeclarator(id, init) {
	        this.type = syntax_1.Syntax.VariableDeclarator;
	        this.id = id;
	        this.init = init;
	    }
	    return VariableDeclarator;
	}());
	exports.VariableDeclarator = VariableDeclarator;
	var WhileStatement = (function () {
	    function WhileStatement(test, body) {
	        this.type = syntax_1.Syntax.WhileStatement;
	        this.test = test;
	        this.body = body;
	    }
	    return WhileStatement;
	}());
	exports.WhileStatement = WhileStatement;
	var WithStatement = (function () {
	    function WithStatement(object, body) {
	        this.type = syntax_1.Syntax.WithStatement;
	        this.object = object;
	        this.body = body;
	    }
	    return WithStatement;
	}());
	exports.WithStatement = WithStatement;
	var YieldExpression = (function () {
	    function YieldExpression(argument, delegate) {
	        this.type = syntax_1.Syntax.YieldExpression;
	        this.argument = argument;
	        this.delegate = delegate;
	    }
	    return YieldExpression;
	}());
	exports.YieldExpression = YieldExpression;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var error_handler_1 = __webpack_require__(10);
	var messages_1 = __webpack_require__(11);
	var Node = __webpack_require__(7);
	var scanner_1 = __webpack_require__(12);
	var syntax_1 = __webpack_require__(2);
	var token_1 = __webpack_require__(13);
	var ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';
	var Parser = (function () {
	    function Parser(code, options, delegate) {
	        if (options === void 0) { options = {}; }
	        this.config = {
	            range: (typeof options.range === 'boolean') && options.range,
	            loc: (typeof options.loc === 'boolean') && options.loc,
	            source: null,
	            tokens: (typeof options.tokens === 'boolean') && options.tokens,
	            comment: (typeof options.comment === 'boolean') && options.comment,
	            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant
	        };
	        if (this.config.loc && options.source && options.source !== null) {
	            this.config.source = String(options.source);
	        }
	        this.delegate = delegate;
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = this.config.tolerant;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = this.config.comment;
	        this.operatorPrecedence = {
	            ')': 0,
	            ';': 0,
	            ',': 0,
	            '=': 0,
	            ']': 0,
	            '||': 1,
	            '&&': 2,
	            '|': 3,
	            '^': 4,
	            '&': 5,
	            '==': 6,
	            '!=': 6,
	            '===': 6,
	            '!==': 6,
	            '<': 7,
	            '>': 7,
	            '<=': 7,
	            '>=': 7,
	            '<<': 8,
	            '>>': 8,
	            '>>>': 8,
	            '+': 9,
	            '-': 9,
	            '*': 11,
	            '/': 11,
	            '%': 11
	        };
	        this.lookahead = {
	            type: 2 /* EOF */,
	            value: '',
	            lineNumber: this.scanner.lineNumber,
	            lineStart: 0,
	            start: 0,
	            end: 0
	        };
	        this.hasLineTerminator = false;
	        this.context = {
	            isModule: false,
	            await: false,
	            allowIn: true,
	            allowStrictDirective: true,
	            allowYield: true,
	            firstCoverInitializedNameError: null,
	            isAssignmentTarget: false,
	            isBindingElement: false,
	            inFunctionBody: false,
	            inIteration: false,
	            inSwitch: false,
	            labelSet: {},
	            strict: false
	        };
	        this.tokens = [];
	        this.startMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.lastMarker = {
	            index: 0,
	            line: this.scanner.lineNumber,
	            column: 0
	        };
	        this.nextToken();
	        this.lastMarker = {
	            index: this.scanner.index,
	            line: this.scanner.lineNumber,
	            column: this.scanner.index - this.scanner.lineStart
	        };
	    }
	    Parser.prototype.throwError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.lastMarker.line;
	        var column = this.lastMarker.column + 1;
	        throw this.errorHandler.createError(index, line, column, msg);
	    };
	    Parser.prototype.tolerateError = function (messageFormat) {
	        var values = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            values[_i - 1] = arguments[_i];
	        }
	        var args = Array.prototype.slice.call(arguments, 1);
	        var msg = messageFormat.replace(/%(\d)/g, function (whole, idx) {
	            assert_1.assert(idx < args.length, 'Message reference must be in range');
	            return args[idx];
	        });
	        var index = this.lastMarker.index;
	        var line = this.scanner.lineNumber;
	        var column = this.lastMarker.column + 1;
	        this.errorHandler.tolerateError(index, line, column, msg);
	    };
	    // Throw an exception because of the token.
	    Parser.prototype.unexpectedTokenError = function (token, message) {
	        var msg = message || messages_1.Messages.UnexpectedToken;
	        var value;
	        if (token) {
	            if (!message) {
	                msg = (token.type === 2 /* EOF */) ? messages_1.Messages.UnexpectedEOS :
	                    (token.type === 3 /* Identifier */) ? messages_1.Messages.UnexpectedIdentifier :
	                        (token.type === 6 /* NumericLiteral */) ? messages_1.Messages.UnexpectedNumber :
	                            (token.type === 8 /* StringLiteral */) ? messages_1.Messages.UnexpectedString :
	                                (token.type === 10 /* Template */) ? messages_1.Messages.UnexpectedTemplate :
	                                    messages_1.Messages.UnexpectedToken;
	                if (token.type === 4 /* Keyword */) {
	                    if (this.scanner.isFutureReservedWord(token.value)) {
	                        msg = messages_1.Messages.UnexpectedReserved;
	                    }
	                    else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {
	                        msg = messages_1.Messages.StrictReservedWord;
	                    }
	                }
	            }
	            value = token.value;
	        }
	        else {
	            value = 'ILLEGAL';
	        }
	        msg = msg.replace('%0', value);
	        if (token && typeof token.lineNumber === 'number') {
	            var index = token.start;
	            var line = token.lineNumber;
	            var lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;
	            var column = token.start - lastMarkerLineStart + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	        else {
	            var index = this.lastMarker.index;
	            var line = this.lastMarker.line;
	            var column = this.lastMarker.column + 1;
	            return this.errorHandler.createError(index, line, column, msg);
	        }
	    };
	    Parser.prototype.throwUnexpectedToken = function (token, message) {
	        throw this.unexpectedTokenError(token, message);
	    };
	    Parser.prototype.tolerateUnexpectedToken = function (token, message) {
	        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));
	    };
	    Parser.prototype.collectComments = function () {
	        if (!this.config.comment) {
	            this.scanner.scanComments();
	        }
	        else {
	            var comments = this.scanner.scanComments();
	            if (comments.length > 0 && this.delegate) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var node = void 0;
	                    node = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: this.scanner.source.slice(e.slice[0], e.slice[1])
	                    };
	                    if (this.config.range) {
	                        node.range = e.range;
	                    }
	                    if (this.config.loc) {
	                        node.loc = e.loc;
	                    }
	                    var metadata = {
	                        start: {
	                            line: e.loc.start.line,
	                            column: e.loc.start.column,
	                            offset: e.range[0]
	                        },
	                        end: {
	                            line: e.loc.end.line,
	                            column: e.loc.end.column,
	                            offset: e.range[1]
	                        }
	                    };
	                    this.delegate(node, metadata);
	                }
	            }
	        }
	    };
	    // From internal representation to an external structure
	    Parser.prototype.getTokenRaw = function (token) {
	        return this.scanner.source.slice(token.start, token.end);
	    };
	    Parser.prototype.convertToken = function (token) {
	        var t = {
	            type: token_1.TokenName[token.type],
	            value: this.getTokenRaw(token)
	        };
	        if (this.config.range) {
	            t.range = [token.start, token.end];
	        }
	        if (this.config.loc) {
	            t.loc = {
	                start: {
	                    line: this.startMarker.line,
	                    column: this.startMarker.column
	                },
	                end: {
	                    line: this.scanner.lineNumber,
	                    column: this.scanner.index - this.scanner.lineStart
	                }
	            };
	        }
	        if (token.type === 9 /* RegularExpression */) {
	            var pattern = token.pattern;
	            var flags = token.flags;
	            t.regex = { pattern: pattern, flags: flags };
	        }
	        return t;
	    };
	    Parser.prototype.nextToken = function () {
	        var token = this.lookahead;
	        this.lastMarker.index = this.scanner.index;
	        this.lastMarker.line = this.scanner.lineNumber;
	        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
	        this.collectComments();
	        if (this.scanner.index !== this.startMarker.index) {
	            this.startMarker.index = this.scanner.index;
	            this.startMarker.line = this.scanner.lineNumber;
	            this.startMarker.column = this.scanner.index - this.scanner.lineStart;
	        }
	        var next = this.scanner.lex();
	        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);
	        if (next && this.context.strict && next.type === 3 /* Identifier */) {
	            if (this.scanner.isStrictModeReservedWord(next.value)) {
	                next.type = 4 /* Keyword */;
	            }
	        }
	        this.lookahead = next;
	        if (this.config.tokens && next.type !== 2 /* EOF */) {
	            this.tokens.push(this.convertToken(next));
	        }
	        return token;
	    };
	    Parser.prototype.nextRegexToken = function () {
	        this.collectComments();
	        var token = this.scanner.scanRegExp();
	        if (this.config.tokens) {
	            // Pop the previous token, '/' or '/='
	            // This is added from the lookahead token.
	            this.tokens.pop();
	            this.tokens.push(this.convertToken(token));
	        }
	        // Prime the next lookahead.
	        this.lookahead = token;
	        this.nextToken();
	        return token;
	    };
	    Parser.prototype.createNode = function () {
	        return {
	            index: this.startMarker.index,
	            line: this.startMarker.line,
	            column: this.startMarker.column
	        };
	    };
	    Parser.prototype.startNode = function (token, lastLineStart) {
	        if (lastLineStart === void 0) { lastLineStart = 0; }
	        var column = token.start - token.lineStart;
	        var line = token.lineNumber;
	        if (column < 0) {
	            column += lastLineStart;
	            line--;
	        }
	        return {
	            index: token.start,
	            line: line,
	            column: column
	        };
	    };
	    Parser.prototype.finalize = function (marker, node) {
	        if (this.config.range) {
	            node.range = [marker.index, this.lastMarker.index];
	        }
	        if (this.config.loc) {
	            node.loc = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column
	                }
	            };
	            if (this.config.source) {
	                node.loc.source = this.config.source;
	            }
	        }
	        if (this.delegate) {
	            var metadata = {
	                start: {
	                    line: marker.line,
	                    column: marker.column,
	                    offset: marker.index
	                },
	                end: {
	                    line: this.lastMarker.line,
	                    column: this.lastMarker.column,
	                    offset: this.lastMarker.index
	                }
	            };
	            this.delegate(node, metadata);
	        }
	        return node;
	    };
	    // Expect the next token to match the specified punctuator.
	    // If not, an exception will be thrown.
	    Parser.prototype.expect = function (value) {
	        var token = this.nextToken();
	        if (token.type !== 7 /* Punctuator */ || token.value !== value) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().
	    Parser.prototype.expectCommaSeparator = function () {
	        if (this.config.tolerant) {
	            var token = this.lookahead;
	            if (token.type === 7 /* Punctuator */ && token.value === ',') {
	                this.nextToken();
	            }
	            else if (token.type === 7 /* Punctuator */ && token.value === ';') {
	                this.nextToken();
	                this.tolerateUnexpectedToken(token);
	            }
	            else {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.UnexpectedToken);
	            }
	        }
	        else {
	            this.expect(',');
	        }
	    };
	    // Expect the next token to match the specified keyword.
	    // If not, an exception will be thrown.
	    Parser.prototype.expectKeyword = function (keyword) {
	        var token = this.nextToken();
	        if (token.type !== 4 /* Keyword */ || token.value !== keyword) {
	            this.throwUnexpectedToken(token);
	        }
	    };
	    // Return true if the next token matches the specified punctuator.
	    Parser.prototype.match = function (value) {
	        return this.lookahead.type === 7 /* Punctuator */ && this.lookahead.value === value;
	    };
	    // Return true if the next token matches the specified keyword
	    Parser.prototype.matchKeyword = function (keyword) {
	        return this.lookahead.type === 4 /* Keyword */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token matches the specified contextual keyword
	    // (where an identifier is sometimes a keyword depending on the context)
	    Parser.prototype.matchContextualKeyword = function (keyword) {
	        return this.lookahead.type === 3 /* Identifier */ && this.lookahead.value === keyword;
	    };
	    // Return true if the next token is an assignment operator
	    Parser.prototype.matchAssign = function () {
	        if (this.lookahead.type !== 7 /* Punctuator */) {
	            return false;
	        }
	        var op = this.lookahead.value;
	        return op === '=' ||
	            op === '*=' ||
	            op === '**=' ||
	            op === '/=' ||
	            op === '%=' ||
	            op === '+=' ||
	            op === '-=' ||
	            op === '<<=' ||
	            op === '>>=' ||
	            op === '>>>=' ||
	            op === '&=' ||
	            op === '^=' ||
	            op === '|=';
	    };
	    // Cover grammar support.
	    //
	    // When an assignment expression position starts with an left parenthesis, the determination of the type
	    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
	    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
	    //
	    // There are three productions that can be parsed in a parentheses pair that needs to be determined
	    // after the outermost pair is closed. They are:
	    //
	    //   1. AssignmentExpression
	    //   2. BindingElements
	    //   3. AssignmentTargets
	    //
	    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
	    // binding element or assignment target.
	    //
	    // The three productions have the relationship:
	    //
	    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
	    //
	    // with a single exception that CoverInitializedName when used directly in an Expression, generates
	    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
	    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
	    //
	    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
	    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
	    // the CoverInitializedName check is conducted.
	    //
	    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
	    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
	    // pattern. The CoverInitializedName check is deferred.
	    Parser.prototype.isolateCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        if (this.context.firstCoverInitializedNameError !== null) {
	            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);
	        }
	        this.context.isBindingElement = previousIsBindingElement;
	        this.context.isAssignmentTarget = previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.inheritCoverGrammar = function (parseFunction) {
	        var previousIsBindingElement = this.context.isBindingElement;
	        var previousIsAssignmentTarget = this.context.isAssignmentTarget;
	        var previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;
	        this.context.isBindingElement = true;
	        this.context.isAssignmentTarget = true;
	        this.context.firstCoverInitializedNameError = null;
	        var result = parseFunction.call(this);
	        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;
	        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;
	        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;
	        return result;
	    };
	    Parser.prototype.consumeSemicolon = function () {
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else if (!this.hasLineTerminator) {
	            if (this.lookahead.type !== 2 /* EOF */ && !this.match('}')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.lastMarker.index = this.startMarker.index;
	            this.lastMarker.line = this.startMarker.line;
	            this.lastMarker.column = this.startMarker.column;
	        }
	    };
	    // https://tc39.github.io/ecma262/#sec-primary-expression
	    Parser.prototype.parsePrimaryExpression = function () {
	        var node = this.createNode();
	        var expr;
	        var token, raw;
	        switch (this.lookahead.type) {
	            case 3 /* Identifier */:
	                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {
	                    this.tolerateUnexpectedToken(this.lookahead);
	                }
	                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));
	                break;
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	                if (this.context.strict && this.lookahead.octal) {
	                    this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.StrictOctalLiteral);
	                }
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 1 /* BooleanLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));
	                break;
	            case 5 /* NullLiteral */:
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                token = this.nextToken();
	                raw = this.getTokenRaw(token);
	                expr = this.finalize(node, new Node.Literal(null, raw));
	                break;
	            case 10 /* Template */:
	                expr = this.parseTemplateLiteral();
	                break;
	            case 7 /* Punctuator */:
	                switch (this.lookahead.value) {
	                    case '(':
	                        this.context.isBindingElement = false;
	                        expr = this.inheritCoverGrammar(this.parseGroupExpression);
	                        break;
	                    case '[':
	                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);
	                        break;
	                    case '{':
	                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);
	                        break;
	                    case '/':
	                    case '/=':
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                        this.scanner.index = this.startMarker.index;
	                        token = this.nextRegexToken();
	                        raw = this.getTokenRaw(token);
	                        expr = this.finalize(node, new Node.RegexLiteral(token.regex, raw, token.pattern, token.flags));
	                        break;
	                    default:
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                }
	                break;
	            case 4 /* Keyword */:
	                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {
	                    expr = this.parseIdentifierName();
	                }
	                else if (!this.context.strict && this.matchKeyword('let')) {
	                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));
	                }
	                else {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    if (this.matchKeyword('function')) {
	                        expr = this.parseFunctionExpression();
	                    }
	                    else if (this.matchKeyword('this')) {
	                        this.nextToken();
	                        expr = this.finalize(node, new Node.ThisExpression());
	                    }
	                    else if (this.matchKeyword('class')) {
	                        expr = this.parseClassExpression();
	                    }
	                    else {
	                        expr = this.throwUnexpectedToken(this.nextToken());
	                    }
	                }
	                break;
	            default:
	                expr = this.throwUnexpectedToken(this.nextToken());
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-array-initializer
	    Parser.prototype.parseSpreadElement = function () {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.inheritCoverGrammar(this.parseAssignmentExpression);
	        return this.finalize(node, new Node.SpreadElement(arg));
	    };
	    Parser.prototype.parseArrayInitializer = function () {
	        var node = this.createNode();
	        var elements = [];
	        this.expect('[');
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else if (this.match('...')) {
	                var element = this.parseSpreadElement();
	                if (!this.match(']')) {
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    this.expect(',');
	                }
	                elements.push(element);
	            }
	            else {
	                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayExpression(elements));
	    };
	    // https://tc39.github.io/ecma262/#sec-object-initializer
	    Parser.prototype.parsePropertyMethod = function (params) {
	        this.context.isAssignmentTarget = false;
	        this.context.isBindingElement = false;
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = params.simple;
	        var body = this.isolateCoverGrammar(this.parseFunctionSourceElements);
	        if (this.context.strict && params.firstRestricted) {
	            this.tolerateUnexpectedToken(params.firstRestricted, params.message);
	        }
	        if (this.context.strict && params.stricted) {
	            this.tolerateUnexpectedToken(params.stricted, params.message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        return body;
	    };
	    Parser.prototype.parsePropertyMethodFunction = function () {
	        var isGenerator = false;
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    Parser.prototype.parsePropertyMethodAsyncFunction = function () {
	        var node = this.createNode();
	        var previousAllowYield = this.context.allowYield;
	        var previousAwait = this.context.await;
	        this.context.allowYield = false;
	        this.context.await = true;
	        var params = this.parseFormalParameters();
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        this.context.await = previousAwait;
	        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));
	    };
	    Parser.prototype.parseObjectPropertyKey = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        var key;
	        switch (token.type) {
	            case 8 /* StringLiteral */:
	            case 6 /* NumericLiteral */:
	                if (this.context.strict && token.octal) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictOctalLiteral);
	                }
	                var raw = this.getTokenRaw(token);
	                key = this.finalize(node, new Node.Literal(token.value, raw));
	                break;
	            case 3 /* Identifier */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 4 /* Keyword */:
	                key = this.finalize(node, new Node.Identifier(token.value));
	                break;
	            case 7 /* Punctuator */:
	                if (token.value === '[') {
	                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    this.expect(']');
	                }
	                else {
	                    key = this.throwUnexpectedToken(token);
	                }
	                break;
	            default:
	                key = this.throwUnexpectedToken(token);
	        }
	        return key;
	    };
	    Parser.prototype.isPropertyKey = function (key, value) {
	        return (key.type === syntax_1.Syntax.Identifier && key.name === value) ||
	            (key.type === syntax_1.Syntax.Literal && key.value === value);
	    };
	    Parser.prototype.parseObjectProperty = function (hasProto) {
	        var node = this.createNode();
	        var token = this.lookahead;
	        var kind;
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var shorthand = false;
	        var isAsync = false;
	        if (token.type === 3 /* Identifier */) {
	            var id = token.value;
	            this.nextToken();
	            computed = this.match('[');
	            isAsync = !this.hasLineTerminator && (id === 'async') &&
	                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');
	            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));
	        }
	        else if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'get' && lookaheadPropertyKey) {
	            kind = 'get';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.context.allowYield = false;
	            value = this.parseGetterMethod();
	        }
	        else if (token.type === 3 /* Identifier */ && !isAsync && token.value === 'set' && lookaheadPropertyKey) {
	            kind = 'set';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseSetterMethod();
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        else {
	            if (!key) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            kind = 'init';
	            if (this.match(':') && !isAsync) {
	                if (!computed && this.isPropertyKey(key, '__proto__')) {
	                    if (hasProto.value) {
	                        this.tolerateError(messages_1.Messages.DuplicateProtoProperty);
	                    }
	                    hasProto.value = true;
	                }
	                this.nextToken();
	                value = this.inheritCoverGrammar(this.parseAssignmentExpression);
	            }
	            else if (this.match('(')) {
	                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	                method = true;
	            }
	            else if (token.type === 3 /* Identifier */) {
	                var id = this.finalize(node, new Node.Identifier(token.value));
	                if (this.match('=')) {
	                    this.context.firstCoverInitializedNameError = this.lookahead;
	                    this.nextToken();
	                    shorthand = true;
	                    var init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    value = this.finalize(node, new Node.AssignmentPattern(id, init));
	                }
	                else {
	                    shorthand = true;
	                    value = id;
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.Property(kind, key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectInitializer = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var properties = [];
	        var hasProto = { value: false };
	        while (!this.match('}')) {
	            properties.push(this.parseObjectProperty(hasProto));
	            if (!this.match('}')) {
	                this.expectCommaSeparator();
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectExpression(properties));
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literals
	    Parser.prototype.parseTemplateHead = function () {
	        assert_1.assert(this.lookahead.head, 'Template literal must start with a template head');
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateElement = function () {
	        if (this.lookahead.type !== 10 /* Template */) {
	            this.throwUnexpectedToken();
	        }
	        var node = this.createNode();
	        var token = this.nextToken();
	        var raw = token.value;
	        var cooked = token.cooked;
	        return this.finalize(node, new Node.TemplateElement({ raw: raw, cooked: cooked }, token.tail));
	    };
	    Parser.prototype.parseTemplateLiteral = function () {
	        var node = this.createNode();
	        var expressions = [];
	        var quasis = [];
	        var quasi = this.parseTemplateHead();
	        quasis.push(quasi);
	        while (!quasi.tail) {
	            expressions.push(this.parseExpression());
	            quasi = this.parseTemplateElement();
	            quasis.push(quasi);
	        }
	        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));
	    };
	    // https://tc39.github.io/ecma262/#sec-grouping-operator
	    Parser.prototype.reinterpretExpressionAsPattern = function (expr) {
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	            case syntax_1.Syntax.MemberExpression:
	            case syntax_1.Syntax.RestElement:
	            case syntax_1.Syntax.AssignmentPattern:
	                break;
	            case syntax_1.Syntax.SpreadElement:
	                expr.type = syntax_1.Syntax.RestElement;
	                this.reinterpretExpressionAsPattern(expr.argument);
	                break;
	            case syntax_1.Syntax.ArrayExpression:
	                expr.type = syntax_1.Syntax.ArrayPattern;
	                for (var i = 0; i < expr.elements.length; i++) {
	                    if (expr.elements[i] !== null) {
	                        this.reinterpretExpressionAsPattern(expr.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectExpression:
	                expr.type = syntax_1.Syntax.ObjectPattern;
	                for (var i = 0; i < expr.properties.length; i++) {
	                    this.reinterpretExpressionAsPattern(expr.properties[i].value);
	                }
	                break;
	            case syntax_1.Syntax.AssignmentExpression:
	                expr.type = syntax_1.Syntax.AssignmentPattern;
	                delete expr.operator;
	                this.reinterpretExpressionAsPattern(expr.left);
	                break;
	        }
	    };
	    Parser.prototype.parseGroupExpression = function () {
	        var expr;
	        this.expect('(');
	        if (this.match(')')) {
	            this.nextToken();
	            if (!this.match('=>')) {
	                this.expect('=>');
	            }
	            expr = {
	                type: ArrowParameterPlaceHolder,
	                params: [],
	                async: false
	            };
	        }
	        else {
	            var startToken = this.lookahead;
	            var params = [];
	            if (this.match('...')) {
	                expr = this.parseRestElement(params);
	                this.expect(')');
	                if (!this.match('=>')) {
	                    this.expect('=>');
	                }
	                expr = {
	                    type: ArrowParameterPlaceHolder,
	                    params: [expr],
	                    async: false
	                };
	            }
	            else {
	                var arrow = false;
	                this.context.isBindingElement = true;
	                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                if (this.match(',')) {
	                    var expressions = [];
	                    this.context.isAssignmentTarget = false;
	                    expressions.push(expr);
	                    while (this.lookahead.type !== 2 /* EOF */) {
	                        if (!this.match(',')) {
	                            break;
	                        }
	                        this.nextToken();
	                        if (this.match(')')) {
	                            this.nextToken();
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else if (this.match('...')) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            expressions.push(this.parseRestElement(params));
	                            this.expect(')');
	                            if (!this.match('=>')) {
	                                this.expect('=>');
	                            }
	                            this.context.isBindingElement = false;
	                            for (var i = 0; i < expressions.length; i++) {
	                                this.reinterpretExpressionAsPattern(expressions[i]);
	                            }
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: expressions,
	                                async: false
	                            };
	                        }
	                        else {
	                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        if (arrow) {
	                            break;
	                        }
	                    }
	                    if (!arrow) {
	                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	                    }
	                }
	                if (!arrow) {
	                    this.expect(')');
	                    if (this.match('=>')) {
	                        if (expr.type === syntax_1.Syntax.Identifier && expr.name === 'yield') {
	                            arrow = true;
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: [expr],
	                                async: false
	                            };
	                        }
	                        if (!arrow) {
	                            if (!this.context.isBindingElement) {
	                                this.throwUnexpectedToken(this.lookahead);
	                            }
	                            if (expr.type === syntax_1.Syntax.SequenceExpression) {
	                                for (var i = 0; i < expr.expressions.length; i++) {
	                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);
	                                }
	                            }
	                            else {
	                                this.reinterpretExpressionAsPattern(expr);
	                            }
	                            var parameters = (expr.type === syntax_1.Syntax.SequenceExpression ? expr.expressions : [expr]);
	                            expr = {
	                                type: ArrowParameterPlaceHolder,
	                                params: parameters,
	                                async: false
	                            };
	                        }
	                    }
	                    this.context.isBindingElement = false;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions
	    Parser.prototype.parseArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAssignmentExpression);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.isIdentifierName = function (token) {
	        return token.type === 3 /* Identifier */ ||
	            token.type === 4 /* Keyword */ ||
	            token.type === 1 /* BooleanLiteral */ ||
	            token.type === 5 /* NullLiteral */;
	    };
	    Parser.prototype.parseIdentifierName = function () {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (!this.isIdentifierName(token)) {
	            this.throwUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseNewExpression = function () {
	        var node = this.createNode();
	        var id = this.parseIdentifierName();
	        assert_1.assert(id.name === 'new', 'New expression must start with `new`');
	        var expr;
	        if (this.match('.')) {
	            this.nextToken();
	            if (this.lookahead.type === 3 /* Identifier */ && this.context.inFunctionBody && this.lookahead.value === 'target') {
	                var property = this.parseIdentifierName();
	                expr = new Node.MetaProperty(id, property);
	            }
	            else {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            var callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);
	            var args = this.match('(') ? this.parseArguments() : [];
	            expr = new Node.NewExpression(callee, args);
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return this.finalize(node, expr);
	    };
	    Parser.prototype.parseAsyncArgument = function () {
	        var arg = this.parseAssignmentExpression();
	        this.context.firstCoverInitializedNameError = null;
	        return arg;
	    };
	    Parser.prototype.parseAsyncArguments = function () {
	        this.expect('(');
	        var args = [];
	        if (!this.match(')')) {
	            while (true) {
	                var expr = this.match('...') ? this.parseSpreadElement() :
	                    this.isolateCoverGrammar(this.parseAsyncArgument);
	                args.push(expr);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expectCommaSeparator();
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return args;
	    };
	    Parser.prototype.parseLeftHandSideExpressionAllowCall = function () {
	        var startToken = this.lookahead;
	        var maybeAsync = this.matchContextualKeyword('async');
	        var previousAllowIn = this.context.allowIn;
	        this.context.allowIn = true;
	        var expr;
	        if (this.matchKeyword('super') && this.context.inFunctionBody) {
	            expr = this.createNode();
	            this.nextToken();
	            expr = this.finalize(expr, new Node.Super());
	            if (!this.match('(') && !this.match('.') && !this.match('[')) {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        }
	        while (true) {
	            if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.match('(')) {
	                var asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = false;
	                var args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();
	                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));
	                if (asyncArrow && this.match('=>')) {
	                    for (var i = 0; i < args.length; ++i) {
	                        this.reinterpretExpressionAsPattern(args[i]);
	                    }
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: args,
	                        async: true
	                    };
	                }
	            }
	            else if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        this.context.allowIn = previousAllowIn;
	        return expr;
	    };
	    Parser.prototype.parseSuper = function () {
	        var node = this.createNode();
	        this.expectKeyword('super');
	        if (!this.match('[') && !this.match('.')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        return this.finalize(node, new Node.Super());
	    };
	    Parser.prototype.parseLeftHandSideExpression = function () {
	        assert_1.assert(this.context.allowIn, 'callee of new expression always allow in keyword.');
	        var node = this.startNode(this.lookahead);
	        var expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :
	            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);
	        while (true) {
	            if (this.match('[')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('[');
	                var property = this.isolateCoverGrammar(this.parseExpression);
	                this.expect(']');
	                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));
	            }
	            else if (this.match('.')) {
	                this.context.isBindingElement = false;
	                this.context.isAssignmentTarget = true;
	                this.expect('.');
	                var property = this.parseIdentifierName();
	                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));
	            }
	            else if (this.lookahead.type === 10 /* Template */ && this.lookahead.head) {
	                var quasi = this.parseTemplateLiteral();
	                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));
	            }
	            else {
	                break;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-update-expressions
	    Parser.prototype.parseUpdateExpression = function () {
	        var expr;
	        var startToken = this.lookahead;
	        if (this.match('++') || this.match('--')) {
	            var node = this.startNode(startToken);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                this.tolerateError(messages_1.Messages.StrictLHSPrefix);
	            }
	            if (!this.context.isAssignmentTarget) {
	                this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	            }
	            var prefix = true;
	            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else {
	            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	            if (!this.hasLineTerminator && this.lookahead.type === 7 /* Punctuator */) {
	                if (this.match('++') || this.match('--')) {
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {
	                        this.tolerateError(messages_1.Messages.StrictLHSPostfix);
	                    }
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    this.context.isAssignmentTarget = false;
	                    this.context.isBindingElement = false;
	                    var operator = this.nextToken().value;
	                    var prefix = false;
	                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-unary-operators
	    Parser.prototype.parseAwaitExpression = function () {
	        var node = this.createNode();
	        this.nextToken();
	        var argument = this.parseUnaryExpression();
	        return this.finalize(node, new Node.AwaitExpression(argument));
	    };
	    Parser.prototype.parseUnaryExpression = function () {
	        var expr;
	        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||
	            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {
	            var node = this.startNode(this.lookahead);
	            var token = this.nextToken();
	            expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));
	            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === syntax_1.Syntax.Identifier) {
	                this.tolerateError(messages_1.Messages.StrictDelete);
	            }
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        else if (this.context.await && this.matchContextualKeyword('await')) {
	            expr = this.parseAwaitExpression();
	        }
	        else {
	            expr = this.parseUpdateExpression();
	        }
	        return expr;
	    };
	    Parser.prototype.parseExponentiationExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseUnaryExpression);
	        if (expr.type !== syntax_1.Syntax.UnaryExpression && this.match('**')) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-exp-operator
	    // https://tc39.github.io/ecma262/#sec-multiplicative-operators
	    // https://tc39.github.io/ecma262/#sec-additive-operators
	    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators
	    // https://tc39.github.io/ecma262/#sec-relational-operators
	    // https://tc39.github.io/ecma262/#sec-equality-operators
	    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators
	    // https://tc39.github.io/ecma262/#sec-binary-logical-operators
	    Parser.prototype.binaryPrecedence = function (token) {
	        var op = token.value;
	        var precedence;
	        if (token.type === 7 /* Punctuator */) {
	            precedence = this.operatorPrecedence[op] || 0;
	        }
	        else if (token.type === 4 /* Keyword */) {
	            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;
	        }
	        else {
	            precedence = 0;
	        }
	        return precedence;
	    };
	    Parser.prototype.parseBinaryExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseExponentiationExpression);
	        var token = this.lookahead;
	        var prec = this.binaryPrecedence(token);
	        if (prec > 0) {
	            this.nextToken();
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	            var markers = [startToken, this.lookahead];
	            var left = expr;
	            var right = this.isolateCoverGrammar(this.parseExponentiationExpression);
	            var stack = [left, token.value, right];
	            var precedences = [prec];
	            while (true) {
	                prec = this.binaryPrecedence(this.lookahead);
	                if (prec <= 0) {
	                    break;
	                }
	                // Reduce: make a binary expression from the three topmost entries.
	                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {
	                    right = stack.pop();
	                    var operator = stack.pop();
	                    precedences.pop();
	                    left = stack.pop();
	                    markers.pop();
	                    var node = this.startNode(markers[markers.length - 1]);
	                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));
	                }
	                // Shift.
	                stack.push(this.nextToken().value);
	                precedences.push(prec);
	                markers.push(this.lookahead);
	                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
	            }
	            // Final reduce to clean-up the stack.
	            var i = stack.length - 1;
	            expr = stack[i];
	            var lastMarker = markers.pop();
	            while (i > 1) {
	                var marker = markers.pop();
	                var lastLineStart = lastMarker && lastMarker.lineStart;
	                var node = this.startNode(marker, lastLineStart);
	                var operator = stack[i - 1];
	                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));
	                i -= 2;
	                lastMarker = marker;
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-conditional-operator
	    Parser.prototype.parseConditionalExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.inheritCoverGrammar(this.parseBinaryExpression);
	        if (this.match('?')) {
	            this.nextToken();
	            var previousAllowIn = this.context.allowIn;
	            this.context.allowIn = true;
	            var consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowIn = previousAllowIn;
	            this.expect(':');
	            var alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));
	            this.context.isAssignmentTarget = false;
	            this.context.isBindingElement = false;
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-assignment-operators
	    Parser.prototype.checkPatternParam = function (options, param) {
	        switch (param.type) {
	            case syntax_1.Syntax.Identifier:
	                this.validateParam(options, param, param.name);
	                break;
	            case syntax_1.Syntax.RestElement:
	                this.checkPatternParam(options, param.argument);
	                break;
	            case syntax_1.Syntax.AssignmentPattern:
	                this.checkPatternParam(options, param.left);
	                break;
	            case syntax_1.Syntax.ArrayPattern:
	                for (var i = 0; i < param.elements.length; i++) {
	                    if (param.elements[i] !== null) {
	                        this.checkPatternParam(options, param.elements[i]);
	                    }
	                }
	                break;
	            case syntax_1.Syntax.ObjectPattern:
	                for (var i = 0; i < param.properties.length; i++) {
	                    this.checkPatternParam(options, param.properties[i].value);
	                }
	                break;
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	    };
	    Parser.prototype.reinterpretAsCoverFormalsList = function (expr) {
	        var params = [expr];
	        var options;
	        var asyncArrow = false;
	        switch (expr.type) {
	            case syntax_1.Syntax.Identifier:
	                break;
	            case ArrowParameterPlaceHolder:
	                params = expr.params;
	                asyncArrow = expr.async;
	                break;
	            default:
	                return null;
	        }
	        options = {
	            simple: true,
	            paramSet: {}
	        };
	        for (var i = 0; i < params.length; ++i) {
	            var param = params[i];
	            if (param.type === syntax_1.Syntax.AssignmentPattern) {
	                if (param.right.type === syntax_1.Syntax.YieldExpression) {
	                    if (param.right.argument) {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                    param.right.type = syntax_1.Syntax.Identifier;
	                    param.right.name = 'yield';
	                    delete param.right.argument;
	                    delete param.right.delegate;
	                }
	            }
	            else if (asyncArrow && param.type === syntax_1.Syntax.Identifier && param.name === 'await') {
	                this.throwUnexpectedToken(this.lookahead);
	            }
	            this.checkPatternParam(options, param);
	            params[i] = param;
	        }
	        if (this.context.strict || !this.context.allowYield) {
	            for (var i = 0; i < params.length; ++i) {
	                var param = params[i];
	                if (param.type === syntax_1.Syntax.YieldExpression) {
	                    this.throwUnexpectedToken(this.lookahead);
	                }
	            }
	        }
	        if (options.message === messages_1.Messages.StrictParamDupe) {
	            var token = this.context.strict ? options.stricted : options.firstRestricted;
	            this.throwUnexpectedToken(token, options.message);
	        }
	        return {
	            simple: options.simple,
	            params: params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.parseAssignmentExpression = function () {
	        var expr;
	        if (!this.context.allowYield && this.matchKeyword('yield')) {
	            expr = this.parseYieldExpression();
	        }
	        else {
	            var startToken = this.lookahead;
	            var token = startToken;
	            expr = this.parseConditionalExpression();
	            if (token.type === 3 /* Identifier */ && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {
	                if (this.lookahead.type === 3 /* Identifier */ || this.matchKeyword('yield')) {
	                    var arg = this.parsePrimaryExpression();
	                    this.reinterpretExpressionAsPattern(arg);
	                    expr = {
	                        type: ArrowParameterPlaceHolder,
	                        params: [arg],
	                        async: true
	                    };
	                }
	            }
	            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {
	                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions
	                this.context.isAssignmentTarget = false;
	                this.context.isBindingElement = false;
	                var isAsync = expr.async;
	                var list = this.reinterpretAsCoverFormalsList(expr);
	                if (list) {
	                    if (this.hasLineTerminator) {
	                        this.tolerateUnexpectedToken(this.lookahead);
	                    }
	                    this.context.firstCoverInitializedNameError = null;
	                    var previousStrict = this.context.strict;
	                    var previousAllowStrictDirective = this.context.allowStrictDirective;
	                    this.context.allowStrictDirective = list.simple;
	                    var previousAllowYield = this.context.allowYield;
	                    var previousAwait = this.context.await;
	                    this.context.allowYield = true;
	                    this.context.await = isAsync;
	                    var node = this.startNode(startToken);
	                    this.expect('=>');
	                    var body = void 0;
	                    if (this.match('{')) {
	                        var previousAllowIn = this.context.allowIn;
	                        this.context.allowIn = true;
	                        body = this.parseFunctionSourceElements();
	                        this.context.allowIn = previousAllowIn;
	                    }
	                    else {
	                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    }
	                    var expression = body.type !== syntax_1.Syntax.BlockStatement;
	                    if (this.context.strict && list.firstRestricted) {
	                        this.throwUnexpectedToken(list.firstRestricted, list.message);
	                    }
	                    if (this.context.strict && list.stricted) {
	                        this.tolerateUnexpectedToken(list.stricted, list.message);
	                    }
	                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :
	                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));
	                    this.context.strict = previousStrict;
	                    this.context.allowStrictDirective = previousAllowStrictDirective;
	                    this.context.allowYield = previousAllowYield;
	                    this.context.await = previousAwait;
	                }
	            }
	            else {
	                if (this.matchAssign()) {
	                    if (!this.context.isAssignmentTarget) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInAssignment);
	                    }
	                    if (this.context.strict && expr.type === syntax_1.Syntax.Identifier) {
	                        var id = expr;
	                        if (this.scanner.isRestrictedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictLHSAssignment);
	                        }
	                        if (this.scanner.isStrictModeReservedWord(id.name)) {
	                            this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	                        }
	                    }
	                    if (!this.match('=')) {
	                        this.context.isAssignmentTarget = false;
	                        this.context.isBindingElement = false;
	                    }
	                    else {
	                        this.reinterpretExpressionAsPattern(expr);
	                    }
	                    token = this.nextToken();
	                    var operator = token.value;
	                    var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));
	                    this.context.firstCoverInitializedNameError = null;
	                }
	            }
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-comma-operator
	    Parser.prototype.parseExpression = function () {
	        var startToken = this.lookahead;
	        var expr = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        if (this.match(',')) {
	            var expressions = [];
	            expressions.push(expr);
	            while (this.lookahead.type !== 2 /* EOF */) {
	                if (!this.match(',')) {
	                    break;
	                }
	                this.nextToken();
	                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	            }
	            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));
	        }
	        return expr;
	    };
	    // https://tc39.github.io/ecma262/#sec-block
	    Parser.prototype.parseStatementListItem = function () {
	        var statement;
	        this.context.isAssignmentTarget = true;
	        this.context.isBindingElement = true;
	        if (this.lookahead.type === 4 /* Keyword */) {
	            switch (this.lookahead.value) {
	                case 'export':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalExportDeclaration);
	                    }
	                    statement = this.parseExportDeclaration();
	                    break;
	                case 'import':
	                    if (!this.context.isModule) {
	                        this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.IllegalImportDeclaration);
	                    }
	                    statement = this.parseImportDeclaration();
	                    break;
	                case 'const':
	                    statement = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'function':
	                    statement = this.parseFunctionDeclaration();
	                    break;
	                case 'class':
	                    statement = this.parseClassDeclaration();
	                    break;
	                case 'let':
	                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();
	                    break;
	                default:
	                    statement = this.parseStatement();
	                    break;
	            }
	        }
	        else {
	            statement = this.parseStatement();
	        }
	        return statement;
	    };
	    Parser.prototype.parseBlock = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var block = [];
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            block.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.BlockStatement(block));
	    };
	    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations
	    Parser.prototype.parseLexicalBinding = function (kind, options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, kind);
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (kind === 'const') {
	            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {
	                if (this.match('=')) {
	                    this.nextToken();
	                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	                }
	                else {
	                    this.throwError(messages_1.Messages.DeclarationMissingInitializer, 'const');
	                }
	            }
	        }
	        else if ((!options.inFor && id.type !== syntax_1.Syntax.Identifier) || this.match('=')) {
	            this.expect('=');
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseBindingList = function (kind, options) {
	        var list = [this.parseLexicalBinding(kind, options)];
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseLexicalBinding(kind, options));
	        }
	        return list;
	    };
	    Parser.prototype.isLexicalDeclaration = function () {
	        var state = this.scanner.saveState();
	        this.scanner.scanComments();
	        var next = this.scanner.lex();
	        this.scanner.restoreState(state);
	        return (next.type === 3 /* Identifier */) ||
	            (next.type === 7 /* Punctuator */ && next.value === '[') ||
	            (next.type === 7 /* Punctuator */ && next.value === '{') ||
	            (next.type === 4 /* Keyword */ && next.value === 'let') ||
	            (next.type === 4 /* Keyword */ && next.value === 'yield');
	    };
	    Parser.prototype.parseLexicalDeclaration = function (options) {
	        var node = this.createNode();
	        var kind = this.nextToken().value;
	        assert_1.assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');
	        var declarations = this.parseBindingList(kind, options);
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));
	    };
	    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns
	    Parser.prototype.parseBindingRestElement = function (params, kind) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params, kind);
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseArrayPattern = function (params, kind) {
	        var node = this.createNode();
	        this.expect('[');
	        var elements = [];
	        while (!this.match(']')) {
	            if (this.match(',')) {
	                this.nextToken();
	                elements.push(null);
	            }
	            else {
	                if (this.match('...')) {
	                    elements.push(this.parseBindingRestElement(params, kind));
	                    break;
	                }
	                else {
	                    elements.push(this.parsePatternWithDefault(params, kind));
	                }
	                if (!this.match(']')) {
	                    this.expect(',');
	                }
	            }
	        }
	        this.expect(']');
	        return this.finalize(node, new Node.ArrayPattern(elements));
	    };
	    Parser.prototype.parsePropertyPattern = function (params, kind) {
	        var node = this.createNode();
	        var computed = false;
	        var shorthand = false;
	        var method = false;
	        var key;
	        var value;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            var keyToken = this.lookahead;
	            key = this.parseVariableIdentifier();
	            var init = this.finalize(node, new Node.Identifier(keyToken.value));
	            if (this.match('=')) {
	                params.push(keyToken);
	                shorthand = true;
	                this.nextToken();
	                var expr = this.parseAssignmentExpression();
	                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));
	            }
	            else if (!this.match(':')) {
	                params.push(keyToken);
	                shorthand = true;
	                value = init;
	            }
	            else {
	                this.expect(':');
	                value = this.parsePatternWithDefault(params, kind);
	            }
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            this.expect(':');
	            value = this.parsePatternWithDefault(params, kind);
	        }
	        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));
	    };
	    Parser.prototype.parseObjectPattern = function (params, kind) {
	        var node = this.createNode();
	        var properties = [];
	        this.expect('{');
	        while (!this.match('}')) {
	            properties.push(this.parsePropertyPattern(params, kind));
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return this.finalize(node, new Node.ObjectPattern(properties));
	    };
	    Parser.prototype.parsePattern = function (params, kind) {
	        var pattern;
	        if (this.match('[')) {
	            pattern = this.parseArrayPattern(params, kind);
	        }
	        else if (this.match('{')) {
	            pattern = this.parseObjectPattern(params, kind);
	        }
	        else {
	            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {
	                this.tolerateUnexpectedToken(this.lookahead, messages_1.Messages.LetInLexicalBinding);
	            }
	            params.push(this.lookahead);
	            pattern = this.parseVariableIdentifier(kind);
	        }
	        return pattern;
	    };
	    Parser.prototype.parsePatternWithDefault = function (params, kind) {
	        var startToken = this.lookahead;
	        var pattern = this.parsePattern(params, kind);
	        if (this.match('=')) {
	            this.nextToken();
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = true;
	            var right = this.isolateCoverGrammar(this.parseAssignmentExpression);
	            this.context.allowYield = previousAllowYield;
	            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));
	        }
	        return pattern;
	    };
	    // https://tc39.github.io/ecma262/#sec-variable-statement
	    Parser.prototype.parseVariableIdentifier = function (kind) {
	        var node = this.createNode();
	        var token = this.nextToken();
	        if (token.type === 4 /* Keyword */ && token.value === 'yield') {
	            if (this.context.strict) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else if (!this.context.allowYield) {
	                this.throwUnexpectedToken(token);
	            }
	        }
	        else if (token.type !== 3 /* Identifier */) {
	            if (this.context.strict && token.type === 4 /* Keyword */ && this.scanner.isStrictModeReservedWord(token.value)) {
	                this.tolerateUnexpectedToken(token, messages_1.Messages.StrictReservedWord);
	            }
	            else {
	                if (this.context.strict || token.value !== 'let' || kind !== 'var') {
	                    this.throwUnexpectedToken(token);
	                }
	            }
	        }
	        else if ((this.context.isModule || this.context.await) && token.type === 3 /* Identifier */ && token.value === 'await') {
	            this.tolerateUnexpectedToken(token);
	        }
	        return this.finalize(node, new Node.Identifier(token.value));
	    };
	    Parser.prototype.parseVariableDeclaration = function (options) {
	        var node = this.createNode();
	        var params = [];
	        var id = this.parsePattern(params, 'var');
	        if (this.context.strict && id.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(id.name)) {
	                this.tolerateError(messages_1.Messages.StrictVarName);
	            }
	        }
	        var init = null;
	        if (this.match('=')) {
	            this.nextToken();
	            init = this.isolateCoverGrammar(this.parseAssignmentExpression);
	        }
	        else if (id.type !== syntax_1.Syntax.Identifier && !options.inFor) {
	            this.expect('=');
	        }
	        return this.finalize(node, new Node.VariableDeclarator(id, init));
	    };
	    Parser.prototype.parseVariableDeclarationList = function (options) {
	        var opt = { inFor: options.inFor };
	        var list = [];
	        list.push(this.parseVariableDeclaration(opt));
	        while (this.match(',')) {
	            this.nextToken();
	            list.push(this.parseVariableDeclaration(opt));
	        }
	        return list;
	    };
	    Parser.prototype.parseVariableStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('var');
	        var declarations = this.parseVariableDeclarationList({ inFor: false });
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));
	    };
	    // https://tc39.github.io/ecma262/#sec-empty-statement
	    Parser.prototype.parseEmptyStatement = function () {
	        var node = this.createNode();
	        this.expect(';');
	        return this.finalize(node, new Node.EmptyStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-expression-statement
	    Parser.prototype.parseExpressionStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ExpressionStatement(expr));
	    };
	    // https://tc39.github.io/ecma262/#sec-if-statement
	    Parser.prototype.parseIfClause = function () {
	        if (this.context.strict && this.matchKeyword('function')) {
	            this.tolerateError(messages_1.Messages.StrictFunction);
	        }
	        return this.parseStatement();
	    };
	    Parser.prototype.parseIfStatement = function () {
	        var node = this.createNode();
	        var consequent;
	        var alternate = null;
	        this.expectKeyword('if');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            consequent = this.parseIfClause();
	            if (this.matchKeyword('else')) {
	                this.nextToken();
	                alternate = this.parseIfClause();
	            }
	        }
	        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));
	    };
	    // https://tc39.github.io/ecma262/#sec-do-while-statement
	    Parser.prototype.parseDoWhileStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('do');
	        var previousInIteration = this.context.inIteration;
	        this.context.inIteration = true;
	        var body = this.parseStatement();
	        this.context.inIteration = previousInIteration;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	        }
	        else {
	            this.expect(')');
	            if (this.match(';')) {
	                this.nextToken();
	            }
	        }
	        return this.finalize(node, new Node.DoWhileStatement(body, test));
	    };
	    // https://tc39.github.io/ecma262/#sec-while-statement
	    Parser.prototype.parseWhileStatement = function () {
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('while');
	        this.expect('(');
	        var test = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.parseStatement();
	            this.context.inIteration = previousInIteration;
	        }
	        return this.finalize(node, new Node.WhileStatement(test, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-for-statement
	    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements
	    Parser.prototype.parseForStatement = function () {
	        var init = null;
	        var test = null;
	        var update = null;
	        var forIn = true;
	        var left, right;
	        var node = this.createNode();
	        this.expectKeyword('for');
	        this.expect('(');
	        if (this.match(';')) {
	            this.nextToken();
	        }
	        else {
	            if (this.matchKeyword('var')) {
	                init = this.createNode();
	                this.nextToken();
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                var declarations = this.parseVariableDeclarationList({ inFor: true });
	                this.context.allowIn = previousAllowIn;
	                if (declarations.length === 1 && this.matchKeyword('in')) {
	                    var decl = declarations[0];
	                    if (decl.init && (decl.id.type === syntax_1.Syntax.ArrayPattern || decl.id.type === syntax_1.Syntax.ObjectPattern || this.context.strict)) {
	                        this.tolerateError(messages_1.Messages.ForInOfLoopInitializer, 'for-in');
	                    }
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));
	                    this.expect(';');
	                }
	            }
	            else if (this.matchKeyword('const') || this.matchKeyword('let')) {
	                init = this.createNode();
	                var kind = this.nextToken().value;
	                if (!this.context.strict && this.lookahead.value === 'in') {
	                    init = this.finalize(init, new Node.Identifier(kind));
	                    this.nextToken();
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else {
	                    var previousAllowIn = this.context.allowIn;
	                    this.context.allowIn = false;
	                    var declarations = this.parseBindingList(kind, { inFor: true });
	                    this.context.allowIn = previousAllowIn;
	                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseExpression();
	                        init = null;
	                    }
	                    else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                        this.nextToken();
	                        left = init;
	                        right = this.parseAssignmentExpression();
	                        init = null;
	                        forIn = false;
	                    }
	                    else {
	                        this.consumeSemicolon();
	                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));
	                    }
	                }
	            }
	            else {
	                var initStartToken = this.lookahead;
	                var previousAllowIn = this.context.allowIn;
	                this.context.allowIn = false;
	                init = this.inheritCoverGrammar(this.parseAssignmentExpression);
	                this.context.allowIn = previousAllowIn;
	                if (this.matchKeyword('in')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForIn);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseExpression();
	                    init = null;
	                }
	                else if (this.matchContextualKeyword('of')) {
	                    if (!this.context.isAssignmentTarget || init.type === syntax_1.Syntax.AssignmentExpression) {
	                        this.tolerateError(messages_1.Messages.InvalidLHSInForLoop);
	                    }
	                    this.nextToken();
	                    this.reinterpretExpressionAsPattern(init);
	                    left = init;
	                    right = this.parseAssignmentExpression();
	                    init = null;
	                    forIn = false;
	                }
	                else {
	                    if (this.match(',')) {
	                        var initSeq = [init];
	                        while (this.match(',')) {
	                            this.nextToken();
	                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
	                        }
	                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));
	                    }
	                    this.expect(';');
	                }
	            }
	        }
	        if (typeof left === 'undefined') {
	            if (!this.match(';')) {
	                test = this.parseExpression();
	            }
	            this.expect(';');
	            if (!this.match(')')) {
	                update = this.parseExpression();
	            }
	        }
	        var body;
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            var previousInIteration = this.context.inIteration;
	            this.context.inIteration = true;
	            body = this.isolateCoverGrammar(this.parseStatement);
	            this.context.inIteration = previousInIteration;
	        }
	        return (typeof left === 'undefined') ?
	            this.finalize(node, new Node.ForStatement(init, test, update, body)) :
	            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :
	                this.finalize(node, new Node.ForOfStatement(left, right, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-continue-statement
	    Parser.prototype.parseContinueStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('continue');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            label = id;
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration) {
	            this.throwError(messages_1.Messages.IllegalContinue);
	        }
	        return this.finalize(node, new Node.ContinueStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-break-statement
	    Parser.prototype.parseBreakStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('break');
	        var label = null;
	        if (this.lookahead.type === 3 /* Identifier */ && !this.hasLineTerminator) {
	            var id = this.parseVariableIdentifier();
	            var key = '$' + id.name;
	            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.UnknownLabel, id.name);
	            }
	            label = id;
	        }
	        this.consumeSemicolon();
	        if (label === null && !this.context.inIteration && !this.context.inSwitch) {
	            this.throwError(messages_1.Messages.IllegalBreak);
	        }
	        return this.finalize(node, new Node.BreakStatement(label));
	    };
	    // https://tc39.github.io/ecma262/#sec-return-statement
	    Parser.prototype.parseReturnStatement = function () {
	        if (!this.context.inFunctionBody) {
	            this.tolerateError(messages_1.Messages.IllegalReturn);
	        }
	        var node = this.createNode();
	        this.expectKeyword('return');
	        var hasArgument = (!this.match(';') && !this.match('}') &&
	            !this.hasLineTerminator && this.lookahead.type !== 2 /* EOF */) ||
	            this.lookahead.type === 8 /* StringLiteral */ ||
	            this.lookahead.type === 10 /* Template */;
	        var argument = hasArgument ? this.parseExpression() : null;
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ReturnStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-with-statement
	    Parser.prototype.parseWithStatement = function () {
	        if (this.context.strict) {
	            this.tolerateError(messages_1.Messages.StrictModeWith);
	        }
	        var node = this.createNode();
	        var body;
	        this.expectKeyword('with');
	        this.expect('(');
	        var object = this.parseExpression();
	        if (!this.match(')') && this.config.tolerant) {
	            this.tolerateUnexpectedToken(this.nextToken());
	            body = this.finalize(this.createNode(), new Node.EmptyStatement());
	        }
	        else {
	            this.expect(')');
	            body = this.parseStatement();
	        }
	        return this.finalize(node, new Node.WithStatement(object, body));
	    };
	    // https://tc39.github.io/ecma262/#sec-switch-statement
	    Parser.prototype.parseSwitchCase = function () {
	        var node = this.createNode();
	        var test;
	        if (this.matchKeyword('default')) {
	            this.nextToken();
	            test = null;
	        }
	        else {
	            this.expectKeyword('case');
	            test = this.parseExpression();
	        }
	        this.expect(':');
	        var consequent = [];
	        while (true) {
	            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {
	                break;
	            }
	            consequent.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.SwitchCase(test, consequent));
	    };
	    Parser.prototype.parseSwitchStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('switch');
	        this.expect('(');
	        var discriminant = this.parseExpression();
	        this.expect(')');
	        var previousInSwitch = this.context.inSwitch;
	        this.context.inSwitch = true;
	        var cases = [];
	        var defaultFound = false;
	        this.expect('{');
	        while (true) {
	            if (this.match('}')) {
	                break;
	            }
	            var clause = this.parseSwitchCase();
	            if (clause.test === null) {
	                if (defaultFound) {
	                    this.throwError(messages_1.Messages.MultipleDefaultsInSwitch);
	                }
	                defaultFound = true;
	            }
	            cases.push(clause);
	        }
	        this.expect('}');
	        this.context.inSwitch = previousInSwitch;
	        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));
	    };
	    // https://tc39.github.io/ecma262/#sec-labelled-statements
	    Parser.prototype.parseLabelledStatement = function () {
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var statement;
	        if ((expr.type === syntax_1.Syntax.Identifier) && this.match(':')) {
	            this.nextToken();
	            var id = expr;
	            var key = '$' + id.name;
	            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {
	                this.throwError(messages_1.Messages.Redeclaration, 'Label', id.name);
	            }
	            this.context.labelSet[key] = true;
	            var body = void 0;
	            if (this.matchKeyword('class')) {
	                this.tolerateUnexpectedToken(this.lookahead);
	                body = this.parseClassDeclaration();
	            }
	            else if (this.matchKeyword('function')) {
	                var token = this.lookahead;
	                var declaration = this.parseFunctionDeclaration();
	                if (this.context.strict) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunction);
	                }
	                else if (declaration.generator) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.GeneratorInLegacyContext);
	                }
	                body = declaration;
	            }
	            else {
	                body = this.parseStatement();
	            }
	            delete this.context.labelSet[key];
	            statement = new Node.LabeledStatement(id, body);
	        }
	        else {
	            this.consumeSemicolon();
	            statement = new Node.ExpressionStatement(expr);
	        }
	        return this.finalize(node, statement);
	    };
	    // https://tc39.github.io/ecma262/#sec-throw-statement
	    Parser.prototype.parseThrowStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('throw');
	        if (this.hasLineTerminator) {
	            this.throwError(messages_1.Messages.NewlineAfterThrow);
	        }
	        var argument = this.parseExpression();
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ThrowStatement(argument));
	    };
	    // https://tc39.github.io/ecma262/#sec-try-statement
	    Parser.prototype.parseCatchClause = function () {
	        var node = this.createNode();
	        this.expectKeyword('catch');
	        this.expect('(');
	        if (this.match(')')) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        var params = [];
	        var param = this.parsePattern(params);
	        var paramMap = {};
	        for (var i = 0; i < params.length; i++) {
	            var key = '$' + params[i].value;
	            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
	                this.tolerateError(messages_1.Messages.DuplicateBinding, params[i].value);
	            }
	            paramMap[key] = true;
	        }
	        if (this.context.strict && param.type === syntax_1.Syntax.Identifier) {
	            if (this.scanner.isRestrictedWord(param.name)) {
	                this.tolerateError(messages_1.Messages.StrictCatchVariable);
	            }
	        }
	        this.expect(')');
	        var body = this.parseBlock();
	        return this.finalize(node, new Node.CatchClause(param, body));
	    };
	    Parser.prototype.parseFinallyClause = function () {
	        this.expectKeyword('finally');
	        return this.parseBlock();
	    };
	    Parser.prototype.parseTryStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('try');
	        var block = this.parseBlock();
	        var handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;
	        var finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;
	        if (!handler && !finalizer) {
	            this.throwError(messages_1.Messages.NoCatchOrFinally);
	        }
	        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));
	    };
	    // https://tc39.github.io/ecma262/#sec-debugger-statement
	    Parser.prototype.parseDebuggerStatement = function () {
	        var node = this.createNode();
	        this.expectKeyword('debugger');
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.DebuggerStatement());
	    };
	    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations
	    Parser.prototype.parseStatement = function () {
	        var statement;
	        switch (this.lookahead.type) {
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 8 /* StringLiteral */:
	            case 10 /* Template */:
	            case 9 /* RegularExpression */:
	                statement = this.parseExpressionStatement();
	                break;
	            case 7 /* Punctuator */:
	                var value = this.lookahead.value;
	                if (value === '{') {
	                    statement = this.parseBlock();
	                }
	                else if (value === '(') {
	                    statement = this.parseExpressionStatement();
	                }
	                else if (value === ';') {
	                    statement = this.parseEmptyStatement();
	                }
	                else {
	                    statement = this.parseExpressionStatement();
	                }
	                break;
	            case 3 /* Identifier */:
	                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
	                break;
	            case 4 /* Keyword */:
	                switch (this.lookahead.value) {
	                    case 'break':
	                        statement = this.parseBreakStatement();
	                        break;
	                    case 'continue':
	                        statement = this.parseContinueStatement();
	                        break;
	                    case 'debugger':
	                        statement = this.parseDebuggerStatement();
	                        break;
	                    case 'do':
	                        statement = this.parseDoWhileStatement();
	                        break;
	                    case 'for':
	                        statement = this.parseForStatement();
	                        break;
	                    case 'function':
	                        statement = this.parseFunctionDeclaration();
	                        break;
	                    case 'if':
	                        statement = this.parseIfStatement();
	                        break;
	                    case 'return':
	                        statement = this.parseReturnStatement();
	                        break;
	                    case 'switch':
	                        statement = this.parseSwitchStatement();
	                        break;
	                    case 'throw':
	                        statement = this.parseThrowStatement();
	                        break;
	                    case 'try':
	                        statement = this.parseTryStatement();
	                        break;
	                    case 'var':
	                        statement = this.parseVariableStatement();
	                        break;
	                    case 'while':
	                        statement = this.parseWhileStatement();
	                        break;
	                    case 'with':
	                        statement = this.parseWithStatement();
	                        break;
	                    default:
	                        statement = this.parseExpressionStatement();
	                        break;
	                }
	                break;
	            default:
	                statement = this.throwUnexpectedToken(this.lookahead);
	        }
	        return statement;
	    };
	    // https://tc39.github.io/ecma262/#sec-function-definitions
	    Parser.prototype.parseFunctionSourceElements = function () {
	        var node = this.createNode();
	        this.expect('{');
	        var body = this.parseDirectivePrologues();
	        var previousLabelSet = this.context.labelSet;
	        var previousInIteration = this.context.inIteration;
	        var previousInSwitch = this.context.inSwitch;
	        var previousInFunctionBody = this.context.inFunctionBody;
	        this.context.labelSet = {};
	        this.context.inIteration = false;
	        this.context.inSwitch = false;
	        this.context.inFunctionBody = true;
	        while (this.lookahead.type !== 2 /* EOF */) {
	            if (this.match('}')) {
	                break;
	            }
	            body.push(this.parseStatementListItem());
	        }
	        this.expect('}');
	        this.context.labelSet = previousLabelSet;
	        this.context.inIteration = previousInIteration;
	        this.context.inSwitch = previousInSwitch;
	        this.context.inFunctionBody = previousInFunctionBody;
	        return this.finalize(node, new Node.BlockStatement(body));
	    };
	    Parser.prototype.validateParam = function (options, param, name) {
	        var key = '$' + name;
	        if (this.context.strict) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        else if (!options.firstRestricted) {
	            if (this.scanner.isRestrictedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictParamName;
	            }
	            else if (this.scanner.isStrictModeReservedWord(name)) {
	                options.firstRestricted = param;
	                options.message = messages_1.Messages.StrictReservedWord;
	            }
	            else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
	                options.stricted = param;
	                options.message = messages_1.Messages.StrictParamDupe;
	            }
	        }
	        /* istanbul ignore next */
	        if (typeof Object.defineProperty === 'function') {
	            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });
	        }
	        else {
	            options.paramSet[key] = true;
	        }
	    };
	    Parser.prototype.parseRestElement = function (params) {
	        var node = this.createNode();
	        this.expect('...');
	        var arg = this.parsePattern(params);
	        if (this.match('=')) {
	            this.throwError(messages_1.Messages.DefaultRestParameter);
	        }
	        if (!this.match(')')) {
	            this.throwError(messages_1.Messages.ParameterAfterRestParameter);
	        }
	        return this.finalize(node, new Node.RestElement(arg));
	    };
	    Parser.prototype.parseFormalParameter = function (options) {
	        var params = [];
	        var param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);
	        for (var i = 0; i < params.length; i++) {
	            this.validateParam(options, params[i], params[i].value);
	        }
	        options.simple = options.simple && (param instanceof Node.Identifier);
	        options.params.push(param);
	    };
	    Parser.prototype.parseFormalParameters = function (firstRestricted) {
	        var options;
	        options = {
	            simple: true,
	            params: [],
	            firstRestricted: firstRestricted
	        };
	        this.expect('(');
	        if (!this.match(')')) {
	            options.paramSet = {};
	            while (this.lookahead.type !== 2 /* EOF */) {
	                this.parseFormalParameter(options);
	                if (this.match(')')) {
	                    break;
	                }
	                this.expect(',');
	                if (this.match(')')) {
	                    break;
	                }
	            }
	        }
	        this.expect(')');
	        return {
	            simple: options.simple,
	            params: options.params,
	            stricted: options.stricted,
	            firstRestricted: options.firstRestricted,
	            message: options.message
	        };
	    };
	    Parser.prototype.matchAsyncFunction = function () {
	        var match = this.matchContextualKeyword('async');
	        if (match) {
	            var state = this.scanner.saveState();
	            this.scanner.scanComments();
	            var next = this.scanner.lex();
	            this.scanner.restoreState(state);
	            match = (state.lineNumber === next.lineNumber) && (next.type === 4 /* Keyword */) && (next.value === 'function');
	        }
	        return match;
	    };
	    Parser.prototype.parseFunctionDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted = null;
	        if (!identifierIsOptional || !this.match('(')) {
	            var token = this.lookahead;
	            id = this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :
	            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));
	    };
	    Parser.prototype.parseFunctionExpression = function () {
	        var node = this.createNode();
	        var isAsync = this.matchContextualKeyword('async');
	        if (isAsync) {
	            this.nextToken();
	        }
	        this.expectKeyword('function');
	        var isGenerator = isAsync ? false : this.match('*');
	        if (isGenerator) {
	            this.nextToken();
	        }
	        var message;
	        var id = null;
	        var firstRestricted;
	        var previousAllowAwait = this.context.await;
	        var previousAllowYield = this.context.allowYield;
	        this.context.await = isAsync;
	        this.context.allowYield = !isGenerator;
	        if (!this.match('(')) {
	            var token = this.lookahead;
	            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();
	            if (this.context.strict) {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.StrictFunctionName);
	                }
	            }
	            else {
	                if (this.scanner.isRestrictedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictFunctionName;
	                }
	                else if (this.scanner.isStrictModeReservedWord(token.value)) {
	                    firstRestricted = token;
	                    message = messages_1.Messages.StrictReservedWord;
	                }
	            }
	        }
	        var formalParameters = this.parseFormalParameters(firstRestricted);
	        var params = formalParameters.params;
	        var stricted = formalParameters.stricted;
	        firstRestricted = formalParameters.firstRestricted;
	        if (formalParameters.message) {
	            message = formalParameters.message;
	        }
	        var previousStrict = this.context.strict;
	        var previousAllowStrictDirective = this.context.allowStrictDirective;
	        this.context.allowStrictDirective = formalParameters.simple;
	        var body = this.parseFunctionSourceElements();
	        if (this.context.strict && firstRestricted) {
	            this.throwUnexpectedToken(firstRestricted, message);
	        }
	        if (this.context.strict && stricted) {
	            this.tolerateUnexpectedToken(stricted, message);
	        }
	        this.context.strict = previousStrict;
	        this.context.allowStrictDirective = previousAllowStrictDirective;
	        this.context.await = previousAllowAwait;
	        this.context.allowYield = previousAllowYield;
	        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :
	            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive
	    Parser.prototype.parseDirective = function () {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var expr = this.parseExpression();
	        var directive = (expr.type === syntax_1.Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;
	        this.consumeSemicolon();
	        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));
	    };
	    Parser.prototype.parseDirectivePrologues = function () {
	        var firstRestricted = null;
	        var body = [];
	        while (true) {
	            var token = this.lookahead;
	            if (token.type !== 8 /* StringLiteral */) {
	                break;
	            }
	            var statement = this.parseDirective();
	            body.push(statement);
	            var directive = statement.directive;
	            if (typeof directive !== 'string') {
	                break;
	            }
	            if (directive === 'use strict') {
	                this.context.strict = true;
	                if (firstRestricted) {
	                    this.tolerateUnexpectedToken(firstRestricted, messages_1.Messages.StrictOctalLiteral);
	                }
	                if (!this.context.allowStrictDirective) {
	                    this.tolerateUnexpectedToken(token, messages_1.Messages.IllegalLanguageModeDirective);
	                }
	            }
	            else {
	                if (!firstRestricted && token.octal) {
	                    firstRestricted = token;
	                }
	            }
	        }
	        return body;
	    };
	    // https://tc39.github.io/ecma262/#sec-method-definitions
	    Parser.prototype.qualifiedPropertyName = function (token) {
	        switch (token.type) {
	            case 3 /* Identifier */:
	            case 8 /* StringLiteral */:
	            case 1 /* BooleanLiteral */:
	            case 5 /* NullLiteral */:
	            case 6 /* NumericLiteral */:
	            case 4 /* Keyword */:
	                return true;
	            case 7 /* Punctuator */:
	                return token.value === '[';
	        }
	        return false;
	    };
	    Parser.prototype.parseGetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length > 0) {
	            this.tolerateError(messages_1.Messages.BadGetterArity);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseSetterMethod = function () {
	        var node = this.createNode();
	        var isGenerator = false;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = !isGenerator;
	        var formalParameters = this.parseFormalParameters();
	        if (formalParameters.params.length !== 1) {
	            this.tolerateError(messages_1.Messages.BadSetterArity);
	        }
	        else if (formalParameters.params[0] instanceof Node.RestElement) {
	            this.tolerateError(messages_1.Messages.BadSetterRestParameter);
	        }
	        var method = this.parsePropertyMethod(formalParameters);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));
	    };
	    Parser.prototype.parseGeneratorMethod = function () {
	        var node = this.createNode();
	        var isGenerator = true;
	        var previousAllowYield = this.context.allowYield;
	        this.context.allowYield = true;
	        var params = this.parseFormalParameters();
	        this.context.allowYield = false;
	        var method = this.parsePropertyMethod(params);
	        this.context.allowYield = previousAllowYield;
	        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));
	    };
	    // https://tc39.github.io/ecma262/#sec-generator-function-definitions
	    Parser.prototype.isStartOfExpression = function () {
	        var start = true;
	        var value = this.lookahead.value;
	        switch (this.lookahead.type) {
	            case 7 /* Punctuator */:
	                start = (value === '[') || (value === '(') || (value === '{') ||
	                    (value === '+') || (value === '-') ||
	                    (value === '!') || (value === '~') ||
	                    (value === '++') || (value === '--') ||
	                    (value === '/') || (value === '/='); // regular expression literal
	                break;
	            case 4 /* Keyword */:
	                start = (value === 'class') || (value === 'delete') ||
	                    (value === 'function') || (value === 'let') || (value === 'new') ||
	                    (value === 'super') || (value === 'this') || (value === 'typeof') ||
	                    (value === 'void') || (value === 'yield');
	                break;
	        }
	        return start;
	    };
	    Parser.prototype.parseYieldExpression = function () {
	        var node = this.createNode();
	        this.expectKeyword('yield');
	        var argument = null;
	        var delegate = false;
	        if (!this.hasLineTerminator) {
	            var previousAllowYield = this.context.allowYield;
	            this.context.allowYield = false;
	            delegate = this.match('*');
	            if (delegate) {
	                this.nextToken();
	                argument = this.parseAssignmentExpression();
	            }
	            else if (this.isStartOfExpression()) {
	                argument = this.parseAssignmentExpression();
	            }
	            this.context.allowYield = previousAllowYield;
	        }
	        return this.finalize(node, new Node.YieldExpression(argument, delegate));
	    };
	    // https://tc39.github.io/ecma262/#sec-class-definitions
	    Parser.prototype.parseClassElement = function (hasConstructor) {
	        var token = this.lookahead;
	        var node = this.createNode();
	        var kind = '';
	        var key = null;
	        var value = null;
	        var computed = false;
	        var method = false;
	        var isStatic = false;
	        var isAsync = false;
	        if (this.match('*')) {
	            this.nextToken();
	        }
	        else {
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            var id = key;
	            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {
	                token = this.lookahead;
	                isStatic = true;
	                computed = this.match('[');
	                if (this.match('*')) {
	                    this.nextToken();
	                }
	                else {
	                    key = this.parseObjectPropertyKey();
	                }
	            }
	            if ((token.type === 3 /* Identifier */) && !this.hasLineTerminator && (token.value === 'async')) {
	                var punctuator = this.lookahead.value;
	                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {
	                    isAsync = true;
	                    token = this.lookahead;
	                    key = this.parseObjectPropertyKey();
	                    if (token.type === 3 /* Identifier */ && token.value === 'constructor') {
	                        this.tolerateUnexpectedToken(token, messages_1.Messages.ConstructorIsAsync);
	                    }
	                }
	            }
	        }
	        var lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);
	        if (token.type === 3 /* Identifier */) {
	            if (token.value === 'get' && lookaheadPropertyKey) {
	                kind = 'get';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                this.context.allowYield = false;
	                value = this.parseGetterMethod();
	            }
	            else if (token.value === 'set' && lookaheadPropertyKey) {
	                kind = 'set';
	                computed = this.match('[');
	                key = this.parseObjectPropertyKey();
	                value = this.parseSetterMethod();
	            }
	        }
	        else if (token.type === 7 /* Punctuator */ && token.value === '*' && lookaheadPropertyKey) {
	            kind = 'init';
	            computed = this.match('[');
	            key = this.parseObjectPropertyKey();
	            value = this.parseGeneratorMethod();
	            method = true;
	        }
	        if (!kind && key && this.match('(')) {
	            kind = 'init';
	            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();
	            method = true;
	        }
	        if (!kind) {
	            this.throwUnexpectedToken(this.lookahead);
	        }
	        if (kind === 'init') {
	            kind = 'method';
	        }
	        if (!computed) {
	            if (isStatic && this.isPropertyKey(key, 'prototype')) {
	                this.throwUnexpectedToken(token, messages_1.Messages.StaticPrototype);
	            }
	            if (!isStatic && this.isPropertyKey(key, 'constructor')) {
	                if (kind !== 'method' || !method || (value && value.generator)) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.ConstructorSpecialMethod);
	                }
	                if (hasConstructor.value) {
	                    this.throwUnexpectedToken(token, messages_1.Messages.DuplicateConstructor);
	                }
	                else {
	                    hasConstructor.value = true;
	                }
	                kind = 'constructor';
	            }
	        }
	        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));
	    };
	    Parser.prototype.parseClassElementList = function () {
	        var body = [];
	        var hasConstructor = { value: false };
	        this.expect('{');
	        while (!this.match('}')) {
	            if (this.match(';')) {
	                this.nextToken();
	            }
	            else {
	                body.push(this.parseClassElement(hasConstructor));
	            }
	        }
	        this.expect('}');
	        return body;
	    };
	    Parser.prototype.parseClassBody = function () {
	        var node = this.createNode();
	        var elementList = this.parseClassElementList();
	        return this.finalize(node, new Node.ClassBody(elementList));
	    };
	    Parser.prototype.parseClassDeclaration = function (identifierIsOptional) {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (identifierIsOptional && (this.lookahead.type !== 3 /* Identifier */)) ? null : this.parseVariableIdentifier();
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassDeclaration(id, superClass, classBody));
	    };
	    Parser.prototype.parseClassExpression = function () {
	        var node = this.createNode();
	        var previousStrict = this.context.strict;
	        this.context.strict = true;
	        this.expectKeyword('class');
	        var id = (this.lookahead.type === 3 /* Identifier */) ? this.parseVariableIdentifier() : null;
	        var superClass = null;
	        if (this.matchKeyword('extends')) {
	            this.nextToken();
	            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);
	        }
	        var classBody = this.parseClassBody();
	        this.context.strict = previousStrict;
	        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));
	    };
	    // https://tc39.github.io/ecma262/#sec-scripts
	    // https://tc39.github.io/ecma262/#sec-modules
	    Parser.prototype.parseModule = function () {
	        this.context.strict = true;
	        this.context.isModule = true;
	        this.scanner.isModule = true;
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Module(body));
	    };
	    Parser.prototype.parseScript = function () {
	        var node = this.createNode();
	        var body = this.parseDirectivePrologues();
	        while (this.lookahead.type !== 2 /* EOF */) {
	            body.push(this.parseStatementListItem());
	        }
	        return this.finalize(node, new Node.Script(body));
	    };
	    // https://tc39.github.io/ecma262/#sec-imports
	    Parser.prototype.parseModuleSpecifier = function () {
	        var node = this.createNode();
	        if (this.lookahead.type !== 8 /* StringLiteral */) {
	            this.throwError(messages_1.Messages.InvalidModuleSpecifier);
	        }
	        var token = this.nextToken();
	        var raw = this.getTokenRaw(token);
	        return this.finalize(node, new Node.Literal(token.value, raw));
	    };
	    // import {<foo as bar>} ...;
	    Parser.prototype.parseImportSpecifier = function () {
	        var node = this.createNode();
	        var imported;
	        var local;
	        if (this.lookahead.type === 3 /* Identifier */) {
	            imported = this.parseVariableIdentifier();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	        }
	        else {
	            imported = this.parseIdentifierName();
	            local = imported;
	            if (this.matchContextualKeyword('as')) {
	                this.nextToken();
	                local = this.parseVariableIdentifier();
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	        }
	        return this.finalize(node, new Node.ImportSpecifier(local, imported));
	    };
	    // {foo, bar as bas}
	    Parser.prototype.parseNamedImports = function () {
	        this.expect('{');
	        var specifiers = [];
	        while (!this.match('}')) {
	            specifiers.push(this.parseImportSpecifier());
	            if (!this.match('}')) {
	                this.expect(',');
	            }
	        }
	        this.expect('}');
	        return specifiers;
	    };
	    // import <foo> ...;
	    Parser.prototype.parseImportDefaultSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportDefaultSpecifier(local));
	    };
	    // import <* as foo> ...;
	    Parser.prototype.parseImportNamespaceSpecifier = function () {
	        var node = this.createNode();
	        this.expect('*');
	        if (!this.matchContextualKeyword('as')) {
	            this.throwError(messages_1.Messages.NoAsAfterImportNamespace);
	        }
	        this.nextToken();
	        var local = this.parseIdentifierName();
	        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));
	    };
	    Parser.prototype.parseImportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalImportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('import');
	        var src;
	        var specifiers = [];
	        if (this.lookahead.type === 8 /* StringLiteral */) {
	            // import 'foo';
	            src = this.parseModuleSpecifier();
	        }
	        else {
	            if (this.match('{')) {
	                // import {bar}
	                specifiers = specifiers.concat(this.parseNamedImports());
	            }
	            else if (this.match('*')) {
	                // import * as foo
	                specifiers.push(this.parseImportNamespaceSpecifier());
	            }
	            else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {
	                // import foo
	                specifiers.push(this.parseImportDefaultSpecifier());
	                if (this.match(',')) {
	                    this.nextToken();
	                    if (this.match('*')) {
	                        // import foo, * as foo
	                        specifiers.push(this.parseImportNamespaceSpecifier());
	                    }
	                    else if (this.match('{')) {
	                        // import foo, {bar}
	                        specifiers = specifiers.concat(this.parseNamedImports());
	                    }
	                    else {
	                        this.throwUnexpectedToken(this.lookahead);
	                    }
	                }
	            }
	            else {
	                this.throwUnexpectedToken(this.nextToken());
	            }
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            src = this.parseModuleSpecifier();
	        }
	        this.consumeSemicolon();
	        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));
	    };
	    // https://tc39.github.io/ecma262/#sec-exports
	    Parser.prototype.parseExportSpecifier = function () {
	        var node = this.createNode();
	        var local = this.parseIdentifierName();
	        var exported = local;
	        if (this.matchContextualKeyword('as')) {
	            this.nextToken();
	            exported = this.parseIdentifierName();
	        }
	        return this.finalize(node, new Node.ExportSpecifier(local, exported));
	    };
	    Parser.prototype.parseExportDeclaration = function () {
	        if (this.context.inFunctionBody) {
	            this.throwError(messages_1.Messages.IllegalExportDeclaration);
	        }
	        var node = this.createNode();
	        this.expectKeyword('export');
	        var exportDeclaration;
	        if (this.matchKeyword('default')) {
	            // export default ...
	            this.nextToken();
	            if (this.matchKeyword('function')) {
	                // export default function foo () {}
	                // export default function () {}
	                var declaration = this.parseFunctionDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchKeyword('class')) {
	                // export default class foo {}
	                var declaration = this.parseClassDeclaration(true);
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else if (this.matchContextualKeyword('async')) {
	                // export default async function f () {}
	                // export default async function () {}
	                // export default async x => x
	                var declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	            else {
	                if (this.matchContextualKeyword('from')) {
	                    this.throwError(messages_1.Messages.UnexpectedToken, this.lookahead.value);
	                }
	                // export default {};
	                // export default [];
	                // export default (1 + 2);
	                var declaration = this.match('{') ? this.parseObjectInitializer() :
	                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();
	                this.consumeSemicolon();
	                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));
	            }
	        }
	        else if (this.match('*')) {
	            // export * from 'foo';
	            this.nextToken();
	            if (!this.matchContextualKeyword('from')) {
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            this.nextToken();
	            var src = this.parseModuleSpecifier();
	            this.consumeSemicolon();
	            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));
	        }
	        else if (this.lookahead.type === 4 /* Keyword */) {
	            // export var f = 1;
	            var declaration = void 0;
	            switch (this.lookahead.value) {
	                case 'let':
	                case 'const':
	                    declaration = this.parseLexicalDeclaration({ inFor: false });
	                    break;
	                case 'var':
	                case 'class':
	                case 'function':
	                    declaration = this.parseStatementListItem();
	                    break;
	                default:
	                    this.throwUnexpectedToken(this.lookahead);
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else if (this.matchAsyncFunction()) {
	            var declaration = this.parseFunctionDeclaration();
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));
	        }
	        else {
	            var specifiers = [];
	            var source = null;
	            var isExportFromIdentifier = false;
	            this.expect('{');
	            while (!this.match('}')) {
	                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');
	                specifiers.push(this.parseExportSpecifier());
	                if (!this.match('}')) {
	                    this.expect(',');
	                }
	            }
	            this.expect('}');
	            if (this.matchContextualKeyword('from')) {
	                // export {default} from 'foo';
	                // export {foo} from 'foo';
	                this.nextToken();
	                source = this.parseModuleSpecifier();
	                this.consumeSemicolon();
	            }
	            else if (isExportFromIdentifier) {
	                // export {default}; // missing fromClause
	                var message = this.lookahead.value ? messages_1.Messages.UnexpectedToken : messages_1.Messages.MissingFromClause;
	                this.throwError(message, this.lookahead.value);
	            }
	            else {
	                // export {foo};
	                this.consumeSemicolon();
	            }
	            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));
	        }
	        return exportDeclaration;
	    };
	    return Parser;
	}());
	exports.Parser = Parser;


/***/ },
/* 9 */
/***/ function(module, exports) {
	// Ensure the condition is true, otherwise throw an error.
	// This is only to have a better contract semantic, i.e. another safety net
	// to catch a logic error. The condition shall be fulfilled in normal case.
	// Do NOT use this to enforce a certain condition on any user input.
	Object.defineProperty(exports, "__esModule", { value: true });
	function assert(condition, message) {
	    /* istanbul ignore if */
	    if (!condition) {
	        throw new Error('ASSERT: ' + message);
	    }
	}
	exports.assert = assert;


/***/ },
/* 10 */
/***/ function(module, exports) {
	/* tslint:disable:max-classes-per-file */
	Object.defineProperty(exports, "__esModule", { value: true });
	var ErrorHandler = (function () {
	    function ErrorHandler() {
	        this.errors = [];
	        this.tolerant = false;
	    }
	    ErrorHandler.prototype.recordError = function (error) {
	        this.errors.push(error);
	    };
	    ErrorHandler.prototype.tolerate = function (error) {
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    ErrorHandler.prototype.constructError = function (msg, column) {
	        var error = new Error(msg);
	        try {
	            throw error;
	        }
	        catch (base) {
	            /* istanbul ignore else */
	            if (Object.create && Object.defineProperty) {
	                error = Object.create(base);
	                Object.defineProperty(error, 'column', { value: column });
	            }
	        }
	        /* istanbul ignore next */
	        return error;
	    };
	    ErrorHandler.prototype.createError = function (index, line, col, description) {
	        var msg = 'Line ' + line + ': ' + description;
	        var error = this.constructError(msg, col);
	        error.index = index;
	        error.lineNumber = line;
	        error.description = description;
	        return error;
	    };
	    ErrorHandler.prototype.throwError = function (index, line, col, description) {
	        throw this.createError(index, line, col, description);
	    };
	    ErrorHandler.prototype.tolerateError = function (index, line, col, description) {
	        var error = this.createError(index, line, col, description);
	        if (this.tolerant) {
	            this.recordError(error);
	        }
	        else {
	            throw error;
	        }
	    };
	    return ErrorHandler;
	}());
	exports.ErrorHandler = ErrorHandler;


/***/ },
/* 11 */
/***/ function(module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	// Error messages should be identical to V8.
	exports.Messages = {
	    BadGetterArity: 'Getter must not have any formal parameters',
	    BadSetterArity: 'Setter must have exactly one formal parameter',
	    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',
	    ConstructorIsAsync: 'Class constructor may not be an async method',
	    ConstructorSpecialMethod: 'Class constructor may not be an accessor',
	    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',
	    DefaultRestParameter: 'Unexpected token =',
	    DuplicateBinding: 'Duplicate binding %0',
	    DuplicateConstructor: 'A class may only have one constructor',
	    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
	    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',
	    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',
	    IllegalBreak: 'Illegal break statement',
	    IllegalContinue: 'Illegal continue statement',
	    IllegalExportDeclaration: 'Unexpected token',
	    IllegalImportDeclaration: 'Unexpected token',
	    IllegalLanguageModeDirective: 'Illegal \'use strict\' directive in function with non-simple parameter list',
	    IllegalReturn: 'Illegal return statement',
	    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',
	    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',
	    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
	    InvalidLHSInForIn: 'Invalid left-hand side in for-in',
	    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
	    InvalidModuleSpecifier: 'Unexpected token',
	    InvalidRegExp: 'Invalid regular expression',
	    LetInLexicalBinding: 'let is disallowed as a lexically bound name',
	    MissingFromClause: 'Unexpected token',
	    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
	    NewlineAfterThrow: 'Illegal newline after throw',
	    NoAsAfterImportNamespace: 'Unexpected token',
	    NoCatchOrFinally: 'Missing catch or finally after try',
	    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
	    Redeclaration: '%0 \'%1\' has already been declared',
	    StaticPrototype: 'Classes may not have static property named prototype',
	    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
	    StrictDelete: 'Delete of an unqualified identifier in strict mode.',
	    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',
	    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
	    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
	    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
	    StrictModeWith: 'Strict mode code may not include a with statement',
	    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
	    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
	    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
	    StrictReservedWord: 'Use of future reserved word in strict mode',
	    StrictVarName: 'Variable name may not be eval or arguments in strict mode',
	    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
	    UnexpectedEOS: 'Unexpected end of input',
	    UnexpectedIdentifier: 'Unexpected identifier',
	    UnexpectedNumber: 'Unexpected number',
	    UnexpectedReserved: 'Unexpected reserved word',
	    UnexpectedString: 'Unexpected string',
	    UnexpectedTemplate: 'Unexpected quasi %0',
	    UnexpectedToken: 'Unexpected token %0',
	    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',
	    UnknownLabel: 'Undefined label \'%0\'',
	    UnterminatedRegExp: 'Invalid regular expression: missing /'
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var assert_1 = __webpack_require__(9);
	var character_1 = __webpack_require__(4);
	var messages_1 = __webpack_require__(11);
	function hexValue(ch) {
	    return '0123456789abcdef'.indexOf(ch.toLowerCase());
	}
	function octalValue(ch) {
	    return '01234567'.indexOf(ch);
	}
	var Scanner = (function () {
	    function Scanner(code, handler) {
	        this.source = code;
	        this.errorHandler = handler;
	        this.trackComment = false;
	        this.isModule = false;
	        this.length = code.length;
	        this.index = 0;
	        this.lineNumber = (code.length > 0) ? 1 : 0;
	        this.lineStart = 0;
	        this.curlyStack = [];
	    }
	    Scanner.prototype.saveState = function () {
	        return {
	            index: this.index,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart
	        };
	    };
	    Scanner.prototype.restoreState = function (state) {
	        this.index = state.index;
	        this.lineNumber = state.lineNumber;
	        this.lineStart = state.lineStart;
	    };
	    Scanner.prototype.eof = function () {
	        return this.index >= this.length;
	    };
	    Scanner.prototype.throwUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        return this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    Scanner.prototype.tolerateUnexpectedToken = function (message) {
	        if (message === void 0) { message = messages_1.Messages.UnexpectedTokenIllegal; }
	        this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, message);
	    };
	    // https://tc39.github.io/ecma262/#sec-comments
	    Scanner.prototype.skipSingleLineComment = function (offset) {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - offset;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - offset
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            ++this.index;
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (this.trackComment) {
	                    loc.end = {
	                        line: this.lineNumber,
	                        column: this.index - this.lineStart - 1
	                    };
	                    var entry = {
	                        multiLine: false,
	                        slice: [start + offset, this.index - 1],
	                        range: [start, this.index - 1],
	                        loc: loc
	                    };
	                    comments.push(entry);
	                }
	                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                return comments;
	            }
	        }
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: false,
	                slice: [start + offset, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        return comments;
	    };
	    Scanner.prototype.skipMultiLineComment = function () {
	        var comments = [];
	        var start, loc;
	        if (this.trackComment) {
	            comments = [];
	            start = this.index - 2;
	            loc = {
	                start: {
	                    line: this.lineNumber,
	                    column: this.index - this.lineStart - 2
	                },
	                end: {}
	            };
	        }
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isLineTerminator(ch)) {
	                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                ++this.index;
	                this.lineStart = this.index;
	            }
	            else if (ch === 0x2A) {
	                // Block comment ends with '*/'.
	                if (this.source.charCodeAt(this.index + 1) === 0x2F) {
	                    this.index += 2;
	                    if (this.trackComment) {
	                        loc.end = {
	                            line: this.lineNumber,
	                            column: this.index - this.lineStart
	                        };
	                        var entry = {
	                            multiLine: true,
	                            slice: [start + 2, this.index - 2],
	                            range: [start, this.index],
	                            loc: loc
	                        };
	                        comments.push(entry);
	                    }
	                    return comments;
	                }
	                ++this.index;
	            }
	            else {
	                ++this.index;
	            }
	        }
	        // Ran off the end of the file - the whole thing is a comment
	        if (this.trackComment) {
	            loc.end = {
	                line: this.lineNumber,
	                column: this.index - this.lineStart
	            };
	            var entry = {
	                multiLine: true,
	                slice: [start + 2, this.index],
	                range: [start, this.index],
	                loc: loc
	            };
	            comments.push(entry);
	        }
	        this.tolerateUnexpectedToken();
	        return comments;
	    };
	    Scanner.prototype.scanComments = function () {
	        var comments;
	        if (this.trackComment) {
	            comments = [];
	        }
	        var start = (this.index === 0);
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (character_1.Character.isWhiteSpace(ch)) {
	                ++this.index;
	            }
	            else if (character_1.Character.isLineTerminator(ch)) {
	                ++this.index;
	                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {
	                    ++this.index;
	                }
	                ++this.lineNumber;
	                this.lineStart = this.index;
	                start = true;
	            }
	            else if (ch === 0x2F) {
	                ch = this.source.charCodeAt(this.index + 1);
	                if (ch === 0x2F) {
	                    this.index += 2;
	                    var comment = this.skipSingleLineComment(2);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                    start = true;
	                }
	                else if (ch === 0x2A) {
	                    this.index += 2;
	                    var comment = this.skipMultiLineComment();
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (start && ch === 0x2D) {
	                // U+003E is '>'
	                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {
	                    // '-->' is a single-line comment
	                    this.index += 3;
	                    var comment = this.skipSingleLineComment(3);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else if (ch === 0x3C && !this.isModule) {
	                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {
	                    this.index += 4; // `<!--`
	                    var comment = this.skipSingleLineComment(4);
	                    if (this.trackComment) {
	                        comments = comments.concat(comment);
	                    }
	                }
	                else {
	                    break;
	                }
	            }
	            else {
	                break;
	            }
	        }
	        return comments;
	    };
	    // https://tc39.github.io/ecma262/#sec-future-reserved-words
	    Scanner.prototype.isFutureReservedWord = function (id) {
	        switch (id) {
	            case 'enum':
	            case 'export':
	            case 'import':
	            case 'super':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isStrictModeReservedWord = function (id) {
	        switch (id) {
	            case 'implements':
	            case 'interface':
	            case 'package':
	            case 'private':
	            case 'protected':
	            case 'public':
	            case 'static':
	            case 'yield':
	            case 'let':
	                return true;
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.isRestrictedWord = function (id) {
	        return id === 'eval' || id === 'arguments';
	    };
	    // https://tc39.github.io/ecma262/#sec-keywords
	    Scanner.prototype.isKeyword = function (id) {
	        switch (id.length) {
	            case 2:
	                return (id === 'if') || (id === 'in') || (id === 'do');
	            case 3:
	                return (id === 'var') || (id === 'for') || (id === 'new') ||
	                    (id === 'try') || (id === 'let');
	            case 4:
	                return (id === 'this') || (id === 'else') || (id === 'case') ||
	                    (id === 'void') || (id === 'with') || (id === 'enum');
	            case 5:
	                return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                    (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                    (id === 'class') || (id === 'super');
	            case 6:
	                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                    (id === 'switch') || (id === 'export') || (id === 'import');
	            case 7:
	                return (id === 'default') || (id === 'finally') || (id === 'extends');
	            case 8:
	                return (id === 'function') || (id === 'continue') || (id === 'debugger');
	            case 10:
	                return (id === 'instanceof');
	            default:
	                return false;
	        }
	    };
	    Scanner.prototype.codePointAt = function (i) {
	        var cp = this.source.charCodeAt(i);
	        if (cp >= 0xD800 && cp <= 0xDBFF) {
	            var second = this.source.charCodeAt(i + 1);
	            if (second >= 0xDC00 && second <= 0xDFFF) {
	                var first = cp;
	                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            }
	        }
	        return cp;
	    };
	    Scanner.prototype.scanHexEscape = function (prefix) {
	        var len = (prefix === 'u') ? 4 : 2;
	        var code = 0;
	        for (var i = 0; i < len; ++i) {
	            if (!this.eof() && character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                code = code * 16 + hexValue(this.source[this.index++]);
	            }
	            else {
	                return null;
	            }
	        }
	        return String.fromCharCode(code);
	    };
	    Scanner.prototype.scanUnicodeCodePointEscape = function () {
	        var ch = this.source[this.index];
	        var code = 0;
	        // At least, one hex digit is required.
	        if (ch === '}') {
	            this.throwUnexpectedToken();
	        }
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            if (!character_1.Character.isHexDigit(ch.charCodeAt(0))) {
	                break;
	            }
	            code = code * 16 + hexValue(ch);
	        }
	        if (code > 0x10FFFF || ch !== '}') {
	            this.throwUnexpectedToken();
	        }
	        return character_1.Character.fromCodePoint(code);
	    };
	    Scanner.prototype.getIdentifier = function () {
	        var start = this.index++;
	        while (!this.eof()) {
	            var ch = this.source.charCodeAt(this.index);
	            if (ch === 0x5C) {
	                // Blackslash (U+005C) marks Unicode escape sequence.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            else if (ch >= 0xD800 && ch < 0xDFFF) {
	                // Need to handle surrogate pairs.
	                this.index = start;
	                return this.getComplexIdentifier();
	            }
	            if (character_1.Character.isIdentifierPart(ch)) {
	                ++this.index;
	            }
	            else {
	                break;
	            }
	        }
	        return this.source.slice(start, this.index);
	    };
	    Scanner.prototype.getComplexIdentifier = function () {
	        var cp = this.codePointAt(this.index);
	        var id = character_1.Character.fromCodePoint(cp);
	        this.index += id.length;
	        // '\u' (U+005C, U+0075) denotes an escaped character.
	        var ch;
	        if (cp === 0x5C) {
	            if (this.source.charCodeAt(this.index) !== 0x75) {
	                this.throwUnexpectedToken();
	            }
	            ++this.index;
	            if (this.source[this.index] === '{') {
	                ++this.index;
	                ch = this.scanUnicodeCodePointEscape();
	            }
	            else {
	                ch = this.scanHexEscape('u');
	                if (ch === null || ch === '\\' || !character_1.Character.isIdentifierStart(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken();
	                }
	            }
	            id = ch;
	        }
	        while (!this.eof()) {
	            cp = this.codePointAt(this.index);
	            if (!character_1.Character.isIdentifierPart(cp)) {
	                break;
	            }
	            ch = character_1.Character.fromCodePoint(cp);
	            id += ch;
	            this.index += ch.length;
	            // '\u' (U+005C, U+0075) denotes an escaped character.
	            if (cp === 0x5C) {
	                id = id.substr(0, id.length - 1);
	                if (this.source.charCodeAt(this.index) !== 0x75) {
	                    this.throwUnexpectedToken();
	                }
	                ++this.index;
	                if (this.source[this.index] === '{') {
	                    ++this.index;
	                    ch = this.scanUnicodeCodePointEscape();
	                }
	                else {
	                    ch = this.scanHexEscape('u');
	                    if (ch === null || ch === '\\' || !character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                        this.throwUnexpectedToken();
	                    }
	                }
	                id += ch;
	            }
	        }
	        return id;
	    };
	    Scanner.prototype.octalToDecimal = function (ch) {
	        // \0 is not octal escape sequence
	        var octal = (ch !== '0');
	        var code = octalValue(ch);
	        if (!this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	            octal = true;
	            code = code * 8 + octalValue(this.source[this.index++]);
	            // 3 digits are only allowed when string starts
	            // with 0, 1, 2, 3
	            if ('0123'.indexOf(ch) >= 0 && !this.eof() && character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                code = code * 8 + octalValue(this.source[this.index++]);
	            }
	        }
	        return {
	            code: code,
	            octal: octal
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-names-and-keywords
	    Scanner.prototype.scanIdentifier = function () {
	        var type;
	        var start = this.index;
	        // Backslash (U+005C) starts an escaped character.
	        var id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();
	        // There is no keyword or literal with only one character.
	        // Thus, it must be an identifier.
	        if (id.length === 1) {
	            type = 3 /* Identifier */;
	        }
	        else if (this.isKeyword(id)) {
	            type = 4 /* Keyword */;
	        }
	        else if (id === 'null') {
	            type = 5 /* NullLiteral */;
	        }
	        else if (id === 'true' || id === 'false') {
	            type = 1 /* BooleanLiteral */;
	        }
	        else {
	            type = 3 /* Identifier */;
	        }
	        if (type !== 3 /* Identifier */ && (start + id.length !== this.index)) {
	            var restore = this.index;
	            this.index = start;
	            this.tolerateUnexpectedToken(messages_1.Messages.InvalidEscapedReservedWord);
	            this.index = restore;
	        }
	        return {
	            type: type,
	            value: id,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-punctuators
	    Scanner.prototype.scanPunctuator = function () {
	        var start = this.index;
	        // Check for most common single-character punctuators.
	        var str = this.source[this.index];
	        switch (str) {
	            case '(':
	            case '{':
	                if (str === '{') {
	                    this.curlyStack.push('{');
	                }
	                ++this.index;
	                break;
	            case '.':
	                ++this.index;
	                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {
	                    // Spread operator: ...
	                    this.index += 2;
	                    str = '...';
	                }
	                break;
	            case '}':
	                ++this.index;
	                this.curlyStack.pop();
	                break;
	            case ')':
	            case ';':
	            case ',':
	            case '[':
	            case ']':
	            case ':':
	            case '?':
	            case '~':
	                ++this.index;
	                break;
	            default:
	                // 4-character punctuator.
	                str = this.source.substr(this.index, 4);
	                if (str === '>>>=') {
	                    this.index += 4;
	                }
	                else {
	                    // 3-character punctuators.
	                    str = str.substr(0, 3);
	                    if (str === '===' || str === '!==' || str === '>>>' ||
	                        str === '<<=' || str === '>>=' || str === '**=') {
	                        this.index += 3;
	                    }
	                    else {
	                        // 2-character punctuators.
	                        str = str.substr(0, 2);
	                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
	                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
	                            str === '++' || str === '--' || str === '<<' || str === '>>' ||
	                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
	                            str === '<=' || str === '>=' || str === '=>' || str === '**') {
	                            this.index += 2;
	                        }
	                        else {
	                            // 1-character punctuators.
	                            str = this.source[this.index];
	                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
	                                ++this.index;
	                            }
	                        }
	                    }
	                }
	        }
	        if (this.index === start) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 7 /* Punctuator */,
	            value: str,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals
	    Scanner.prototype.scanHexLiteral = function (start) {
	        var num = '';
	        while (!this.eof()) {
	            if (!character_1.Character.isHexDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt('0x' + num, 16),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanBinaryLiteral = function (start) {
	        var num = '';
	        var ch;
	        while (!this.eof()) {
	            ch = this.source[this.index];
	            if (ch !== '0' && ch !== '1') {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (num.length === 0) {
	            // only 0b or 0B
	            this.throwUnexpectedToken();
	        }
	        if (!this.eof()) {
	            ch = this.source.charCodeAt(this.index);
	            /* istanbul ignore else */
	            if (character_1.Character.isIdentifierStart(ch) || character_1.Character.isDecimalDigit(ch)) {
	                this.throwUnexpectedToken();
	            }
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 2),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.scanOctalLiteral = function (prefix, start) {
	        var num = '';
	        var octal = false;
	        if (character_1.Character.isOctalDigit(prefix.charCodeAt(0))) {
	            octal = true;
	            num = '0' + this.source[this.index++];
	        }
	        else {
	            ++this.index;
	        }
	        while (!this.eof()) {
	            if (!character_1.Character.isOctalDigit(this.source.charCodeAt(this.index))) {
	                break;
	            }
	            num += this.source[this.index++];
	        }
	        if (!octal && num.length === 0) {
	            // only 0o or 0O
	            this.throwUnexpectedToken();
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseInt(num, 8),
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.isImplicitOctalLiteral = function () {
	        // Implicit octal, unless there is a non-octal digit.
	        // (Annex B.1.1 on Numeric Literals)
	        for (var i = this.index + 1; i < this.length; ++i) {
	            var ch = this.source[i];
	            if (ch === '8' || ch === '9') {
	                return false;
	            }
	            if (!character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                return true;
	            }
	        }
	        return true;
	    };
	    Scanner.prototype.scanNumericLiteral = function () {
	        var start = this.index;
	        var ch = this.source[start];
	        assert_1.assert(character_1.Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'), 'Numeric literal must start with a decimal digit or a decimal point');
	        var num = '';
	        if (ch !== '.') {
	            num = this.source[this.index++];
	            ch = this.source[this.index];
	            // Hex number starts with '0x'.
	            // Octal number starts with '0'.
	            // Octal number in ES6 starts with '0o'.
	            // Binary number in ES6 starts with '0b'.
	            if (num === '0') {
	                if (ch === 'x' || ch === 'X') {
	                    ++this.index;
	                    return this.scanHexLiteral(start);
	                }
	                if (ch === 'b' || ch === 'B') {
	                    ++this.index;
	                    return this.scanBinaryLiteral(start);
	                }
	                if (ch === 'o' || ch === 'O') {
	                    return this.scanOctalLiteral(ch, start);
	                }
	                if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                    if (this.isImplicitOctalLiteral()) {
	                        return this.scanOctalLiteral(ch, start);
	                    }
	                }
	            }
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === '.') {
	            num += this.source[this.index++];
	            while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                num += this.source[this.index++];
	            }
	            ch = this.source[this.index];
	        }
	        if (ch === 'e' || ch === 'E') {
	            num += this.source[this.index++];
	            ch = this.source[this.index];
	            if (ch === '+' || ch === '-') {
	                num += this.source[this.index++];
	            }
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                while (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                    num += this.source[this.index++];
	                }
	            }
	            else {
	                this.throwUnexpectedToken();
	            }
	        }
	        if (character_1.Character.isIdentifierStart(this.source.charCodeAt(this.index))) {
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 6 /* NumericLiteral */,
	            value: parseFloat(num),
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-string-literals
	    Scanner.prototype.scanStringLiteral = function () {
	        var start = this.index;
	        var quote = this.source[start];
	        assert_1.assert((quote === '\'' || quote === '"'), 'String literal must starts with a quote');
	        ++this.index;
	        var octal = false;
	        var str = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === quote) {
	                quote = '';
	                break;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!ch || !character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                str += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var unescaped_1 = this.scanHexEscape(ch);
	                                if (unescaped_1 === null) {
	                                    this.throwUnexpectedToken();
	                                }
	                                str += unescaped_1;
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            str += unescaped;
	                            break;
	                        case 'n':
	                            str += '\n';
	                            break;
	                        case 'r':
	                            str += '\r';
	                            break;
	                        case 't':
	                            str += '\t';
	                            break;
	                        case 'b':
	                            str += '\b';
	                            break;
	                        case 'f':
	                            str += '\f';
	                            break;
	                        case 'v':
	                            str += '\x0B';
	                            break;
	                        case '8':
	                        case '9':
	                            str += ch;
	                            this.tolerateUnexpectedToken();
	                            break;
	                        default:
	                            if (ch && character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                var octToDec = this.octalToDecimal(ch);
	                                octal = octToDec.octal || octal;
	                                str += String.fromCharCode(octToDec.code);
	                            }
	                            else {
	                                str += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                break;
	            }
	            else {
	                str += ch;
	            }
	        }
	        if (quote !== '') {
	            this.index = start;
	            this.throwUnexpectedToken();
	        }
	        return {
	            type: 8 /* StringLiteral */,
	            value: str,
	            octal: octal,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components
	    Scanner.prototype.scanTemplate = function () {
	        var cooked = '';
	        var terminated = false;
	        var start = this.index;
	        var head = (this.source[start] === '`');
	        var tail = false;
	        var rawOffset = 2;
	        ++this.index;
	        while (!this.eof()) {
	            var ch = this.source[this.index++];
	            if (ch === '`') {
	                rawOffset = 1;
	                tail = true;
	                terminated = true;
	                break;
	            }
	            else if (ch === '$') {
	                if (this.source[this.index] === '{') {
	                    this.curlyStack.push('${');
	                    ++this.index;
	                    terminated = true;
	                    break;
	                }
	                cooked += ch;
	            }
	            else if (ch === '\\') {
	                ch = this.source[this.index++];
	                if (!character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    switch (ch) {
	                        case 'n':
	                            cooked += '\n';
	                            break;
	                        case 'r':
	                            cooked += '\r';
	                            break;
	                        case 't':
	                            cooked += '\t';
	                            break;
	                        case 'u':
	                            if (this.source[this.index] === '{') {
	                                ++this.index;
	                                cooked += this.scanUnicodeCodePointEscape();
	                            }
	                            else {
	                                var restore = this.index;
	                                var unescaped_2 = this.scanHexEscape(ch);
	                                if (unescaped_2 !== null) {
	                                    cooked += unescaped_2;
	                                }
	                                else {
	                                    this.index = restore;
	                                    cooked += ch;
	                                }
	                            }
	                            break;
	                        case 'x':
	                            var unescaped = this.scanHexEscape(ch);
	                            if (unescaped === null) {
	                                this.throwUnexpectedToken(messages_1.Messages.InvalidHexEscapeSequence);
	                            }
	                            cooked += unescaped;
	                            break;
	                        case 'b':
	                            cooked += '\b';
	                            break;
	                        case 'f':
	                            cooked += '\f';
	                            break;
	                        case 'v':
	                            cooked += '\v';
	                            break;
	                        default:
	                            if (ch === '0') {
	                                if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index))) {
	                                    // Illegal: \01 \02 and so on
	                                    this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                                }
	                                cooked += '\0';
	                            }
	                            else if (character_1.Character.isOctalDigit(ch.charCodeAt(0))) {
	                                // Illegal: \1 \2
	                                this.throwUnexpectedToken(messages_1.Messages.TemplateOctalLiteral);
	                            }
	                            else {
	                                cooked += ch;
	                            }
	                            break;
	                    }
	                }
	                else {
	                    ++this.lineNumber;
	                    if (ch === '\r' && this.source[this.index] === '\n') {
	                        ++this.index;
	                    }
	                    this.lineStart = this.index;
	                }
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                ++this.lineNumber;
	                if (ch === '\r' && this.source[this.index] === '\n') {
	                    ++this.index;
	                }
	                this.lineStart = this.index;
	                cooked += '\n';
	            }
	            else {
	                cooked += ch;
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken();
	        }
	        if (!head) {
	            this.curlyStack.pop();
	        }
	        return {
	            type: 10 /* Template */,
	            value: this.source.slice(start + 1, this.index - rawOffset),
	            cooked: cooked,
	            head: head,
	            tail: tail,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	    Scanner.prototype.testRegExp = function (pattern, flags) {
	        // The BMP character to use as a replacement for astral symbols when
	        // translating an ES6 "u"-flagged pattern to an ES5-compatible
	        // approximation.
	        // Note: replacing with '\uFFFF' enables false positives in unlikely
	        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
	        // pattern that would not be detected by this substitution.
	        var astralSubstitute = '\uFFFF';
	        var tmp = pattern;
	        var self = this;
	        if (flags.indexOf('u') >= 0) {
	            tmp = tmp
	                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
	                var codePoint = parseInt($1 || $2, 16);
	                if (codePoint > 0x10FFFF) {
	                    self.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	                }
	                if (codePoint <= 0xFFFF) {
	                    return String.fromCharCode(codePoint);
	                }
	                return astralSubstitute;
	            })
	                .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, astralSubstitute);
	        }
	        // First, detect invalid regular expressions.
	        try {
	            RegExp(tmp);
	        }
	        catch (e) {
	            this.throwUnexpectedToken(messages_1.Messages.InvalidRegExp);
	        }
	        // Return a regular expression object for this pattern-flag pair, or
	        // `null` in case the current environment doesn't support the flags it
	        // uses.
	        try {
	            return new RegExp(pattern, flags);
	        }
	        catch (exception) {
	            /* istanbul ignore next */
	            return null;
	        }
	    };
	    Scanner.prototype.scanRegExpBody = function () {
	        var ch = this.source[this.index];
	        assert_1.assert(ch === '/', 'Regular expression literal must start with a slash');
	        var str = this.source[this.index++];
	        var classMarker = false;
	        var terminated = false;
	        while (!this.eof()) {
	            ch = this.source[this.index++];
	            str += ch;
	            if (ch === '\\') {
	                ch = this.source[this.index++];
	                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals
	                if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                    this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	                }
	                str += ch;
	            }
	            else if (character_1.Character.isLineTerminator(ch.charCodeAt(0))) {
	                this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	            }
	            else if (classMarker) {
	                if (ch === ']') {
	                    classMarker = false;
	                }
	            }
	            else {
	                if (ch === '/') {
	                    terminated = true;
	                    break;
	                }
	                else if (ch === '[') {
	                    classMarker = true;
	                }
	            }
	        }
	        if (!terminated) {
	            this.throwUnexpectedToken(messages_1.Messages.UnterminatedRegExp);
	        }
	        // Exclude leading and trailing slash.
	        return str.substr(1, str.length - 2);
	    };
	    Scanner.prototype.scanRegExpFlags = function () {
	        var str = '';
	        var flags = '';
	        while (!this.eof()) {
	            var ch = this.source[this.index];
	            if (!character_1.Character.isIdentifierPart(ch.charCodeAt(0))) {
	                break;
	            }
	            ++this.index;
	            if (ch === '\\' && !this.eof()) {
	                ch = this.source[this.index];
	                if (ch === 'u') {
	                    ++this.index;
	                    var restore = this.index;
	                    var char = this.scanHexEscape('u');
	                    if (char !== null) {
	                        flags += char;
	                        for (str += '\\u'; restore < this.index; ++restore) {
	                            str += this.source[restore];
	                        }
	                    }
	                    else {
	                        this.index = restore;
	                        flags += 'u';
	                        str += '\\u';
	                    }
	                    this.tolerateUnexpectedToken();
	                }
	                else {
	                    str += '\\';
	                    this.tolerateUnexpectedToken();
	                }
	            }
	            else {
	                flags += ch;
	                str += ch;
	            }
	        }
	        return flags;
	    };
	    Scanner.prototype.scanRegExp = function () {
	        var start = this.index;
	        var pattern = this.scanRegExpBody();
	        var flags = this.scanRegExpFlags();
	        var value = this.testRegExp(pattern, flags);
	        return {
	            type: 9 /* RegularExpression */,
	            value: '',
	            pattern: pattern,
	            flags: flags,
	            regex: value,
	            lineNumber: this.lineNumber,
	            lineStart: this.lineStart,
	            start: start,
	            end: this.index
	        };
	    };
	    Scanner.prototype.lex = function () {
	        if (this.eof()) {
	            return {
	                type: 2 /* EOF */,
	                value: '',
	                lineNumber: this.lineNumber,
	                lineStart: this.lineStart,
	                start: this.index,
	                end: this.index
	            };
	        }
	        var cp = this.source.charCodeAt(this.index);
	        if (character_1.Character.isIdentifierStart(cp)) {
	            return this.scanIdentifier();
	        }
	        // Very common: ( and ) and ;
	        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
	            return this.scanPunctuator();
	        }
	        // String literal starts with single quote (U+0027) or double quote (U+0022).
	        if (cp === 0x27 || cp === 0x22) {
	            return this.scanStringLiteral();
	        }
	        // Dot (.) U+002E can also start a floating-point number, hence the need
	        // to check the next character.
	        if (cp === 0x2E) {
	            if (character_1.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {
	                return this.scanNumericLiteral();
	            }
	            return this.scanPunctuator();
	        }
	        if (character_1.Character.isDecimalDigit(cp)) {
	            return this.scanNumericLiteral();
	        }
	        // Template literals start with ` (U+0060) for template head
	        // or } (U+007D) for template middle or template tail.
	        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {
	            return this.scanTemplate();
	        }
	        // Possible identifier start in a surrogate pair.
	        if (cp >= 0xD800 && cp < 0xDFFF) {
	            if (character_1.Character.isIdentifierStart(this.codePointAt(this.index))) {
	                return this.scanIdentifier();
	            }
	        }
	        return this.scanPunctuator();
	    };
	    return Scanner;
	}());
	exports.Scanner = Scanner;


/***/ },
/* 13 */
/***/ function(module, exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TokenName = {};
	exports.TokenName[1 /* BooleanLiteral */] = 'Boolean';
	exports.TokenName[2 /* EOF */] = '<end>';
	exports.TokenName[3 /* Identifier */] = 'Identifier';
	exports.TokenName[4 /* Keyword */] = 'Keyword';
	exports.TokenName[5 /* NullLiteral */] = 'Null';
	exports.TokenName[6 /* NumericLiteral */] = 'Numeric';
	exports.TokenName[7 /* Punctuator */] = 'Punctuator';
	exports.TokenName[8 /* StringLiteral */] = 'String';
	exports.TokenName[9 /* RegularExpression */] = 'RegularExpression';
	exports.TokenName[10 /* Template */] = 'Template';


/***/ },
/* 14 */
/***/ function(module, exports) {
	// Generated by generate-xhtml-entities.js. DO NOT MODIFY!
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.XHTMLEntities = {
	    quot: '\u0022',
	    amp: '\u0026',
	    apos: '\u0027',
	    gt: '\u003E',
	    nbsp: '\u00A0',
	    iexcl: '\u00A1',
	    cent: '\u00A2',
	    pound: '\u00A3',
	    curren: '\u00A4',
	    yen: '\u00A5',
	    brvbar: '\u00A6',
	    sect: '\u00A7',
	    uml: '\u00A8',
	    copy: '\u00A9',
	    ordf: '\u00AA',
	    laquo: '\u00AB',
	    not: '\u00AC',
	    shy: '\u00AD',
	    reg: '\u00AE',
	    macr: '\u00AF',
	    deg: '\u00B0',
	    plusmn: '\u00B1',
	    sup2: '\u00B2',
	    sup3: '\u00B3',
	    acute: '\u00B4',
	    micro: '\u00B5',
	    para: '\u00B6',
	    middot: '\u00B7',
	    cedil: '\u00B8',
	    sup1: '\u00B9',
	    ordm: '\u00BA',
	    raquo: '\u00BB',
	    frac14: '\u00BC',
	    frac12: '\u00BD',
	    frac34: '\u00BE',
	    iquest: '\u00BF',
	    Agrave: '\u00C0',
	    Aacute: '\u00C1',
	    Acirc: '\u00C2',
	    Atilde: '\u00C3',
	    Auml: '\u00C4',
	    Aring: '\u00C5',
	    AElig: '\u00C6',
	    Ccedil: '\u00C7',
	    Egrave: '\u00C8',
	    Eacute: '\u00C9',
	    Ecirc: '\u00CA',
	    Euml: '\u00CB',
	    Igrave: '\u00CC',
	    Iacute: '\u00CD',
	    Icirc: '\u00CE',
	    Iuml: '\u00CF',
	    ETH: '\u00D0',
	    Ntilde: '\u00D1',
	    Ograve: '\u00D2',
	    Oacute: '\u00D3',
	    Ocirc: '\u00D4',
	    Otilde: '\u00D5',
	    Ouml: '\u00D6',
	    times: '\u00D7',
	    Oslash: '\u00D8',
	    Ugrave: '\u00D9',
	    Uacute: '\u00DA',
	    Ucirc: '\u00DB',
	    Uuml: '\u00DC',
	    Yacute: '\u00DD',
	    THORN: '\u00DE',
	    szlig: '\u00DF',
	    agrave: '\u00E0',
	    aacute: '\u00E1',
	    acirc: '\u00E2',
	    atilde: '\u00E3',
	    auml: '\u00E4',
	    aring: '\u00E5',
	    aelig: '\u00E6',
	    ccedil: '\u00E7',
	    egrave: '\u00E8',
	    eacute: '\u00E9',
	    ecirc: '\u00EA',
	    euml: '\u00EB',
	    igrave: '\u00EC',
	    iacute: '\u00ED',
	    icirc: '\u00EE',
	    iuml: '\u00EF',
	    eth: '\u00F0',
	    ntilde: '\u00F1',
	    ograve: '\u00F2',
	    oacute: '\u00F3',
	    ocirc: '\u00F4',
	    otilde: '\u00F5',
	    ouml: '\u00F6',
	    divide: '\u00F7',
	    oslash: '\u00F8',
	    ugrave: '\u00F9',
	    uacute: '\u00FA',
	    ucirc: '\u00FB',
	    uuml: '\u00FC',
	    yacute: '\u00FD',
	    thorn: '\u00FE',
	    yuml: '\u00FF',
	    OElig: '\u0152',
	    oelig: '\u0153',
	    Scaron: '\u0160',
	    scaron: '\u0161',
	    Yuml: '\u0178',
	    fnof: '\u0192',
	    circ: '\u02C6',
	    tilde: '\u02DC',
	    Alpha: '\u0391',
	    Beta: '\u0392',
	    Gamma: '\u0393',
	    Delta: '\u0394',
	    Epsilon: '\u0395',
	    Zeta: '\u0396',
	    Eta: '\u0397',
	    Theta: '\u0398',
	    Iota: '\u0399',
	    Kappa: '\u039A',
	    Lambda: '\u039B',
	    Mu: '\u039C',
	    Nu: '\u039D',
	    Xi: '\u039E',
	    Omicron: '\u039F',
	    Pi: '\u03A0',
	    Rho: '\u03A1',
	    Sigma: '\u03A3',
	    Tau: '\u03A4',
	    Upsilon: '\u03A5',
	    Phi: '\u03A6',
	    Chi: '\u03A7',
	    Psi: '\u03A8',
	    Omega: '\u03A9',
	    alpha: '\u03B1',
	    beta: '\u03B2',
	    gamma: '\u03B3',
	    delta: '\u03B4',
	    epsilon: '\u03B5',
	    zeta: '\u03B6',
	    eta: '\u03B7',
	    theta: '\u03B8',
	    iota: '\u03B9',
	    kappa: '\u03BA',
	    lambda: '\u03BB',
	    mu: '\u03BC',
	    nu: '\u03BD',
	    xi: '\u03BE',
	    omicron: '\u03BF',
	    pi: '\u03C0',
	    rho: '\u03C1',
	    sigmaf: '\u03C2',
	    sigma: '\u03C3',
	    tau: '\u03C4',
	    upsilon: '\u03C5',
	    phi: '\u03C6',
	    chi: '\u03C7',
	    psi: '\u03C8',
	    omega: '\u03C9',
	    thetasym: '\u03D1',
	    upsih: '\u03D2',
	    piv: '\u03D6',
	    ensp: '\u2002',
	    emsp: '\u2003',
	    thinsp: '\u2009',
	    zwnj: '\u200C',
	    zwj: '\u200D',
	    lrm: '\u200E',
	    rlm: '\u200F',
	    ndash: '\u2013',
	    mdash: '\u2014',
	    lsquo: '\u2018',
	    rsquo: '\u2019',
	    sbquo: '\u201A',
	    ldquo: '\u201C',
	    rdquo: '\u201D',
	    bdquo: '\u201E',
	    dagger: '\u2020',
	    Dagger: '\u2021',
	    bull: '\u2022',
	    hellip: '\u2026',
	    permil: '\u2030',
	    prime: '\u2032',
	    Prime: '\u2033',
	    lsaquo: '\u2039',
	    rsaquo: '\u203A',
	    oline: '\u203E',
	    frasl: '\u2044',
	    euro: '\u20AC',
	    image: '\u2111',
	    weierp: '\u2118',
	    real: '\u211C',
	    trade: '\u2122',
	    alefsym: '\u2135',
	    larr: '\u2190',
	    uarr: '\u2191',
	    rarr: '\u2192',
	    darr: '\u2193',
	    harr: '\u2194',
	    crarr: '\u21B5',
	    lArr: '\u21D0',
	    uArr: '\u21D1',
	    rArr: '\u21D2',
	    dArr: '\u21D3',
	    hArr: '\u21D4',
	    forall: '\u2200',
	    part: '\u2202',
	    exist: '\u2203',
	    empty: '\u2205',
	    nabla: '\u2207',
	    isin: '\u2208',
	    notin: '\u2209',
	    ni: '\u220B',
	    prod: '\u220F',
	    sum: '\u2211',
	    minus: '\u2212',
	    lowast: '\u2217',
	    radic: '\u221A',
	    prop: '\u221D',
	    infin: '\u221E',
	    ang: '\u2220',
	    and: '\u2227',
	    or: '\u2228',
	    cap: '\u2229',
	    cup: '\u222A',
	    int: '\u222B',
	    there4: '\u2234',
	    sim: '\u223C',
	    cong: '\u2245',
	    asymp: '\u2248',
	    ne: '\u2260',
	    equiv: '\u2261',
	    le: '\u2264',
	    ge: '\u2265',
	    sub: '\u2282',
	    sup: '\u2283',
	    nsub: '\u2284',
	    sube: '\u2286',
	    supe: '\u2287',
	    oplus: '\u2295',
	    otimes: '\u2297',
	    perp: '\u22A5',
	    sdot: '\u22C5',
	    lceil: '\u2308',
	    rceil: '\u2309',
	    lfloor: '\u230A',
	    rfloor: '\u230B',
	    loz: '\u25CA',
	    spades: '\u2660',
	    clubs: '\u2663',
	    hearts: '\u2665',
	    diams: '\u2666',
	    lang: '\u27E8',
	    rang: '\u27E9'
	};


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var error_handler_1 = __webpack_require__(10);
	var scanner_1 = __webpack_require__(12);
	var token_1 = __webpack_require__(13);
	var Reader = (function () {
	    function Reader() {
	        this.values = [];
	        this.curly = this.paren = -1;
	    }
	    // A function following one of those tokens is an expression.
	    Reader.prototype.beforeFunctionExpression = function (t) {
	        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
	            'return', 'case', 'delete', 'throw', 'void',
	            // assignment operators
	            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',
	            '&=', '|=', '^=', ',',
	            // binary/unary operators
	            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
	            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
	            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;
	    };
	    // Determine if forward slash (/) is an operator or part of a regular expression
	    // https://github.com/mozilla/sweet.js/wiki/design
	    Reader.prototype.isRegexStart = function () {
	        var previous = this.values[this.values.length - 1];
	        var regex = (previous !== null);
	        switch (previous) {
	            case 'this':
	            case ']':
	                regex = false;
	                break;
	            case ')':
	                var keyword = this.values[this.paren - 1];
	                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');
	                break;
	            case '}':
	                // Dividing a function by anything makes little sense,
	                // but we have to check for that.
	                regex = false;
	                if (this.values[this.curly - 3] === 'function') {
	                    // Anonymous function, e.g. function(){} /42
	                    var check = this.values[this.curly - 4];
	                    regex = check ? !this.beforeFunctionExpression(check) : false;
	                }
	                else if (this.values[this.curly - 4] === 'function') {
	                    // Named function, e.g. function f(){} /42/
	                    var check = this.values[this.curly - 5];
	                    regex = check ? !this.beforeFunctionExpression(check) : true;
	                }
	                break;
	        }
	        return regex;
	    };
	    Reader.prototype.push = function (token) {
	        if (token.type === 7 /* Punctuator */ || token.type === 4 /* Keyword */) {
	            if (token.value === '{') {
	                this.curly = this.values.length;
	            }
	            else if (token.value === '(') {
	                this.paren = this.values.length;
	            }
	            this.values.push(token.value);
	        }
	        else {
	            this.values.push(null);
	        }
	    };
	    return Reader;
	}());
	var Tokenizer = (function () {
	    function Tokenizer(code, config) {
	        this.errorHandler = new error_handler_1.ErrorHandler();
	        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;
	        this.scanner = new scanner_1.Scanner(code, this.errorHandler);
	        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;
	        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;
	        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;
	        this.buffer = [];
	        this.reader = new Reader();
	    }
	    Tokenizer.prototype.errors = function () {
	        return this.errorHandler.errors;
	    };
	    Tokenizer.prototype.getNextToken = function () {
	        if (this.buffer.length === 0) {
	            var comments = this.scanner.scanComments();
	            if (this.scanner.trackComment) {
	                for (var i = 0; i < comments.length; ++i) {
	                    var e = comments[i];
	                    var value = this.scanner.source.slice(e.slice[0], e.slice[1]);
	                    var comment = {
	                        type: e.multiLine ? 'BlockComment' : 'LineComment',
	                        value: value
	                    };
	                    if (this.trackRange) {
	                        comment.range = e.range;
	                    }
	                    if (this.trackLoc) {
	                        comment.loc = e.loc;
	                    }
	                    this.buffer.push(comment);
	                }
	            }
	            if (!this.scanner.eof()) {
	                var loc = void 0;
	                if (this.trackLoc) {
	                    loc = {
	                        start: {
	                            line: this.scanner.lineNumber,
	                            column: this.scanner.index - this.scanner.lineStart
	                        },
	                        end: {}
	                    };
	                }
	                var startRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();
	                var token = startRegex ? this.scanner.scanRegExp() : this.scanner.lex();
	                this.reader.push(token);
	                var entry = {
	                    type: token_1.TokenName[token.type],
	                    value: this.scanner.source.slice(token.start, token.end)
	                };
	                if (this.trackRange) {
	                    entry.range = [token.start, token.end];
	                }
	                if (this.trackLoc) {
	                    loc.end = {
	                        line: this.scanner.lineNumber,
	                        column: this.scanner.index - this.scanner.lineStart
	                    };
	                    entry.loc = loc;
	                }
	                if (token.type === 9 /* RegularExpression */) {
	                    var pattern = token.pattern;
	                    var flags = token.flags;
	                    entry.regex = { pattern: pattern, flags: flags };
	                }
	                this.buffer.push(entry);
	            }
	        }
	        return this.buffer.shift();
	    };
	    return Tokenizer;
	}());
	exports.Tokenizer = Tokenizer;


/***/ }
/******/ ])
});
});

var esprima$1 = /*@__PURE__*/getDefaultExportFromCjs(esprima);

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
var browserRaw = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` or `self` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

/* globals self */
var scope = typeof commonjsGlobal !== "undefined" ? commonjsGlobal : self;
var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// rawAsap provides everything we need except exception management.

// RawTasks are recycled to reduce GC churn.
var freeTasks = [];
// We queue errors to ensure they are thrown in right order (FIFO).
// Array-as-queue is good enough here, since we are just dealing with exceptions.
var pendingErrors = [];
var requestErrorThrow = browserRaw.makeRequestCallFromTimer(throwFirstError);

function throwFirstError() {
    if (pendingErrors.length) {
        throw pendingErrors.shift();
    }
}

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
var browserAsap = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    browserRaw(rawTask);
}

// We wrap tasks with recyclable task objects.  A task object implements
// `call`, just like a function.
function RawTask() {
    this.task = null;
}

// The sole purpose of wrapping the task is to catch the exception and recycle
// the task object after its single use.
RawTask.prototype.call = function () {
    try {
        this.task.call();
    } catch (error) {
        if (asap.onerror) {
            // This hook exists purely for testing purposes.
            // Its name will be periodically randomized to break any code that
            // depends on its existence.
            asap.onerror(error);
        } else {
            // In a web browser, exceptions are not fatal. However, to avoid
            // slowing down the queue of pending tasks, we rethrow the error in a
            // lower priority turn.
            pendingErrors.push(error);
            requestErrorThrow();
        }
    } finally {
        this.task = null;
        freeTasks[freeTasks.length] = this;
    }
};

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
	createDebug.debug = createDebug;
	createDebug.default = createDebug;
	createDebug.coerce = coerce;
	createDebug.disable = disable;
	createDebug.enable = enable;
	createDebug.enabled = enabled;
	createDebug.humanize = ms;
	createDebug.destroy = destroy;

	Object.keys(env).forEach(key => {
		createDebug[key] = env[key];
	});

	/**
	* The currently active debug mode names, and names to skip.
	*/

	createDebug.names = [];
	createDebug.skips = [];

	/**
	* Map of special "%n" handling functions, for the debug "format" argument.
	*
	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
	*/
	createDebug.formatters = {};

	/**
	* Selects a color for a debug namespace
	* @param {String} namespace The namespace string for the for the debug instance to be colored
	* @return {Number|String} An ANSI color code for the given namespace
	* @api private
	*/
	function selectColor(namespace) {
		let hash = 0;

		for (let i = 0; i < namespace.length; i++) {
			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
			hash |= 0; // Convert to 32bit integer
		}

		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
	}
	createDebug.selectColor = selectColor;

	/**
	* Create a debugger with the given `namespace`.
	*
	* @param {String} namespace
	* @return {Function}
	* @api public
	*/
	function createDebug(namespace) {
		let prevTime;
		let enableOverride = null;
		let namespacesCache;
		let enabledCache;

		function debug(...args) {
			// Disabled?
			if (!debug.enabled) {
				return;
			}

			const self = debug;

			// Set `diff` timestamp
			const curr = Number(new Date());
			const ms = curr - (prevTime || curr);
			self.diff = ms;
			self.prev = prevTime;
			self.curr = curr;
			prevTime = curr;

			args[0] = createDebug.coerce(args[0]);

			if (typeof args[0] !== 'string') {
				// Anything else let's inspect with %O
				args.unshift('%O');
			}

			// Apply any `formatters` transformations
			let index = 0;
			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
				// If we encounter an escaped % then don't increase the array index
				if (match === '%%') {
					return '%';
				}
				index++;
				const formatter = createDebug.formatters[format];
				if (typeof formatter === 'function') {
					const val = args[index];
					match = formatter.call(self, val);

					// Now we need to remove `args[index]` since it's inlined in the `format`
					args.splice(index, 1);
					index--;
				}
				return match;
			});

			// Apply env-specific formatting (colors, etc.)
			createDebug.formatArgs.call(self, args);

			const logFn = self.log || createDebug.log;
			logFn.apply(self, args);
		}

		debug.namespace = namespace;
		debug.useColors = createDebug.useColors();
		debug.color = createDebug.selectColor(namespace);
		debug.extend = extend;
		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

		Object.defineProperty(debug, 'enabled', {
			enumerable: true,
			configurable: false,
			get: () => {
				if (enableOverride !== null) {
					return enableOverride;
				}
				if (namespacesCache !== createDebug.namespaces) {
					namespacesCache = createDebug.namespaces;
					enabledCache = createDebug.enabled(namespace);
				}

				return enabledCache;
			},
			set: v => {
				enableOverride = v;
			}
		});

		// Env-specific initialization logic for debug instances
		if (typeof createDebug.init === 'function') {
			createDebug.init(debug);
		}

		return debug;
	}

	function extend(namespace, delimiter) {
		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
		newDebug.log = this.log;
		return newDebug;
	}

	/**
	* Enables a debug mode by namespaces. This can include modes
	* separated by a colon and wildcards.
	*
	* @param {String} namespaces
	* @api public
	*/
	function enable(namespaces) {
		createDebug.save(namespaces);
		createDebug.namespaces = namespaces;

		createDebug.names = [];
		createDebug.skips = [];

		let i;
		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		const len = split.length;

		for (i = 0; i < len; i++) {
			if (!split[i]) {
				// ignore empty strings
				continue;
			}

			namespaces = split[i].replace(/\*/g, '.*?');

			if (namespaces[0] === '-') {
				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
			} else {
				createDebug.names.push(new RegExp('^' + namespaces + '$'));
			}
		}
	}

	/**
	* Disable debug output.
	*
	* @return {String} namespaces
	* @api public
	*/
	function disable() {
		const namespaces = [
			...createDebug.names.map(toNamespace),
			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
		].join(',');
		createDebug.enable('');
		return namespaces;
	}

	/**
	* Returns true if the given mode name is enabled, false otherwise.
	*
	* @param {String} name
	* @return {Boolean}
	* @api public
	*/
	function enabled(name) {
		if (name[name.length - 1] === '*') {
			return true;
		}

		let i;
		let len;

		for (i = 0, len = createDebug.skips.length; i < len; i++) {
			if (createDebug.skips[i].test(name)) {
				return false;
			}
		}

		for (i = 0, len = createDebug.names.length; i < len; i++) {
			if (createDebug.names[i].test(name)) {
				return true;
			}
		}

		return false;
	}

	/**
	* Convert regexp to namespace
	*
	* @param {RegExp} regxep
	* @return {String} namespace
	* @api private
	*/
	function toNamespace(regexp) {
		return regexp.toString()
			.substring(2, regexp.toString().length - 2)
			.replace(/\.\*\?$/, '*');
	}

	/**
	* Coerce `val`.
	*
	* @param {Mixed} val
	* @return {Mixed}
	* @api private
	*/
	function coerce(val) {
		if (val instanceof Error) {
			return val.stack || val.message;
		}
		return val;
	}

	/**
	* XXX DO NOT USE. This is a temporary stub function.
	* XXX It WILL be removed in the next major release.
	*/
	function destroy() {
		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
	}

	createDebug.enable(createDebug.load());

	return createDebug;
}

var common = setup;

/* eslint-env browser */

var browser = createCommonjsModule(function (module, exports) {
/**
 * This is the web browser implementation of `debug()`.
 */

exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
exports.destroy = (() => {
	let warned = false;

	return () => {
		if (!warned) {
			warned = true;
			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
		}
	};
})();

/**
 * Colors.
 */

exports.colors = [
	'#0000CC',
	'#0000FF',
	'#0033CC',
	'#0033FF',
	'#0066CC',
	'#0066FF',
	'#0099CC',
	'#0099FF',
	'#00CC00',
	'#00CC33',
	'#00CC66',
	'#00CC99',
	'#00CCCC',
	'#00CCFF',
	'#3300CC',
	'#3300FF',
	'#3333CC',
	'#3333FF',
	'#3366CC',
	'#3366FF',
	'#3399CC',
	'#3399FF',
	'#33CC00',
	'#33CC33',
	'#33CC66',
	'#33CC99',
	'#33CCCC',
	'#33CCFF',
	'#6600CC',
	'#6600FF',
	'#6633CC',
	'#6633FF',
	'#66CC00',
	'#66CC33',
	'#9900CC',
	'#9900FF',
	'#9933CC',
	'#9933FF',
	'#99CC00',
	'#99CC33',
	'#CC0000',
	'#CC0033',
	'#CC0066',
	'#CC0099',
	'#CC00CC',
	'#CC00FF',
	'#CC3300',
	'#CC3333',
	'#CC3366',
	'#CC3399',
	'#CC33CC',
	'#CC33FF',
	'#CC6600',
	'#CC6633',
	'#CC9900',
	'#CC9933',
	'#CCCC00',
	'#CCCC33',
	'#FF0000',
	'#FF0033',
	'#FF0066',
	'#FF0099',
	'#FF00CC',
	'#FF00FF',
	'#FF3300',
	'#FF3333',
	'#FF3366',
	'#FF3399',
	'#FF33CC',
	'#FF33FF',
	'#FF6600',
	'#FF6633',
	'#FF9900',
	'#FF9933',
	'#FFCC00',
	'#FFCC33'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// eslint-disable-next-line complexity
function useColors() {
	// NB: In an Electron preload script, document will be defined but not fully
	// initialized. Since we know we're in Chrome, we'll just detect this case
	// explicitly
	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
		return true;
	}

	// Internet Explorer and Edge do not support colors.
	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		return false;
	}

	// Is webkit? http://stackoverflow.com/a/16459606/376773
	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		// Is firebug? http://stackoverflow.com/a/398120/376773
		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		// Is firefox >= v31?
		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		// Double check webkit in userAgent just in case we are in a worker
		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	args[0] = (this.useColors ? '%c' : '') +
		this.namespace +
		(this.useColors ? ' %c' : ' ') +
		args[0] +
		(this.useColors ? '%c ' : ' ') +
		'+' + module.exports.humanize(this.diff);

	if (!this.useColors) {
		return;
	}

	const c = 'color: ' + this.color;
	args.splice(1, 0, c, 'color: inherit');

	// The final "%c" is somewhat tricky, because there could be other
	// arguments passed either before or after the %c, so we need to
	// figure out the correct index to insert the CSS into
	let index = 0;
	let lastC = 0;
	args[0].replace(/%[a-zA-Z%]/g, match => {
		if (match === '%%') {
			return;
		}
		index++;
		if (match === '%c') {
			// We only are interested in the *last* %c
			// (the user may have provided their own)
			lastC = index;
		}
	});

	args.splice(lastC, 0, c);
}

/**
 * Invokes `console.debug()` when available.
 * No-op when `console.debug` is not a "function".
 * If `console.debug` is not available, falls back
 * to `console.log`.
 *
 * @api public
 */
exports.log = console.debug || console.log || (() => {});

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	try {
		if (namespaces) {
			exports.storage.setItem('debug', namespaces);
		} else {
			exports.storage.removeItem('debug');
		}
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */
function load() {
	let r;
	try {
		r = exports.storage.getItem('debug');
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}

	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
	if (!r && typeof process !== 'undefined' && 'env' in process) {
		r = process.env.DEBUG;
	}

	return r;
}

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
	try {
		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
		// The Browser also has localStorage in the global context.
		return localStorage;
	} catch (error) {
		// Swallow
		// XXX (@Qix-) should we be logging these?
	}
}

module.exports = common(exports);

const {formatters} = module.exports;

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
	try {
		return JSON.stringify(v);
	} catch (error) {
		return '[UnexpectedJSONParseError]: ' + error.message;
	}
};
});

const debug$1 = browser('serialport/stream');

//  VALIDATION
const DATABITS = Object.freeze([5, 6, 7, 8]);
const STOPBITS = Object.freeze([1, 1.5, 2]);
const PARITY = Object.freeze(['none', 'even', 'mark', 'odd', 'space']);
const FLOWCONTROLS = Object.freeze(['xon', 'xoff', 'xany', 'rtscts']);

const defaultSettings = Object.freeze({
  autoOpen: true,
  endOnClose: false,
  baudRate: 9600,
  dataBits: 8,
  hupcl: true,
  lock: true,
  parity: 'none',
  rtscts: false,
  stopBits: 1,
  xany: false,
  xoff: false,
  xon: false,
  highWaterMark: 64 * 1024,
});

const defaultSetFlags = Object.freeze({
  brk: false,
  cts: false,
  dtr: true,
  dts: false,
  rts: true,
});

function allocNewReadPool(poolSize) {
  const pool = Buffer.allocUnsafe(poolSize);
  pool.used = 0;
  return pool
}

/**
 * A callback called with an error or null.
 * @typedef {function} errorCallback
 * @param {?error} error
 */

/**
 * A callback called with an error or an object with the modem line values (cts, dsr, dcd).
 * @typedef {function} modemBitsCallback
 * @param {?error} error
 * @param {?object} status
 * @param {boolean} [status.cts=false]
 * @param {boolean} [status.dsr=false]
 * @param {boolean} [status.dcd=false]
 */

/**
 * @typedef {Object} openOptions
 * @property {boolean} [autoOpen=true] Automatically opens the port on `nextTick`.
 * @property {number=} [baudRate=9600] The baud rate of the port to be opened. This should match one of the commonly available baud rates, such as 110, 300, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, or 115200. Custom rates are supported best effort per platform. The device connected to the serial port is not guaranteed to support the requested baud rate, even if the port itself supports that baud rate.
 * @property {number} [dataBits=8] Must be one of these: 8, 7, 6, or 5.
 * @property {number} [highWaterMark=65536] The size of the read and write buffers defaults to 64k.
 * @property {boolean} [lock=true] Prevent other processes from opening the port. Windows does not currently support `false`.
 * @property {number} [stopBits=1] Must be one of these: 1 or 2.
 * @property {string} [parity=none] Must be one of these: 'none', 'even', 'mark', 'odd', 'space'.
 * @property {boolean} [rtscts=false] flow control setting
 * @property {boolean} [xon=false] flow control setting
 * @property {boolean} [xoff=false] flow control setting
 * @property {boolean} [xany=false] flow control setting
 * @property {object=} bindingOptions sets binding-specific options
 * @property {Binding=} binding The hardware access binding. `Bindings` are how Node-Serialport talks to the underlying system. By default we auto detect Windows (`WindowsBinding`), Linux (`LinuxBinding`) and OS X (`DarwinBinding`) and load the appropriate module for your system.
 * @property {number} [bindingOptions.vmin=1] see [`man termios`](http://linux.die.net/man/3/termios) LinuxBinding and DarwinBinding
 * @property {number} [bindingOptions.vtime=0] see [`man termios`](http://linux.die.net/man/3/termios) LinuxBinding and DarwinBinding
 */

/**
 * Create a new serial port object for the `path`. In the case of invalid arguments or invalid options, when constructing a new SerialPort it will throw an error. The port will open automatically by default, which is the equivalent of calling `port.open(openCallback)` in the next tick. You can disable this by setting the option `autoOpen` to `false`.
 * @class SerialPort
 * @param {string} path - The system path of the serial port you want to open. For example, `/dev/tty.XXX` on Mac/Linux, or `COM1` on Windows.
 * @param {openOptions=} options - Port configuration options
 * @param {errorCallback=} openCallback - Called after a connection is opened. If this is not provided and an error occurs, it will be emitted on the port's `error` event. The callback will NOT be called if `autoOpen` is set to `false` in the `openOptions` as the open will not be performed.
 * @property {number} baudRate The port's baudRate. Use `.update` to change it. Read-only.
 * @property {object} binding The binding object backing the port. Read-only.
 * @property {boolean} isOpen `true` if the port is open, `false` otherwise. Read-only. (`since 5.0.0`)
 * @property {string} path The system path or name of the serial port. Read-only.
 * @throws {TypeError} When given invalid arguments, a `TypeError` will be thrown.
 * @emits open
 * @emits data
 * @emits close
 * @emits error
 * @alias module:serialport
 */
function SerialPort(path, options, openCallback) {
  if (!(this instanceof SerialPort)) {
    return new SerialPort(path, options, openCallback)
  }

  if (options instanceof Function) {
    openCallback = options;
    options = {};
  }

  const settings = { ...defaultSettings, ...options };

  require$$0$1.Duplex.call(this, {
    highWaterMark: settings.highWaterMark,
  });

  const Binding = settings.binding || SerialPort.Binding;

  if (!Binding) {
    throw new TypeError('"Bindings" is invalid pass it as `options.binding` or set it on `SerialPort.Binding`')
  }

  if (!path) {
    throw new TypeError(`"path" is not defined: ${path}`)
  }

  if (settings.baudrate) {
    throw new TypeError(`"baudrate" is an unknown option, did you mean "baudRate"?`)
  }

  if (typeof settings.baudRate !== 'number') {
    throw new TypeError(`"baudRate" must be a number: ${settings.baudRate}`)
  }

  if (DATABITS.indexOf(settings.dataBits) === -1) {
    throw new TypeError(`"databits" is invalid: ${settings.dataBits}`)
  }

  if (STOPBITS.indexOf(settings.stopBits) === -1) {
    throw new TypeError(`"stopbits" is invalid: ${settings.stopbits}`)
  }

  if (PARITY.indexOf(settings.parity) === -1) {
    throw new TypeError(`"parity" is invalid: ${settings.parity}`)
  }

  FLOWCONTROLS.forEach(control => {
    if (typeof settings[control] !== 'boolean') {
      throw new TypeError(`"${control}" is not boolean: ${settings[control]}`)
    }
  });

  const binding = new Binding({
    bindingOptions: settings.bindingOptions,
  });

  Object.defineProperties(this, {
    binding: {
      enumerable: true,
      value: binding,
    },
    path: {
      enumerable: true,
      value: path,
    },
    settings: {
      enumerable: true,
      value: settings,
    },
  });

  this.opening = false;
  this.closing = false;
  this._pool = allocNewReadPool(this.settings.highWaterMark);
  this._kMinPoolSpace = 128;

  if (this.settings.autoOpen) {
    this.open(openCallback);
  }
}

require$$0.inherits(SerialPort, require$$0$1.Duplex);

Object.defineProperties(SerialPort.prototype, {
  isOpen: {
    enumerable: true,
    get() {
      return this.binding.isOpen && !this.closing
    },
  },
  baudRate: {
    enumerable: true,
    get() {
      return this.settings.baudRate
    },
  },
});

/**
 * The `error` event's callback is called with an error object whenever there is an error.
 * @event error
 */

SerialPort.prototype._error = function (error, callback) {
  if (callback) {
    callback.call(this, error);
  } else {
    this.emit('error', error);
  }
};

SerialPort.prototype._asyncError = function (error, callback) {
  process.nextTick(() => this._error(error, callback));
};

/**
 * The `open` event's callback is called with no arguments when the port is opened and ready for writing. This happens if you have the constructor open immediately (which opens in the next tick) or if you open the port manually with `open()`. See [Useage/Opening a Port](#opening-a-port) for more information.
 * @event open
 */

/**
 * Opens a connection to the given serial port.
 * @param {errorCallback=} openCallback - Called after a connection is opened. If this is not provided and an error occurs, it will be emitted on the port's `error` event.
 * @emits open
 * @returns {undefined}
 */
SerialPort.prototype.open = function (openCallback) {
  if (this.isOpen) {
    return this._asyncError(new Error('Port is already open'), openCallback)
  }

  if (this.opening) {
    return this._asyncError(new Error('Port is opening'), openCallback)
  }

  this.opening = true;
  debug$1('opening', `path: ${this.path}`);
  this.binding.open(this.path, this.settings).then(
    () => {
      debug$1('opened', `path: ${this.path}`);
      this.opening = false;
      this.emit('open');
      if (openCallback) {
        openCallback.call(this, null);
      }
    },
    err => {
      this.opening = false;
      debug$1('Binding #open had an error', err);
      this._error(err, openCallback);
    }
  );
};

/**
 * Changes the baud rate for an open port. Throws if you provide a bad argument. Emits an error or calls the callback if the baud rate isn't supported.
 * @param {object=} options Only supports `baudRate`.
 * @param {number=} [options.baudRate] The baud rate of the port to be opened. This should match one of the commonly available baud rates, such as 110, 300, 1200, 2400, 4800, 9600, 14400, 19200, 38400, 57600, or 115200. Custom rates are supported best effort per platform. The device connected to the serial port is not guaranteed to support the requested baud rate, even if the port itself supports that baud rate.
 * @param {errorCallback=} [callback] Called once the port's baud rate changes. If `.update` is called without a callback, and there is an error, an error event is emitted.
 * @returns {undefined}
 */
SerialPort.prototype.update = function (options, callback) {
  if (typeof options !== 'object') {
    throw TypeError('"options" is not an object')
  }

  if (!this.isOpen) {
    debug$1('update attempted, but port is not open');
    return this._asyncError(new Error('Port is not open'), callback)
  }

  const settings = { ...defaultSettings, ...options };
  this.settings.baudRate = settings.baudRate;

  debug$1('update', `baudRate: ${settings.baudRate}`);
  this.binding.update(this.settings).then(
    () => {
      debug$1('binding.update', 'finished');
      if (callback) {
        callback.call(this, null);
      }
    },
    err => {
      debug$1('binding.update', 'error', err);
      return this._error(err, callback)
    }
  );
};

/**
 * Writes data to the given serial port. Buffers written data if the port is not open.

The write operation is non-blocking. When it returns, data might still not have been written to the serial port. See `drain()`.

Some devices, like the Arduino, reset when you open a connection to them. In such cases, immediately writing to the device will cause lost data as they wont be ready to receive the data. This is often worked around by having the Arduino send a "ready" byte that your Node program waits for before writing. You can also often get away with waiting around 400ms.

If a port is disconnected during a write, the write will error in addition to the `close` event.

From the [stream docs](https://nodejs.org/api/stream.html#stream_writable_write_chunk_encoding_callback) write errors don't always provide the error in the callback, sometimes they use the error event.
> If an error occurs, the callback may or may not be called with the error as its first argument. To reliably detect write errors, add a listener for the 'error' event.

In addition to the usual `stream.write` arguments (`String` and `Buffer`), `write()` can accept arrays of bytes (positive numbers under 256) which is passed to `Buffer.from([])` for conversion. This extra functionality is pretty sweet.
 * @method SerialPort.prototype.write
 * @param  {(string|array|buffer)} data Accepts a [`Buffer`](http://nodejs.org/api/buffer.html) object, or a type that is accepted by the `Buffer` constructor (e.g. an array of bytes or a string).
 * @param  {string=} encoding The encoding, if chunk is a string. Defaults to `'utf8'`. Also accepts `'ascii'`, `'base64'`, `'binary'`, and `'hex'` See [Buffers and Character Encodings](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) for all available options.
 * @param  {function=} callback Called once the write operation finishes. Data may not yet be flushed to the underlying port. No arguments.
 * @returns {boolean} `false` if the stream wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.
 * @since 5.0.0
 */
const superWrite = SerialPort.prototype.write;
SerialPort.prototype.write = function (data, encoding, callback) {
  if (Array.isArray(data)) {
    data = Buffer.from(data);
  }
  return superWrite.call(this, data, encoding, callback)
};

SerialPort.prototype._write = function (data, encoding, callback) {
  if (!this.isOpen) {
    return this.once('open', function afterOpenWrite() {
      this._write(data, encoding, callback);
    })
  }
  debug$1('_write', `${data.length} bytes of data`);
  this.binding.write(data).then(
    () => {
      debug$1('binding.write', 'write finished');
      callback(null);
    },
    err => {
      debug$1('binding.write', 'error', err);
      if (!err.canceled) {
        this._disconnected(err);
      }
      callback(err);
    }
  );
};

SerialPort.prototype._writev = function (data, callback) {
  debug$1('_writev', `${data.length} chunks of data`);
  const dataV = data.map(write => write.chunk);
  this._write(Buffer.concat(dataV), null, callback);
};

/**
 * Request a number of bytes from the SerialPort. The `read()` method pulls some data out of the internal buffer and returns it. If no data is available to be read, null is returned. By default, the data is returned as a `Buffer` object unless an encoding has been specified using the `.setEncoding()` method.
 * @method SerialPort.prototype.read
 * @param {number=} size Specify how many bytes of data to return, if available
 * @returns {(string|Buffer|null)} The data from internal buffers
 * @since 5.0.0
 */

/**
 * Listening for the `data` event puts the port in flowing mode. Data is emitted as soon as it's received. Data is a `Buffer` object with a varying amount of data in it. The `readLine` parser converts the data into string lines. See the [parsers](https://serialport.io/docs/api-parsers-overview) section for more information on parsers, and the [Node.js stream documentation](https://nodejs.org/api/stream.html#stream_event_data) for more information on the data event.
 * @event data
 */

SerialPort.prototype._read = function (bytesToRead) {
  if (!this.isOpen) {
    debug$1('_read', 'queueing _read for after open');
    this.once('open', () => {
      this._read(bytesToRead);
    });
    return
  }

  if (!this._pool || this._pool.length - this._pool.used < this._kMinPoolSpace) {
    debug$1('_read', 'discarding the read buffer pool because it is below kMinPoolSpace');
    this._pool = allocNewReadPool(this.settings.highWaterMark);
  }

  // Grab another reference to the pool in the case that while we're
  // in the thread pool another read() finishes up the pool, and
  // allocates a new one.
  const pool = this._pool;
  // Read the smaller of rest of the pool or however many bytes we want
  const toRead = Math.min(pool.length - pool.used, bytesToRead);
  const start = pool.used;

  // the actual read.
  debug$1('_read', `reading`, { start, toRead });
  this.binding.read(pool, start, toRead).then(
    ({ bytesRead }) => {
      debug$1('binding.read', `finished`, { bytesRead });
      // zero bytes means read means we've hit EOF? Maybe this should be an error
      if (bytesRead === 0) {
        debug$1('binding.read', 'Zero bytes read closing readable stream');
        this.push(null);
        return
      }
      pool.used += bytesRead;
      this.push(pool.slice(start, start + bytesRead));
    },
    err => {
      debug$1('binding.read', `error`, err);
      if (!err.canceled) {
        this._disconnected(err);
      }
      this._read(bytesToRead); // prime to read more once we're reconnected
    }
  );
};

SerialPort.prototype._disconnected = function (err) {
  if (!this.isOpen) {
    debug$1('disconnected aborted because already closed', err);
    return
  }
  debug$1('disconnected', err);
  err.disconnected = true;
  this.close(null, err);
};

/**
 * The `close` event's callback is called with no arguments when the port is closed. In the case of a disconnect it will be called with a Disconnect Error object (`err.disconnected == true`). In the event of a close error (unlikely), an error event is triggered.
 * @event close
 */

/**
 * Closes an open connection.
 *
 * If there are in progress writes when the port is closed the writes will error.
 * @param {errorCallback} callback Called once a connection is closed.
 * @param {Error} disconnectError used internally to propagate a disconnect error
 * @emits close
 * @returns {undefined}
 */
SerialPort.prototype.close = function (callback, disconnectError) {
  disconnectError = disconnectError || null;

  if (!this.isOpen) {
    debug$1('close attempted, but port is not open');
    return this._asyncError(new Error('Port is not open'), callback)
  }

  this.closing = true;
  debug$1('#close');
  this.binding.close().then(
    () => {
      this.closing = false;
      debug$1('binding.close', 'finished');
      this.emit('close', disconnectError);
      if (this.settings.endOnClose) {
        this.emit('end');
      }
      if (callback) {
        callback.call(this, disconnectError);
      }
    },
    err => {
      this.closing = false;
      debug$1('binding.close', 'had an error', err);
      return this._error(err, callback)
    }
  );
};

/**
 * Set control flags on an open port. Uses [`SetCommMask`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363257(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for OS X and Linux.
 * @param {object=} options All options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. If options isn't provided default options is used.
 * @param {Boolean} [options.brk=false] sets the brk flag
 * @param {Boolean} [options.cts=false] sets the cts flag
 * @param {Boolean} [options.dsr=false] sets the dsr flag
 * @param {Boolean} [options.dtr=true] sets the dtr flag
 * @param {Boolean} [options.rts=true] sets the rts flag
 * @param {errorCallback=} callback Called once the port's flags have been set.
 * @since 5.0.0
 * @returns {undefined}
 */
SerialPort.prototype.set = function (options, callback) {
  if (typeof options !== 'object') {
    throw TypeError('"options" is not an object')
  }

  if (!this.isOpen) {
    debug$1('set attempted, but port is not open');
    return this._asyncError(new Error('Port is not open'), callback)
  }

  const settings = { ...defaultSetFlags, ...options };
  debug$1('#set', settings);
  this.binding.set(settings).then(
    () => {
      debug$1('binding.set', 'finished');
      if (callback) {
        callback.call(this, null);
      }
    },
    err => {
      debug$1('binding.set', 'had an error', err);
      return this._error(err, callback)
    }
  );
};

/**
 * Returns the control flags (CTS, DSR, DCD) on the open port.
 * Uses [`GetCommModemStatus`](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363258(v=vs.85).aspx) for Windows and [`ioctl`](http://linux.die.net/man/4/tty_ioctl) for mac and linux.
 * @param {modemBitsCallback=} callback Called once the modem bits are retrieved.
 * @returns {undefined}
 */
SerialPort.prototype.get = function (callback) {
  if (!this.isOpen) {
    debug$1('get attempted, but port is not open');
    return this._asyncError(new Error('Port is not open'), callback)
  }

  debug$1('#get');
  this.binding.get().then(
    status => {
      debug$1('binding.get', 'finished');
      if (callback) {
        callback.call(this, null, status);
      }
    },
    err => {
      debug$1('binding.get', 'had an error', err);
      return this._error(err, callback)
    }
  );
};

/**
 * Flush discards data received but not read, and written but not transmitted by the operating system. For more technical details, see [`tcflush(fd, TCIOFLUSH)`](http://linux.die.net/man/3/tcflush) for Mac/Linux and [`FlushFileBuffers`](http://msdn.microsoft.com/en-us/library/windows/desktop/aa364439) for Windows.
 * @param  {errorCallback=} callback Called once the flush operation finishes.
 * @returns {undefined}
 */
SerialPort.prototype.flush = function (callback) {
  if (!this.isOpen) {
    debug$1('flush attempted, but port is not open');
    return this._asyncError(new Error('Port is not open'), callback)
  }

  debug$1('#flush');
  this.binding.flush().then(
    () => {
      debug$1('binding.flush', 'finished');
      if (callback) {
        callback.call(this, null);
      }
    },
    err => {
      debug$1('binding.flush', 'had an error', err);
      return this._error(err, callback)
    }
  );
};

/**
 * Waits until all output data is transmitted to the serial port. After any pending write has completed it calls [`tcdrain()`](http://linux.die.net/man/3/tcdrain) or [FlushFileBuffers()](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364439(v=vs.85).aspx) to ensure it has been written to the device.
 * @param {errorCallback=} callback Called once the drain operation returns.
 * @returns {undefined}
 * @example
Write the `data` and wait until it has finished transmitting to the target serial port before calling the callback. This will queue until the port is open and writes are finished.

```js
function writeAndDrain (data, callback) {
  port.write(data);
  port.drain(callback);
}
```
 */
SerialPort.prototype.drain = function (callback) {
  debug$1('drain');
  if (!this.isOpen) {
    debug$1('drain queuing on port open');
    return this.once('open', () => {
      this.drain(callback);
    })
  }
  this.binding.drain().then(
    () => {
      debug$1('binding.drain', 'finished');
      if (callback) {
        callback.call(this, null);
      }
    },
    err => {
      debug$1('binding.drain', 'had an error', err);
      return this._error(err, callback)
    }
  );
};

/**
 * The `pause()` method causes a stream in flowing mode to stop emitting 'data' events, switching out of flowing mode. Any data that becomes available remains in the internal buffer.
 * @method SerialPort.prototype.pause
 * @see resume
 * @since 5.0.0
 * @returns `this`
 */

/**
 * The `resume()` method causes an explicitly paused, `Readable` stream to resume emitting 'data' events, switching the stream into flowing mode.
 * @method SerialPort.prototype.resume
 * @see pause
 * @since 5.0.0
 * @returns `this`
 */

/**
 * Retrieves a list of available serial ports with metadata. Only the `path` is guaranteed. If unavailable the other fields will be undefined. The `path` is either the path or an identifier (eg `COM1`) used to open the SerialPort.
 *
 * We make an effort to identify the hardware attached and have consistent results between systems. Linux and OS X are mostly consistent. Windows relies on 3rd party device drivers for the information and is unable to guarantee the information. On windows If you have a USB connected device can we provide a serial number otherwise it will be `undefined`. The `pnpId` and `locationId` are not the same or present on all systems. The examples below were run with the same Arduino Uno.
 * @type {function}
 * @returns {Promise} Resolves with the list of available serial ports.
 * @example
```js
// OSX example port
{
  path: '/dev/tty.usbmodem1421',
  manufacturer: 'Arduino (www.arduino.cc)',
  serialNumber: '752303138333518011C1',
  pnpId: undefined,
  locationId: '14500000',
  productId: '0043',
  vendorId: '2341'
}

// Linux example port
{
  path: '/dev/ttyACM0',
  manufacturer: 'Arduino (www.arduino.cc)',
  serialNumber: '752303138333518011C1',
  pnpId: 'usb-Arduino__www.arduino.cc__0043_752303138333518011C1-if00',
  locationId: undefined,
  productId: '0043',
  vendorId: '2341'
}

// Windows example port
{
  path: 'COM3',
  manufacturer: 'Arduino LLC (www.arduino.cc)',
  serialNumber: '752303138333518011C1',
  pnpId: 'USB\\VID_2341&PID_0043\\752303138333518011C1',
  locationId: 'Port_#0003.Hub_#0001',
  productId: '0043',
  vendorId: '2341'
}
```

```js
var SerialPort = require('serialport');

// promise approach
SerialPort.list()
  .then(ports) {...});
  .catch(err) {...});
```
 */
SerialPort.list = async function (callback) {
  debug$1('.list');
  if (!SerialPort.Binding) {
    throw new TypeError('No Binding set on `SerialPort.Binding`')
  }
  if (callback) {
    throw new TypeError('SerialPort.list no longer takes a callback and only returns a promise')
  }
  return SerialPort.Binding.list()
};

var lib$a = SerialPort;

/**
 * Module dependencies.
 */

var sep = path.sep || '/';

/**
 * Module exports.
 */

var fileUriToPath_1 = fileUriToPath;

/**
 * File URI to Path function.
 *
 * @param {String} uri
 * @return {String} path
 * @api public
 */

function fileUriToPath (uri) {
  if ('string' != typeof uri ||
      uri.length <= 7 ||
      'file://' != uri.substring(0, 7)) {
    throw new TypeError('must pass in a file:// URI to convert to a file path');
  }

  var rest = decodeURI(uri.substring(7));
  var firstSlash = rest.indexOf('/');
  var host = rest.substring(0, firstSlash);
  var path = rest.substring(firstSlash + 1);

  // 2.  Scheme Definition
  // As a special case, <host> can be the string "localhost" or the empty
  // string; this is interpreted as "the machine from which the URL is
  // being interpreted".
  if ('localhost' == host) host = '';

  if (host) {
    host = sep + sep + host;
  }

  // 3.2  Drives, drive letters, mount points, file system root
  // Drive letters are mapped into the top of a file URI in various ways,
  // depending on the implementation; some applications substitute
  // vertical bar ("|") for the colon after the drive letter, yielding
  // "file:///c|/tmp/test.txt".  In some cases, the colon is left
  // unchanged, as in "file:///c:/tmp/test.txt".  In other cases, the
  // colon is simply omitted, as in "file:///c/tmp/test.txt".
  path = path.replace(/^(.+)\|/, '$1:');

  // for Windows, we need to invert the path separators from what a URI uses
  if (sep == '\\') {
    path = path.replace(/\//g, '\\');
  }

  if (/^.+\:/.test(path)) ; else {
    // unix path…
    path = sep + path;
  }

  return host + path;
}

/**
 * Module dependencies.
 */

var bindings_1 = createCommonjsModule(function (module, exports) {
var join = path.join,
  dirname = path.dirname,
  exists =
    (fs.accessSync &&
      function(path) {
        try {
          fs.accessSync(path);
        } catch (e) {
          return false;
        }
        return true;
      }) ||
    fs.existsSync ||
    path.existsSync,
  defaults = {
    arrow: process.env.NODE_BINDINGS_ARROW || ' → ',
    compiled: process.env.NODE_BINDINGS_COMPILED_DIR || 'compiled',
    platform: process.platform,
    arch: process.arch,
    nodePreGyp:
      'node-v' +
      process.versions.modules +
      '-' +
      process.platform +
      '-' +
      process.arch,
    version: process.versions.node,
    bindings: 'bindings.node',
    try: [
      // node-gyp's linked version in the "build" dir
      ['module_root', 'build', 'bindings'],
      // node-waf and gyp_addon (a.k.a node-gyp)
      ['module_root', 'build', 'Debug', 'bindings'],
      ['module_root', 'build', 'Release', 'bindings'],
      // Debug files, for development (legacy behavior, remove for node v0.9)
      ['module_root', 'out', 'Debug', 'bindings'],
      ['module_root', 'Debug', 'bindings'],
      // Release files, but manually compiled (legacy behavior, remove for node v0.9)
      ['module_root', 'out', 'Release', 'bindings'],
      ['module_root', 'Release', 'bindings'],
      // Legacy from node-waf, node <= 0.4.x
      ['module_root', 'build', 'default', 'bindings'],
      // Production "Release" buildtype binary (meh...)
      ['module_root', 'compiled', 'version', 'platform', 'arch', 'bindings'],
      // node-qbs builds
      ['module_root', 'addon-build', 'release', 'install-root', 'bindings'],
      ['module_root', 'addon-build', 'debug', 'install-root', 'bindings'],
      ['module_root', 'addon-build', 'default', 'install-root', 'bindings'],
      // node-pre-gyp path ./lib/binding/{node_abi}-{platform}-{arch}
      ['module_root', 'lib', 'binding', 'nodePreGyp', 'bindings']
    ]
  };

/**
 * The main `bindings()` function loads the compiled bindings for a given module.
 * It uses V8's Error API to determine the parent filename that this function is
 * being invoked from, which is then used to find the root directory.
 */

function bindings(opts) {
  // Argument surgery
  if (typeof opts == 'string') {
    opts = { bindings: opts };
  } else if (!opts) {
    opts = {};
  }

  // maps `defaults` onto `opts` object
  Object.keys(defaults).map(function(i) {
    if (!(i in opts)) opts[i] = defaults[i];
  });

  // Get the module root
  if (!opts.module_root) {
    opts.module_root = exports.getRoot(exports.getFileName());
  }

  // Ensure the given bindings name ends with .node
  if (path.extname(opts.bindings) != '.node') {
    opts.bindings += '.node';
  }

  // https://github.com/webpack/webpack/issues/4175#issuecomment-342931035
  var requireFunc =
    typeof __webpack_require__ === 'function'
      ? __non_webpack_require__
      : commonjsRequire;

  var tries = [],
    i = 0,
    l = opts.try.length,
    n,
    b,
    err;

  for (; i < l; i++) {
    n = join.apply(
      null,
      opts.try[i].map(function(p) {
        return opts[p] || p;
      })
    );
    tries.push(n);
    try {
      b = opts.path ? requireFunc.resolve(n) : requireFunc(n);
      if (!opts.path) {
        b.path = n;
      }
      return b;
    } catch (e) {
      if (e.code !== 'MODULE_NOT_FOUND' &&
          e.code !== 'QUALIFIED_PATH_RESOLUTION_FAILED' &&
          !/not find/i.test(e.message)) {
        throw e;
      }
    }
  }

  err = new Error(
    'Could not locate the bindings file. Tried:\n' +
      tries
        .map(function(a) {
          return opts.arrow + a;
        })
        .join('\n')
  );
  err.tries = tries;
  throw err;
}
module.exports = exports = bindings;

/**
 * Gets the filename of the JavaScript file that invokes this function.
 * Used to help find the root directory of a module.
 * Optionally accepts an filename argument to skip when searching for the invoking filename
 */

exports.getFileName = function getFileName(calling_file) {
  var origPST = Error.prepareStackTrace,
    origSTL = Error.stackTraceLimit,
    dummy = {},
    fileName;

  Error.stackTraceLimit = 10;

  Error.prepareStackTrace = function(e, st) {
    for (var i = 0, l = st.length; i < l; i++) {
      fileName = st[i].getFileName();
      if (fileName !== __filename) {
        if (calling_file) {
          if (fileName !== calling_file) {
            return;
          }
        } else {
          return;
        }
      }
    }
  };

  // run the 'prepareStackTrace' function above
  Error.captureStackTrace(dummy);
  dummy.stack;

  // cleanup
  Error.prepareStackTrace = origPST;
  Error.stackTraceLimit = origSTL;

  // handle filename that starts with "file://"
  var fileSchema = 'file://';
  if (fileName.indexOf(fileSchema) === 0) {
    fileName = fileUriToPath_1(fileName);
  }

  return fileName;
};

/**
 * Gets the root directory of a module, given an arbitrary filename
 * somewhere in the module tree. The "root directory" is the directory
 * containing the `package.json` file.
 *
 *   In:  /home/nate/node-native-module/lib/index.js
 *   Out: /home/nate/node-native-module
 */

exports.getRoot = function getRoot(file) {
  var dir = dirname(file),
    prev;
  while (true) {
    if (dir === '.') {
      // Avoids an infinite loop in rare cases, like the REPL
      dir = process.cwd();
    }
    if (
      exists(join(dir, 'package.json')) ||
      exists(join(dir, 'node_modules'))
    ) {
      // Found the 'package.json' file or 'node_modules' dir; we're done
      return dir;
    }
    if (prev === dir) {
      // Got to the top
      throw new Error(
        'Could not find module root given file: "' +
          file +
          '". Do you have a `package.json` file? '
      );
    }
    // Try the parent dir next
    prev = dir;
    dir = join(dir, '..');
  }
};
});

const debug = browser('serialport/binding-abstract');

/**
 * @name Binding
 * @type {AbstractBinding}
 * @since 5.0.0
 * @description The `Binding` is how Node-SerialPort talks to the underlying system. By default, we auto detect Windows, Linux and OS X, and load the appropriate module for your system. You can assign `SerialPort.Binding` to any binding you like. Find more by searching at [npm](https://npmjs.org/).
  Prevent auto loading the default bindings by requiring SerialPort with:
  ```js
  var SerialPort = require('@serialport/stream');
  SerialPort.Binding = MyBindingClass;
  ```
 */

/**
 * You never have to use `Binding` objects directly. SerialPort uses them to access the underlying hardware. This documentation is geared towards people who are making bindings for different platforms. This class can be inherited from to get type checking for each method.
 * @class AbstractBinding
 * @param {object} options options for the binding
 * @property {boolean} isOpen Required property. `true` if the port is open, `false` otherwise. Should be read-only.
 * @throws {TypeError} When given invalid arguments, a `TypeError` is thrown.
 * @since 5.0.0
 */
class AbstractBinding {
  /**
   * Retrieves a list of available serial ports with metadata. The `path` must be guaranteed, and all other fields should be undefined if unavailable. The `path` is either the path or an identifier (eg `COM1`) used to open the serialport.
   * @returns {Promise} resolves to an array of port [info objects](#module_serialport--SerialPort.list).
   */
  static async list() {
    debug('list');
  }

  constructor(opt = {}) {
    if (typeof opt !== 'object') {
      throw new TypeError('"options" is not an object')
    }
  }

  /**
   * Opens a connection to the serial port referenced by the path.
   * @param {string} path the path or com port to open
   * @param {openOptions} options openOptions for the serialport
   * @returns {Promise} Resolves after the port is opened and configured.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async open(path, options) {
    if (!path) {
      throw new TypeError('"path" is not a valid port')
    }

    if (typeof options !== 'object') {
      throw new TypeError('"options" is not an object')
    }
    debug('open');

    if (this.isOpen) {
      throw new Error('Already open')
    }
  }

  /**
   * Closes an open connection
   * @returns {Promise} Resolves once the connection is closed.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async close() {
    debug('close');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Request a number of bytes from the SerialPort. This function is similar to Node's [`fs.read`](http://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback) except it will always return at least one byte.

The in progress reads must error when the port is closed with an error object that has the property `canceled` equal to `true`. Any other error will cause a disconnection.

   * @param {buffer} buffer Accepts a [`Buffer`](http://nodejs.org/api/buffer.html) object.
   * @param {integer} offset The offset in the buffer to start writing at.
   * @param {integer} length Specifies the maximum number of bytes to read.
   * @returns {Promise} Resolves with the number of bytes read after a read operation.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async read(buffer, offset, length) {
    if (!Buffer.isBuffer(buffer)) {
      throw new TypeError('"buffer" is not a Buffer')
    }

    if (typeof offset !== 'number' || isNaN(offset)) {
      throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`)
    }

    if (typeof length !== 'number' || isNaN(length)) {
      throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`)
    }

    debug('read');
    if (buffer.length < offset + length) {
      throw new Error('buffer is too small')
    }

    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Write bytes to the SerialPort. Only called when there is no pending write operation.

The in progress writes must error when the port is closed with an error object that has the property `canceled` equal to `true`. Any other error will cause a disconnection.

   * @param {buffer} buffer - Accepts a [`Buffer`](http://nodejs.org/api/buffer.html) object.
   * @returns {Promise} Resolves after the data is passed to the operating system for writing.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async write(buffer) {
    if (!Buffer.isBuffer(buffer)) {
      throw new TypeError('"buffer" is not a Buffer')
    }

    debug('write', buffer.length, 'bytes');
    if (!this.isOpen) {
      debug('write', 'error port is not open');

      throw new Error('Port is not open')
    }
  }

  /**
   * Changes connection settings on an open port. Only `baudRate` is supported.
   * @param {object=} options Only supports `baudRate`.
   * @param {number=} [options.baudRate] If provided a baud rate that the bindings do not support, it should reject.
   * @returns {Promise} Resolves once the port's baud rate changes.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async update(options) {
    if (typeof options !== 'object') {
      throw TypeError('"options" is not an object')
    }

    if (typeof options.baudRate !== 'number') {
      throw new TypeError('"options.baudRate" is not a number')
    }

    debug('update');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Set control flags on an open port.
   * @param {object=} options All options are operating system default when the port is opened. Every flag is set on each call to the provided or default values. All options are always provided.
   * @param {Boolean} [options.brk=false] flag for brk
   * @param {Boolean} [options.cts=false] flag for cts
   * @param {Boolean} [options.dsr=false] flag for dsr
   * @param {Boolean} [options.dtr=true] flag for dtr
   * @param {Boolean} [options.rts=true] flag for rts
   * @param {Boolean} [options.lowLatency=false] flag for lowLatency mode on Linux
   * @returns {Promise} Resolves once the port's flags are set.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async set(options) {
    if (typeof options !== 'object') {
      throw new TypeError('"options" is not an object')
    }
    debug('set');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Get the control flags (CTS, DSR, DCD) on the open port.
   * @returns {Promise} Resolves with the retrieved flags.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async get() {
    debug('get');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Get the OS reported baud rate for the open port.
   * Used mostly for debugging custom baud rates.
   * @returns {Promise} Resolves with the current baud rate.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async getBaudRate() {
    debug('getbaudRate');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Flush (discard) data received but not read, and written but not transmitted.
   * @returns {Promise} Resolves once the flush operation finishes.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async flush() {
    debug('flush');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }

  /**
   * Drain waits until all output data is transmitted to the serial port. An in progress write should be completed before this returns.
   * @returns {Promise} Resolves once the drain operation finishes.
   * @rejects {TypeError} When given invalid arguments, a `TypeError` is rejected.
   */
  async drain() {
    debug('drain');
    if (!this.isOpen) {
      throw new Error('Port is not open')
    }
  }
}

var lib$9 = AbstractBinding;

const PARSERS = [/USB\\(?:.+)\\(.+)/, /FTDIBUS\\(?:.+)\+(.+?)A?\\.+/];

var win32SnParser = pnpId => {
  if (!pnpId) {
    return null
  }
  for (const parser of PARSERS) {
    const sn = pnpId.match(parser);
    if (sn) {
      return sn[1]
    }
  }
  return null
};

let warningSent = false;

const wrapWithHiddenComName$3 = async portsPromise => {
  const ports = await portsPromise;
  return ports.map(port => {
    const newPort = { ...port };
    return Object.defineProperties(newPort, {
      comName: {
        get() {
          if (!warningSent) {
            warningSent = true;
            console.warn(
              `"PortInfo.comName" has been deprecated. You should now use "PortInfo.path". The property will be removed in the next major release.`
            );
          }
          return newPort.path
        },
        enumerable: false,
      },
    })
  })
};

var legacy = {
  wrapWithHiddenComName: wrapWithHiddenComName$3,
};

const binding$2 = bindings_1('bindings.node');

const { promisify: promisify$4 } = require$$0;


const asyncList$1 = promisify$4(binding$2.list);
const asyncOpen$2 = promisify$4(binding$2.open);
const asyncClose$2 = promisify$4(binding$2.close);
const asyncRead = promisify$4(binding$2.read);
const asyncWrite = promisify$4(binding$2.write);
const asyncUpdate$2 = promisify$4(binding$2.update);
const asyncSet$2 = promisify$4(binding$2.set);
const asyncGet$2 = promisify$4(binding$2.get);
const asyncGetBaudRate$2 = promisify$4(binding$2.getBaudRate);
const asyncDrain$2 = promisify$4(binding$2.drain);
const asyncFlush$2 = promisify$4(binding$2.flush);
const { wrapWithHiddenComName: wrapWithHiddenComName$2 } = legacy;

/**
 * The Windows binding layer
 */
class WindowsBinding extends lib$9 {
  static async list() {
    const ports = await asyncList$1();
    // Grab the serial number from the pnp id
    return wrapWithHiddenComName$2(
      ports.map(port => {
        if (port.pnpId && !port.serialNumber) {
          const serialNumber = win32SnParser(port.pnpId);
          if (serialNumber) {
            return {
              ...port,
              serialNumber,
            }
          }
        }
        return port
      })
    )
  }

  constructor(opt = {}) {
    super(opt);
    this.bindingOptions = { ...opt.bindingOptions };
    this.fd = null;
    this.writeOperation = null;
  }

  get isOpen() {
    return this.fd !== null
  }

  async open(path, options) {
    await super.open(path, options);
    this.openOptions = { ...this.bindingOptions, ...options };
    const fd = await asyncOpen$2(path, this.openOptions);
    this.fd = fd;
  }

  async close() {
    await super.close();
    const fd = this.fd;
    this.fd = null;
    return asyncClose$2(fd)
  }

  async read(buffer, offset, length) {
    await super.read(buffer, offset, length);
    try {
      const bytesRead = await asyncRead(this.fd, buffer, offset, length);
      return { bytesRead, buffer }
    } catch (err) {
      if (!this.isOpen) {
        err.canceled = true;
      }
      throw err
    }
  }

  async write(buffer) {
    this.writeOperation = super.write(buffer).then(async () => {
      if (buffer.length === 0) {
        return
      }
      await asyncWrite(this.fd, buffer);
      this.writeOperation = null;
    });
    return this.writeOperation
  }

  async update(options) {
    await super.update(options);
    return asyncUpdate$2(this.fd, options)
  }

  async set(options) {
    await super.set(options);
    return asyncSet$2(this.fd, options)
  }

  async get() {
    await super.get();
    return asyncGet$2(this.fd)
  }

  async getBaudRate() {
    await super.get();
    return asyncGetBaudRate$2(this.fd)
  }

  async drain() {
    await super.drain();
    await this.writeOperation;
    return asyncDrain$2(this.fd)
  }

  async flush() {
    await super.flush();
    return asyncFlush$2(this.fd)
  }
}

var win32 = WindowsBinding;

const logger$2 = browser('serialport/bindings/poller');

const PollerBindings = bindings_1('bindings.node').Poller;

const EVENTS = {
  UV_READABLE: 0b0001,
  UV_WRITABLE: 0b0010,
  UV_DISCONNECT: 0b0100,
};

function handleEvent(error, eventFlag) {
  if (error) {
    logger$2('error', error);
    this.emit('readable', error);
    this.emit('writable', error);
    this.emit('disconnect', error);
    return
  }
  if (eventFlag & EVENTS.UV_READABLE) {
    logger$2('received "readable"');
    this.emit('readable', null);
  }
  if (eventFlag & EVENTS.UV_WRITABLE) {
    logger$2('received "writable"');
    this.emit('writable', null);
  }
  if (eventFlag & EVENTS.UV_DISCONNECT) {
    logger$2('received "disconnect"');
    this.emit('disconnect', null);
  }
}

/**
 * Polls unix systems for readable or writable states of a file or serialport
 */
class Poller extends EventEmitter {
  constructor(fd, FDPoller = PollerBindings) {
    logger$2('Creating poller');
    super();
    this.poller = new FDPoller(fd, handleEvent.bind(this));
  }
  /**
   * Wait for the next event to occur
   * @param {string} event ('readable'|'writable'|'disconnect')
   * @returns {Poller} returns itself
   */
  once(event, callback) {
    switch (event) {
      case 'readable':
        this.poll(EVENTS.UV_READABLE);
        break
      case 'writable':
        this.poll(EVENTS.UV_WRITABLE);
        break
      case 'disconnect':
        this.poll(EVENTS.UV_DISCONNECT);
        break
    }
    return super.once(event, callback)
  }

  /**
   * Ask the bindings to listen for an event, it is recommend to use `.once()` for easy use
   * @param {EVENTS} eventFlag polls for an event or group of events based upon a flag.
   * @returns {undefined}
   */
  poll(eventFlag) {
    eventFlag = eventFlag || 0;

    if (eventFlag & EVENTS.UV_READABLE) {
      logger$2('Polling for "readable"');
    }
    if (eventFlag & EVENTS.UV_WRITABLE) {
      logger$2('Polling for "writable"');
    }
    if (eventFlag & EVENTS.UV_DISCONNECT) {
      logger$2('Polling for "disconnect"');
    }

    this.poller.poll(eventFlag);
  }

  /**
   * Stop listening for events and cancel all outstanding listening with an error
   * @returns {undefined}
   */
  stop() {
    logger$2('Stopping poller');
    this.poller.stop();
    this.emitCanceled();
  }

  destroy() {
    logger$2('Destroying poller');
    this.poller.destroy();
    this.emitCanceled();
  }

  emitCanceled() {
    const err = new Error('Canceled');
    err.canceled = true;
    this.emit('readable', err);
    this.emit('writable', err);
    this.emit('disconnect', err);
  }
}

Poller.EVENTS = EVENTS;

var poller = Poller;

const logger$1 = browser('serialport/bindings/unixRead');
const { promisify: promisify$3 } = require$$0;

const readAsync = promisify$3(fs.read);

const readable = binding => {
  return new Promise((resolve, reject) => {
    binding.poller.once('readable', err => (err ? reject(err) : resolve()));
  })
};

const unixRead = async ({ binding, buffer, offset, length, fsReadAsync = readAsync }) => {
  logger$1('Starting read');
  if (!binding.isOpen) {
    const err = new Error('Port is not open');
    err.canceled = true;
    throw err
  }

  try {
    const { bytesRead } = await fsReadAsync(binding.fd, buffer, offset, length, null);
    if (bytesRead === 0) {
      return unixRead({ binding, buffer, offset, length, fsReadAsync })
    }
    logger$1('Finished read', bytesRead, 'bytes');
    return { bytesRead, buffer }
  } catch (err) {
    logger$1('read error', err);
    if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {
      if (!binding.isOpen) {
        const err = new Error('Port is not open');
        err.canceled = true;
        throw err
      }
      logger$1('waiting for readable because of code:', err.code);
      await readable(binding);
      return unixRead({ binding, buffer, offset, length, fsReadAsync })
    }

    const disconnectError =
      err.code === 'EBADF' || // Bad file number means we got closed
      err.code === 'ENXIO' || // No such device or address probably usb disconnect
      err.code === 'UNKNOWN' ||
      err.errno === -1; // generic error

    if (disconnectError) {
      err.disconnect = true;
      logger$1('disconnecting', err);
    }

    throw err
  }
};

var unixRead_1 = unixRead;

const logger = browser('serialport/bindings/unixWrite');
const { promisify: promisify$2 } = require$$0;

const writeAsync = promisify$2(fs.write);

const writable = binding => {
  return new Promise((resolve, reject) => {
    binding.poller.once('writable', err => (err ? reject(err) : resolve()));
  })
};

const unixWrite = async ({ binding, buffer, offset = 0, fsWriteAsync = writeAsync }) => {
  const bytesToWrite = buffer.length - offset;
  logger('Starting write', buffer.length, 'bytes offset', offset, 'bytesToWrite', bytesToWrite);
  if (!binding.isOpen) {
    throw new Error('Port is not open')
  }
  try {
    const { bytesWritten } = await fsWriteAsync(binding.fd, buffer, offset, bytesToWrite);
    logger('write returned: wrote', bytesWritten, 'bytes');
    if (bytesWritten + offset < buffer.length) {
      if (!binding.isOpen) {
        throw new Error('Port is not open')
      }
      return unixWrite({ binding, buffer, offset: bytesWritten + offset, fsWriteAsync })
    }

    logger('Finished writing', bytesWritten + offset, 'bytes');
  } catch (err) {
    logger('write errored', err);
    if (err.code === 'EAGAIN' || err.code === 'EWOULDBLOCK' || err.code === 'EINTR') {
      if (!binding.isOpen) {
        throw new Error('Port is not open')
      }
      logger('waiting for writable because of code:', err.code);
      await writable(binding);
      return unixWrite({ binding, buffer, offset, fsWriteAsync })
    }

    const disconnectError =
      err.code === 'EBADF' || // Bad file number means we got closed
      err.code === 'ENXIO' || // No such device or address probably usb disconnect
      err.code === 'UNKNOWN' ||
      err.errno === -1; // generic error

    if (disconnectError) {
      err.disconnect = true;
      logger('disconnecting', err);
    }

    logger('error', err);
    throw err
  }
};
var unixWrite_1 = unixWrite;

const { promisify: promisify$1 } = require$$0;
const binding$1 = bindings_1('bindings.node');




const { wrapWithHiddenComName: wrapWithHiddenComName$1 } = legacy;

const defaultBindingOptions$1 = Object.freeze({
  vmin: 1,
  vtime: 0,
});

const asyncList = promisify$1(binding$1.list);
const asyncOpen$1 = promisify$1(binding$1.open);
const asyncClose$1 = promisify$1(binding$1.close);
const asyncUpdate$1 = promisify$1(binding$1.update);
const asyncSet$1 = promisify$1(binding$1.set);
const asyncGet$1 = promisify$1(binding$1.get);
const asyncGetBaudRate$1 = promisify$1(binding$1.getBaudRate);
const asyncDrain$1 = promisify$1(binding$1.drain);
const asyncFlush$1 = promisify$1(binding$1.flush);

/**
 * The Darwin binding layer for OSX
 */
class DarwinBinding extends lib$9 {
  static list() {
    return wrapWithHiddenComName$1(asyncList())
  }

  constructor(opt = {}) {
    super(opt);
    this.bindingOptions = { ...defaultBindingOptions$1, ...opt.bindingOptions };
    this.fd = null;
    this.writeOperation = null;
  }

  get isOpen() {
    return this.fd !== null
  }

  async open(path, options) {
    await super.open(path, options);
    this.openOptions = { ...this.bindingOptions, ...options };
    const fd = await asyncOpen$1(path, this.openOptions);
    this.fd = fd;
    this.poller = new poller(fd);
  }

  async close() {
    await super.close();
    const fd = this.fd;
    this.poller.stop();
    this.poller.destroy();
    this.poller = null;
    this.openOptions = null;
    this.fd = null;
    return asyncClose$1(fd)
  }

  async read(buffer, offset, length) {
    await super.read(buffer, offset, length);
    return unixRead_1({ binding: this, buffer, offset, length })
  }

  async write(buffer) {
    this.writeOperation = super.write(buffer).then(async () => {
      if (buffer.length === 0) {
        return
      }
      await unixWrite_1({ binding: this, buffer });
      this.writeOperation = null;
    });
    return this.writeOperation
  }

  async update(options) {
    await super.update(options);
    return asyncUpdate$1(this.fd, options)
  }

  async set(options) {
    await super.set(options);
    return asyncSet$1(this.fd, options)
  }

  async get() {
    await super.get();
    return asyncGet$1(this.fd)
  }

  async getBaudRate() {
    await super.get();
    return asyncGetBaudRate$1(this.fd)
  }

  async drain() {
    await super.drain();
    await this.writeOperation;
    return asyncDrain$1(this.fd)
  }

  async flush() {
    await super.flush();
    return asyncFlush$1(this.fd)
  }
}

var darwin = DarwinBinding;

const { Transform: Transform$5 } = require$$0$1;

/**
 * A transform stream that emits data each time a byte sequence is received.
 * @extends Transform
 * @summary To use the `Delimiter` parser, provide a delimiter as a string, buffer, or array of bytes. Runs in O(n) time.
 * @example
const SerialPort = require('serialport')
const Delimiter = require('@serialport/parser-delimiter')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Delimiter({ delimiter: '\n' }))
parser.on('data', console.log)
 */
class DelimiterParser extends Transform$5 {
  constructor(options = {}) {
    super(options);

    if (options.delimiter === undefined) {
      throw new TypeError('"delimiter" is not a bufferable object')
    }

    if (options.delimiter.length === 0) {
      throw new TypeError('"delimiter" has a 0 or undefined length')
    }

    this.includeDelimiter = options.includeDelimiter !== undefined ? options.includeDelimiter : false;
    this.delimiter = Buffer.from(options.delimiter);
    this.buffer = Buffer.alloc(0);
  }

  _transform(chunk, encoding, cb) {
    let data = Buffer.concat([this.buffer, chunk]);
    let position;
    while ((position = data.indexOf(this.delimiter)) !== -1) {
      this.push(data.slice(0, position + (this.includeDelimiter ? this.delimiter.length : 0)));
      data = data.slice(position + this.delimiter.length);
    }
    this.buffer = data;
    cb();
  }

  _flush(cb) {
    this.push(this.buffer);
    this.buffer = Buffer.alloc(0);
    cb();
  }
}

var lib$8 = DelimiterParser;

/**
 *  A transform stream that emits data after a newline delimiter is received.
 * @summary To use the `Readline` parser, provide a delimiter (defaults to `\n`). Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
 * @extends DelimiterParser
 * @example
const SerialPort = require('serialport')
const Readline = require('@serialport/parser-readline')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Readline({ delimiter: '\r\n' }))
parser.on('data', console.log)
*/
class ReadLineParser extends lib$8 {
  constructor(options) {
    const opts = {
      delimiter: Buffer.from('\n', 'utf8'),
      encoding: 'utf8',
      ...options,
    };

    if (typeof opts.delimiter === 'string') {
      opts.delimiter = Buffer.from(opts.delimiter, opts.encoding);
    }

    super(opts);
  }
}

var lib$7 = ReadLineParser;

// get only serial port names
function checkPathOfDevice(path) {
  return /(tty(S|WCH|ACM|USB|AMA|MFD|O|XRUSB)|rfcomm)/.test(path) && path
}

function propName(name) {
  return {
    DEVNAME: 'path',
    ID_VENDOR_ENC: 'manufacturer',
    ID_SERIAL_SHORT: 'serialNumber',
    ID_VENDOR_ID: 'vendorId',
    ID_MODEL_ID: 'productId',
    DEVLINKS: 'pnpId',
  }[name.toUpperCase()]
}

function decodeHexEscape(str) {
  return str.replace(/\\x([a-fA-F0-9]{2})/g, (a, b) => {
    return String.fromCharCode(parseInt(b, 16))
  })
}

function propVal(name, val) {
  if (name === 'pnpId') {
    const match = val.match(/\/by-id\/([^\s]+)/);
    return (match && match[1]) || undefined
  }
  if (name === 'manufacturer') {
    return decodeHexEscape(val)
  }
  if (/^0x/.test(val)) {
    return val.substr(2)
  }
  return val
}

function listLinux() {
  return new Promise((resolve, reject) => {
    const ports = [];
    const ude = childProcess.spawn('udevadm', ['info', '-e']);
    const lines = ude.stdout.pipe(new lib$7());
    ude.on('close', code => code && reject(new Error(`Error listing ports udevadm exited with error code: ${code}`)));
    ude.on('error', reject);
    lines.on('error', reject);

    let port = {};
    let skipPort = false;
    lines.on('data', line => {
      const lineType = line.slice(0, 1);
      const data = line.slice(3);
      // new port entry
      if (lineType === 'P') {
        port = {
          manufacturer: undefined,
          serialNumber: undefined,
          pnpId: undefined,
          locationId: undefined,
          vendorId: undefined,
          productId: undefined,
        };
        skipPort = false;
        return
      }

      if (skipPort) {
        return
      }

      // Check dev name and save port if it matches flag to skip the rest of the data if not
      if (lineType === 'N') {
        if (checkPathOfDevice(data)) {
          ports.push(port);
        } else {
          skipPort = true;
        }
        return
      }

      // parse data about each port
      if (lineType === 'E') {
        const keyValue = data.match(/^(.+)=(.*)/);
        if (!keyValue) {
          return
        }
        const key = propName(keyValue[1]);
        if (!key) {
          return
        }
        port[key] = propVal(key, keyValue[2]);
      }
    });

    lines.on('finish', () => resolve(ports));
  })
}

var linuxList = listLinux;

const { promisify } = require$$0;
const binding = bindings_1('bindings.node');





const { wrapWithHiddenComName } = legacy;

const defaultBindingOptions = Object.freeze({
  vmin: 1,
  vtime: 0,
});

const asyncOpen = promisify(binding.open);
const asyncClose = promisify(binding.close);
const asyncUpdate = promisify(binding.update);
const asyncSet = promisify(binding.set);
const asyncGet = promisify(binding.get);
const asyncGetBaudRate = promisify(binding.getBaudRate);
const asyncDrain = promisify(binding.drain);
const asyncFlush = promisify(binding.flush);

/**
 * The linux binding layer
 */
class LinuxBinding extends lib$9 {
  static list() {
    return wrapWithHiddenComName(linuxList())
  }

  constructor(opt = {}) {
    super(opt);
    this.bindingOptions = { ...defaultBindingOptions, ...opt.bindingOptions };
    this.fd = null;
    this.writeOperation = null;
  }

  get isOpen() {
    return this.fd !== null
  }

  async open(path, options) {
    await super.open(path, options);
    this.openOptions = { ...this.bindingOptions, ...options };
    const fd = await asyncOpen(path, this.openOptions);
    this.fd = fd;
    this.poller = new poller(fd);
  }

  async close() {
    await super.close();
    const fd = this.fd;
    this.poller.stop();
    this.poller.destroy();
    this.poller = null;
    this.openOptions = null;
    this.fd = null;
    return asyncClose(fd)
  }

  async read(buffer, offset, length) {
    await super.read(buffer, offset, length);
    return unixRead_1({ binding: this, buffer, offset, length })
  }

  async write(buffer) {
    this.writeOperation = super.write(buffer).then(async () => {
      if (buffer.length === 0) {
        return
      }
      await unixWrite_1({ binding: this, buffer });
      this.writeOperation = null;
    });
    return this.writeOperation
  }

  async update(options) {
    await super.update(options);
    return asyncUpdate(this.fd, options)
  }

  async set(options) {
    await super.set(options);
    return asyncSet(this.fd, options)
  }

  async get() {
    await super.get();
    return asyncGet(this.fd)
  }

  async getBaudRate() {
    await super.get();
    return asyncGetBaudRate(this.fd)
  }

  async drain() {
    await super.drain();
    await this.writeOperation;
    return asyncDrain(this.fd)
  }

  async flush() {
    await super.flush();
    return asyncFlush(this.fd)
  }
}

var linux = LinuxBinding;

var lib$6 = createCommonjsModule(function (module) {
const debug = browser('serialport/bindings');

switch (process.platform) {
  case 'win32':
    debug('loading WindowsBinding');
    module.exports = win32;
    break
  case 'darwin':
    debug('loading DarwinBinding');
    module.exports = darwin;
    break
  default:
    debug('loading LinuxBinding');
    module.exports = linux;
}
});

const { Transform: Transform$4 } = require$$0$1;

/**
 * Emit data every number of bytes
 * @extends Transform
 * @param {Object} options parser options object
 * @param {Number} options.length the number of bytes on each data event
 * @summary A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.
 * @example
const SerialPort = require('serialport')
const ByteLength = require('@serialport/parser-byte-length')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new ByteLength({length: 8}))
parser.on('data', console.log) // will have 8 bytes per data event
 */
class ByteLengthParser extends Transform$4 {
  constructor(options = {}) {
    super(options);

    if (typeof options.length !== 'number') {
      throw new TypeError('"length" is not a number')
    }

    if (options.length < 1) {
      throw new TypeError('"length" is not greater than 0')
    }

    this.length = options.length;
    this.position = 0;
    this.buffer = Buffer.alloc(this.length);
  }

  _transform(chunk, encoding, cb) {
    let cursor = 0;
    while (cursor < chunk.length) {
      this.buffer[this.position] = chunk[cursor];
      cursor++;
      this.position++;
      if (this.position === this.length) {
        this.push(this.buffer);
        this.buffer = Buffer.alloc(this.length);
        this.position = 0;
      }
    }
    cb();
  }

  _flush(cb) {
    this.push(this.buffer.slice(0, this.position));
    this.buffer = Buffer.alloc(this.length);
    cb();
  }
}

var lib$5 = ByteLengthParser;

const { Transform: Transform$3 } = require$$0$1;

/**
 * Parse the CCTalk protocol
 * @extends Transform
 * @summary A transform stream that emits CCTalk packets as they are received.
 * @example
const SerialPort = require('serialport')
const CCTalk = require('@serialport/parser-cctalk')
const port = new SerialPort('/dev/ttyUSB0')
const parser = port.pipe(new CCtalk())
parser.on('data', console.log)
 */
class CCTalkParser extends Transform$3 {
  constructor(maxDelayBetweenBytesMs = 50) {
    super();
    this.array = [];
    this.cursor = 0;
    this.lastByteFetchTime = 0;
    this.maxDelayBetweenBytesMs = maxDelayBetweenBytesMs;
  }
  _transform(buffer, _, cb) {
    if (this.maxDelayBetweenBytesMs > 0) {
      const now = Date.now();
      if (now - this.lastByteFetchTime > this.maxDelayBetweenBytesMs) {
        this.array = [];
        this.cursor = 0;
      }
      this.lastByteFetchTime = now;
    }

    this.cursor += buffer.length;
    // TODO: Better Faster es7 no supported by node 4
    // ES7 allows directly push [...buffer]
    // this.array = this.array.concat(Array.from(buffer)) //Slower ?!?
    Array.from(buffer).map(byte => this.array.push(byte));
    while (this.cursor > 1 && this.cursor >= this.array[1] + 5) {
      // full frame accumulated
      // copy command from the array
      const FullMsgLength = this.array[1] + 5;

      const frame = Buffer.from(this.array.slice(0, FullMsgLength));
      // Preserve Extra Data
      this.array = this.array.slice(frame.length, this.array.length);
      this.cursor -= FullMsgLength;
      this.push(frame);
    }
    cb();
  }
}

var lib$4 = CCTalkParser;

const { Transform: Transform$2 } = require$$0$1;

/**
 * Emits data if there is a pause between packets for the specified amount of time.
 * @extends Transform
 * @param {Object} options parser options object
 * @param {Number} options.interval the period of silence in milliseconds after which data is emited
 * @param {Number} options.maxBufferSize the maximum number of bytes after which data will be emited. Defaults to 65536.
 * @summary A transform stream that emits data as a buffer after not receiving any bytes for the specified amount of time.
 * @example
const SerialPort = require('serialport')
const InterByteTimeout = require('@serialport/parser-inter-byte-timeout')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new InterByteTimeout({interval: 30}))
parser.on('data', console.log) // will emit data if there is a pause between packets greater than 30ms
 */

class InterByteTimeoutParser extends Transform$2 {
  constructor(options) {
    super();
    options = { maxBufferSize: 65536, ...options };
    if (!options.interval) {
      throw new TypeError('"interval" is required')
    }

    if (typeof options.interval !== 'number' || Number.isNaN(options.interval)) {
      throw new TypeError('"interval" is not a number')
    }

    if (options.interval < 1) {
      throw new TypeError('"interval" is not greater than 0')
    }

    if (typeof options.maxBufferSize !== 'number' || Number.isNaN(options.maxBufferSize)) {
      throw new TypeError('"maxBufferSize" is not a number')
    }

    if (options.maxBufferSize < 1) {
      throw new TypeError('"maxBufferSize" is not greater than 0')
    }

    this.maxBufferSize = options.maxBufferSize;
    this.currentPacket = [];
    this.interval = options.interval;
    this.intervalID = -1;
  }
  _transform(chunk, encoding, cb) {
    clearTimeout(this.intervalID);
    for (let offset = 0; offset < chunk.length; offset++) {
      this.currentPacket.push(chunk[offset]);
      if (this.currentPacket.length >= this.maxBufferSize) {
        this.emitPacket();
      }
    }
    this.intervalID = setTimeout(this.emitPacket.bind(this), this.interval);
    cb();
  }
  emitPacket() {
    clearTimeout(this.intervalID);
    if (this.currentPacket.length > 0) {
      this.push(Buffer.from(this.currentPacket));
    }
    this.currentPacket = [];
  }
  _flush(cb) {
    this.emitPacket();
    cb();
  }
}

var lib$3 = InterByteTimeoutParser;

const { Transform: Transform$1 } = require$$0$1;

/**
 * A transform stream that waits for a sequence of "ready" bytes before emitting a ready event and emitting data events
 * @summary To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.
 * @extends Transform
 * @example
const SerialPort = require('serialport')
const Ready = require('@serialport/parser-ready')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Ready({ delimiter: 'READY' }))
parser.on('ready', () => console.log('the ready byte sequence has been received'))
parser.on('data', console.log) // all data after READY is received
 */
class ReadyParser extends Transform$1 {
  /**
   *
   * @param {object} options options for the parser
   * @param {string|Buffer|array} options.delimiter data to look for before emitted "ready"
   */
  constructor(options = {}) {
    if (options.delimiter === undefined) {
      throw new TypeError('"delimiter" is not a bufferable object')
    }

    if (options.delimiter.length === 0) {
      throw new TypeError('"delimiter" has a 0 or undefined length')
    }

    super(options);
    this.delimiter = Buffer.from(options.delimiter);
    this.readOffset = 0;
    this.ready = false;
  }

  _transform(chunk, encoding, cb) {
    if (this.ready) {
      this.push(chunk);
      return cb()
    }
    const delimiter = this.delimiter;
    let chunkOffset = 0;
    while (this.readOffset < delimiter.length && chunkOffset < chunk.length) {
      if (delimiter[this.readOffset] === chunk[chunkOffset]) {
        this.readOffset++;
      } else {
        this.readOffset = 0;
      }
      chunkOffset++;
    }
    if (this.readOffset === delimiter.length) {
      this.ready = true;
      this.emit('ready');
      const chunkRest = chunk.slice(chunkOffset);
      if (chunkRest.length > 0) {
        this.push(chunkRest);
      }
    }
    cb();
  }
}

var lib$2 = ReadyParser;

const { Transform } = require$$0$1;

/**
 * A transform stream that uses a regular expression to split the incoming text upon.
 *
 * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
 * @extends Transform
 * @example
const SerialPort = require('serialport')
const Regex = require('@serialport/parser-regex')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Regex({ regex: /[\r\n]+/ }))
parser.on('data', console.log)
 */
class RegexParser extends Transform {
  constructor(options) {
    const opts = {
      encoding: 'utf8',
      ...options,
    };

    if (opts.regex === undefined) {
      throw new TypeError('"options.regex" must be a regular expression pattern or object')
    }

    if (!(opts.regex instanceof RegExp)) {
      opts.regex = new RegExp(opts.regex);
    }
    super(opts);

    this.regex = opts.regex;
    this.data = '';
  }

  _transform(chunk, encoding, cb) {
    const data = this.data + chunk;
    const parts = data.split(this.regex);
    this.data = parts.pop();

    parts.forEach(part => {
      this.push(part);
    });
    cb();
  }

  _flush(cb) {
    this.push(this.data);
    this.data = '';
    cb();
  }
}

var lib$1 = RegexParser;

var parsers = {
  ByteLength: lib$5,
  CCTalk: lib$4,
  Delimiter: lib$8,
  InterByteTimeout: lib$3,
  Readline: lib$7,
  Ready: lib$2,
  Regex: lib$1,
};

/**
 * @type {AbstractBinding}
 */
lib$a.Binding = lib$6;

/**
 * @type {Parsers}
 */
lib$a.parsers = parsers;

var lib = lib$a;

/* Created by Fry on 7/11/16.
//
//On Mac, to see serial ports, open Terminal app and enter: ls /dev/tty.* or ls /dev/cu.*
// https://learn.sparkfun.com/tutorials/terminal-basics/all  geared toward windows, but servicable.
//for devices, mac and linux have both tty and cu for full duplex. windows only has tty.
//Macintosh problems
//sparkfun RedBoard is an arduino Uno, what james loaned me.
//didn't work for uploading programs to the board.
//Arduino Micro and Leonado have something special ie "mouse and kbd support
//that allows them to work on Mac.  I got Arduino Leonardo because
//arduino mciro can't take shields.
//Mike says some ardino boards don't work on mac, get a micro-arduino from Microcenter.
    // http://www.meetup.com/Cambridge-Hackspace/ tues 6:30PM union sq somerville
    //https://www.arduino.cc/en/Reference/Firmata  a Kketch for prototcol
    //that interfaces to javascript via https://github.com/firmata/firmata.js?utm_source=buffer&utm_medium=twitter&utm_campaign=Buffer&utm_content=buffer52691
//firmata provides the sketch for arduino and protolcoe. firmata .js is a way to use it
//from js, johnny 5 and cylon use firmata underneath and build on top of it.
//to make a "compiled" file of a arduino sketch, edit the sketch, then use File menu/Sketch/export compiled binary
//gort: CLI that can upload .hex files into an arduino board. for mac, win. linux
 The ATmega32U4 on the Micro comes preprogrammed with a bootloader that allows you to upload new code to it without the use of an external hardware programmer. It communicates using the AVR109 protocol.
 You can also bypass the bootloader and program the microcontroller through the ICSP (In-Circuit Serial Programming) header using Arduino ISP or similar; see these instructions for details.
temboo IOT js connectivity requires setting up a local js server to use.
// http://www.penvon.com/b/robotics-projects-github-cm596 johnny5 has 3 times the github stars as cylon
    // ie 6K vs 2K July, 2016


//strategy: sandbox never has to know connectionIDs, just paths.
//keep map between them on the UI side
*/


var serial_port_path_to_info_map = {};


//serial_path_to_info_map is deprecated in PatchDDE
//var serial_path_to_info_map = serial_port_path_to_info_map
//module.exports.serial_path_to_info_map = serial_path_to_info_map

function serial_port_path_to_info(port_path){
    return serial_port_path_to_info_map[port_path]
}


//only cleared by relaunching DDE on purpose.
//a given port_path only gets a port made for it once.
var serial_port_path_to_port_map = {};

function serial_get_or_make_port(port_path, port_options, open_callback){
    let port = serial_port_path_to_port_map[port_path];
    if(!port) {
        port = new lib(port_path, port_options, open_callback);
        serial_port_path_to_port_map[port_path] = port;
    }
    else {
        for(let key in port_options){
           let val = port_options[key];
           port.settings[key] = val;
        }
        if(!port.isOpen){
            port.open(open_callback);
            //open_callback.call(port, null, port_path)
        }
    }
    return port
}


//called by serial_connect AND Serial.send
function serial_init_one_info_map_item(port_path, port_options, simulate=null, capture_n_items=1, item_delimiter="\n",
                                       trim_whitespace=true,
                                       parse_items=true, capture_extras="error"){
    let sim_actual = Robot.get_simulate_actual(simulate);
    serial_port_path_to_info_map[port_path] =
           {port_path:            port_path, //Needed because sometimes we get the info without having the port_path thru serial_path_to_connection_id
            simulate:        sim_actual,
            capture_n_items: capture_n_items,
            item_delimiter:  item_delimiter,
            trim_whitespace: trim_whitespace,
            parse_items:     parse_items,
            capture_extras:  capture_extras,
            pending_input:   ""};

}

//called from robot.js
function serial_connect(port_path, port_options, simulate=null, capture_n_items=1, item_delimiter="\n",
                        trim_whitespace=true,
                        parse_items=true, capture_extras="error", job_instance){ //"ignore", "capture", "error"
    const sim_actual = Robot.get_simulate_actual(simulate);
    serial_init_one_info_map_item(port_path, port_options, simulate, capture_n_items, item_delimiter,
        trim_whitespace, parse_items, capture_extras);
    if(sim_actual === true){ //if its "both" we let the below handle it. Don't want to call serial_new_socket_callback twice when sim is "both"
        serial_new_socket_callback(port_path, job_instance); //don't need to simulate socket_id for now
    }
    if ((sim_actual === false) || (sim_actual == "both")){
        const port = serial_get_or_make_port(port_path, port_options); //new SerialPort(port_path, port_options)
        port.on('open', function(err){
            if (err) {
                 dde_error("new SerialPort to port_path: " + port_path + " errored with; " + err);
            }
            else {
                out("Serial connection made to: " + port_path);
                serial_port_path_to_info_map[port_path].port = port;
                serial_new_socket_callback(port_path, job_instance);
                let the_path = port_path; //needed for closed over var below
                port.on('data',  function(data) { serial_onReceiveCallback(data, the_path); } );
                port.on('error', function(data) { onReceiveErrorCallback(data, the_path); } );
            }
        });
    }
}

function serial_new_socket_callback(port_path, job_instance){
    console.log("serial_new_socket_callback passed port_path: " + port_path);
    Serial.set_a_robot_instance_socket_id(port_path, job_instance);
}

function convertStringToArrayBuffer(str) {
    var buf=new ArrayBuffer(str.length);
    var bufView=new Uint8Array(buf);
    for (var i=0; i<str.length; i++) {
        bufView[i]=str.charCodeAt(i);
    }
    return buf;
}


//content is a string
function serial_send(instruction_array, port_path, simulate=null, sim_fun) {
    let ins_str = instruction_array[Serial.INSTRUCTION_TYPE + 1];
    //out("top of serial_send about to send: " + ins_str)
    let robot_status = instruction_array.slice(0, Serial.DATA0); //Make a copy. don't include any fields for data coming back. We'll push onto this if need be.
    let info = serial_port_path_to_info(port_path);
    let the_path = port_path; //because JS closures sometimes don't close over para variables
    info.robot_status = robot_status; //save this so that onReceive can get it later
    info.robot_status[Serial.ERROR_CODE] = 0; //we haven't errored yet so pretend like its going to work
    //set the error code, and maybe call serial_on_done_with_sending
    info.robot_status[Serial.START_TIME] =  Date.now();
    const sim_actual = Robot.get_simulate_actual(simulate);
    if ((sim_actual === true) || (sim_actual === "both")){
        setTimeout(function(){
                        serial_send_simulate(ins_str, sim_fun, port_path, sim_actual);
                    }, 300);
    }
    if ((sim_actual === false) || (sim_actual === "both")){
        if (info.port){
            //out("just before serial send of: " + ins_str)
            info.port.write(ins_str, //convertStringToArrayBuffer(ins_str),
                function(error){ //can't rely on this getting called before onReceived so mostly pretend like its not called, except in error cases
                    if (error){
                        dde_error("In serial_send callback to port_path: " + the_path +
                                  " got the error: " + send_info.error);
                    }
                    else {
                        out("serial write just sent: " + ins_str);
                    }
                });
            if (info.capture_n_items === 0){ //everything ok just no robot_status to collect.
                serial_on_done_with_sending(info.robot_status);
            }
        }
        else {
            let err = "In serial_send, attempt to send to port_path: " + the_path +
                      " which doesn't have a port.";
            info.robot_status[Serial.ERROR_CODE] = err;
            serial_on_done_with_sending(info.robot_status);
        }
    }
}


function serial_send_simulate(ins_str, sim_fun, port_path, sim_actual){
    let result = sim_fun.call(null, ins_str);
    let info_from_board = {buffer: convertStringToArrayBuffer(result)};
    out("in serial_send_simulate with ins_str: " + ins_str + " and info_from_board: " + info_from_board);
    if (sim_actual === true) { //but NOT "both", since we let the hardware side take it from here if its "both".
        serial_onReceiveCallback(info_from_board, port_path);
    }
}

//_______receive data from serial_________
//getting data from serial: when info comes in from ANY port,
//onReceieveCallback gets called.

//might return a negative number if we are allowed to capture extras
function left_to_capture(info){
    let already_captured = info.robot_status.length - Serial.DATA0;
    let result = info.capture_n_items - already_captured;
    return result
}

function serial_onReceiveCallback(info_from_board, port_path) { //if there's an error, onReceiveErrorCallback will be called instead
    //out("top of serial_onReceiveCallback")
    if (info_from_board.length) { //info.connectionId == expectedConnectionId &&
        //let str = convertArrayBufferToString(info_from_board.buffer, info_from_board.length); //note that if aruino program
        let str = info_from_board.toString();
        //str should now have in it the NEW chars sent from the serial port.

        //has Serial.println("turned off1"); int foo = 2 + 3; Serial.println("turned off2");
        //then this is ONE call to serial_onReceiveCallback with a string "turned off1\r\nturned off2\t\n"
        //so that 1 string should count for 2 items from the board from the dde standpoint.
        //maybe the board software batches up the 2 strings and maybe chrome receive does.
        //whichever, I need to handle it.
        //Note 2: when simulating, often info_from_board.length will return undefined.
        //this is ok as convertArrayBufferToString will just go with the length of the
        //info_from_board.buffer, which will usually be correct for the content.
        out("serial_onReceiveCallback got " + info_from_board.length + " byte string: '" + str + "'.");
        let info = serial_port_path_to_info_map[port_path];
        if (!info) {
           warning("serial_onReceiveCallback got port_path: " + port_path + " that's not a known DDE connected port_path which is possibly OK if you've got other serial devices sending in data.");
        }
        else {
            info.robot_status[Serial.ERROR_CODE] = 0; //since onReceivedErrorCallback wasn't called in place of this,
	    //we know it didn't error. Can't rely on send callback getting called so do this here.
            //first process the returned string
            let delim = info.item_delimiter; //can be multi_character.
            if ((delim === "") || (delim === 0)) { //str holds exactly one item. we never put a substr in pending
                if (left_to_capture(info) > 0) {
                    serial_store_str_in_rs(str, info);
                    if (left_to_capture(info) == 0){
                        serial_on_done_with_sending(info.robot_status, info.port_path);
                    }
                    else { out("waiting for more strings from robot."); } 
			//beware, they might never come in which case the job is just hanging.
			//TODO: Add a timeout option which continues anyway.
                    //the job has status_code "running" but is really paused waiting for response.
                }
                else if (info.capture_extras == "capture"){
                    serial_send_extra_item_to_job(str, info.port_path, false, info); //false means everything ok
                }
                else if (info.capture_extras == "error"){
                    serial_send_extra_item_to_job(str, info.port_path, true, info); //true means job should error
                }
                else if (info.capture_extras == "ignore") ;
                else { dde_error("serial_onReceiveCallback got invalid capture_extras value of: " + info.capture_extras); }
            }
            else if (typeof(delim) == "string"){
                if (str === "") ;//we do have a real delimiter, but no delimiter in the input str and no chars so this is a no_op
                else {
                    info.pending_input += str;
                    while(true) {
                        let delim_index = info.pending_input.indexOf(delim);
                        if(delim_index == -1) { break; } 
				// no "full" items in the pending input so break now and wait for more data from the serial port
                        else { //at least one more full item in pending_input. grab it!
                            let item = info.pending_input.substring(0, delim_index);
                            info.pending_input = info.pending_input.substring(delim_index + delim.length);
                            if (info.trim_whitespace) { item = item.trim(); }
                            if (left_to_capture(info) > 0) {
                                serial_store_str_in_rs(item, info);
                                if (left_to_capture(info) == 0){
                                    serial_on_done_with_sending(info.robot_status, info.port_path);
                                }
                                else { out("waiting for more strings from robot."); } 
					//beware, they might never come in which case the job is just hanging.
					//TODO: Add a timeout option which continues anyway.
                            //the job has status_code "running" but is really paused waiting for response.
                            }
                            else if (info.capture_extras == "capture"){
                                serial_send_extra_item_to_job(item, info.port_path, false, info); //false means everything ok
                            }
                            else if (info.capture_extras == "error"){
                                serial_send_extra_item_to_job(item, info.port_path, true, info); //true means job should error
                            }
                            else if (info.capture_extras == "ignore") ;
                            else { dde_error("serial_onReceiveCallback got invalid capture_extras value of: " + info.capture_extras); }
                        }
                    }
                }
            }
            else if (typeof(delim) == "number"){
                str = info.pending_input + str; //pending_input will never contain a delim
                info.pending_input = ""; //we're using it, so makes this empty, just so there's no using pending twice.
                if (str === "") ;//we do have a real delimter, but no delimiter in the input str and no chars so this is a no_op
                else {
                    while(true){
                        if (str.length >= delim){
                            let item = str.substr(0, delim); //the item this time in the loop
                            str = str.slice(delim); //get ready for the NEXT iteration
                            if (left_to_capture(info) > 0) {
                                serial_store_str_in_rs(item, info);
                                if (left_to_capture(info) == 0){
                                    serial_on_done_with_sending(info.robot_status, info.port_path);
                                }
                                else { out("waiting for more strings from robot."); } 
					//beware, they might never come in which case the job is just hanging.
					//TODO: Add a timeout option which continues anyway.

                                //the job has status_code "running" but is really paused waiting for response.
                            }
                            else if (info.capture_extras == "capture"){
                                serial_send_extra_item_to_job(item, info.port_path, false, info); //false means everything ok
                            }
                            else if (info.capture_extras == "error"){
                                serial_send_extra_item_to_job(item, info.port_path, true, info); //true means job should error
                            }
                            else if (info.capture_extras == "ignore") ;
                            else { dde_error("serial_onReceiveCallback got invalid capture_extras value of: " + info.capture_extras); }
                        }
                        else {
                            info.pending = str; //might be "" and that's ok
                            break;
                        }
                    }
                }
            }
            else {
                dde_error("serial_onReceiveCallback got an item_delimiter of: " + delim + " which is not valid because its not a string or an integer.");
            }
        }
    }
}

function serial_parse_string_maybe(str, info){
    if (info.parse_items) {
        try {
            str = JSON.parse(str);
        }
        catch(e) {}
    }
    return str
}

function serial_store_str_in_rs(str, info){
    str = serial_parse_string_maybe(str, info);
    info.robot_status.push(str);
}

function onReceiveErrorCallback(info_from_board, port_path) {
    //let id = info_from_board.connectionId
    let errnum = info_from_board.error;
    let error_codes = ["disconnected", "timeout", "device_lost", "break", "frame_error", "overrun",
                        "buffer_overflow", "parity_error", "system_error"]; //beware,
        //it wouldn't surprise me if "disconnected" was really error_code 1 instead of 0.
        //but this is what https://developer.chrome.com/apps/serial#event-onReceive sez.
    let info = serial_port_path_to_info_map[port_path];
    let rs = info.robot_status;
    out("onReceiveErrorCallback called with port_path: " + info.port_path, "red");
    rs[Serial.ERROR_CODE] = error_codes[errnum];
    serial_on_done_with_sending(rs, info.port_path);
}

//like socket on_receive
function serial_on_done_with_sending(robot_status, port_path){
    robot_status[Serial.STOP_TIME] = Date.now();
    out("serial_on_done_with_sending with rs: " + robot_status);
    let job_id       = robot_status[Serial.JOB_ID];
    let job_instance = Job.job_id_to_job_instance(job_id);
    let ins_id = robot_status[Serial.INSTRUCTION_ID];
    let ins = ((ins_id >= 0) ? job_instance.do_list[ins_id] : null);
    let rob;
    if (ins && ins.robot) { rob = ins.robot; } //used when instruction src code has a subject of a robot isntance
    else                  { rob = job_instance.robot; } //get the default robot for the job
    rob.robot_done_with_instruction(robot_status);
}

function serial_send_extra_item_to_job(string_from_robot, port_path, is_error=false, info){ //info only needed on UI side.
    string_from_robot = serial_parse_string_maybe(string_from_robot, info); //after this, might not be a string anymore
    let job_instance = Serial.get_job_with_robot_path(port_path);
    if (job_instance){
        job_instance.robot.robot_status.push(string_from_robot); //just add to the current robot_status. Might not be right.
        if (is_error){
            job_instance.stop_for_reason("errored", "Serial robot returned unexpected extra string: " + string_from_robot);
        }
    }
}


//with an arduino connected, this disconnects but then immdiately afterwards,
//a new connection is automatically made with 1 higher port number and same port_path.
/*function serial_disconnect(port_path){
    let info = serial_port_path_to_info_map[port_path]
    if (info){
        if((info.simulate === false) || (info.simulate === "both")) {
            //info.port.close(out)
            //serial_flush(port_path) //perhaps unnecessary
            try { //serial_flush(port_path) //perhaps unnecessary
                  info.port.drain(function(err){
                        try { info.port.close(function(err){out(port_path + " closed. " + err)}) }
                        catch(err) { out("serial port error: " + err.message) }
                  //info.port.close(out)
            }
            catch(err) { out ("serial port already closed.") }
        }
        delete serial_port_path_to_info_map[port_path]
    }
}*/
//James N new version oct 20 , 2020
function serial_disconnect(port_path){
    let info = serial_port_path_to_info_map[port_path];
    if (info){
        if((info.simulate === false) || (info.simulate === "both")) {
            //info.port.close(function(err){out("closed"+err)})
            try {
              info.port.drain(function(err){
                    try { info.port.close(function(err){
                                             out(port_path + " closed. " + err);
                                          }); }
                    catch(err) {
                        out("Error closing serial port: " + err.message);
                    }
                });
            }
            catch(err) {
                out ("serial port already closed.");
            }
            out("closing: " + port_path);
        }
        delete serial_port_path_to_info_map[port_path];
        out("deleted: " + port_path);
    }
    else {
        out("no serial port found at " + port_path);
    }
}


function serial_disconnect_all(){
  for(let port_path of Object.keys(serial_port_path_to_info_map)){
      serial_disconnect(port_path);
  }
}

/*Created by Fry on 7/4/16.*/



//_______PERSISTENT: store name-value pairs in a file. Keep a copy of hte file in JS env, persistent_values
//and write it out every time its changed.

persistent_values = {};

//returns undefined if key doesn't exist
function persistent_get$1(key="get_all"){
    if (key == "get_all") { return persistent_values }
    else { return persistent_values[key] }
}


//FILE SYSTEM

function read_file$1(path, encoding="utf8"){
    path = make_full_path(path);
    try{ return fs$1.readFileSync(path, encoding) }
    catch(err){
        if(err.message.startsWith("Access denied")){
            dde_error("You are not permitted to access files<br/>" +
                      " outside of Documents/dde_apps such as<br/>" +
                      path);
        }
        else {
            dde_error("read_file could not get the content of:<br/><code title='unEVALable'>" + path + "</code>");
        }
    }
}


//for paths starting with "dexter0:" and other dexters, this will always return false.
//you have to use read_file_async for that and pass it a callback that
//handles the err when the file doesn't exist.
function file_exists$1(path){
    path = make_full_path(path);
    return fs$1.existsSync(path)
}



//only works for dde computer, not dexter computer paths.
//is syncrhonous
function make_folder(path){
    path = make_full_path(path); //now parh is os_specific
    let path_array = path.split(folder_separator());
    let path_being_built = "";
    for(let path_part of path_array){
        if(path_part != ""){ //often the first and last path_part will be ""
            path_being_built += (folder_separator() + path_part);
            path_being_built = adjust_path_to_os(path_being_built);

            if(!file_exists$1(path_being_built)){
               try{
                    fs$1.mkdirSync(path_being_built);
               }
               catch(err){
                   dde_error("In make_folder, could not make: " + path_being_built + "<br/>" +
                             err.message);
               }
            }
        }
    }
    return true
}

function folder_separator(){
    if (operating_system == "win") { return "\\" }
    else                           { return "/"  }
}
//within dde, paths should have slashes.
//I convert "incomming paths to have slashes.
//but when we have to access the OS, the
//files have to be convered to be OS specific, ie for windows, have backslashes.
//for that we call adjust_path_to_os
function convert_backslashes_to_slashes(a_string){
    return a_string.replace(/\\/g, "/")
}

function add_default_file_prefix_maybe(path){
    if (is_root_path(path)) { return path }
    //else if (path.startsWith(dde_apps_folder)) { return path } //redundant with the above
    else if (path.includes(":")) { return path }
    else if (path.startsWith("dde_apps/")) {
        path = path.substring(8);
        return dde_apps_folder + path
    }
    else if(path.startsWith("./")) {  //return "dde_apps/" + path.substring(2)
        return dde_apps_folder + path.substring(1)
    }
    else if (path.startsWith("../")) {
        let core_path = path.substring(3);
        let last_slash_pos = dde_apps_folder.lastIndexOf("/");

        let up_from_dde_apps = dde_apps_folder.substring(0, last_slash_pos + 1);
        new_path = up_from_dde_apps + core_path;
        return new_path
    }
    else { return dde_apps_folder + "/" + path }
}


function adjust_path_to_os(path){
    if (path.includes("://")) { //looks like a url so leave it alone
       return path
    }
    else {//dde standard is to use / between separators and that's what users should use
          // But for windows compatibility we need backslash,. This fn called by dde utils like
          //read_file. Note if user passes in a path with backslashes,
          //this will do nothing. So on a windows machine, that's ok,
          //but on a mac or linux, that's bad. But this is unlikely to
          //happen on a mac or linus, esp since dde standard is slash.
        let result = path.replace(/\//g, folder_separator());
        //we might have  a path like \C:\foo.txt in which case, take off the initial backslash
        if(result.startsWith("\\") && //looks like we've got WindowsOS path
            //(result.length == 3) && //unnecessarily restrictive
            (result[2] == ":")) {
            result = result.substring(1);
        }
        return result
    }
}

function make_full_path(path, adjust_to_os=true){
    path = add_default_file_prefix_maybe(path);
    if (adjust_to_os) { path = adjust_path_to_os(path); }
    return path
}

function is_root_path(path){
    if(path.startsWith("/")) { return true }
    else if ((path.length > 1) && (path[1] == ":")){
        let first_char = path[0];
        return ((first_char >= "A") && (first_char <= "Z"))
    }
    else { return false }
    //return starts_with_one_of(path, ["/", "C:", "D:", "E:", "F:", "G:"]) //C: etc. is for Windows OS.
}

//returns boolean
//this can be called many times a session, but
//the first time its called, it actually does the work
//to figure out if the dexter really supports sending files or not,
//and that result is cached and used on all subsequent calls,
//until dde is booted.
function node_server_supports_editor(dexter_instance){
    if(dexter_instance.supports_editor !== undefined) {
        return dexter_instance.supports_editor
    }
    else {
        let url = "http://" + dexter_instance.ip_address + "/edit/folder.png";
        let content;
        try{
            content = get_page({url: url,
                                method: "GET",
                                timeout: 500 //no need for a long timeout here since should
                             //be a local wired connection.
            });
        }
        catch(err) { //could be timeout or just no node server on Dexter.
            dexter_instance.supports_editor = false;
            return false
        }
        if(content.startsWith("Error:")){
            dexter_instance.supports_editor = false;
            return false
        }
        else {
            dexter_instance.supports_editor = true;
            return true
        }
    }
}


//______new load_files synchronous______
//verify all paths first before loading any of them because we want to error early.
/*function load_files(...paths) {
   let prefix = dde_apps_folder + "/"
   let resolved_paths = []
   for (let path of paths){
       path = convert_backslashes_to_slashes(path) //use slashes throughout.
       if (is_root_path(path)){  //path.startsWith("/")
           let last_slash_pos = path.lastIndexOf("/")
           prefix = path.substring(0, last_slash_pos + 1) // prefix always starts and ends with a slash
       }
       else { path = prefix + path }
       if (path.endsWith(".js")){resolved_paths.push(path)}
       else if (path.endsWith("/")){ //this path is not loadable, its just to setup prefix for the next path
           if (is_root_path(path)) { //we've got a new prefix
               prefix = path
           }
           else {
               out("load_files passed a file path: " + path + " that ended in slash<br/>" +
                   "indicating that it should be a new  prefix for subsequent file names<br/>" +
                   "but it did not start with / <br/>" +
                   "so the prefix is incomplete.<br/>" +
                   "None of the files have been loaded.",
                   "red")
               dde_error("load_files could not resolve path: " + path + " into a proper file path.")
           }
       }
       else {
           out("load_files passed a file: " + path + "<br/>" +
               "that did not end in slash indicating a new url prefix<br/>" +
               "nor did it end with '.js' indicating a file to load.<br/>" +
               "None of the files have been loaded.",
               "red")
           dde_error("load_files could not resolve path: " + path + " into a proper file patn.")
       }
   }
   //now make sure we can get all the contents before actually loading any
   let contents = []
   for (let path of resolved_paths){
        let content = read_file(path) //might error
        contents.push(content)
   }
   //finally if we get to this point, we've got all the contents so time to load
    let result
    for (let resolved_paths_index = 0;
             resolved_paths_index < resolved_paths.length;
             resolved_paths_index ++){
        let resolved_path = resolved_paths[resolved_paths_index]
        let content = contents[resolved_paths_index]
        out("loading file: " + resolved_path, "green")
        result = window.eval(content)
    }
    return result
}*/
//simplied from above. ending in slash resets the default "prefix".
function load_files$1(...paths) {
    console.log("load_files called with: " + paths);
    let prefix = dde_apps_folder + "/"; //prefix always starts with slash and ends with slash
    let resolved_paths = [];
    for (let path of paths){
        //console.log("working on " + path)
        path = convert_backslashes_to_slashes(path); //use slashes throughout.
        if (path === "/"){ //just reset prefix to the default
            prefix = dde_apps_folder + "/";
        }
        else if (is_root_path(path)){  //path.startsWith("/")
            if (path.endsWith("/")) { prefix = path; }
            else { resolved_paths.push(path); }
        }
        else if (path.endsWith("/")) { //path does not start with slash.
            prefix = dde_apps_folder + "/" + path; //assumes path is intended to be under dde_apps/
        }
        /*kent doesn't like restriction. Sending filesin email need not tto have the .js extension
               and some pure data files maybe shouldn't have .js extnsions.
        else if (!path.endsWith(".js")){
            dde_error("loading_file got path: " + path + ' which does not end in ".js"'  +
                        "<br/>No files were loaded.")
        }*/
        else { //path does not start or end with slash.
            path = prefix + path;
            resolved_paths.push(path);
        }
    }
    //now make sure we can get all the contents before actually loading any
    let contents = [];
    for (let path of resolved_paths){
        //console.log("getting content for: " + path)
        let content;
        if(path.endsWith(".py") || path.endsWith(".pyc")){
            content = [path];
        }
        else {
            content = read_file$1(path); //might error
        }
        //onsole.log("got content: " + content)
        contents.push(content);
    }
    //finally if we get to this point, we've got all the contents so time to eval
    let result;
    for (let resolved_paths_index = 0;
         resolved_paths_index < resolved_paths.length;
         resolved_paths_index ++){
        let resolved_path = resolved_paths[resolved_paths_index];
        let content = contents[resolved_paths_index];
        out("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loading file: " + resolved_path, "green");
          //the commented out code below uses window.eval(content), which returns the value of the
          // last epxression in the file much less often than eval_js_part2, so use eval_js_part2 instead.
          //I must use eval and not eval_js_part2 because the later is not in core/job engine s
          //so that prevents loadiing files in job engine, which is a show stopper.
        try{let prev_loading_file =  window["loading_file"];
            window["loading_file"] = resolved_path;
            window.Job = Job$1; //needed if content has "Job" in it.
            if(Array.isArray(content)){
                Py.load_file(content[0]);
                result = "Loading Python files doesn't return a result.";
            }
            else {
                result = window.eval(content);
            }
            window["loading_file"] = prev_loading_file;
        }
        catch(err){
            let file_mess = prepend_file_message_maybe(err.message); //do before undefining loading_file
            window["loading_file"] = undefined; //must do before calling dde_error or
                                               //it won't get done BUT need dde_error to print out the loading file message.
            dde_error(file_mess);
        }
        out("Done loading file: " + resolved_path, "green");
    }
    return result
}

//__________out  and helper fns_______

//______show_window_____
//output the "vals" to inspector or stdout.
//this use to be the default show_window callback
//good for debugging
function show_window_values(vals){
    if(platform == "dde") { inspect(vals); }
    else {
        let str = JSON.stringify(vals);
        write_to_stdout(str);
    }
}
global.show_window_values = show_window_values;

//after using this fn to define a global constant,

//[123, 456].micron() => [0.000123, 0.000456]
//assumes input array has numbers in microns, and converts
//those numbers to meters.
Array.prototype.micron = function(){
    let result = [];
    for(let elt of this) {
       if (typeof(elt) === "number") {
           elt = elt*_um;
       }
       result.push(elt);
    }
    return result
};

//input array is in arcseconds, converts its angles to degrees.
Array.prototype.arcsec = function(){
    if(//Instruction.is_oplet_array(this) && //unnecessary.
    // we know its an array or this method wouldn't be called.
    //and if array is too short, a lookup returns undefined
        ["a", "P"].includes(this[Instruction$1.INSTRUCTION_TYPE])){
        let result = this.slice(); //make copy
        for(let i = Instruction$1.INSTRUCTION_ARG0;
            i <= Instruction$1.INSTRUCTION_ARG4; i++){
            let orig_val = this[i];
            if (orig_val !== undefined){
                result[i] = orig_val * _arcsec;
            }
        }
        return result
    }
    else {
        let result = [];
        for(let elt of this) {
            if (typeof(elt) === "number") {
                elt = elt*_arcsec;
            }
            result.push(elt);
        }
        return result
    }
};

let messages = [
"NOERROR 0 No error",
"EPERM 1 Operation not permitted",
"ENOENT 2 No such file or directory",
"ESRCH 3 No such process",
"EINTR 4 Interrupted system call",
"EIO 5 Input/output error",
"ENXIO 6 No such device or address",
"E2BIG 7 Argument list too long",
"ENOEXEC 8 Exec format error",
"EBADF 9 Bad file descriptor",
"ECHILD 10 No child processes",
"EAGAIN 11 Resource temporarily unavailable",
"ENOMEM 12 Cannot allocate memory",
"EACCES 13 Permission denied",
"EFAULT 14 Bad address",
"ENOTBLK 15 Block device required",
"EBUSY 16 Device or resource busy",
"EEXIST 17 File exists",
"EXDEV 18 Invalid cross-device link",
"ENODEV 19 No such device",
"ENOTDIR 20 Not a directory",
"EISDIR 21 Is a directory",
"EINVAL 22 Invalid argument",
"ENFILE 23 Too many open files in system",
"EMFILE 24 Too many open files",
"ENOTTY 25 Inappropriate ioctl for device",
"ETXTBSY 26 Text file busy",
"EFBIG 27 File too large",
"ENOSPC 28 No space left on device",
"ESPIPE 29 Illegal seek",
"EROFS 30 Read-only file system",
"EMLINK 31 Too many links",
"EPIPE 32 Broken pipe",
"EDOM 33 Numerical argument out of domain",
"ERANGE 34 Numerical result out of range",
"EDEADLK 35 Resource deadlock avoided",
"ENAMETOOLONG 36 File name too long",
"ENOLCK 37 No locks available",
"ENOSYS 38 Function not implemented",
"ENOTEMPTY 39 Directory not empty",
"ELOOP 40 Too many levels of symbolic links",
"EWOULDBLOCK 11 Resource temporarily unavailable",
"ENOMSG 42 No message of desired type",
"EIDRM 43 Identifier removed",
"ECHRNG 44 Channel number out of range",
"EL2NSYNC 45 Level 2 not synchronized",
"EL3HLT 46 Level 3 halted",
"EL3RST 47 Level 3 reset",
"ELNRNG 48 Link number out of range",
"EUNATCH 49 Protocol driver not attached",
"ENOCSI 50 No CSI structure available",
"EL2HLT 51 Level 2 halted",
"EBADE 52 Invalid exchange",
"EBADR 53 Invalid request descriptor",
"EXFULL 54 Exchange full",
"ENOANO 55 No anode",
"EBADRQC 56 Invalid request code",
"EBADSLT 57 Invalid slot",
"EDEADLOCK 35 Resource deadlock avoided",
"EBFONT 59 Bad font file format",
"ENOSTR 60 Device not a stream",
"ENODATA 61 No data available",
"ETIME 62 Timer expired",
"ENOSR 63 Out of streams resources",
"ENONET 64 Machine is not on the network",
"ENOPKG 65 Package not installed",
"EREMOTE 66 Object is remote",
"ENOLINK 67 Link has been severed",
"EADV 68 Advertise error",
"EPROTO 71 Protocol error",
"EMULTIHOP 72 Multihop attempted",
"EDOTDOT 73 RFS specific error",
"EBADMSG 74 Bad message",
"EOVERFLOW 75 Value too large for defined data type",
"ENOTUNIQ 76 Name not unique on network",
"EBADFD 77 File descriptor in bad state",
"EREMCHG 78 Remote address changed",
"ELIBACC 79 Can not access a needed shared library",
"ELIBBAD 80 Accessing a corrupted shared library",
"ELIBSCN 81 .lib section in a.out corrupted",
"ELIBMAX 82 Attempting to link in too many shared libraries",
"ELIBEXEC 83 Cannot exec a shared library directly",
"EILSEQ 84 Invalid or incomplete multibyte or wide character",
"ERESTART 85 Interrupted system call should be restarted",
"ESTRPIPE 86 Streams pipe error",
"EUSERS 87 Too many users",
"ENOTSOCK 88 Socket operation on non-socket",
"EDESTADDRREQ 89 Destination address required",
"EMSGSIZE 90 Message too long",
"EPROTOTYPE 91 Protocol wrong type for socket",
"ENOPROTOOPT 92 Protocol not available",
"EPROTONOSUPPORT 93 Protocol not supported",
"ESOCKTNOSUPPORT 94 Socket type not supported",
"EOPNOTSUPP 95 Operation not supported",
"EPFNOSUPPORT 96 Protocol family not supported",
"EAFNOSUPPORT 97 Address family not supported by protocol",
"EADDRINUSE 98 Address already in use",
"EADDRNOTAVAIL 99 Cannot assign requested address",
"ENETDOWN 100 Network is down",
"ENETUNREACH 101 Network is unreachable",
"ENETRESET 102 Network dropped connection on reset",
"ECONNABORTED 103 Software caused connection abort",
"ECONNRESET 104 Connection reset by peer",
"ENOBUFS 105 No buffer space available",
"EISCONN 106 Transport endpoint is already connected",
"ENOTCONN 107 Transport endpoint is not connected",
"ESHUTDOWN 108 Cannot send after transport endpoint shutdown",
"ETOOMANYREFS 109 Too many references: cannot splice",
"ETIMEDOUT 110 Connection timed out",
"ECONNREFUSED 111 Connection refused",
"EHOSTDOWN 112 Host is down",
"EHOSTUNREACH 113 No route to host",
"EALREADY 114 Operation already in progress",
"EINPROGRESS 115 Operation now in progress",
"ESTALE 116 Stale file handle",
"EUCLEAN 117 Structure needs cleaning",
"ENOTNAM 118 Not a XENIX named type file",
"ENAVAIL 119 No XENIX semaphores available",
"EISNAM 120 Is a named type file",
"EREMOTEIO 121 Remote I/O error",
"EDQUOT 122 Disk quota exceeded",
"ENOMEDIUM 123 No medium found",
"EMEDIUMTYPE 124 Wrong medium type",
"ECANCELED 125 Operation canceled",
"ENOKEY 126 Required key not available",
"EKEYEXPIRED 127 Key has expired",
"EKEYREVOKED 128 Key has been revoked",
"EKEYREJECTED 129 Key was rejected by service",
"EOWNERDEAD 130 Owner died",
"ENOTRECOVERABLE 131 State not recoverable",
"ERFKILL 132 Operation not possible due to RF-kill",
"EHWPOISON 133 Memory page has hardware error",
];
function linux_error_message(error_code){
   if((error_code >= 0) && (error_code < messages.length)){
          return messages[error_code]
   }
   else { return "UNKNOWN " + error_code + " unknown linux error." }
}

//see doc: https://nodejs.org/api/readline.html

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});


//examples of input:
// 'Job.myJob.stop_for_reason("interrupted", "user stopped the job")'
// 'Job.define_and_start_job("/srv/samba/share/dde_apps/myjob.js")'
// 'Job.myjob.color_job_button()'
// 'Job.myjob.server_job_button_click()'
rl.on('line', function(input) {
    //onsole.log("<br/>stdin got line: " + input)
    out("(out call) stdin got line: " + input + "\n");
    eval(input);
});

//https://stackoverflow.com/questions/4976466/difference-between-process-stdout-write-and-console-log-in-node-js
function write_to_stdout$1(str){
    if(str.trim() == "") ; //do nothing
    else {
        //if(str.startsWith("<for_server>")){
          //console.log("write_to_stdout got: " + str)
        //}
        process.stdout.write(str); //"<br/>" + str) //same as console.log ???
    }
}


function close_readline(){
    rl.close();
}

/**Created by Fry on 2/5/16. */

class Job$1{
    constructor({name="",
                 robot=Robot$1.dexter0,
                 do_list=[],
                 keep_history=true,
                 show_instructions=true,
                 inter_do_item_dur=0.01,
                 user_data={},
                 default_workspace_pose=null,
                 program_counter=0,
                 ending_program_counter="end",
                 initial_instruction=null,
                 data_array_transformer="P",
                 start_if_robot_busy=false,
                 if_robot_status_error   = Job$1.prototype.if_robot_status_error_default,
                 if_instruction_error    = Job$1.prototype.if_instruction_error_default,
                 if_dexter_connect_error = Job$1.prototype.if_dexter_connect_error_default,
                 when_do_list_done = "run_when_stopped", //other possible value: "wait" (for another instruction)
                 when_stopped = "stop",
                 when_stopped_conditions = true, //{completed: true,
                                                // errored: true,
                                                //errored_from_dexter: true,
                                                //errored_from_dexter_connect, false, but this is always false and actually its value doesn't matter
                                                                             //but we set it to false just to indicate to users that
                                                                             //dexter_connect errors never run the when_stopped instruction
                                                //interrupted: true,
                                                //interrupted_by_stop_button: true
                                                //},
                 callback_param = "start_object_callback"} = {}){
    if (Job$1[name] && Job$1[name].is_active()) { //we're redefining the job so we want to make sure the
        /*//previous version is stopped.
        //if (Job[name].robot instanceof Dexter) {Job[name].robot.empty_instruction_queue_now() }
        Job[name].stop_for_reason("interrupted", "User is redefining this job.")
        let orig_args = arguments[0]
        setTimeout(function(){ new Job (orig_args) }, 200)
        return ["While attempting to define Job." +  name + ", there already is a Job with that name running<br/>" +
        "It is being stopped. Shortly the new Job will be defined."]
        //note this string must be wrapped in an array, because if a non-object is returned
        //from a JS constructor, it is ignored and an instance of the class is returned instead.
        //horrible JS design. https://javascript.info/constructor-new
        */
        //new, don't stop job algorithm
        warning("You have attempted to redefine the already running Job." + name +
                "<br/>If you want to redefine it, you must first stop it.<br/>" +
                "(click the Job's button)");
        return null //returning null minimizes, but doesn't eliminate, the inspector view of the new job.
                    //we want to minimze the inspector view because the warning ins printed in the out
                    //pane before the inspect of the job and we don't want to "hide" that warning
                    //fron the user.
    }

    for(let key in arguments[0]){
        if(!Job$1.job_default_params.hasOwnProperty(key)) {
            dde_error("Attempt to create a job with an invalid key of: " + key + "<br/>" +
                      "Click on 'Job' to see its valid argument names.");
        }
    }

    //default_workspace_pose=null, //Coor.Table,
    //data_array_transformer="P", //"P" is more efficient than Dexter.pid_move_all_joints, as uses make_ins & 1/2 the do_list items
    //start_if_robot_busy=false,  //if false and robot.is_busy() is true, Job.start is halted early
    //program_counter is the counter of the next instruction that should be executed.
    //so since we're currently "executing" 1 instruction, and after its done,
    //we'll be incrementing the pc, then internally we decriment the
    //passed in program_counter. If its negative, it means
    //compute it from the end, ie -1 means when set_next_do is called,
    //it will set the pc to the length of the do_list, hence we'll be done
    //with the job. -2 means we want to execute the last instruction of the
    //job next, etc.
    //save the args
    if (default_workspace_pose == null) {
          default_workspace_pose=Job$1.job_default_params.default_workspace_pose;
    }
    if (!Array.isArray(do_list)){
        open_doc(job_param_do_list_doc_id);
        dde_error("While defining <code style='color:black;'>Job." + name + "</code><br/>" +
                  "the <b style='color:black;'>do_list</b> must be an array, but instead is: <br/>" +
                  "<code style='color:black;'>" + do_list + "</code>");
        return
    }
    try { do_list = Job$1.flatten_do_list_array(do_list); }
    catch(err){
        open_doc(job_param_do_list_doc_id);
        dde_error("While defining Job." + name + "<br/>" + err.message);
        return
    }
    if((typeof(data_array_transformer) == "function") ||
        Robot$1.is_oplet(data_array_transformer)) ; //ok
    else {
        dde_error("Attempt to define Job." + name + " with a data_array_transformer of:<br/>" +
            data_array_transformer +
            "<br/>which not a function or an oplet.");
    }
    if (name === "") ; //ok as a name, it will be computed.
    else if(!is_string_an_identifier(name)){ //not ok as a name
        dde_error('You have attempted to make a new Job with an invalid name of: "' + name + '".<br/>Job names should start with a letter and be followed by only letters, digits or underscores.');
    }
    if (!Job$1.is_plausible_when_stopped_value(when_stopped)) {
        dde_error("new Job passed: " + when_stopped + " but that isn't a valid value.");
    }
    if(!Job$1.is_when_stopped_conditions_valid(when_stopped_conditions)){
        dde_error("While defining Job." + name + " when_stopped_conditions is not valid.<br/>" +
                   "Valid values are true, false, and a literal object containing one or more of the properties:<br/>" +
                   Job$1.when_stopped_conditions_property_names);
    }
    if (!(robot instanceof Robot$1)){
        if (!Robot$1.dexter0){
            dde_error("Attempt to create Job." + name + " with no valid robot instance.<br/>" +
                " Note that Robot.dexter0 is not defined<br/> " +
                " but should be in your file: Documents/dde_apps/dde_init.js <br/>" +
                " after setting the default ip_address and port.<br/> " +
                " To generate the default dde_init.js file,<br/>" +
                " rename your existing one and relaunch DDE.");
        }
        else {
            dde_error("Attempt to create Job." + name + " with no valid robot instance.<br/>" +
                "You can let the robot param to new Job default, to get a correct Robot.dexter.0");
        }
    }
    else if(!["run_when_stopped", "wait"].includes(when_do_list_done)){
        dde_error('Attempt to create Job.' + name + ' with invalid value for when_do_list_done of: "' + when_do_list_done +
                 '"<br/>Valid values are: ' + '"run_when_stopped" and "wait".');
    }

    else {
        this.orig_args =   {do_list: do_list,
                            robot: robot,
                            keep_history: keep_history,
                            show_instructions: show_instructions,
                            inter_do_item_dur: inter_do_item_dur,
                            user_data: user_data,
                            default_workspace_pose: default_workspace_pose,
                            program_counter: program_counter,
                            ending_program_counter: ending_program_counter,
                            initial_instruction: initial_instruction,
                            data_array_transformer: data_array_transformer,
                            start_if_robot_busy: start_if_robot_busy,
                            if_robot_status_error: if_robot_status_error,
                            if_instruction_error:  if_instruction_error,
                            if_dexter_connect_error: if_dexter_connect_error,
                            when_do_list_done: when_do_list_done,
                            when_stopped: when_stopped,
                            when_stopped_conditions: when_stopped_conditions,
                            callback_param: callback_param};
        //setup name
        Job$1.job_id_base       += 1;
        this.job_id            = Job$1.job_id_base;
        if ((name == null) || (name == "")){ this.name = Job$1.generate_default_name(); }//"job_" + this.job_id }
        else                               { this.name = name; }
        this.robot = robot;
        this.user_data       = user_data; //needed in case we call to_source_code before first start of the job
                                         //this also has the desirable property, that if we define the job,
                                         //then set a user data variable in it ie Job.my_job.user_data.foo = 2,
                                         //that that will get into the org_args.user_data.foo and then
                                         //when we start the job, the "copying out of the user data from orig_args will
                                         //have the user_data.foo2, and start will pick that up and set Job.my_job.user_data
                                         //to the obj with foo = 2 at the start of the job.
                                         //now if during the course of the job,we eval  Job.my_job.user_data.bar=3, ok
                                         //that bar is in the user data for the rest of the job and when it ends.
                                         //NOW if we restart that same job, it will have in user data ONLY foo=2,
                                         //not bar=3. This is good as we want to reinit the job, but foo=2 is really
                                         //"part of the def". (until we redefine the job from its source!
                                         //Messaging.set_variable takes advantage of this if Job is not running when
                                         //Messaging.set_variable is called.
        this.program_counter = program_counter; //this is set in start BUT, if we have an unstarted job, and
                             //instruction_location_to_id needs access to program_counter, this needs to be set
        this.highest_completed_instruction_id = -1; //same comment as for program_counter above.
        this.sent_from_job_instruction_queue  = []; //will be re-inited by start, but needed here
          //just in case some instructions are to be inserted before this job starts.
        Job$1[this.name]         = this; //beware: if we create this job twice, the 2nd version will be bound to the name, not the first.
        Job$1.remember_job_name(this.name);
        this.set_status_code("not_started");//see Job.status_codes for the legal values
                                           //if no button yet, this call doesn't errur
        this.add_job_button_maybe(); //always calls color_job_button, even if a button isn't added
    }
    } //end constructor



    static generate_default_name(){
        for(let i = 2; i < 1000000; i++){
            let candidate = "job" + i;
            if (!Job$1[candidate])  { return candidate }
        }
        dde_error("Job.generate_default_name has found a million job names in use. Seems unlikely.");
    }

    static class_init(){ //inits the Job class as a whole. called by ready
        this.job_default_params =
               {name: null,
                robot: Robot$1.dexter0,
                do_list: [],
                keep_history: true,
                show_instructions: true,
                inter_do_item_dur: 0.01,
                user_data:{},
                default_workspace_pose: Coor$1.Table, //null, //error on loading DDE if I use: Coor.Table, so we init this in Job.constructor
                program_counter:0,
                ending_program_counter:"end",
                initial_instruction: null,
                data_array_transformer: "P",
                start_if_robot_busy: false,
                if_robot_status_error: Job$1.prototype.if_robot_status_error_default,
                if_instruction_error: Job$1.prototype.if_instruction_error_default,
                if_dexter_connect_error: Job$1.prototype.if_dexter_connect_error_default,
                when_do_list_done: "run_when_stopped",
                when_stopped: "stop", //also can be any do_list item
                when_stopped_conditions: true,
                callback_param: "start_object_callback"};
    }

    //return an array of job instances that are defined in path_name.
    //warning might be a empty array
    static instances_in_file(path_name){
        let base_id_before_new_defs = Job$1.job_id_base;
        let result = [];
        try{ load_files$1(path_name); }
        catch(err) {
            dde_error("In Job.instances_in_file, evaling the content of path name: " + path_name +
                      " errored with: " + err.message);
        }
        for(let i = base_id_before_new_defs + 1; true; i++){
            let inst_maybe = Job$1.job_id_to_job_instance(i);  //returns null if no exist
            if(inst_maybe) { result.push(inst_maybe); }
            else { break; }
        }
        return result
    }

    toString() { return "Job." + this.name }

    show_progress_maybe(){
        //out("top of show_progress_maybe for job: " + this.name + " of: " + this.show_instructions)
        if(this.show_instructions === true) { this.show_progress(); }
        else if(typeof(this.show_instructions) === "function") {
            this.show_instructions.call(this);
        }
        //else do nothing
    }

    show_progress(){
        //out("top of show_progress for job: " + this.name + " of: " + this.show_instructions)
        var html_id = this.name + this.start_time.getTime();
        var cur_instr = this.current_instruction();
        if (this.program_counter >= this.do_list.length) { cur_instr = "Done."; }
        else { cur_instr = "Last instruction sent: "  + Instruction$1.to_string(cur_instr); }
        var content = "Job: " + this.name + " pc: "   + this.program_counter +
            " <progress style='width:100px;' value='" + this.program_counter +
                      "' max='" + this.do_list.length + "'></progress>" +
            " of " +  this.do_list.length + ". " +
            cur_instr +
            "&nbsp;&nbsp;<button onclick='inspect_out(Job." + this.name + ")'>Inspect</button>";

        out(content, "#5808ff", html_id);
    }

    show_progress_and_user_data(){
        //out("top of show_progress_and_user_data for job: " + this.name + " of: " + this.show_instructions)
        var html_id = this.name + this.start_time.getTime();
        var cur_instr = this.current_instruction();
        if (this.program_counter >= this.do_list.length) { cur_instr = "Done."; }
        else { cur_instr = "Last instruction sent: "  + Instruction$1.to_string(cur_instr); }
        var content = "Job: " + this.name + " pc: "   + this.program_counter +
            " <progress style='width:100px;' value='" + this.program_counter +
            "' max='" + this.do_list.length + "'></progress>" +
            " of " +  this.do_list.length + ". " +
            cur_instr +
            "&nbsp;&nbsp;<button onclick='inspect_out(Job." + this.name + ")'>Inspect</button>" +
            "<br/>";
        let has_user_data = false;
        for(let prop_name in this.user_data){
            if(!has_user_data) { //first iteration only
                content += "<b>user_data: </b> ";
                has_user_data = true;
            }
            content += "<i>" + prop_name + "</i>: " + this.user_data[prop_name] + "&nbsp;&nbsp;";
        }
        if(!has_user_data) { content += "<i>No user data in this job.</i>"; }
        out(content, "#5808ff", html_id);
    }

    /*obsolete version coded before Job.instances_in_file, and
       it starts the LAST job defined in the file, not the first
     static define_and_start_job(job_file_path){
        let starting_job_id_base = Job.job_id_base
        try { load_files(job_file_path)}
        catch(err){
            console.log("Could not find Job file: " + job_file_path + "  " + err.message)
            return
        }
        if(starting_job_id_base == Job.job_id_base){
            console.log("apparently there is no job definition in " + job_file_path)
        }
        else {
            let latest_job = Job.job_id_to_job_instance(Job.job_id_base)
            if(latest_job instanceof Job){
                latest_job.start()
            }
            else {
                console.log(job_file_path + " appears to contain a valid job definition.")
            }
        }
    }*/

    // todo starts the first job defined in the file, if any
    // beware: if all the jobs defined in the file are defined and active, then
    //Job.instances_in_file will return [] because new Job has to shut down
    //same named jobs that are active before redefining the job and that requires
    //a set timeout meaning the initial call to "new Job" won't actually make the
    //new job and thus won't increment the job_id. So Job.instances_in_file fails.
    //So a lously work-around is to make sure all the jobs in the file are
    //non-active. the problem is, the caller of define_and_start_job (and Job.instances_in_file)
    // often doesn't know what jobs are in the file, and that's why they're calling Job.instances_in_file
    //in the first place. So Job.instances_in_file and define_and_start_job really should take
    //a callback, but that causes some problems with where these fns are used. ARGGG
    //relavent in Messaging, dexter_user_interface2, instruction start_job, and maybe a few more places.
    static define_and_start_job(job_file_path){
        let job_instances = Job$1.instances_in_file(job_file_path);
        if(job_instances.length == 0) {
            warning("Could not find a Job definition in the file: " + job_file_path);
            if((platform === "node") && !window.keep_alive_value){
                warning("Closing the process of loading: " + job_file_path +
                        "<br/>If you want to keep the process up,<br/>check <b>keep_alive</b> before clicking the Job button.");
                close_readline(); //causes the process running this job to finish.
            }
        }
        else {
            job_instances[0].start();
        }
    }

    static start_and_monitor_dexter_job(job_src){
        let base_id_before_new_def = Job$1.job_id_base;
        try { window.eval(job_src); }
        catch(err) {dde_error("While evaling the job definition to send to Dexter,<br/>" +
                              "got error: " + err.message);
        }
        if(Job$1.job_id_base == base_id_before_new_def) {
            dde_error("Before transfering Job file to Dexter,<br/>" +
                      "could not find a Job definition in the selected source.");
        }
        else {
            let dde_monitor_job_instance = Job$1.job_id_to_job_instance(base_id_before_new_def + 1);
            //we "hollow out" this job that is being sent to dexter by
            //replacing its do_list with something that monitors the
            //running of the job on Dexter.
            //we use the same name for that dexter-running job as this
            //monitoring job running in DDE.
            //by using start with do_list, we preserve orig_args.do_list
            //in the DDE job instance
            //which will be useful for user to inspect.
            //user_data:job_src set so that RESTARTING this job by clicking its button will use the orig selected src to restart the job
            dde_monitor_job_instance.start({
                user_data: {stop_job_running_on_dexter: false,
                            already_handled_stop_job:false,
                            dexter_log:undefined,
                            job_src:job_src}, //the presence of this user data prop is how we tell that this job is a dde_shadow_job_instance.
                inter_do_item_dur: 0.005, //we don't need to have fast communication with Dexter. Minimize traffic
                do_list:[
                        Dexter$1.write_file("job/run/" + dde_monitor_job_instance.name + ".dde", job_src),
                        Control.loop(true,
                            function(){
                                if(this.user_data.dexter_log !== undefined) { //got a dexter log meaning the monitored job is over.
                                    return Control.break()
                                }
                                else if ((this.user_data.stop_job_running_on_dexter) &&
                                         (!this.user_data.already_handled_stop_job))  { //set by clicking the job button
                                         this.user_data.already_handled_stop_job = true;
                                         this.user_data.stop_job_running_on_dexter = false;
                                        return Dexter$1.write_file("job/run/killjobs", "")
                                        //now next time in this loop, the first clause should hit
                                }
                                else { return Dexter$1.read_file("job/logs/" + dde_monitor_job_instance.name + ".dde.log", "dexter_log")} //the
                                       //log file is only present once the job has stopped
                            }),
                        function(){
                           let content;
                           if(typeof(this.user_data.dexter_log) == "string") { content = this.user_data.dexter_log; }
                           else { content = "Sorry, no log."; }
                           out("Running Job." + this.name + " on Dexter." + this.robot.name + " produced the log of:<br/><pre><code>" +
                                content + "</code></pre>");
                        }
                        ]
            });
        }
    }


    //Called by user to start the job and "reinitialize" a stopped job
    start(options={}){  //sent_from_job = null
        //out("Top of Job." + this.name + ".start()")
        let the_active_job_with_robot_maybe = Job$1.active_job_with_robot(this.robot); //could be null.
            //must do this before setting status_code to "starting".
            //there can only be one Job trying to use a Dexter. (at least as the Job's main robot.)
        if((this.robot instanceof Dexter$1) && the_active_job_with_robot_maybe) {
            this.stop_for_reason("errored", "Dexter." + this.robot.name +
                                 " already running Job." + the_active_job_with_robot_maybe.name);
            dde_error("Attempt to start Job." + this.name + " with Dexter." + this.robot.name +
                      ",<br/>but that Dexter is already running Job." + the_active_job_with_robot_maybe.name +
                      ",<br/>so Job." + this.name + " was automatically stopped.");
        }
        if(this.wait_until_this_prop_is_false) { this.wait_until_this_prop_is_false = false; } //just in case previous running errored before it could set this to false, used by start_objects
        if (["starting", "running", "stopping", "running_when_stopped", "suspended", "waiting"].includes(this.status_code)){
            //does not run when_stopped instruction.
            dde_error("Attempt to restart job: "  + this.name +
                      " but it has status code: " + this.status_code +
                      " which doesn't permit restarting.");
        }
        else if (["not_started", "completed", "errored", "interrupted"].includes(this.status_code)){
            this.orig_args.robot;
            if(options.hasOwnProperty("robot")) ;
            //if(early_robot instanceof Dexter)   { early_robot.remove_from_busy_job_array(this) }
            Dexter$1.remove_from_busy_job_arrays(this);
        }
        //active jobs & is_busy checking
        let early_start_if_robot_busy = this.orig_args.start_if_robot_busy;
        if (options && options.hasOwnProperty("start_if_robot_busy")) { early_start_if_robot_busy = options.start_if_robot_busy; }
        if((this.robot instanceof Dexter$1) &&  //can 2 jobs use a Robot.Serial? I assume so for now.
           !early_start_if_robot_busy &&
           this.robot.is_busy()) {
                let one_active_job = this.robot.busy_job_array[0];
                let but_elt = window[one_active_job.name + "_job_button_id"];
                this.stop_for_reason("errored", "Another job: " + one_active_job.name +
                                      " is using robot: " + this.robot.name);
                if(but_elt){
                    let bg = but_elt.style["background-color"];
                    dde_error("Job." + this.name + " attempted to use: Dexter." + this.robot.name +
                        "<br/>but that robot is in use by Job." + one_active_job.name +
                        "<br/>Click the <span style='color:black; background-color:" + bg + ";'> &nbsp;" +
                        one_active_job.name + " </span>&nbsp; Job button to stop it, or<br/>" +
                        "create Job." + this.name + " with <code>start_if_robot_busy=true</code><br/>" +
                        "to permit it to be started.");
                }
                else {
                    dde_error("Job." + this.name + " attempted to use: Dexter." + this.robot.name +
                        "<br/>but that robot is in use by Job." + one_active_job.name + "<br/>" +
                        "Create Job." + this.name + " with <code>start_if_robot_busy=true</code><br/>" +
                        "to permit it to be started.");
                }
                return
        }
        //init from orig_args
            this.set_status_code("starting"); //before setting it here, it should be "not_started"
            this.wait_until_instruction_id_has_run = null; //needed the 2nd time we run this job, init it just in case it didn't get set to null from previous job run
            //this.init_do_list(options.do_list)
            this.do_list                 = this.orig_args.do_list;
            this.callback_param          = this.orig_args.callback_param;
            this.keep_history            = this.orig_args.keep_history;
            this.show_instructions       = this.orig_args.show_instructions;
            this.inter_do_item_dur       = this.orig_args.inter_do_item_dur;
            this.user_data               = shallow_copy_lit_obj(this.orig_args.user_data);
            this.default_workspace_pose  = this.orig_args.default_workspace_pose;
            this.program_counter         = this.orig_args.program_counter; //see robot_done_with_instruction as to why this isn't 0,
                                           //its because the robot.start effectively calls set_up_next_do(1), incrementing the PC
            this.ending_program_counter  = this.orig_args.ending_program_counter;
            this.initial_instruction     = this.orig_args.initial_instruction;
            this.data_array_transformer  = this.orig_args.data_array_transformer;
            this.start_if_robot_busy     = this.orig_args.start_if_robot_busy;
            this.if_robot_status_error   = this.orig_args.if_robot_status_error;
            this.if_instruction_error    = this.orig_args.if_instruction_error;
            this.if_dexter_connect_error = this.orig_args.if_dexter_connect_error;
            this.when_do_list_done       = this.orig_args.when_do_list_done;
            this.when_stopped            = this.orig_args.when_stopped;
            this.when_stopped_conditions = ((typeof(this.orig_args.when_stopped_conditions) == "boolean") ?
                                             this.orig_args.when_stopped_conditions :
                                             Object.assign({}, this.orig_args.when_stopped_conditions)); //make a copy in case it was munged in the previous running of the job

            //first we set all the orig (above), then we over-ride them with the passed in ones
            for (let key in options){
                if (options.hasOwnProperty(key)){
                    let new_val = options[key];
                    //if (key == "program_counter") { new_val = new_val - 1 } //don't do. You set the pc to the pos just before the first instr to execute.
                    //if      (key == "do_list")    { continue; } //flattening & setting already done by init_do_list
                    if      (key == "user_data")  { new_val = shallow_copy_lit_obj(new_val); }
                    else if (key == "name")       ; //don't allow renaming of the job
                    else if ((key == "when_stopped") &&
                             !Job$1.is_plausible_when_stopped_value(new_val)) {
                        dde_error("Job.start called with an invalid value for 'when_stopped' of: " +
                                  new_val);
                        return
                    }
                    this[key] = new_val;
                }
                else if (!Job$1.job_default_params.hasOwnProperty(key)){
                    warning("Job.start passed an option: " + key + " that is unknown. This is probably a mistake.");
                }
            }
            this.init_do_list();

            let maybe_symbolic_pc = this.program_counter;
            this.program_counter = 0; //just temporarily so that instruction_location_to_id can start from 0
            const job_in_pc = Job$1.instruction_location_to_job(maybe_symbolic_pc, false);
            if ((job_in_pc != null) && (job_in_pc != this)) {
                dde_error("Job." + this.name + " has a program_counter initialization<br/>" +
                          "of an instruction_location that contains a job that is not the job being started. It shouldn't.");
                return
            }
            this.program_counter = this.instruction_location_to_id(maybe_symbolic_pc);

            //this.robot_status      = []  use this.robot.robot_status instead //only filled in when we have a Dexter robot by Dexter.robot_done_with_instruction or a Serial robot
            this.rs_history        = []; //only filled in when we have a Dexter robot by Dexter.robot_done_with_instruction or a Serial robot
            this.sent_instructions = [];
            this.sent_instructions_strings = [];

            this.start_time        = new Date();
            this.stop_time         = null;
            this.stop_reason       = null;

            this.wait_reason       = null; //not used when waiting for instruction, but used when status_code is "waiting"
            this.wait_until_instruction_id_has_run = null;
            this.highest_completed_instruction_id  = -1;



            //this.iterator_stack    = []
            if (this.sent_from_job_instruction_queue.length > 0) { //if this job hasn't been started when another job
                 // runs a sent_to_job instruction to insert into this job, then that
                 //instruction is stuck in this job's sent_from_job_instruction_queue,
                 //so that it can be inserted into this job when it starts.
                 //(but NOT into its original_do_list, so its only inserted the first time this
                 //job is run.
                Job$1.insert_instruction(this.sent_from_job_instruction_queue, this.sent_from_job_instruction_location);
            }
            this.sent_from_job_instruction_queue = []; //send_to_job uses this. its on the "to_job" instance and only stores instructions when send_to_job has
                                                  //where_to_insert="next_top_level", or when this job has yet to be starter. (see above comment.)
            this.sent_from_job_instruction_location = null;
            if (this.initial_instruction) { //do AFTER the sent_from_job_instruction_queue insertion.
                Job$1.insert_instruction(this.initial_instruction, {job: this, offset: "program_counter"});
            }
            //must be after insert queue and init_instr processing
            if ((this.program_counter == 0) &&
                (this.do_list.length  == 0) &&
                ((this.when_do_list_done == "wait") || (typeof(this.when_stopped) == "function"))) ; //special case to allow an empty do_list if we are waiting for an instruction or have a callback.
            else if (this.do_list.length == 0) {
                warning("While starting job: " + this.name + ", the do_list is empty.<br/>" +
                         "The job still requests the status of Dexter, but does not cause it to move.");
            }
            else if (this.program_counter >= this.do_list.length){ //note that maybe_symbolic_pc can be "end" which is length of do_list which is valid, though no instructions would be executed in that case so we error.
                dde_error("While starting job: " + this.name +
                    "<br/>the program_counter is initialized to: " + this.program_counter +
                    "<br/>but the highest instruction ID in the do_list is: " +  (this.do_list.length - 1));
            }
            Job$1.last_job           = this;
            this.go_state          = true;

            this.already_started_when_stopped = false;
            this.final_status_code = null;
            this.condition_when_stopped = null;

            this.show_progress_maybe();
            //console.log('calling robot.start from job.start')
            //out("Bottom of Job." + this.name + ".start() calling " + this.robot.name + ".start()")
            this.robot.start(this); //the only call to robot.start
            return this
    }
    //action for the Eval & start Job  menu item on Jobs menu.
    static start_job_menu_item_action() {
        let full_src               = Editor.get_javascript();
        let selected_src           = Editor.get_javascript(true);
        let sel_start_pos          = Editor.selection_start();
        let sel_end_pos            = Editor.selection_end();
        let start_of_job_maybe     = Editor.find_backwards(full_src, sel_start_pos, "new Job");
        let start_of_job_pos;
        let end_of_job_pos;
        let job_src = null; //if this is not null, we've got a valid job surrounds (or is) the selection.
        let sel_is_instructions = false;
        if(start_of_job_maybe !== null){
            [start_of_job_pos, end_of_job_pos] = Editor.select_call(full_src, start_of_job_maybe);
        }
        if(end_of_job_pos && (end_of_job_pos > sel_start_pos)){ //sel is within a job, but we don't know if its
            //instruction selection or just within the job yet.
            job_src = full_src.substring(start_of_job_pos, end_of_job_pos);
            let do_list_start_pos = full_src.indexOf("do_list:", start_of_job_pos);
            if((do_list_start_pos === -1) || (do_list_start_pos > end_of_job_pos)) ; //weird, looks like Job has no do_list,
              //but ok, we just have the whole Job to execute.
            else if (do_list_start_pos < sel_start_pos) { //our selected_src should be instructions in the do_list
                sel_is_instructions = true;
            }
        }
        if (job_src === null) { //no job def so we're going to make our own.
            //warning("There's no Job definition surrounding the cursor.")
            var selection = Editor.get_javascript(true).trim();
            if (selection.endsWith(",")) { selection = selection.substring(0, selection.length - 1); }
            if (selection.length > 0){
                //if (selection.startsWith("[") && selection.endsWith("]")) {} //perhaps user selected the whole do_list. but
                //bue we can also have a single instr that can be an array.
                //since it's ok for a job to have an extra set of parens wrapped around its do_list,
                //just go ahead and do it.
                //else {
                //plus
                selection = "[" + selection + "]";
                sel_start_pos = sel_start_pos - 1;
                //}
                var eval2_result = eval_js_part2(selection);
                if (eval2_result.error_type) ; //got an error but error message should be displayed in output pane automatmically
                else if (Array.isArray(eval2_result.value)){ //got an array, but is it a do_list of multiple instructions?
                   let do_list;
                   if(!Instruction$1.is_instructions_array(eval2_result.value)){ //might never hit, but its an precaution
                       do_list = [eval2_result.value];
                   }
                   if (Job$1.j0 && Job$1.j0.is_active()) {
                        Job$1.j0.stop_for_reason("interrupted", "Start Job menu action stopped job.");
                        setTimeout(function() {
                                       Job$1.init_show_instructions_for_insts_only_and_start(sel_start_pos, sel_end_pos,
                                                                                           do_list, selection);},
                                    (Job$1.j0.inter_do_item_dur * 1000 * 2) + 10); //convert from seconds to milliseconds
                    }
                    else {
                        Job$1.init_show_instructions_for_insts_only_and_start(sel_start_pos, sel_end_pos,
                                                                            eval2_result.value, selection);
                    }
                }
                else {
                    shouldnt$1("Selection for Start job menu item action wasn't an array, even after wrapping [].");
                }
            }
            else {
                warning("When choosing the Eval&Start Job menu item<br/>" +
                        "with no surrounding Job definition,<br/>" +
                        "you must select exactly those instructions you want to run.");
            }
        }
        //we have a job.
        else {
            const eval2_result = eval_js_part2(job_src);
            if (eval2_result.error_type) ; //got an error but error message should be displayed in Output pane automatically
            else {
                let job_instance = eval2_result.value;
                if(!sel_is_instructions){
                    job_instance.start();
                }
                else if (selected_src.length > 0){ //sel is instructions
                    let do_list_result = eval_js_part2("[" + selected_src + "]"); //even if we only have one instr, this is still correct, esp if that one starts with "function().
                           //if this wraps an extra layer of array around the selected_src, that will still work pretty well.
                    if (do_list_result.error_type) ; //got an error but error message should already be displayed
                    else {
                        job_instance.start({do_list: do_list_result.value});
                    }
                }
                else { //no selection, so just start job at do_list item where the cursor is.
                    const [pc, ending_pc]  = job_instance.init_show_instructions(sel_start_pos, sel_end_pos, start_of_job_pos, job_src);
                    job_instance.start({show_instructions: true, inter_do_item_dur: 0.5, program_counter: pc, ending_program_counter: ending_pc});
                }
            }
        }
    }

    //all the below logic about whether to make a job with Dexter.default or a brain
    //is heuristic, and not infallable, but likely to be OK.
    static init_show_instructions_for_insts_only_and_start(start_cursor_pos, end_cursor_pos, do_list_array, selection){
        let has_start_job_instruction = false;
        let start_job_job = null;
        let has_defaulting_dexter_instruction = false;
        for(let instr of do_list_array) {
            if(instr instanceof Instruction$1.start_job) { //Control.start_job doesn't work here.
                has_start_job_instruction = true; //because its likely (but not guarenteed) that the job being started will have a default robot of a dexter (as in recordings, etc. and we can't have 2 active jobs both using the same dexter.
                if(instr.job_name instanceof Job$1) {
                    start_job_job = instr.job_name;
                }
                else if(typeof(instr.job_name) == "string"){
                    if(Job$1[instr.job_name] instanceof Job$1){
                        start_job_job = Job$1[instr.job_name];
                    }
                }
                else {
                    dde_error("Control.start_job has a name that is not a Job or a string.");
                }
            }
            else if ((instr instanceof Instruction$1.Dexter) &&
                      !instr.robot) { //meaning use the Job's default robot
                has_defaulting_dexter_instruction = true;
            }
        }
        let rob;
        if(has_start_job_instruction && has_defaulting_dexter_instruction){
                if(start_job_job.robot &&
                  (start_job_job.robot === Dexter$1.default)){
                    dde_error("You've selected an instruction using the Job's default dexter robot and <br/>" +
                              "a start_job instruction to a Job that uses Dexter.default.<br/>" +
                              "This violates 2 active Jobs both having a robot of the same Dexter.<br/>" +
                              "To separate these, wrap the selected instructions in a Job but<br/>" +
                              "make the Dexter instructions have a subject of a Dexter instance,<br/>" +
                              'such as Dexter.dexter0 and give the Job a <code>new Brain({name: "some_name"})</code> robot.'
                    );
                }
                else { //has as start_job but its not to a job that is using Dexter.default so use Dexter.default
                       //as its needed for the Dexter class instructions
                    rob = Dexter$1.default;
                }
        }
        else if (has_start_job_instruction) { //does not have has_defaulting_dexter_instruction
                rob = new Brain({name: "b0"});
        }
        else { //maybe has dexter instructions, maybe not, but doesn't have start_job so...
            rob =  Dexter$1.default;
        }
        const job_instance = new Job$1({name: "j0", robot: rob, do_list: do_list_array});
        //const begin_job_src = 'new Job ({name: "j0", do_list: '
        //const job_src = begin_job_src + selection + "})"
        //const start_of_job = start_cursor_pos - begin_job_src.length//beware, could be < 0
        //job_instance.init_show_instructions(start_cursor_pos, end_cursor_pos, start_of_job, job_src)
        job_instance.start({show_instructions: true});
    }

    init_show_instructions(start_cursor_pos, end_cursor_pos, start_of_job, job_src){
        this.job_source_start_pos = start_of_job; //necessary offset to range positions that are in the syntax tree
        const syntax_tree = esprima$1.parse(job_src, {range: true});
        const job_props_syntax_array = syntax_tree.body[0].expression.arguments[0].properties;
        for (var prop_syntax of job_props_syntax_array){
            if (prop_syntax.key.name == "do_list"){
                this.do_list_syntax_array = prop_syntax.value.elements;
                return this.instruction_ids_at_selection(start_cursor_pos, end_cursor_pos, start_of_job, syntax_tree)
            }
        }
        dde_error("Job." + this.name + " apparently has no do_list property.");
    }

    //returns pc to set for starting job that cursor is in, or 0, start at begining,
    instruction_ids_at_selection(start_cursor_pos, end_cursor_pos, start_of_job, syntax_tree) {
        var start_cursor_pos_in_job_src = start_cursor_pos - start_of_job;
        var end_cursor_pos_in_job_src   = end_cursor_pos   - start_of_job;
        var result_start = null;
        var result_end   = "end";
        for(let i = 0; i <  this.do_list_syntax_array.length; i++) {
            var do_list_item_syntax = this.do_list_syntax_array[i];
            //var inst_start_pos = do_list_item_syntax.range[0]
            do_list_item_syntax.range[0];
            var inst_end_pos   = do_list_item_syntax.range[1];
            if (result_start === null){
                if (start_cursor_pos_in_job_src <= (inst_end_pos + 1)){ //comma at end still in the instr
                    result_start = i; //first time through, cursor before do_list, just start at 0
                    if (start_cursor_pos == end_cursor_pos) { //no selection
                        result_end = "end";
                        break;
                    }
                    else if (end_cursor_pos_in_job_src <= (inst_end_pos + 1)){ //there's a selection, but it starts and ends in just one instruction
                        result_end = i + 1;
                        break;
                    }
                }
            }
            else { //looking for result_end
                if (end_cursor_pos_in_job_src <= (inst_end_pos + 1)){ //comma at end still in the instr
                    result_end = i + 1;
                    break;
                }
            }
        }
        return [result_start, result_end]
    }

    select_instruction_maybe(cur_do_item){
        if(this.show_instructions && this.do_list_syntax_array){
            console.log("    now processing instruction: " + stringify_value(cur_do_item));
            const orig_instruction_index = this.orig_args.do_list.indexOf(cur_do_item);
            if(orig_instruction_index != -1){
                const range = this.instruction_text_range(orig_instruction_index);
                Editor.select_javascript(range[0], range[1]);
            }
        }
    }
    instruction_text_range(orig_instruction_index){
        const array_elt_syntax_tree = this.do_list_syntax_array[orig_instruction_index];
        return [array_elt_syntax_tree.range[0] + this.job_source_start_pos,
                array_elt_syntax_tree.range[1] + this.job_source_start_pos]
    }
    //end show_instruction in editor
    //Job BUTTONS______
    get_job_button_id(){ return this.name + "_job_button_id"}

    get_job_button_wrapper_id(){ return this.name + "_job_wrapper_button_id"}

    get_job_button(){
        const the_id = this.get_job_button_id();
        var but_elt = window[the_id];
        return but_elt
    }

    get_job_button_wrapper(){
        const the_id = this.get_job_button_wrapper_id();
        var but_elt = window[the_id];
        return but_elt
    }

    add_job_button_maybe(){
      if(window.platform == "dde") {
        let but_elt = this.get_job_button();
        if (!but_elt){
            const job_name = this.name;
            const the_id = this.get_job_button_id();

            const the_button_html = '<button style="margin-left:0px; vertical-align:50%;" id="' + the_id + '">'+ job_name +
                                    '</button>';
            //$("#jobs_button_bar_id").append(the_html)
            let wrapper = document.createElement('div');
            wrapper.id = this.get_job_button_wrapper_id();
            wrapper.style.display = "inline-block";
            let close_on_click_fn_src = "Job." + job_name + ".undefine_job()";
            let inspect_on_click_fn_src =  "inspect(Job." + job_name + ")";
            wrapper.innerHTML = the_button_html +
                                "<div style='display:inline-block;margin-right:10px;'><span style='cursor:pointer;' onclick='" +
                                close_on_click_fn_src +
                                "' title='Undefine this job'>X</span><br/><span style='cursor:pointer; padding-left:2px;' onclick='" +
                                inspect_on_click_fn_src +
                                "' title='Inspect this job'>&#9432;</span></div>";
            jobs_button_bar_id.append(wrapper); //.firstChild)

            but_elt = window[the_id];
            but_elt.onclick = function(event){
                if(window["Metrics"]) { Metrics.increment_state("Job button clicks"); }
                event.target.blur(); //gets rid of dark border around button and because its
                //not focused, pressing the space or ENTER key doesn't do something strange
                //like an extra button click.
                const job_instance = Job$1[job_name];
                console.log("Job button clicked when status was: " + job_instance.status_code);
                if (job_instance.status_code == "suspended"){
                    if(but_elt.title.includes("Make Instruction")) { job_instance.stop_for_reason("interrupted", "User stopped job."); }
                    else { job_instance.unsuspend(); }
                }
                else if (job_instance.user_data.stop_job_running_on_dexter !== undefined) { //ie this job is MONITORING a job running on Dexter
                    //if (job_instance.user_data.stop_job_running_on_dexter === false){
                    //    job_instance.user_data.stop_job_running_on_dexter = true
                        job_instance.color_job_button(); //keep this call
                    //}
                    if(job_instance.is_active()){
                        //if (job_instance.robot instanceof Dexter) { job_instance.robot.empty_instruction_queue_now() }
                        job_instance.stop_for_reason("interrupted", "User stopped job", false);
                    }
                    else { //restart this job on Dexter
                        Job$1.start_and_monitor_dexter_job(job_instance.user_data.job_src);
                        return //let the start color the job button as race condition between that and the below color_job_button
                    }
                }
                else if(job_instance.is_active()){
                    if (job_instance.robot instanceof Dexter$1) {
                         //job_instance.robot.empty_instruction_queue_now() //causes DexRun to error.
                         if (job_instance.robot.waiting_for_flush_ack) {
                             if(job_instance.status_code === "stopping");
                             else { //first time user clicked button while job was running.
                                job_instance.set_status_code("stopping");
                                return //we don't want to call stop_for_reason until the ack for the "F"
                                    // comes back to Dexter.protype.robot_done_with_instruction
                             }
                         }
                    }
                    job_instance.stop_for_reason("interrupted", "User stopped job", false);
                }
                else {
                    job_instance.start();
                }
            };
        }
      }
      this.color_job_button(); //do regardless of dde or node and regardless of
           //whether there's already a button or not becuase if we
           //define a new job of the same name that already has a button,
           //we want to change the buttons' color.
           //add_job_button_maybe is ONLY called by Job constructor.
    }
    static extract_job_name_from_file_path(file_path){
        let job_name_start_pos = file_path.lastIndexOf("/");
        if (job_name_start_pos == -1) { job_name_start_pos = 0; }
        else { job_name_start_pos += 1; } //move to after the slash
        let job_name_end_pos = file_path.lastIndexOf(".");
        if(job_name_end_pos == -1) { job_name_end_pos = file_path.length; }
        let job_name = file_path.substring(job_name_start_pos, job_name_end_pos);
        return job_name
    }
    //called by httpd.js when keep_alive_value == true
    static maybe_define_and_server_job_button_click(job_file_path){
        let job_name = Job$1.extract_job_name_from_file_path(job_file_path);
        let job_instance = Job$1[job_name];
        if(job_instance) {
            job_instance.server_job_button_click(); //might bre first time starting job, or stopping running job, or 2nd time starting
        }
        else { //no defined job of that name, so load its file and start it.
           Job$1.define_and_start_job(job_file_path); //starts first Job in file,
           //regardless of its name, but we still expect it to be named the job_name,
           //otherwise, if the job is running, we load it again and redefine it while
           //its running! Not good.
        }
    }
    //similar to the add_job_button_maybe inner job button click function
    server_job_button_click(){
        let job_instance = this;
        if (job_instance.status_code == "suspended"){
           job_instance.unsuspend();
        }
        else if(job_instance.is_active()){
            //if (job_instance.robot instanceof Dexter) { job_instance.robot.empty_instruction_queue_now() }
            job_instance.stop_for_reason("interrupted", "User stopped job", false);
        }
        else {
            job_instance.start();
        }
    }

    remove_job_button(){
        var elt = this.get_job_button_wrapper(); //this.get_job_button()
        if(elt){
            elt.remove();
        }
    }
    //if we're in dde and there's no button, then this does nothing and doesn't error.
    color_job_button(){
        let bg_color = null;
        let tooltip  = "";
        switch(this.status_code){
            case "not_started":
                bg_color = "rgb(204, 204, 204)";
                tooltip  = "This Job has not been started since it was defined.\nClick to start this Job.";
                break; //defined but never started.
            case "starting":
                bg_color = "rgb(210, 255, 190)";
                tooltip  = "This Job is in the process of starting.\nClick to stop it.";
                break;
            case "running":
                if((this.when_do_list_done == "wait") &&
                   (this.program_counter == this.instruction_location_to_id(this.ending_program_counter))) {
                    bg_color = "rgb(255, 255, 102)"; //pale yellow
                    tooltip  = 'This Job is waiting for a new last instruction\nbecause it has when_do_list_done="wait".\nClick to stop this job.';
                }
                else if(this.user_data.stop_job_running_on_dexter === true) {
                    bg_color = "#ffcdb7"; //pale orange
                    tooltip  = "This job is in the process of stopping";
                }
                else {
                    const cur_ins = this.do_list[this.program_counter];
                    let oplet = null;
                    if (Instruction$1.is_oplet_array(cur_ins)){
                        oplet = cur_ins[Dexter$1.INSTRUCTION_TYPE];
                    }
                    if(oplet === "z") {
                        let dur_in_seconds = cur_ins[Instruction$1.INSTRUCTION_ARG0];
                        bg_color = "rgb(255, 255, 102)"; //pale yellow
                        tooltip  = "Now running instruction " + this.program_counter +
                                   ', sleep (oplet "z") for ' + dur_in_seconds + " second(s).";
                    }
                    else {
                        bg_color = "rgb(136, 255, 136)";
                        tooltip  = "This Job is running instruction " + this.program_counter +
                                   ".\nClick to stop this job.";
                    }
                }
                break;
            case "stopping":
               bg_color = "rgb(225, 169, 107)"; //"#db8622" //brown
               tooltip = "The job is running a\nDexter.empty_instruction_queue instruction\nand will stop when that's complete.";
               break;
            case "running_when_stopped":
                bg_color = "#00a600"; //dark green
                tooltip = "This job is running its when_stopped instruction.";
                break;
            case "suspended":
                bg_color = "rgb(255, 255, 17)"; //bright yellow
                if(this.wait_reason.includes("Make Instruction")){
                    tooltip  = "This Job is suspended at instruction: " + this.program_counter +
                               " because\n" +
                               this.wait_reason + "\n" +
                               "To stop this Job, click this button.";
                }
                else {
                    tooltip  = "This Job is suspended at instruction: " + this.program_counter +
                               " because\n" +
                               this.wait_reason + "\n" +
                               "Click to unsuspend it.\nAfter it is running, you can click to stop it.";
                }
                break; //yellow
            case "waiting":
                bg_color = "rgb(255, 255, 102)"; //pale yellow
                tooltip  = "This Job is at instruction " + this.program_counter +
                            ", waiting for:\n" + this.wait_reason + "\nClick to stop this job.";
                break; //yellow
            case "completed":
                if((this.program_counter === this.do_list.length) &&
                    (this.when_do_list_done === "wait")){
                    bg_color = "rgb(255, 255, 102)"; //pale yellow
                    tooltip  = 'This Job is waiting for a new last instruction\nbecause it has when_do_list_done="wait".\nClick to stop this job.';
                }
                else {
                    bg_color = "rgb(230, 179, 255)"; // purple. blues best:"#66ccff"  "#33bbff" too dark  //"#99d3ff" too light
                    tooltip  = "This Job has successfully completed.\nClick to restart it.";
                }
                break;
            case "errored":
                bg_color = "rgb(255, 68, 68)";
                let reason = this.stop_reason;
                reason = replace_substrings(reason, "<br/>", "\n");
                tooltip  = "This Job errored at instruction: " + this.program_counter +
                " with:\n" + reason + "\nClick to restart this Job.";
                break;
            case "interrupted":
                bg_color = "rgb(255, 123, 0)"; //orange
                tooltip  = "This Job was interrupted at instruction " + this.program_counter +
                " by:\n" + this.stop_reason + "\nClick to restart this Job.";
                break;
        }
        if(window.platform == "dde"){
            const but_elt = this.get_job_button();
            if(!but_elt){ return }
            if (but_elt.style.backgroundColor !== bg_color) { //cut down the "jitter" in the culor, don't set unnecessarily
                but_elt.style.backgroundColor = bg_color;
                if((this.name === "rs_update") && window.robot_status_run_update_job_button_id){
                    robot_status_run_update_job_button_id.style.backgroundColor = bg_color;
                }
            }
            if(this.user_data.stop_job_running_on_dexter !== undefined) {
                tooltip  += "\nThis job monitors a job running on Dexter.";
            }
            but_elt.title = tooltip;
        }
        else { //job engine
           let data = {kind: "show_job_button", job_name: this.name, status_code: this.status_code, button_color: bg_color, button_tooltip: tooltip};
           write_to_stdout$1("<for_server>" + JSON.stringify(data) + "</for_server>");
        }
    }
    //end of jobs buttons

    //not passing reason means don't change it.
    //if status_code is "waiting"  or "suspeneded" then reason is for job_instance.wait_reason
    //else if status_code is,"errored", "interrupted", "completed" then reason is for job_instance.stop_reason
    set_status_code(status_code, reason){
        if(status_code === this.status_code) ; //no change, do nothing
        else if (Job$1.status_codes.includes(status_code)){ //valid status code
            this.status_code = status_code;
            if (["waiting", "suspended"].includes(status_code)) {
                if(reason !== undefined){
                    this.wait_reason = reason;
                }
                this.stop_reason = null;
            }
            else if (this.is_done()) {
                if(reason !== undefined){
                    this.wait_reason = null;
                    this.stop_reason = reason;
                }
            }
            else if (status_code === "stopping") ;
            else if (status_code === "running_when_stopped");
            else { //"not_started", "starting", "running"
                   //these status codes don't have reasons so any passed in reason is ignored.
                this.wait_reason = null;
                this.stop_reason = null;
            }
            this.color_job_button(); //the main call to color_job_button
        }
        else {
            shouldnt$1("set_status_code passed illegal status_code of: " + status_code +
                "<br/>The valid status codes are:</br/>" +
                Job$1.status_codes);
        }
    }

    //the job has run at least once and is now done
    //not quite the opposite of is_active because a job could be
    //not_started and would not qualify as is_active OR is_done
    is_done(){
        return ["completed", "errored", "interrupted"].includes(this.status_code)
    }

    is_active(){
        //return ((this.status_code != "not_started") && (this.stop_reason == null))
       return ["starting", "running", "stopping", "running_when_stopped", "suspended", "waiting"].includes(this.status_code)
    }
    static active_jobs(){
        let result = [];
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                result.push(a_job);
            }
        }
        return result
    }

    //returns the active job that has robot as its default robot OR null if none.
    static active_job_with_robot(robot){
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                if(a_job.robot === robot) {
                    return a_job
                }
            }
        }
        return null
    }

    //returns an array of jobs that either have "robot" as their default robot,
    //OR the job's PC is pointing at an instruction that is using "robot".
    static active_jobs_using_robot(robot){
        result = [];
        this.active_jobs();
        for(let job_instance of adctive_jobs){
            if(job_instance.robot === robot) { result.push(job_instance); }
            else {
                let instr = job_instance.do_list[job_instance.program_counter];
                if(instr){
                    let rob = instr.robot; //this is the best we can do if there's a robot indincated in the instr
                    if(rob === robot) {
                        result.push(job_instance);
                    }
                }
            }
        }
        return result
    }

    //called in utils stringify_value    used for original_do_list
    static non_hierarchical_do_list_to_html(a_do_list){
        var result = "<table><tr><th title='The instruction_id is the order of the instruction in the do_list.\nSame as the program counter at send time.'>ID</th>" +
                                "<th title='The instruction type and its arguments'>Instruction</th></tr>";
        for(var i = 0; i < a_do_list.length; i++){
            result +=  "<tr><td>" + i + "</td><td>" + stringify_value(a_do_list[i]) + "</td><td></tr>";
        }
        result += "</table>";
        return "<details><summary>original do_list</summary>" + result + "</details>"
    }

    do_list_to_html(){
        Job$1.do_list_to_html_set_up_onclick();
        return "<details style='display:inline-block'><summary></summary>" +
                this.do_list_to_html_aux(0, 1) +
                "</details>"
    }

    static do_list_to_html_set_up_onclick(){
        if(window.platform == "dde"){
            setTimeout(function(){
                let elts = document.getElementsByClassName("do_list_item");
                for (let i = 0; i < elts.length; i++) { //more clever looping using let elt of elts breaks but only on windows deployed DDE
                    let elt = elts[i];
                    elt.onclick = Job$1.do_list_item_present_robot_status; }
            }, 500);
        }
    }
    //runs in UI
    static do_list_item_present_robot_status(event){
       event.stopPropagation();
            let elt = event.target;
            let [job_name, instruction_id] = elt.dataset.do_list_item.split(" ");
            Job$1.show_robot_status_history_item(job_name, parseInt(instruction_id));
    }

    instruction_id_to_rs_history_item(id){
        for (let item of this.rs_history){
            if (item[Dexter$1.INSTRUCTION_ID] == id) { return item }
        }
        if (this.keep_history){
            shouldnt$1("Job.instruction_id_to_rs_history_item passed id: " + id + " but couldn't be found in rs_history: " + this.rs_history);
        }
        else { return null }
    }

    current_instruction(){
        return this.do_list[this.program_counter]
    }

    //warning: this will be wrong if user puts two eq items on do_list, such as a fn
    //or a Instruction instance that was first bound to a var, then that var was used
    //twice on the do_list
    is_top_level_do_item(do_item){
        return this.orig_args.do_list.includes(do_item)
    }

    at_sync_point(sync_point_name){
        let ins = this.current_instruction();
        return ((ins instanceof Instruction$1.sync_point) &&
                (ins.name == sync_point_name))
    }

    at_or_past_sync_point(sync_point_name){ //presumes that the THIS job HAS an instuction with the named sync point
        if(!this.do_list) { return false} //before this job has started so its definately not past any of its sync points.
        for(let a_pc = this.program_counter; a_pc >= 0; a_pc--){
            let ins = this.do_list[a_pc];
            if ((ins instanceof Instruction$1.sync_point) &&
                (ins.name == sync_point_name)) { return true }
        }
        return false
    }

    static show_robot_status_history_item(job_name, instruction_id){
        let job_instance    = Job$1[job_name];
        let rs_history_item = job_instance.instruction_id_to_rs_history_item(instruction_id);
        if (rs_history_item) {
            let table_html      = Dexter$1.robot_status_to_html_table(rs_history_item);
            show_window({content: table_html,
                         title: "Robot status for " + job_name + ", instruction: " + instruction_id,
                         width:  800,
                         height: 380});
        }
        else {
            out("Robot: " + job_instance.robot.name + " in job: " + job_instance.name +
                " has not kept robot_status for instruction: "    + instruction_id + "." +
                "<br/>Job " + job_instance.name + " keep_history is: " + job_instance.keep_history,
                "red");
        }
    }

    do_list_to_html_aux(id_to_start_from = 0, indent_level = 0, sub_item_count){
        if (!sub_item_count) {
            if (this.do_list) { sub_item_count = this.do_list.length;}
            else { sub_item_count = 0; }
        }
        let result = "";
        let sub_sub_items_processed = 0;
        for(let sub_item_index = 0; sub_item_index < sub_item_count; sub_item_index++){
            let id = id_to_start_from + sub_item_index + sub_sub_items_processed;
            if (id >= this.do_list.length) {return result}
            let item = this.do_list[id];
            let new_sub_item_count = this.added_items_count[id];
            let class_html = "class='do_list_item' ";
            let rs_button = "";
            if (Instruction$1.is_oplet_array(item)) { rs_button = " <button data-do_list_item='" + this.name + " " + id + "' + title='Show the robot status as it was immediately after this instruction was run.'" + class_html + ">RS</button> ";}
            let item_text =  ((id == this.program_counter) ? "<span style='border-style:solid; border-width:2px;'> ": "") +
                             "<span title='instruction_id'>id=" + id +
                             "</span>&nbsp;<span title='Number of sub_instructions&#13;added by this instruction below it.'> si=" + new_sub_item_count + "</span>" +
                             rs_button +
                             "&nbsp;" + Instruction$1.text_for_do_list_item(item) + //core of the_item
                             ((id == this.program_counter) ? "</span>" : "" );
            let html_indent = 'style="margin-left:' + (indent_level * 20) + 'px; background-color:' + Instruction$1.instruction_color(item) + ';"';

            let actual_sub_items_grabbed_this_iter;
            if (new_sub_item_count > 0) {
                item_text = "<details " + html_indent + "><summary>" + item_text + "</summary>";
                let sub_items_text = this.do_list_to_html_aux(id + 1, indent_level + 1, new_sub_item_count);
                item_text = item_text + sub_items_text + "</details>";
                actual_sub_items_grabbed_this_iter = (sub_items_text.match(/<div|<details/g) || []).length;
                sub_sub_items_processed += actual_sub_items_grabbed_this_iter;
            }
            else {
                item_text = "<div " + html_indent + ">" + item_text + "</div>";
                actual_sub_items_grabbed_this_iter = 0;
              }

            result += item_text;
        }
        return result
    }
    time_to_string(a_time){
        if (a_time){
            return a_time.getHours() + ":" + a_time.getMinutes() + ":" + a_time.getSeconds()
        }
        else { return "null" }
    }
    stringify(){
        let stat_code = this.status_code;
        if (stat_code == "completed") { stat_code = "<span style='color:#00b300;'>completed</span>"; }
        else if ((stat_code === "errored") || (stat_code === "interrupted")) {
            stat_code = "<span style='color:#cc0000;'>" + stat_code + "</span>";
        }
        let dur_string = milliseconds_to_human_string(this.stop_time - this.start_time);
        let result = "Job <i>name</i>: "        + this.name                  + ", <i>job_id</i>: " + this.job_id + ", <i>simulate</i>: " + this.robot.simulate + "<br/>" +
                     "<i>start_time</i>: "      + this.time_to_string(this.start_time) +
                     ", <i>stop_time</i>:  "    + this.time_to_string(this.stop_time)  +
                     ", <i>dur</i>: "           + dur_string + "<br/>" +
                     "<i>program_counter</i>: " + this.program_counter       + ", <i>status_code</i>: " + stat_code + ",<br/>" +
                     "<i>stop_reason</i>: "     + this.stop_reason           + ", <i>wait_reason</i>: " + this.wait_reason + "<br/>" +
                     "<i>wait_until_instruction_id_has_run</i>: " + this.wait_until_instruction_id_has_run + "<br/>" +
                     "<i>highest_completed_instruction_id</i>: " + this.highest_completed_instruction_id + "<br/>" +
                     "<i>user_data</i>: " + stringify_value(this.user_data) + ",<br/>" +
                      Job$1.non_hierarchical_do_list_to_html(this.orig_args.do_list) +
                      this.do_list_to_html() +
                      Dexter$1.sent_instructions_to_html(this.sent_instructions) +
                      Dexter$1.make_show_rs_history_button_html(this.job_id)     +
                      "<fieldset style='background-color:#EEEEEE;'><legend>Robot</legend>" + this.robot.stringify() + "</fieldset>";

        return result
    }

    //takes nested items in array and makes flattened list where the elts are
    //a dexter instruction array, a fn, or something else that can be a do_item.
    //removes no_op instructions from the returned array.
    static flatten_do_list_array(arr, result=[]){
       for(let i = 0; i < arr.length; i++){
           let elt = arr[i];
           if      (Instruction$1.is_no_op_instruction(elt))   ; //get rid of it, including empty nested arrays
           else if (Instruction$1.is_oplet_array(elt))         { result.push(elt); }
           else if (Instruction$1.is_data_array(elt))          { result.push(elt); } //do not flatten!
           else if (Array.isArray(elt))                      { Job$1.flatten_do_list_array(elt, result); }
           else if (elt instanceof Instruction$1)              { result.push(elt); }
           else if (typeof(elt) === "string")                { result.push(elt); }
           else if (typeof(elt) === "function")              { result.push(elt); }
           else if (is_iterator(elt))                        { result.push(elt); }
           else if (Instruction$1.is_start_object(elt))        { result.push(elt); }
           else { throw(TypeError("Invalid do_list item at index: " + i + "<br/>of: " + elt)) }
       }
       return result
    }

    suspend(reason = "suspended") {
        this.set_status_code("suspended", reason); //makes job button yellow, causes set_up_next_do to just retrunn without calling do_next_item
    }
    //can't be an instruction, must be called from a method
    //unsuspend is like start, ie it calls start_after_connected which calls send get status
    // which calls robot_done_with_instruction which calls set_up_next_do(1)
    //if stop_reason is not false, we "unsuspend but immediately stop the job.
    unsuspend(stop_reason=false){
        if (this.status_code == "suspended"){
            if(stop_reason){
                this.stop_for_reason("interruped", stop_reason);
                this.set_up_next_do(0);
            }
            else {
                this.set_status_code("running");
                this.set_up_next_do(1);
            }
        }
    }

    //returns true if success, false if not, undefined if this.keep_history is false,
    //but no callers care.
    record_sent_instruction_stop_time(ins_id, stop_time){
        if (this.keep_history){
            for(let ins of this.sent_instructions){
                if (typeof(ins) == "string") ; //forget about it. can't store a stop time
                else if(ins[Instruction$1.INSTRUCTION_ID] === ins_id){
                     ins[Instruction$1.STOP_TIME] = stop_time;
                     return true
                }
            }
            return false //would happen if the instruction is a string, OR if there's a shouldn't type error, but can't distinguish between the tow so just let it go
                   //shouldnt("a_job.record_sent_instruction_stop_time  passed ins_id: " + ins_id +
                    // " but couldn't find an instruction with that id in Job." + this.name + ".sent_instructions")
        }
    }
}

//used by Job.prototype.to_source_code. Keep in sync with Job.constructor!
Job$1.job_default_params = null;

Job$1.status_codes = [//normal starting up
                    "not_started", "starting", "running",
                    "stopping",  //user clicked button to stop while Job was running Dexter.empty_instruction_queue.
                                 //so wait until the ack for Dexter.empty_instruction_queue comes back to DDE,
                                 //THEN stop the job.
                    "running_when_stopped",
                    //paused while running
                    "suspended", "waiting",   //(wait_until, sync_point)
                    //below mean how runnning the job was stopped.
                    "errored",
                    "interrupted", //user stopped manually,
                    "completed"    //normal OK completion
                    ];

Job$1.global_user_data = {};
Job$1.job_id_base = 0; //only used for making the job_id.
Job$1.all_names = []; //maintained in both UI and sandbox/ used by replacement series job names

//note that once we make 1 job instance with a name, that binding of
//Job.the_name never goes away, and that name will always be in the
//the all_names list. But if you redefine a Job (with the same name)
//the old value of that name is gc'd.
Job$1.remember_job_name = function(job_name){
    if (!Job$1.all_names.includes(job_name)){
        Job$1.all_names.push(job_name);
    }
};

Job$1.forget_job_name = function(job_name){
    let i = Job$1.all_names.indexOf(job_name);
    if (i != -1){
        Job$1.all_names.splice(i, 1);
    }
};

//we can't send to sandbox or UI, this has to work in both.
//that's why we have Job.remember_job_name().
//used by series replacement
Job$1.is_job_name = function(a_string){
    return Job$1.all_names.includes(a_string)
};

Job$1.all_jobs = function(){
    let result = [];
    for(let name of Job$1.all_names){
        result.push(Job$1[name]);
    }
    return result
};

Job$1.job_id_to_job_instance = function(job_id){
    for(let name of Job$1.all_names){
        if (Job$1[name].job_id === job_id) {return Job$1[name]}
    }
    return null
};

//returns the latest defined job or null if there are no defined jobs
Job$1.latest_defined_job = function() {
    return Job$1.job_id_to_job_instance(Job$1.job_id_base)
};

/*Job.job_id_to_job_instance = function(job_id){
    let str = job_id.toString()
    let str_of_int = str.substring(0, str.indexOf("."))
    if(str_of_int == -1) { str_of_int = str}
    let the_int = parseInt(str_of_int)
    return Job.job_id_to_job_instance_aux(the_int)
}*/
Job$1.last_job = null;

//called when user clicks the stop button (stop sign button)
Job$1.stop_all_jobs = function(){
    var stopped_job_names = [];
    for(var j of Job$1.all_jobs()){
        //if (j.robot instanceof Dexter) { j.robot.empty_instruction_queue_now() }
        if ((j.stop_reason == null) && (j.status_code !== "not_started")){
            j.stop_for_reason("interrupted_by_stop_button", "User stopped all jobs.", false);
            stopped_job_names.push(j.name);
        }
       // j.robot.close() //does not delete the name of the robot from Robot, ie Robot.mydex will still exist, but does disconnect serial robots
          //this almost is a good idea, but if there's a job that's stopped but for some reason,
          //its serial port is still alive, better to call serial_disconnect_all()
        if (j.robot instanceof Dexter$1) { j.robot.close_robot(); } //needed when wanting to start up again, exp with dexter0
    }
    serial_disconnect_all();
    if (stopped_job_names.length == 0){
        out("There are no active jobs to stop.");
    }
    else {
       out("Stopped jobs: " + stopped_job_names);
    }
};

Job$1.prototype.undefine_job = function(){
    if(this.robot instanceof Dexter$1) { Dexter$1.remove_from_busy_job_arrays(this); }
    delete Job$1[this.name];
    Job$1.forget_job_name(this.name);
    this.remove_job_button();
};

Job$1.clear_stopped_jobs = function(){
    var cleared_job_names = [];
    for(var j of Job$1.all_jobs()){
        if ((j.stop_reason != null) || (j.status_code == "not_started")){
            j.undefine_job();
            cleared_job_names.push(j.name);
            if (j == Job$1.last_job) { Job$1.last_job = null; }
        }
    }
    if ((Job$1.last_job === null) && (Job$1.all_names.length > 0)){
        Job$1.last_job = last(Job$1.all_names); //not technically the last job created since
        //that was deleted
        //and might not even be the last job "redefined".
        //but its pretty close and the use of last_job isn't really sensitve to
        //being precise so this is pretty good.
    }
    if (cleared_job_names.length == 0){
        out("There are no stopped jobs to clear.");
    }
    else { out("Cleared jobs: " + cleared_job_names); }
};

//used in making robot_status_history window.
/* this functionality doesn't match its name, and its never called so don't have it!
Job.prototype.highest_sent_instruction_id = function(){
    if (this.sent_instructions.length > 0){
        return this.sent_instructions[0]
    }
    else { return null }
}*/

Job$1.report = function(){
        if (Job$1.all_names.length == 0){
            out("Either no jobs have been created in this session,<br/>" +
                "or all the jobs have been cleared.<br/>" +
                "See the <button>Jobs&#9660;</button> <b>Insert example</b> menu item<br/>" +
                "for help in creating a job.");
        }
        else {
            var result  = "<table style='border: 1px solid black;border-collapse: collapse;'><tr style='background-color:white;'><th>Job Name</th><th>ID</th><th>Robot</th><th>Start Time</th><th>Stop Time</th><th>Status</th></tr>";
            for (var j of Job$1.all_jobs()){
                var start_time = "Not started";
                var stop_time = "";
                if (j.start_time){
                    start_time = j.start_time.getHours()   + ":" +
                        j.start_time.getMinutes() + ":" +
                        j.start_time.getSeconds() + ":" +
                        j.start_time.getMilliseconds();
                    stop_time = "ongoing";
                }
                if (j.stop_time){
                    stop_time = j.stop_time.getHours()   + ":" +
                        j.stop_time.getMinutes() + ":" +
                        j.stop_time.getSeconds() + ":" +
                        j.stop_time.getMilliseconds();
                }
                var action = 'Job.print_out_one_job,,' + j.name;
                //var name = "<a href='#' title='Click for details on this job.' class='onclick_via_data' data-onclick='" + action + "'>" + j.name + "</a>"
                var job_name = "<a href='#' title='Click for details on this job.' class='onclick_via_data' data-onclick='" + action + "'>" + j.name + "</a>";

                result += "<tr/><td>" + job_name + "</td><td>" + j.job_id + "</td><td>" + j.robot.name + "</td><td>" + start_time + "</td><td>" + stop_time + "</td><td>" + j.status() + "</td><tr>";
            }
            result += "</table>";
            out(result);
            SW.install_onclick_via_data_fns();
        }
};

//called by make_dde_status_report for emails. Should not contain html.
Job$1.active_jobs_report = function(){
    let jobs = Job$1.active_jobs();
    if(jobs.length == 0) { return "There are no active Jobs." }
    else {
        let result = "";
        for(let job_instance of jobs) {
            let cur_instr = job_instance.do_list[job_instance.program_counter];
            let pc = job_instance.program_counter;
            let instr_src;
            if(pc < 0) { instr_src = "At beginning of job."; }
            else if (pc >= job_instance.do_list.length) {
                         instr_src = "At end of job.";
            }
            else {       instr_src = to_source_code({value: cur_instr}); }
            result += "Name: Job." + job_instance.name +
                      "\nStatus: " + job_instance.status_code +
                      "\nProgram Counter: " + pc;
            result += "\nCurrent Instruction source: " + instr_src + "\n\n";
        }
        return result
    }
};

Job$1.prototype.print_out = function(){
    out(this.stringify());
    //setTimeout(function(){install_onclick_via_data_fns()}, 200) //needs to let the html render.
};

Job$1.print_out_one_job = function(job_name){
        var j = Job$1[job_name];
        j.print_out();
};

Job$1.prototype.status = function (){
    if (this.stop_reason)      { return this.status_code + ": " + this.stop_reason }
    else if (this.wait_reason) { return this.status_code + ": " + this.wait_reason}
    else {
       let len = this.orig_args.do_list.length;
       if ( this.do_list) { len = this.do_list.length; }
       let pc = 0;
       if (this.program_counter) { pc = this.program_counter; }
       return this.status_code + ", pc: " + pc + " of " + len
    }
};

//placed on the do_list if there's a robot status error.
Job$1.prototype.if_robot_status_error_default = function(){
    let robot_status = this.robot.robot_status;
    let msg = this.rs_to_error_message(robot_status);
    warning("Dexter robot_status error: " + msg);
    let rob = this.robot;
    if(rob instanceof Dexter$1){
        let sim_actual = Robot$1.get_simulate_actual(rob.simulate);
        if((sim_actual === false) || (sim_actual === "both")){
            try{ let path = "Dexter." + rob.name + ":/srv/samba/share/errors.log";
                 read_file_async(path, undefined, function(err, content){
                         if(err) {warning("Could not find: " + path);}
                         else {
                            if((typeof(content) != "string") ||
                                (content.length == 0)){
                                content == "<i>errors.log is empty</i>";
                            }
                            else {
                             content = replace_substrings(content, "\n", "<br/>");
                             content = "Content of " + path + "<br/><code>" + content + "</code>";
                             setTimeout(function(){write_file_async(path, "");},
                                        400); //give the read_file job a chance to finish properly
                            }
                            out(content);
                        }
                 });
               }
            catch(err) {warning("In Job.prototype.if_robot_status_error_default, could not get the errors.log file<br/>" +
                                  " for " + "Dexter." + rob.name); }
        }
    }
    return Control.error(msg)
    //this default method stops the job but allows the when_stopped instruction to run.
};

Job$1.prototype.if_instruction_error_default = function(){
    let pc_of_error_instruction = this.program_counter - 1;
    let erroring_instruction = this.do_list[pc_of_error_instruction];
    let instr_src = to_source_code(erroring_instruction);
    let msg = "Error in instruction of Job." + this.name + " at do_list program counter of: " + pc_of_error_instruction +
              "<br/>" + instr_src;
    //warning(msg) //redundant. Let Control.error print the msg.
    return Control.error(msg)
    //this default method stops the job but allows the when_stopped instruction to run.
};

//unlike the others, the job won't proceed from this.
Job$1.prototype.if_dexter_connect_error_default = function(robot_name){
    let rob = Dexter$1[robot_name];
    let msg = "Error in connecting to Dexter." + robot_name +
              " at ip_address: " + rob.ip_address +
              " for Job." + this.name +
              "<br/>If Dexter." + robot_name + " is unconnected, you can still use the simulator." +
              "<br/>In the Misc pane header, click the <b>simulate</b> radio button.";
    warning(msg);
    return null // this default method allows the job to proceed, unlike
                // Dexter.stop_job(undefined, msg) or Control.error instruction
};

//from James N
Job$1.prototype.rs_to_error_message = function(robot_status){
    let error_code = robot_status[Dexter$1.ERROR_CODE];
    let oplet_error_code = error_code & 0xFF; //lower 8 bits
    let msg = "error_code: " + error_code;
    let oplet = robot_status[Dexter$1.INSTRUCTION_TYPE];
    if (error_code > 0) {
        if((oplet == "r") || (oplet == "w")) {
            let linux_msg = linux_error_message(oplet_error_code);
            msg += "Error on oplet 'r' (read_file) with Linux error of: " + linux_msg;
        }
        else {
            if      (oplet_error_code == 1)  {msg += " oplet:"    + oplet + " is unknown to Dexter. Please upgrade Dexter firmware and gateware.<br/>";}
            else if (oplet_error_code == 2)  {msg += " on oplet:" + oplet + " communication error.<br/>";}
            else                             {msg += " on oplet:" + oplet + " Unknown error.<br/>";}
        }
        if(error_code & (1 << 10)) {msg+=" Firmware - Gateware Mismatch. Update system. Fatal error.<br/>";}
        if(error_code & (1 << 27)) {msg+=" SPAN Servo, Joint 7. r 0 errors.log <br/>";}
        if(error_code & (1 << 28)) {msg+=" ROLL Servo, Joint 6. r 0 errors.log <br/>";}
        if(error_code & (1 << 30)) {msg+=" Joint Monitor. r 0 errors.log <br/>";}
    }
    return msg
};


//if the job errored, the robot is a dexter, and the error code is in the 600's,
//and we're not simulating, then try to show the user the Dexter's errors.log file
//in the output pane.
Job$1.prototype.show_error_log_maybe = function(){
    let rob = this.robot;
    if(rob instanceof Dexter$1){
        const sim_actual = Robot$1.get_simulate_actual(rob.simulate);
        if ((sim_actual === false) || (sim_actual === "both")) {
            if((this.status_code == "errored") &&
                (rob.rs.error_code() >= 600) &&
                (rob.rs.error_code() < 700)){
            let path = rob.name + ":" + "../errors.log";
            read_file_async(path,
                undefined,
                function(err, content){
                    if(err) {
                        warning("Could not get " + path + "<br/>Error: " + err);
                    }
                    else {
                        content = replace_substrings(content, "\n", "<br/>");
                        out("<b>" + rob_name + ":/srv/samba/share/errors.log</b> content:<br/>" + content);
                    }
                });
            }
        }
    }
};

//status_code can also be a when_stopped condition, ie
// errored, errored_from_dexter, errored_from_dexter_connect, interrupted, interrupted_by_stop_button. completed
Job$1.prototype.stop_for_reason = function(condition_when_stopped, //"errored", "interrupted", "completed"
                                         reason) { //a string
    if(!Job$1.when_stopped_conditions_property_names.includes(condition_when_stopped)){
        shouldnt$1("Job." + this.name + ".stop_for_reason called with invalid first arg condition_when_stopped of:<br/>" +
            condition_when_stopped + "<br/>Valid values are: " + Job$1.when_stopped_conditions_property_names);
    }
    else {
        this.condition_when_stopped = condition_when_stopped;
        let pos_of_underscore = condition_when_stopped.indexOf("_");
        if(pos_of_underscore > 0) {
            this.set_status_code(condition_when_stopped.substring(0, pos_of_underscore),
                reason);
        }
        else { this.set_status_code(condition_when_stopped, reason); }
        if (this.robot.heartbeat_timeout_obj) { clearTimeout(this.robot.heartbeat_timeout_obj); }
        this.stop_time    = new Date();
        //this.current_instruction().init_instruction() //needed by at least wait_until and loop. now done in Job.start
        if(condition_when_stopped == "errored_from_dexter_connect"){ //the do list isn't running, so we can't simply wait for that to happen
            let fn = this.if_dexter_connect_error;
            if(fn) {
                let job_instance = this;
                setTimeout(function() {
                              fn.call(job_instance, job_instance.robot.name);
                           }, //beware, might be some other robot
                           200); //we give the job a chance to finish. the job is not expected to be running the do_list
            }
        }
        else if((this.name == "dex_read_file") && (this.status_code == "errored") && window.Editor){
            //this special case needed because if we attempt to Dexter.read_file with sim= real and
            // we're not connected to the Dexter, we get a connection error, which
            // will call stop_for_reason but not finish.
            // window.Editor will be undefined in Node, so ok to have this code when running job engine on dexter.
            Editor.set_files_menu_to_path(); //restore files menu to what it was before we tried to get the file off of dexter.
        }
    }
};

Job$1.when_stopped_conditions_property_names = ["completed", "errored", "errored_from_dexter", "errored_from_dexter_connect",
                                               "interrupted", "interrupted_by_stop_button" ];

Job$1.is_when_stopped_conditions_valid = function(when_stopped_conditions){
    if(typeof(when_stopped_conditions) == "boolean") { return true }
    else if(typeof(when_stopped_conditions) == "object") {
       for(let key in when_stopped_conditions){
           if(!Job$1.when_stopped_conditions_property_names.includes(key)){
               return false
           }
           let val = when_stopped_conditions[key];
           if (key == "errored_from_dexter_connect") {
               if (val !== false){
                   warning("The value for Job param when_stopped_conditions, property: errored_from_dexter_connect<br/>" +
                           " is: " + val + " but only a value of false is valid.<br/>" +
                           "Use Job param if_dexter_connect_error to supply a method to call<br/>" +
                           "when there's a dexter connection error.");
                   return false
               }
           }
           else if(typeof(val) !== "boolean") {
               return false
           }
       }
       return true
    }
    else { return false }
};

Job$1.prototype.ok_to_run_when_stopped = function(){
    if(this.when_stopped == "stop") { return false }
    //else if(this.when_do_list_done == "wait") { return false } //whether this val is "wait" or "run_when_stopped" its ok, so this prop isn't a factor in what ok_to_run_when_stopped returns
    else if (this.when_stopped_conditions === true ) { return true }
    else if (this.when_stopped_conditions === false) { return false }
    else {
       let cond = this.when_stopped_conditions[this.condition_when_stopped];
       if(cond === undefined) { return true }
       else if (this.condition_when_stopped == "errored_from_dexter_connect") { return true } //was false, as this usually happens at very beginnig of job  efore its really started, but new  jun 2021 idea is, try hard to always run the when_stopped instruction
       else { return cond } //better be true or false. //this should never arrise as if this.when_stopped_conditions is a boolean, it will be caught above.
    }
};

//adds when_stopped instruction to the do_list if it hasn't already been run,
//and if it has, ends the job.
Job$1.prototype.finish_job = function(){
      if(this.status_code == "errored")  { //todo avoid printing twice but we want to print before starting the when_stopped action
        let failed_instruction = this.do_list[this.program_counter];
        let mess = to_source_code({value: failed_instruction});
        out("Job." + this.name + " failed instruction " + this.program_counter + ": " + mess, "red");
      }
      if (!this.ok_to_run_when_stopped()||     // never run the when_stopped instruction
           this.already_started_when_stopped){ // we've already run the when_stopped instruction
          if(["errored", "interrupted"].includes(this.status_code)); //leave status_code as is, even if there is a final_status_code,
               //because maybe it errored or was interruopted while running the when_stopped fn,
               //in which case we want the final job status to be errored or interrupted regardless
               //of its status upon completed the orig do_list
          else if(this.final_status_code) { //happens when the status_code was set to "running_when_stopped "
              this.status_code = this.final_status_code;
          } //does not hit in the all defaults case
          this.robot.finish_job();
          //if(this.robot instanceof Dexter) { this.robot.remove_from_busy_job_array(this)} //sometimes a job might be busy and the user clicks its stop button. Let's clean up after that!
          Dexter$1.remove_from_busy_job_arrays(this); //remove from ALL Dexters' busy_job_arrays.
          this.color_job_button(); //possibly redundant but maybe not and just called on finishing job so leave it in
          this.show_progress_maybe();
          out("Done with Job." + this.name + ", for reason: " + this.stop_reason);
          if(window.platform === "node") { //only calls close_readline to end process, or doesn't
            if(window.keep_alive_value) ; //keep the process alive
            else {
                let the_active_jobs = Job$1.active_jobs();
                //the below a bit tricky as the 'this' job is in the process of finishing
                // and might or might not be "active".
                console.log("In finish_job for job: " + this.name + " id: " + this.job_id);
                //onsole.log("active_jobs length: " + the_active_jobs.length)
                if(the_active_jobs.length == 1) {
                    console.log("In finish_job just one active job with first job: " + the_active_jobs[0].name + " job_id: " + the_active_jobs[0].job_id);
                }
                if( (the_active_jobs.length == 0) ||
                   ((the_active_jobs.length == 1) &&
                    (the_active_jobs[0].job_id === this.job_id)
                   )
                ) { //don't close the readline if there's a job that still wants to use it.
                    //as our orig job might have launched a 2nd job, so keep it open
                    //until all are done.
                    console.log("finish job calling close_readline");
                    close_readline(); //causes the process running this job to finish.
                }
            }
          }
          //this.show_error_log_maybe() //I'm already doing this when
          //a robot_status comes back with a non-zero error code.
      }
      /*else if((this.when_do_list_done === "wait") && (this.status_code === "running")){ //even if we somehow stopped in the middle of the do_list,
        // we are going to wait for a new instruction to be added
        //beware, maybe race condition here with adding a new instruction.
        this.set_status_code("running")
        this.program_counter = this.do_list.length
        this.set_up_next_do(0)
      }*/
      else { //perform the when_stopped action
          this.already_started_when_stopped = true;
          this.final_status_code = this.status_code;
          this.status_code = "running_when_stopped";
          if (Instruction$1.is_do_list_item(this.when_stopped)){ //careful, it might be an array of instructions. If so, we want to stick that array on the do_list as one item.
              this.program_counter = this.do_list.length - 1; //do before the insert so we insert at the end
              this.insert_single_instruction(this.when_stopped, false); //2nd arg false means Not a sub-instruction
              this.ending_program_counter = "end"; //because we got here due to ending_program_counter being early, and
                 //one way that can happen is if Control.stop_job is run, which sets the ending_program_counter
                 //to get the job to stop at that instruction, but then, we add more instructions
                 //so we have to get rid of that early end and allow the new when_stopped instruction to run
              this.when_do_list_done = "run_when_stopped"; //before setting, this might be "wait", but when finish_job
                 //is called, we are no longer going to wait for an instruction.
              this.when_stopped = "stop"; //ie we've already "used up" the when_stopped instruction, so stop when its done.
              this.set_up_next_do(); //advance to the inserted instruction.
          }
          else if (Job$1.is_plausible_instruction_location(this.when_stopped)){ //obsolete
              this.stop_for_reason("errored",
                                    "You have a job when_stopped value of a location:<br/>" +
                                    to_source_code(this.when_stopped) +
                                    "<br/>but 'when_stopped' can no longer be a location.<br/>" +
                                    'It must be: "stop", or a valid do_list item like a function.');
              this.set_up_next_do(0);
          }
          else {
              this.stop_for_reason("errored",
                  "You have a job when_stopped value of:<br/>" +
                  to_source_code(this.when_stopped) +
                  "<br/>that is invalid<br/>" +
                  'It must be: "stop", or a valid do_list item like a function.');
              this.set_up_next_do(0);
          }
    }
};

Job$1.go_button_state = true;

Job$1.set_go_button_state = function(bool){
    pause_id.checked = !bool;
    Job$1.go_button_state = bool;
};

Job$1.go = function(){
    //if(window.dui2 && dui2.instances.length > 0) { dui2.go_button_click_action()}
    if (Job$1.go_button_state){
        let any_active_jobs = false;
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                any_active_jobs = true;
                if (a_job.go_state) ; //user hit go button with go_button_state true  and a_job go true. let it run
                    //a_job.set_up_next_do(a_job.pause_next_program_counter_increment, false)
                else { //go_button state is true but a_job go_state is false so turn it on an run
                    a_job.go_state = true;
                    a_job.set_up_next_do(a_job.pause_next_program_counter_increment, false);
                }
            }
        }
        if (!any_active_jobs) { warning("There are no active jobs.", true); }
    }
    else { //go_button_state is false
        let any_active_jobs = false;
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                any_active_jobs = true;
            //if (a_job.go_state) {
                a_job.set_up_next_do(a_job.pause_next_program_counter_increment, true); //allow once
            //}
            //else {} //go_button_state is false and a_job go is false, already paused,  do nothing
            }
        }
        if (!any_active_jobs) { warning("There are no active jobs.", true); }
    }
    return "dont_print"
};

//in EVERY call, as of mar 7, 2016 the arg is 1. So probably should just get rid of the arg.
//nope: we need it to be 0 when we have a fn that is "looping" checking for some
//condition to be true, in which case it moves on to increment by 1, like "sleep" or something.
//this is important because send_to_job  might do insert of its instruction "after_pc"
//and we want that to be in a "good" spot, such that the inserted insetruction
//will run next. So we want to keep the incrementing of the PC to be
//in the setTimeout so that when we do a insert "after_pc",
//that inserted instruction is run next.
Job$1.prototype.set_up_next_do = function(program_counter_increment = 1, allow_once=false){ //this was removed as it is never called in DDE, inter_do_item_dur=this.inter_do_item_dur){ //usual arg is 1 but a few control instructions that want to take a breath call it with 0
    //out("set_up_next_do with job: " + this.name)
    var job_instance = this;
    if (this.status_code == "suspended") { return } //don't call do_next_item
    else if (Job$1.go_button_state || allow_once){ //Job.go_button_state being true is the normal case
        if ((this.status_code == "errored") || (this.status_code == "interrupted")){
            program_counter_increment = 0; //don't increment because we want pc and highest_completed_instruction_id
                                          // to be the instruction that errored when the job finishes.
        }
        if ((program_counter_increment > 0) && //if this is 0, it means we haven't completed its associated (PC) instr yet.
                                               //if this is < 0, we're backing up so don't change highest_completed_instruction_id
            (job_instance.program_counter > job_instance.highest_completed_instruction_id) && //if these were the same, setting highest_completed_instruction_id would just bre to its same value
            (job_instance.program_counter < job_instance.do_list.length))   //NEW mar 23, 2019: in case pc goes off the end, we don't want to set highest_completed_instruction_id off the end
            {
            job_instance.highest_completed_instruction_id = job_instance.program_counter;
        }
        if(this.modify_program_counter_increment_fn) { //needs to be after we've set highest_completed_instruction_id for the prev instruction
            program_counter_increment = this.modify_program_counter_increment_fn.call(null, this, program_counter_increment);
            //but be wary. What is the actual subject in the modify_program_counter_increment_fn call???
            //if the method we want is something like someClass.some_meth, can we get someClass to be
            //the "this" of the call?
            if (program_counter_increment === null) { return } //don't keep running these instructions.
                //we're not stopping the job, just effectively suspending it.
            else if (typeof(program_counter_increment) != "number") {
                dde_error("in Job.set_up_next_do,<br/>" +
                    this.modify_program_counter_increment_fn + "<br/> returned: " + program_counter_increment +
                    "<br/>which is invalid because it isn't a number and it isn't null.");
            }
        }
        job_instance.program_counter += program_counter_increment;
        let job_inter_do_item_dur = this.inter_do_item_dur;
        let processed_inter_do_item_dur = job_inter_do_item_dur;
        if(job_instance.do_list.length > job_instance.program_counter){ //there are more instructions
            let next_item = job_instance.do_list[job_instance.program_counter];
            if(Instruction$1.is_oplet_array(next_item, "S") ||
                (typeof(next_item) == "function") ||
               Control.is_control_instruction(next_item)) {
                processed_inter_do_item_dur = 0;
            }
        }
        //in order from fastests and most dangerous to slowest and most safe.
        if(job_inter_do_item_dur === -3){
            return job_instance.do_next_item()
        }
        else if(job_inter_do_item_dur === -2){
            return browserRaw(function() {
                job_instance.do_next_item();
            })
        }
        else if(job_inter_do_item_dur === -1){
            return browserAsap(function() {
                job_instance.do_next_item();
            })
        }
        else {
            setTimeout(function(){
                            job_instance.do_next_item();
                        },
                       processed_inter_do_item_dur * 1000); //convert from seconds to milliseconds
        }
    }
    else { //the stepper output
        job_instance.pause_next_program_counter_increment = program_counter_increment;
        job_instance.go_state = false;
        let suffix = "";
        if          (job_instance.program_counter == -1) { suffix = " (initing robot status)"; }
        else if     (job_instance.program_counter == 0)  { suffix = " (your first instruction)"; }
        else if     (job_instance.program_counter == job_instance.do_list.length - 1) { suffix = " (last instruction)"; }
        else if     (job_instance.program_counter == job_instance.do_list.length - 2) { suffix = " (2nd to last instruction)"; }
        let out_text = job_instance.name + " paused after program_counter=" + job_instance.program_counter + " of " +
                       job_instance.do_list.length + suffix + "<br/>";
        if(job_instance.program_counter >= 0) {
           let instr = this.do_list[job_instance.program_counter];
           if(instr) { //this may be undefined if using dui2 and you check the pause_id checkbox
                out_text +=  "Prev ins: " + Instruction$1.text_for_do_list_item_for_stepper(instr);
           }
        }
        else { out_text +=  "Prev ins: None"; }
        out_text += "<br/> Next ins: ";
        if ((job_instance.program_counter + 1) >= job_instance.do_list.length){
            out_text +=  "None";
        }
        else {
            out_text +=  Instruction$1.text_for_do_list_item_for_stepper(this.do_list[job_instance.program_counter + 1]);
        }
        out(out_text, "brown", true);
    }
};

//run the instruction at the pc. The pc has been adjusted by set_up_next_do to normally increment the pc.
//with a bunch of exceptions for determining that the job is over at the top of this method.
Job$1.prototype.do_next_item = function(){ //user calls this when they want the job to start, then this fn calls itself (via set_up_next_do until done
    //this.program_counter += 1 now done in set_up_next_do
    //if (this.show_instructions){ onsole.log("Top of do_next_item in job: " + this.name + " with PC: " + this.program_counter)}
    //onsole.log("top of do_next_item with pc: " + this.program_counter)
    //out(this.name + " do_next_item top ")
    if(window["js_debugger_checkbox_id"] && js_debugger_checkbox_id.checked) {
        //the print help statements are here so that they get called both when
        //the user checks the checkbox, AND when Control.debugger instruction is run.
        out("To stop debugging, Eval: <code>undebug_job()</code> in Dev Tools console and click the big blue arrow.");
        debugger; //LEAVE THIS IN RELEASED CODE
        console.log("To stop debugging, Eval:   undebug_job()   and click the big blue arrow, ");
    }
    let ending_pc = this.instruction_location_to_id(this.ending_program_counter); //we end BEFORE executing the ending_pcm we don't execute the instr at the ending pc if any

    if (["completed", "errored", "interrupted"].includes(this.status_code)){//put before the wait until instruction_id because interrupted is the user wanting to halt, regardless of pending instructions.
        this.finish_job();
        return
    }
    else if (this.wait_until_instruction_id_has_run || (this.wait_until_instruction_id_has_run === 0)){ //the ordering of this clause is important. Nothing below has to wait for instructions to complete
        //wait for the wait instruction id to be done
        //the waited for instruction coming back thru robot_done_with_instruction will call set_up_next_do(1)
        //so don't do it here. BUT still have this clause to block doing anything below if we're waiting.
        return
    }
    else if (this.stop_reason && (this.status_code !== "running_when_stopped")){ //maybe never hits as one of the above status_codes is pobably set
         this.finish_job();
        return
    } //must be before the below since if we've
    //already got a stop reason, we don't want to keep waiting for another instruction.
    else if (this.wait_until_this_prop_is_false) {
        this.set_up_next_do(0);
        return
    }
    else if (this.instr_and_robot_to_send_when_robot_unbusy) {
        let [inst, robot] = this.instr_and_robot_to_send_when_robot_unbusy;
        if(robot.is_busy()) ; //loop around again
        else {
            this.robot_and_instr_to_send_when_robot_unbusy = null;
            this.send(inst, robot);
        }
        return
    }
    else if (this.hasOwnProperty("insert_last_instruction_index") &&
            (this.when_do_list_done == "wait") &&
            (this.program_counter <= this.insert_last_instruction_index)){
        delete this.insert_last_instruction_index;
        //allow this to fall through to the code after this if...else if
        //unlike all the other clauses
    }

    else if (this.program_counter >= ending_pc) {  //this.do_list.length
             //the normal stop case
        if (this.when_do_list_done == "wait") { //we're in a loop waiting for the next instruction.
            //this.color_job_button() //too expensive and unnecessary as color set elsewhere
            if((this.status_code === "waiting") &&
               (this.wait_reason === "more instructions.")) ;
            else {
                this.set_status_code("waiting", "more instructions."); //do not call unnecessarily, wastes processor time in dde and really bad for job engine browser interface
            }
            this.set_up_next_do(0);
        }
        else if (ending_pc < this.do_list.length) { //we're ending in the middle of the ob. Don't do the final g cmd, as too confusing
            let stop_reason = "Stopped early due to ending_program_counter of: " + this.ending_program_counter;
            this.stop_for_reason("completed", stop_reason);
            this.finish_job();
        }
        /* adds final "g" instruction but this is superfluous.
          else if ((this.robot instanceof Dexter) &&
            ((this.do_list.length == 0) ||
            (last(this.do_list)[Dexter.INSTRUCTION_TYPE] != "g"))){
            //this.program_counter = this.do_list.length //probably already true, but just to make sure.
            //this.do_list.splice(this.program_counter, 0, Dexter.get_robot_status()) //this final instruction naturally flushes dexter'is instruction queue so that the job will stay alive until the last insetruction is done.
                //this.added_items_count(this.program_counter, 0, 0)
            //this.added_items_count.splice(this.program_counter, 0, 0)

            this.insert_single_instruction(Dexter.get_robot_status(), false, true) //2nd arg false says making this new instruction a top level (not sub) instruction
            //3rd arg true says even if we're running a MakeInstruction job and disallowing insertions,
            //allow the insertion anyway.
            //this.added_items_count[this.program_counter] += 1 //hmm, the final g instr isn't reallyy "nested" under the last item, just a top level expr
                //but its not an orig top level one either. so maybe nest it.
                //jun 9, 2018: No consider the new g a top level cmd with 0 subinstructions
            this.set_up_next_do(0)
        }*/
        else if (!this.stop_reason){
            let reason = "Finished all " + this.do_list.length + " do_list items.";
            this.stop_for_reason("completed", reason);
            this.finish_job();
        }
        else { this.finish_job(); }
        return
    }
    //body of the fn.
    //regardless of whether we're in an iter or not, do the item at pc. (might or might not
    //have been just inserted by the above).
      if((this.status_code === "waiting") &&
          (this.wait_reason === "more instructions.")){ //we WERE waiting for more instructions, but
            // we must have gotten more because (this.program_counter >= ending_pc)
            //is not true (from "else if" above). So while we have more, set status to running
          this.set_status_code("running");
      }
      let cur_do_item = this.current_instruction();
      try {
        //out(this.name + " do_next_item cur_do_item: " + cur_do_item)
        this.show_progress_maybe();
        this.select_instruction_maybe(cur_do_item);
        if (this.program_counter >= this.added_items_count.length) { this.added_items_count.push(0);} //might be overwritten further down in this method
        else if (this.added_items_count[this.program_counter] > 0) { //will only happen if we go_to backwards,
           //in which case we *might* call an instruction twice that makes some items that it adds to the to_do list.
           //so we want to get rid of those items and "start over" with that instruction.
            this.remove_sub_instructions_from_do_list(this.program_counter);
        }

        if (Instruction$1.is_no_op_instruction(cur_do_item)){ //nothing to do, just skip it.
            this.set_up_next_do(1);
        }
        else if ((this.sent_from_job_instruction_queue.length > 0) &&
                 this.is_top_level_do_item(cur_do_item)){
            //bad, inserts after pc not AT pc this.insert_instructions(this.sent_from_job_instruction_queue) //all items on queue are next_top_level, so just insert them all.
            this.do_list.splice(this.program_counter, 0, ...this.sent_from_job_instruction_queue);
            let added_items_for_insert = new Array(this.sent_from_job_instruction_queue.length);
            added_items_for_insert.fill(0);
            this.added_items_count.splice(this.program_counter, 0, ...added_items_for_insert);


            //note we're inserting sent_from_job instructions, not the REAL instruction we want to execute.
            //that's because in the hierarchical do_list display, we want to see where those REAL instructions came from for debugging purposes.
            this.sent_from_job_instruction_queue = [];

            let is_top_array = new Array(this.sent_from_job_instruction_queue.length);
            is_top_array.fill(true);
            this.is_do_list_item_top_level_array.splice(this.program_counter, 0, ...is_top_array);
            this.set_up_next_do(0);
        }
        else if (typeof(cur_do_item) === "string"){
            //out("<i>Job." + this.name + ", Instruction " + this.program_counter + ":</i> " + cur_do_item)
            this.send(cur_do_item);
        }
        else if (cur_do_item instanceof Instruction$1.loop){
            let ins = cur_do_item.get_instructions_for_one_iteration(this);
            if (ins === null) { } //done with loop
            else {
                let flatarr = Job$1.flatten_do_list_array(ins);
                this.insert_instructions(flatarr);
            }
            this.set_up_next_do(1);
        }
        else if (cur_do_item instanceof Instruction$1){
            cur_do_item.do_item(this);
        }
        else if (Instruction$1.is_oplet_array(cur_do_item)){
            this.wait_until_instruction_id_has_run = this.program_counter;
            this.send(cur_do_item);
        }
        else if (Instruction$1.is_data_array(cur_do_item)){
            let new_do_item = this.transform_data_array(cur_do_item);
            if(Instruction$1.is_no_op_instruction(new_do_item)) { this.set_up_next_do(1); }
            else if(Instruction$1.is_sendable_instruction(new_do_item)){
                this.wait_until_instruction_id_has_run = this.program_counter;
                this.send(new_do_item); //we know we have a sendable, so send it.
            }
            else if(Instruction$1.is_data_array(new_do_item)){
                    this.stop_for_reason("errored", "The instruction: " + cur_do_item +
                    "<br/>resolved to: " + new_do_item +
                    "<br/>which is a data_array but we've already performed data_array transformation." +
                    "<br/>Fix Job." + this.name + ".data_array_transformer" +
                    "<br/>to not return another data_array or" +
                    "<br/>change: " + JSON.stringify(cur_do_item));
                    this.set_up_next_do(0);
            }
            else if(Instruction$1.is_do_list_item(new_do_item)){
                    this.insert_single_instruction(new_do_item);
                    this.set_up_next_do(1);
            }
        }
        else if (Array.isArray(cur_do_item)){
            this.handle_function_call_or_gen_next_result(cur_do_item, cur_do_item);
            //note that a user normally wouldn't directly put an array on the do_list,
            //but Job.insert_instruction very likely would to put > 1 instruction on
        }
        else if (is_iterator(cur_do_item)){ //generator. must be before "function" because an iterator is also of type "function".
            var next_obj = cur_do_item.next();
            var do_items = next_obj.value;
            let have_item_to_insert;
            if      (do_items === null)       { have_item_to_insert = false; }
            else if (do_items === undefined)  { have_item_to_insert = false; }
            else if (Array.isArray(do_items) && (do_items.length == 0)) { have_item_to_insert = false; }
            else have_item_to_insert = true;

            if (have_item_to_insert) {
                if (next_obj.done){ //run the one last instruction from this gen
                    this.insert_single_instruction(do_items);
                    this.set_up_next_do(1);
                }
                else  { //not done so we must insert the cur_do_item
                    if (Instruction$1.is_oplet_array(do_items) || !Array.isArray(do_items)) {
                       do_items = [do_items, cur_do_item]; }
                    else  { //do_items is already an array
                        do_items = do_items.slice(0); //copy the do_items just in case user is hanging on to that array, we don't want to mung it.
                        do_items.push(cur_do_item);
                    }
                    this.insert_instructions(do_items);
                    this.set_up_next_do(1);

                }
            }
            else { //no items to insert
                if (next_obj.done){ this.set_up_next_do(1); } //done with this generator
                else              { this.set_up_next_do(0); } //keep generator alive
            }
        }
        else if (typeof(cur_do_item) == "function"){
            //try{
                var do_items = cur_do_item.call(this); //the fn is called with "this" of this job
                //onsole.log("do_next_item with function that returned: " + do_items)
                this.handle_function_call_or_gen_next_result(cur_do_item, do_items); //take the result of the fn call and put it on the do_list
            //}
           // catch(err){
            //    warning("Job " + this.name + " errored executing instruction with id: " + this.program_counter + "<br/>" +
            //             cur_do_item.toString() + "<br/>" +
            //             err.message)
            //    this.stop_for_reason("errored", "Calling function at instruction id: " + this.program_counter + " errored.")
            //    this.set_up_next_do(1)
            // }
        }
        else if (Instruction$1.is_start_object(cur_do_item)){
            this.handle_start_object(cur_do_item);
        }
        else {
            this.stop_for_reason("errored", "Job: " + this.name + " got illegal do_item on do_list of: " +
                                            stringify_value(cur_do_item));
            //It's over, Jim, So don't take a breath, by calling set_up_next_do(0),
            //just kill it quickly before anything else can happen.
            //we don't want to increment the pc,
            this.set_up_next_do(0);
        }
    }
    catch(err){ //this can happen when, for instance a fn def on the do_list is called and it contains an unbound var ref
       //this.stop_for_reason("errored", err.message) //let do_next_item loop around and stop normally
       //this.set_up_next_do(0)
        warning("Error running instruction: " + this.program_counter +
            " with source: " + to_source_code({value: cur_do_item}) +
            " in Job." + this.name +
            " of:<br/>" + err.message);
        if(this.if_instruction_error){ //this will hut unless Job author explcitly set if_instruction_error to null or undefined.
            //note if_instruction_error can be a single instruction or an array
            //of instructions. If its an array, we insert it as just one instruction,
            //and that will cause all to be run.
            //it has a default that prints out a message.
            this.insert_single_instruction(this.if_instruction_error);
        }
        this.set_up_next_do();
    }
};

///also called by Make Instruction for creating string to save.
Job$1.prototype.transform_data_array = function(data_array){
        let transformer = this.data_array_transformer;
        if(transformer === undefined) {  //this meth may be called after the job_innstance is defined,
                                         //but before start is called, so it wouldn't have this
                                         //copied over to the instance yet.
            transformer = this.orig_args.data_array_transformer;
        }
        if(Robot$1.is_oplet(transformer)) { //ie "P"
            let args = data_array.slice(); //make a copy of the data array
            args.unshift(transformer);  //push the oplet on the front of the array
            return make_ins$1.apply(null, args)  //do the "tranformation" to make a oplet_array
            //this.wait_until_instruction_id_has_run = this.program_counter
            //this.send(new_do_item) //we know we have a sendable, so send it.
        }
        else {
            return transformer.apply(this, data_array)
        }
};



/*cur_do_item is the fn, do_items is the val returned from calling it.
 cur_do_item merely for error message. the real item to do is do_items which might be an array of items

 A do_list function on the do_list can return:
 - an instruction_array (1 letter op_let)  stick it on the do_list and send it.
 - an array of items to stick on the do_list.
 - another function. stick it on the do_list and next time call it.\
 - a generator function
 - an iterator 
 Stick them all (except for iterator) on the do_list and execute them.
 */
Job$1.prototype.handle_function_call_or_gen_next_result = function(cur_do_item, do_items){
    if (do_items == "dont_call_set_up_next_do");
    else if (Instruction$1.is_no_op_instruction(do_items)){ //ok, just nothing to insert
        this.set_up_next_do(1);
    }
    else if (Array.isArray(do_items)){
        if(Instruction$1.is_oplet_array(do_items) ||
           Instruction$1.is_data_array(do_items)){
           this.insert_single_instruction(do_items);
           this.set_up_next_do(1);
        }
        else { //must be an instructions_array
            Job$1.flatten_do_list_array(do_items);
            this.insert_instructions(do_items);
            this.set_up_next_do(1);
        }
    }
    else if (Instruction$1.is_do_list_item(do_items)){
        this.insert_single_instruction(do_items);
        this.set_up_next_do(1);
    }
    else {
        this.stop_for_reason("errored", "do_item function: " + stringify_value(cur_do_item) +
            " returned invalid value: "     + stringify_value(do_items));
        //its over. Don't take a breath with set_up_next_do, kill it off.
        //don't increment pc
        this.do_next_item();
    }
};

//cur_do_item guarenteed to have a start method when this fn is called.
Job$1.prototype.handle_start_object = function(cur_do_item){
        //the below gets around having to require("test_suite.js") because that would
        //violate what the job_engine code has access too, but still allows
        //including a test suite instance in a job that is run in DDE.
        if(cur_do_item.constructor && (cur_do_item.constructor.name == "TestSuite")){
            cur_do_item.constructor.set_state_and_resume({suites: [cur_do_item]});
        }
        else {
            let user_data_variable = cur_do_item.user_data_variable;
            let job_instance = this;
            let the_inst_this = cur_do_item.start_this;
            if (!the_inst_this) { the_inst_this = cur_do_item; }
            else if (the_inst_this == "job_instance") { the_inst_this = job_instance; }
            let start_args = cur_do_item.start_args;
            let cb_param = cur_do_item.callback_param;
            if(cb_param) {
                job_instance.wait_until_this_prop_is_false = "waiting for start object callback to run";
                let cb_fn = function(...args) {
                    if (user_data_variable){
                        job_instance.user_data[user_data_variable] =  args;
                    }
                    job_instance.wait_until_this_prop_is_false = false;
                };
                if(typeof(cb_param) === "number") { //must be a non-neg int
                    if ((start_args === undefined) || (start_args === null)) {start_args = [];}
                    if (Array.isArray(start_args)) {
                         start_args = start_args.slice(); //copy
                         start_args[cb_param] = cb_fn;
                    }
                    else { dde_error("For Job: " + job_instance.name +
                        " pc: " +  job_instance.program_counter +
                        "<br/>got data structure instruction: " + cur_do_item +
                        "<br/> which has a cb_param of a number but the start_args " +
                        "is not an array.");
                    }
                }
                else if (typeof(cb_param) === "string") {
                    if ((start_args === undefined) || (start_args === null)) { start_args = {}; }
                    if (typeof(start_args) == "object") {
                       start_args =  jQuery.extend({}, start_args); //shallow copy
                       start_args[cb_param] = cb_fn;
                    }
                    else {
                       dde_error("For Job: " + job_instance.name +
                                " pc: " +  job_instance.program_counter +
                                "<br/>got data structure instruction: " + cur_do_item +
                                '<br/> which has a cb_param of a string, "' + cb_param + '", but the start_args ' +
                                "is not an object.");
                    }
                }
            }
            else if(cur_do_item.dur) {
                this.insert_single_instruction(Control.wait_until(cur_do_item.dur));
            }
            if (!start_args)                    { cur_do_item.start.apply(the_inst_this); }
            else if (Array.isArray(start_args)) { cur_do_item.start.apply(the_inst_this, start_args); }
            else                                { cur_do_item.start.call(the_inst_this, start_args); }
        }
        this.set_up_next_do(1);
};

//only ever passed an instrution_array or a "raw" string to send directly to dexter.
//if a raw string, it starts with the oplet and has to have
//the prefix added to it.
Job$1.prototype.send = function(oplet_array_or_string, robot){ //if remember is false, its a heartbeat
    if(typeof(oplet_array_or_string) == "string") {
        //a string can't contain the robot so just use what is passed in to SEND, or the job's robot.
        if(!robot) { robot = this.robot; } //use the job's default robot
    }
    else { //oplet_array_or_string is an oplet_array
        //if there's both a passed in robot, and one in the oplet_array, prefer
        //the one in the oplet array
        let last_elt = last(oplet_array_or_string);
        if (last_elt instanceof Robot$1) {
            robot = last_elt;
            oplet_array_or_string = oplet_array_or_string.slice(0, oplet_array_or_string.length - 1); //don't use "pop" because
            //we need the orig do list item that contains the robot  because
            //Socket.find_dexter_instance_from_robot_status needs it. So make a COPY of the array,
            //removing that last elt of a robot, as the socket code doesn't want a robot on the end of the array.
        }
        else if (!robot)                                  { robot = this.robot; } //use the job's default robot
    }
    if(robot instanceof Dexter$1){
        if (robot.is_busy()){
        //    this.instr_and_robot_to_send_when_robot_unbusy = [oplet_array_or_string, robot]
        //    return
        //}
         robot.add_to_busy_job_array(this); //the only place this is called (err besides 5 lines below)
         return //we're not sending the instruction, leave the PC on the current instruction
               //Dexter.prototype.robot_done_with_instruction will call set_up to execute it.
        }
        else {
           robot.add_to_busy_job_array(this);  //keep sending this one inst to the dexter.
        }
    }
    let instruction_id;
    const oplet = Instruction$1.extract_instruction_type(oplet_array_or_string);
    if(oplet == "h") { //op_let is first elt UNTIL we stick in the instruction id
        //instruction_id = -1 //heartbeat always has instruction id of -1
        shouldnt$1('Job.send passed "h" instruction (heartbeat) but that shouldnt happen as heartbeat is handled lower level by Dexter robot');
    }
    else if (this.status_code == "not_started"){ //instuction_array should be a Job.get_robot_status
        instruction_id = -3; //looked at by robot_done_with_instruction
    }
    else if (this.status_code == "starting"){ //instuction_array should be a Job.get_robot_status
        instruction_id = -1; //looked at by robot_done_with_instruction
    }
    else {
        instruction_id = this.program_counter;
    }
    if(typeof(oplet_array_or_string) == "string") {
        let prefix = this.job_id + " " + instruction_id + " " + Date.now() + " undefined ";
        oplet_array_or_string = prefix + oplet_array_or_string;
        if(last(oplet_array_or_string) != ";") { oplet_array_or_string += ";"; }

    }
    else {
        oplet_array_or_string[Instruction$1.JOB_ID]         = this.job_id;
        oplet_array_or_string[Instruction$1.INSTRUCTION_ID] = instruction_id;
        oplet_array_or_string[Instruction$1.START_TIME]     = Date.now();
    }

    if (this.keep_history){
        this.sent_instructions.push(oplet_array_or_string); //for debugging mainly
    }
    if(oplet === "z"){
        this.color_job_button(); //colors job button yellow, even though status is "running" because
        //cur instruction is "z"
    }
    //if(oplet === "a") { out("snd J2: " + oplet_array_or_string[6]) } //debugging statement only
    if(robot instanceof Dexter$1){
        this.wait_until_instruction_id_has_run = instruction_id;
    }
    robot.send(oplet_array_or_string);
};

//"this" is the from_job
// params is the instance of Instruction.send_to_job
//send_to_job_receive_done is kinda like Serial and Dexter.robot_done_with_instruction
//but used only with send_to_job and only when the from_job is waiting for the
//to_job to complete the ins it was sent before allowing the from_job to continue.
Job$1.prototype.send_to_job_receive_done = function(params){
    if (this.wait_until_instruction_id_has_run === params.from_instruction_id){
        this.highest_completed_instruction_id  = params.from_instruction_id;
        this.wait_until_instruction_id_has_run = null;
        //below is done in Instruction.destination_send_to_job_is_done.do_item
        //for (var user_var in params){
        //    if (Instruction.send_to_job.param_names.indexOf(user_var) == -1){
        //        var val = params[user_var]
        //        this.user_data[user_var] = val
        //    }
        //}
        this.user_data[params.status_variable_name] = "done";
        this.set_up_next_do(1);
    }
    else {
        shouldnt$1("In job: " + this.name + " send_to_job_receive_done got params.from_instruction_id of: " +
            params.from_instruction_id +
            " but wait_until_instruction_id_has_run is: " + this.wait_until_instruction_id_has_run);
    }
};



//used in go_to, wait_until at least.
Job$1.instruction_location_to_job = function (instruction_location, maybe_error=true){
    var the_job_elt = instruction_location;
    if (Array.isArray(instruction_location)){
        if (instruction_location.length === 0){
            if (maybe_error) {
                dde_error("Job.instruction_location_to_job passed empty array.<br/>" +
                          " It must have at least 1 item in it,<br/>" +
                          'with the first of format: {job: "some_job"}');
            }
            else {return null}
        }
        else { the_job_elt = instruction_location[0]; }
    }
    if (the_job_elt){
        if (the_job_elt.job) {
            let the_job = the_job_elt.job;
            if (typeof(the_job) == "string"){
                const the_job_name = the_job;
                the_job = Job$1[the_job];
                if (!the_job) {
                    if (maybe_error) {
                        dde_error("Attempt to find instruction_location: " + instruction_location +
                        "<br/>but the specified job: " + the_job_name +
                        "<br/>isn't a defined job.");
                    }
                    else { //if we get a string, but that's not a defined job, that's kinda suspicious, so I warning
                      warning("instruction_location_to_job passed: " + instruction_location +
                              "<br/>which contains a name for a job: " + the_job_name +
                              "<br/>but a job with that name is not defined.");
                      return null
                    }
                }
            }
            return the_job
        }
        else {
            if (maybe_error) {
                dde_error("Job.instruction_location passed " + instruction_location +
                          '<br/> which does not have an element of format: {job:"some_job"}');
            }
            else { return null }
        }
    }
    else {
        if (maybe_error) {
            dde_error("Job.instruction_location passed a location: " + instruction_location +
                      "<br/> that doesn't have a job in it.");
        }
        else { return null }
    }
};
//instruction_location can be 5, {offset: 5}, [{offset: 5}}, {job: "myjob", offset:5}
// [{job:myjob}, {offset:5}], then throw in process attribute.
//getting a job makes it hold for the rest of the il, any there should be at most
//one job and it should be in the first element.
//offset and process DON'T carry forward to become defaults for later array elts.
//if the first offset is negative, it is added to the job's do_list length to
//get the resulting instruction id.
Job$1.prototype.instruction_location_to_id = function(instruction_location, starting_id=null, orig_instruction_location=null, use_orig_do_list=false){
    let job_instance = this;
    let do_list_length = (use_orig_do_list ?
                            job_instance.orig_args.do_list.length :
                            job_instance.do_list.length);
    if (orig_instruction_location == null) { orig_instruction_location = instruction_location;} //used for error messages
    let inst_loc = instruction_location;
    let process = "forward_then_backward"; //process ignored for integer inst_loc's.
    if ((typeof(inst_loc) == "object") && !Array.isArray(inst_loc)){
        if (instruction_location.job) {
            job_instance = instruction_location.job;
            if (typeof(job_instance) == "string") { job_instance = Job$1[job_instance]; }
            if (!(job_instance instanceof Job$1)) {
                dde_error("instruction_location_to_id passed: " +  orig_instruction_location +
                          "<br/> passed an invalid job of: " + job_instance);
            }
        }
        //an object might have just a job, just an offset, or both
        if(instruction_location.offset || (instruction_location.offset === 0)) {
            inst_loc = instruction_location.offset;
            if (instruction_location.process) {
                process = instruction_location.process;
            }
        }
        else {
            dde_error("In instruction_location_to_id, got an object: " + instruction_location +
                      "<br/>that did not have an offset field,<br/>" +
                      "in the original_instruction_location: " + orig_instruction_location);
        }
    }
    if (Number.isInteger(inst_loc)){
        if (starting_id == null){
            if (inst_loc >= 0) { starting_id = 0; }
            else { starting_id = do_list_length; } // an initial negative inst_loc means count from the end, with -1 pointin at the last instruction
        }
        let result = starting_id + inst_loc;
        if ((result < 0) || (result > do_list_length)){
              dde_error("instruction_location_to_id passed: " + instruction_location +
                        "<br/>but that finds an instruction outside the range of<br/>" +
                        " valid ids: 0 through " + do_list_length +
                        "<br/>in the original_instruction_location: " + orig_instruction_location);

        }
        else { return result }
    }
    else if (typeof(inst_loc) == "string"){
        if      (inst_loc == "program_counter")        { return job_instance.program_counter }
        else if (inst_loc == "before_program_counter") { return job_instance.program_counter - 1 }
        else if (inst_loc == "after_program_counter")  { return job_instance.program_counter + 1 }
        else if (inst_loc == "end")                    { return do_list_length } //bad for go_to but ok for insert instruction, ie a new last instruction
        else if (inst_loc == "next_top_level")         { return "next_top_level" } //used only by insert_instruction
        else if (inst_loc == "highest_completed_instruction") {
            const hci = job_instance.highest_completed_instruction_id;
            if(!hci || (hci <= 0)) { return 0 }
            else { return hci }
        }
        else if (inst_loc == "highest_completed_instruction_or_zero") {
            const hci = job_instance.highest_completed_instruction_id;
            if(!hci || (hci <= 0) || (hci >= (do_list_length - 1)))  { return 0 }
             //for the last cause above: if we completed the job the last time through, then start over again at zero
            else { return hci } //else we are resuming at
              //the highest completed instruction. But beware, you *might* not want
              //to do that instruction twice, in which case the instruction_location should be
              // ["zero_or_highest_completed_instruction", 1]
        }
        else { // a label or a sync_point name search pc, then after, then before pc
           if (starting_id == null) { starting_id = this.program_counter; }
           if      (process == "forward_then_backward") { return job_instance.ilti_forward_then_backward(inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else if (process == "backward_then_forward") { return job_instance.ilti_backward_then_forward(inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else if (process == "forward")               { return job_instance.ilti_forward( inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else if (process == "backward")              { return job_instance.ilti_backward(inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else {
               dde_error("instruction_location_to_id passed process: " + process +
                   "<br/>but the only valid processes are:<br/>" +
                   '"forward_then_backward", "backward_the_forward", "forward", "backward".' +
                   "<br/>in the original_instruction_location: " + orig_instruction_location);
           }
        }
    }
    else if (Array.isArray(inst_loc)){
        let result = starting_id; //will be null on first call
        for(let item of inst_loc){
            if (item.job){
                if(result == null){ //we're on the first elt of the array. so ok for it to have a job
                    job_instance = item.job;
                    if (typeof(job_instance) == "string") {
                        job_instance = Job$1[job_instance];
                        if (!job_instance) { dde_error("In instruction_location_to_id got undefined job name: " + job_inst);}
                    }
                }
                else {
                    dde_error("In instruction_location_to_id got a non-first item<br/>" +
                             " that has job in it, which is invalid. That invalid job is: " + item.job +
                             "<br/>in the original_instruction_location: " + orig_instruction_location);
                }
            }
            result = job_instance.instruction_location_to_id(item, result, orig_instruction_location, use_orig_do_list);
        }
        return result
    }
    else {dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
                    " in the original_instruction_location: " + orig_instruction_location);}
};

Job$1.prototype.ilti_forward_then_backward = function(inst_loc, starting_id, orig_instruction_location, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id; id < the_do_list.length; id++){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //gets label, sync_point and fn name
        else if (ins instanceof Instruction$1){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction$1.is_oplet_array(ins)){
            if (ins[Instruction$1.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    for(let id = starting_id - 1; id >= 0; id--){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //finds both label and sync_point instructions with "name" of inst_loc
        else if (ins instanceof Instruction$1){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction$1.is_oplet_array(ins)){
            if (ins[Instruction$1.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
        "<br/>in the original_instruction_location: " + orig_instruction_location);
};

Job$1.prototype.ilti_backward_then_forward = function(inst_loc, starting_id, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id - 1; id >= 0; id--){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //finds both label and sync_point instructions with "name" of inst_loc
        else if (ins instanceof Instruction$1){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction$1.is_oplet_array(ins)){
            if (ins[Instruction$1.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    for(let id = starting_id; id < the_do_list.length; id++){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //gets label, sync_point and fn name
        else if (ins instanceof Instruction$1){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction$1.is_oplet_array(ins)){
            if (ins[Instruction$1.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
        "<br/>in the original_instruction_location: " + orig_instruction_location);
};

Job$1.prototype.ilti_forward = function(inst_loc, starting_id, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id; id < this.do_list.length; id++){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //gets label, sync_point and fn name
        else if (ins instanceof Instruction$1){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction$1.is_oplet_array(ins)){
            if (ins[Instruction$1.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
        "<br/>in the original_instruction_location: " + orig_instruction_location);
};

Job$1.prototype.ilti_backward = function(inst_loc, starting_id, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id - 1; id >= 0; id--){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //finds both label and sync_point instructions with "name" of inst_loc
        else if (ins instanceof Instruction$1){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction$1.is_oplet_array(ins)){
            if (ins[Instruction$1.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
              "<br/>in the original_instruction_location: " + orig_instruction_location);
};

//functions for managing adding and removal from do_list
// (and keeping added_items_count in sync).
//see also Job.insert_instruction and Job.prototype.do_list_to_html_aux

//called by Job.start
Job$1.prototype.init_do_list = function(){
    this.do_list           = Job$1.flatten_do_list_array(this.do_list); //make a copy in case the user passes in an array that they will use elsewhere, which we wouldn't want to mung
    for(let instr of this.do_list) {
        if (instr instanceof Instruction$1) {
            instr.init_instruction();   //needed for wait_until and loop at least
        }
    }
    this.added_items_count = new Array(this.do_list.length); //This array parallels and should be the same length as the run items on the do_list.
    this.added_items_count.fill(0); //stores the number of items "added" by each do_list item beneath it
    //if the initial pc is > 0, we need to have a place holder for all the instructions before it
    //see total_sub_instruction_count_aux for explanation of added_items_count
    this.is_do_list_item_top_level_array = new Array(this.do_list.length);
    this.is_do_list_item_top_level_array.fill(true);
};

Job$1.prototype.remove_sub_instructions_from_do_list = function(instr_id){
    if(!this.disable_modify_do_list) {
        const sub_items_count = this.total_sub_instruction_count(instr_id);
        this.do_list.splice(instr_id + 1, sub_items_count); //cut out all the sub-instructions under instr_id
        this.added_items_count.splice(instr_id + 1, sub_items_count);
        this.added_items_count[instr_id] = 0; //because we just deleted all of ites subitems and their descendents
        this.is_do_list_item_top_level_array.splice(instr_id + 1, sub_items_count);
    }
};

Job$1.prototype.total_sub_instruction_count = function(id_of_top_ins){
    return total_sub_instruction_count_aux(id_of_top_ins, this.added_items_count)
};

/*
added_items_count is the way in which the do_list can be considered to be a
hierarchy such that an instruction that adds more instuctions under it,
those new insturctions will be considered sub-instrustions.
This is important for presenting the do_list as a hierarchy
(as the Inspect does, but also necessary to remove previous do_list items
from the do_list when we start an loop iteration or perform a backwards go_to.

added_items_count is an array that is maintained to always be the same
length as the do_list, and contains a non-neg integer for each do_list_item saying
how many sub-instructions the instruction at that array index
has beneath it *when they are first added*
If a subinstruction, when it is run, returns more instructions to
insert the orig instruction sub-instruction count is NOT increased,
its just left alone, but the orig subinstrution's item-count is
incremented by the new sub-sub-instructions added.
This makes computing how many actual instructons are underneath
a given instruction tricky, as it may well be more than its
added_items_count indicates.
(If the added_items_count is 0, it has no sub-instructions but
if it is more than 0, it might be that number or more.)
The job of total_sub_instruction_count_aux is to figure out
total sub)instructions. It walks down the  added_items_count
from the given index until it "runs out" of sub-insructions,
and returns the count. The sub-instructions count excludes the
instruction at the given index. See the test suite for
total_sub_instruction_count_aux for examples.
*/

function total_sub_instruction_count_aux(id_of_top_ins, aic_array){
    let result = 0; //this.added_items_count[id_of_top_ins]
    let tally  = 1; //this.added_items_count[id_of_top_ins]
    for(let i = id_of_top_ins; true ; i++){
        let aic_for_i = aic_array[i]; //this.added_items_count[i]
        if (aic_for_i === undefined) {
            shouldnt$1("total_sub_instruction_count_aux got undefined from aic_array: " + aic_array);
        }
        result += aic_for_i; //often this is adding 0
        tally  += aic_for_i - 1;
        if (tally == 0) { break; }
        else if (tally < 0) { shouldnt$1("in total_sub_instruction_count got a negative tally"); }
    }
    return result
}

//--------top level do_list item_____
Job$1.prototype.top_level_instruction_id_array = null;

//perform whenever do_list item changes, if you care about
//computing top levelness.
// Warning: expensive to compute the first one after decaching.
Job$1.prototype.decache_top_level_instruction_id_array = function(){
    this.top_level_instruction_id_array = null;
};


//shoves into this.top_level_instruction_id_array, an array that is of the job's do_list length
// (not the orig_args.do_list!
//that has values of true or false. true if the instruction at that index is top level,
//ie was not inserted by running the job.
//You might think that the number of elts in top_level_instruction_id_array that are true should be
//the same as orig_args.do_list.length
//But this is not true due to flattening of arrays on the orig do_list during job.start
//and inserting each elt of an array into the do_list at top level.
//See also comment at: Job.prototype.insert_instructions

/*Obslete with new makae as you go Job.prototyp.is_do_list_item_top_level_array
Job.prototype.make_top_level_instruction_id_array = function(){
    let result = []
    let prev_top_level_accum = 0
    for(let i = 0; i < this.do_list.length; i++){
        if(prev_top_level_accum == 0) {
            result.push(true)
            prev_top_level_accum = this.added_items_count[i]
        }
        else {
            result.push(false)
            prev_top_level_accum += this.added_items_count[i]
            prev_top_level_accum -= 1 //subtract one for yourself
        }
    }
    this.top_level_instruction_id_array = result
}*/

Job$1.prototype.is_top_level_do_list_item = function (id) {
   //if(this.top_level_instruction_id_array == null){
   //    this.make_top_level_instruction_id_array()
  // }
  if(this.is_do_list_item_top_level_array) {
    return this.is_do_list_item_top_level_array[id] //this.top_level_instruction_id_array[id]
  }
  else { return true } //because we're working off orig_args.do_list, all of whose items are top level
};

//returns id itself if id is top level, if not, returns an id less than the passed in id.
//works only on the job's do_list, NOT its orig_args.do_list
Job$1.prototype.find_top_level_instruction_id_for_id = function(id){
    //if(this.top_level_instruction_id_array == null){
    //    this.make_top_level_instruction_id_array()
    //}
    for(let i = id; i >= 0; i--){
        if(this.is_top_level_do_list_item(i)) { return i }
    }
    shouldnt$1("Job.find_top_level_instruction_id_for_id couldn't find answer for id: " + id);
};

//returns the index of the next top level instruction after the passed in id.
//If id itself is a top level item, doesn't matter.
//Still finds the top level id AFTER the passed in id.
//If id refers to the last instruction in the do_list, returns null,
// i.e. there is no next top level item.
Job$1.prototype.find_next_top_level_instruction_id_for_id = function(id){
    //if(this.top_level_instruction_id_array == null){
    //    this.make_top_level_instruction_id_array()
    //}
    for(let i = id + 1; i < this.do_list.length; i--){
        if(this.is_top_level_do_list_item(i)) { return i }
    }
    return null //happens when i is the last elt in the do_list
};
//-----end of top level do_list item_____


//These 2 fns take care of inserting into added_items_count array,
//slots for the new items they are inserting
//Both of these fns always insert right after the pc
//force_allow is only true when we are adding the final "g" instruction to a job

//note this DOESN'T insert each new item "below" the pc, and boost the added_items_count
//of the pc by array_of_do_items.length. If we did that,
//it would work, and we'd have the hierarchical modularity that would
//help in debugging. BUT, it would add a round_trip to the do_next_item loop,
//and it means that when we're grabbing the "top level" items for job defs to insert for MakeInstruction,
//we would have reduced granularity in what we capture so the "snipets" grbbed would be
//"lower resolution and not as good.
//See also Job.protptype.make_top_level_instruction_id_array()
Job$1.prototype.insert_instructions = function(array_of_do_items, are_sub_instructions=true){
    if(!this.disable_modify_do_list) {
        this.do_list.splice(this.program_counter + 1, 0, ...array_of_do_items);
        let added_items_to_insert = new Array(array_of_do_items.length);
        added_items_to_insert.fill(0);
        this.added_items_count.splice(this.program_counter + 1, 0, ...added_items_to_insert);
        let is_top_array = new Array(array_of_do_items.length);
        if(are_sub_instructions) {
            this.added_items_count[this.program_counter] += added_items_to_insert.length;
            is_top_array.fill(false);
        }
        else { //top level
            is_top_array.fill(true);
        }
        this.is_do_list_item_top_level_array.splice(this.program_counter + 1, 0, ...is_top_array);
    }
};

//insert instruction right after the pc
Job$1.prototype.insert_single_instruction = function(instruction_array, is_sub_instruction=true, force_allow=false){
    if(force_allow || !this.disable_modify_do_list) {
        this.do_list.splice(this.program_counter + 1, 0, instruction_array);
        this.added_items_count.splice(this.program_counter + 1, 0, 0); //added oct 31, 2017
        if (is_sub_instruction) {
            this.added_items_count[this.program_counter] += 1;
            this.is_do_list_item_top_level_array.splice(this.program_counter + 1, 0, false); //false for is NOT top_level
        }
        else {
            this.is_do_list_item_top_level_array.splice(this.program_counter + 1, 0, true); //true for is_top_level
        }
    }
};

//expect to call when job is when_do_list_done: "wait" and
//the job is running and probably waiting for another instruction.
//we want to replace the LAST instruction that we inserted using this fn,
//and any follow on instructions it generated, with a new instruction.
Job$1.prototype.insert_last_instruction_overwrite = function(instruction, force_allow=false){
    if(this.do_list === undefined) {
        dde_error("Job." + this.name + " is not running,<br/>" +
                  " so calling insert_last_instruction_overwrite doesn't make sense.");
    }
    else if(force_allow || !this.disable_modify_do_list) {
        if(this.program_counter === this.do_list.length) { //hopefully the normal case. We're going to replace that last
            //inst (and its generated kids) with the past in instruction so first
            //delete all the ustrictions from the last instr inserted by insert_last_instruction_overwrite
            //thru all kids generated by it.
            if(this.hasOwnProperty("insert_last_instruction_index")){ //get rid of old instruction from insert_last_instruction_index and higher
                this.do_list.splice(this.insert_last_instruction_index); //delete all elts from the given arg to the end. add none
                this.added_items_count.splice(this.insert_last_instruction_index);
                this.is_do_list_item_top_level_array.splice(this.insert_last_instruction_index);
            }
            this.insert_last_instruction_index = this.do_list.length;
            Job$1.insert_instruction(instruction, {job: this, offset: this.insert_last_instruction_index}, false);
            this.program_counter = this.insert_last_instruction_index;
        }
        else if(this.hasOwnProperty("insert_last_instruction_index")) {//we've had this fn called before and had an instruction,
          //but haven't completed the instructions in the last insertion, so just add them to the end.
            Job$1.insert_instruction(instruction, {job: this, offset: this.do_list.length}, false);
        }
        else {//First time this fn is called, but are still running other instructions in the job
              //so initialize insert_last_instruction_index and add the new instruction
              //to the end of the do_list
            this.insert_last_instruction_index = this.do_list.length;
            Job$1.insert_instruction(instruction, {job: this, offset: this.do_list.length}, false);
        }
    }
};

//rarely called. usually call insert_single_instruction
//is_sub_instruction default of "auto" is the behavior before is_sub_instruction was added as a possibility.
//it can also be true, or false. false is what insert_last_instruction_overwrite uses
//to get the new insruction to be at top level.
Job$1.insert_instruction = function(instruction, location, is_sub_instruction="auto"){
    const job_instance = Job$1.instruction_location_to_job(location);
    if (job_instance){
        if(!job_instance.disable_modify_do_list) {
            const index = job_instance.instruction_location_to_id(location);
            if ((index === "next_top_level") ||
                ["not_started", "completed", "errored", "interrupted"].includes(job_instance.status_code)){
                job_instance.sent_from_job_instruction_queue.push(instruction);
                job_instance.sent_from_job_instruction_location = location;
                    //if a job isn't running, then we stick it on the ins queue so that
                    //the next time is DOES run (ie its restarted), this
                    //inserted instruction will make it in to the do_list.
            }
            else { job_instance.do_list.splice(index, 0, instruction);
                   job_instance.added_items_count.splice(index, 0, 0); //added oct 31, 2017
                   //unlike the instance method cousins of this static method,
                        //this meth must do the added_items_count increment because
                        //the caller of this meth doesn't know the index of the instr to increment
                        //the added_items_count of.
                        //job_instance.added_items_count[this.program_counter] += 1 //isn't right that pc has its added_items count incremented. Maybe should be something else, or no increment at all
                   if(location.offset == "end"){ //always at top level
                       job_instance.is_do_list_item_top_level_array.splice(index, 0, true);
                   }
                   else if (is_sub_instruction === "auto") {
                        let did_increment = job_instance.increment_added_items_count_for_parent_instruction_of(index); //false means we're at top level
                        job_instance.is_do_list_item_top_level_array.splice(index, 0, !did_increment);
                   }
                   else {
                       job_instance.is_do_list_item_top_level_array.splice(index, 0, is_sub_instruction);
                   }
            }
        }
    }
    else {
        dde_error("insert_instruction passed location: " + insert_instruction +
                  " which doesn't specify a job. Location should be an array with" +
                  "a first element of a literal object of {job:'some-job'}");
    }
};

//returns true if it did do an increment, false if it didn't
//it doesn't do an increment only if the item inserted is at top level,
//so returning false means the inserted item is inserted at top level.
Job$1.prototype.increment_added_items_count_for_parent_instruction_of = function(instr_id){
    if(instr_id <= 0) { return false } //must be at top level, so there is no parent to increment. This is ok
    else {
        let par_id_maybe = instr_id - 1;
        let par_instr = this.do_list[par_id_maybe];
        if(par_instr instanceof Instruction$1.go_to) { //below code is hairy but very rarely if ever called
            let location = par_instr.instruction_location;
            let par_loc_job_inst = Job$1.instruction_location_to_job(location);
            let par_loc_index = this.instruction_location_to_id(location);
            if((par_loc_job_inst === this) &&
               (type_of(par_loc_index) == "number") &&
               (par_loc_index < this.program_counter)) { //backwards goto in same job
               let loop_inst_maybe = this.do_list[par_loc_index];
               if(loop_inst_maybe instanceof Control.loop){ //shoot, we can't make the inserted instruction a sub_object of a loop's go_to
                    //so we've got to climb up the tree and increment the next instr that has a positive added_items_count
                    //but that aic must "contain" the instr_id of the added instruction
                   for(let maybe_par_id = par_loc_index - 1; maybe_par_id >= 0; maybe_par_id--){
                       //assumes go_to of a loop instr won't have a positive added_items_count which should be right
                       if(this.added_items_count[maybe_par_id] > 0) {
                           let sub_items_count = this.total_sub_instruction_count(maybe_par_id);
                           let last_instruction_id_under_maybe_par = maybe_par_id + sub_items_count;
                           if (instr_id <= (last_instruction_id_under_maybe_par + 1)){ //even if our new instr is one beyond the current scope of our maybe_par_id, consider that we're adding to the end of that maybe_par's sub_instructions. The alternative is to keep going up but this is good enough.
                               this.added_items_count[maybe_par_id] += 1;
                               return true
                           }
                       }
                   }
                   return false //didn't find a parent that included instr_id so it must be at top level,
                          //in which case, no need to increment any par instr aic
               }
            }
        }
        //the case that applies nearly all of the time
        //do not make this an else as the inner if's above need to fall through to here.
        this.added_items_count[instr_id - 1] += 1; //fairly dumb but usually right. Just make it the sub_instruction of the instruction above it.
        return true
    }
};

//end do_list management fns

//returns true if the argument is the right type to be an
///instruction location. Note it might not actually BE an instruction location,
//but at least it coforms to the bare minimum of a type
//called from Job constructor for use in finish_job
Job$1.is_plausible_instruction_location = function(instruction_location){
    return Number.isInteger(instruction_location) ||
           (typeof(instruction_location) === "string") ||
            //array check must be before object check because typeof([]) => "object"
            (Array.isArray(instruction_location) &&
                (instruction_location.length > 0) &&
                Job$1.is_plausible_instruction_location(instruction_location[0])
            ) ||
           ((typeof(instruction_location) === "object") &&
            (   instruction_location.offset ||
                instruction_location.job    ||
                instruction_location.process
            ))
};

Job$1.is_plausible_when_stopped_value = function(val){
    return ((val === "stop") ||
            Instruction$1.is_do_list_item(val)
            )
};

//retruns an array of arrays, with the outer array having 3 inner arrays,
//one for x, y and z.
Job$1.prototype.three_d_points_for_plotting = function(which="auto"){ //can also be "orig_do_list" or "sent"
    if((which === "auto") && this.sent_instructions) {
        which = "sent";
    }
    else { which = "orig_do_list"; }
    let xarr=[], yarr=[], zarr=[];
    if(which === "orig_do_list") {
       let do_list = this.orig_args.do_list;
       for(let instr of do_list){
           let xyz = null;
           if((instr instanceof Instruction$1.Dexter) && instr.array_of_angles) {
              let angs = instr.array_of_angles;
              if(angs.length < 5) { //todo imperfect!
                  angs = angs.slice();
                  for(let i = 0; i < 5; i++){
                      if(i === angs.length) {
                          angs.push(0); //todo hack to get around not having 5 angles because Kin.J_angles_to_xyz will error if we don't
                          //but really less than 5 should mean "keep that angle in its same position
                          //see src for move_all_joints
                      }
                  }
              }
              xyz = Kin.J_angles_to_xyz(angs)[0];
           }
           else if((instr instanceof Instruction$1.Dexter) && instr.xyz) {
               xyz = instr.xyz;
           }
           else if(Instruction$1.is_oplet_array(instr, "a")){
               let angs = Instruction$1.extract_args(instr);
               if(angs.length < 5) { //todo imperfect!
                   angs = angs.slice();
                   for(let i = 0; i < 5; i++){
                       if(i === angs.length) {
                           angs.push(0); //todo hack to get around not having 5 angles because Kin.J_angles_to_xyz will error if we don't
                           //but really less than 5 should mean "keep that angle in its same position
                           //see src for move_all_joints
                       }
                   }
               }
               xyz = Kin.J_angles_to_xyz(angs)[0];
           }
           if(xyz){
               xarr.push(xyz[0]);
               yarr.push(xyz[1]);
               zarr.push(xyz[2]);
           }
       }
    } // end which === "orig_do_list"
    else { //we have which = "sent"
       let instrs = this.sent_instructions;
        for(let instr of instrs){
            let xyz = null;
            if(Instruction$1.is_oplet_array(instr, "a")){
                let angs = Instruction$1.extract_args(instr);
                if(angs.length < 5) { //todo imperfect!
                    angs = angs.slice();
                    for(let i = 0; i < 5; i++){
                        if(i === angs.length) {
                            angs.push(0); //todo hack to get around not having 5 angles because Kin.J_angles_to_xyz will error if we don't
                            //but really less than 5 should mean "keep that angle in its same position
                            //see src for move_all_joints
                        }
                    }
                }
                xyz = Kin.J_angles_to_xyz(angs)[0];
            }
            if(xyz){
                xarr.push(xyz[0]);
                yarr.push(xyz[1]);
                zarr.push(xyz[2]);
            }
        }
    } //end which == "sent"
    return [xarr, yarr, zarr]
};

Job$1.prototype.to_source_code = function(args={}){
    if(!args.indent) { args.indent = ""; }
    let props_indent = args.indent + "         ";
    let result = 'new Job({name: "' + this.name + '",\n';
    if (this.robot !== Robot$1.dexter0){
        result += props_indent + 'robot: '  + this.robot.to_path() + ',\n';
    }
    let prop_names = [ //name, robot  handled above
                       "keep_history",
                       "show_instructions",
                       "inter_do_item_dur",
                       "user_data",
                       "default_workspace_pose",
                       "program_counter",
                       "ending_program_counter",
                       "initial_instruction",
                       "data_array_transformer",
                       "start_if_robot_busy",
                       "if_robot_status_error",
                       "if_instruction_error",
                       "if_dexter_connect_error",
                       "when_stopped",
                       "when_stopped_conditions",
                       "callback_param"
                       // do_list  // handled below
                       ];
    let props_container = ((args.job_orig_args || !this.do_list) ? this.orig_args : this);

    for(let prop_name of prop_names){ //if job has never been run, do_list will be undefined,
                                      //in which case use orig_args even if orig_args arg is false
       let prop_val = props_container[prop_name];
       if (!similar(prop_val, Job$1.job_default_params[prop_name])){ //I could *almost* use == instead pf similar but doesn't work for user_data of an empty lit obj
            let prop_args = jQuery.extend({}, args);
            prop_args.value = prop_val;
            let user_data_val_prefix = "";
            if (prop_name == "user_data") {
                prop_args.indent = props_indent + "    ";
                user_data_val_prefix = "\n";
            }

            let comma = ",";
            //if (prop_name == last(prop_names)) { comma = "" }
            if (prop_name == "robot") {
                result += props_indent + prop_name + ": " + "Robot." + this.robot.name +
                          comma + "\n";
            }
            else { result += props_indent + prop_name + ": " +
                      user_data_val_prefix + to_source_code(prop_args) +
                      comma + "\n";
            }
       }
    }
    result += props_indent + "do_list: [";
    let do_list_val = props_container.do_list;
    if (!args.job_orig_args){
        let last_instr  = last(do_list_val);
        if (Instruction$1.is_oplet_array(last_instr) &&
            last_instr[Instruction$1.INSTRUCTION_TYPE] == "g") { //don't print the auto_added g instr at end of a run job
            do_list_val = do_list_val.slice(0, (do_list_val.length - 1));
        }
    }
    let on_first = true;
    for(let i = 0; i < do_list_val.length; i++){
       let on_last = (i == do_list_val.length - 1);
       let prop_args = jQuery.extend({}, arguments[0]);
       prop_args.value = do_list_val[i];
       prop_args.indent = (on_first ? "" : props_indent + "          ");
       let instr_src = to_source_code(prop_args);
       result += instr_src + (on_last ? "" : ",") + "\n";
       on_first = false;
    }
    result += props_indent + "         " + "]\n" + args.indent + "})";
    return result
};

//Kinematics Class

class Kin$1{
    static inverse_kinematics(xyz, direction = [0, 0, -1], config = [1, 1, 1], dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        if(xyz == undefined){
        	dde_error("xyz must be defined. To prevent unpredictable movement a default is not used.");
        }
        let dexter_inst, workspace_pose;
        if(Array.isArray(dexter_inst_or_workspace_pose)) { workspace_pose = dexter_inst_or_workspace_pose;}
        else { dexter_inst = dexter_inst_or_workspace_pose; workspace_pose = dexter_inst_or_workspace_pose.pose;}
        let xyz_dim = Vector$1.matrix_dimensions(xyz);
        if(xyz_dim[0] == 3 && xyz_dim[1] == 3){
        	workspace_pose = direction;
            config = xyz[2];
            direction = xyz[1];
            xyz = xyz[0];
        }
        
        
    
        let J = Vector$1.make_matrix(1, 5)[0]; // Joint Angles
        let U = Vector$1.make_matrix(5, 3);
        let P = [0, 0, 0, 0];
        let L;
        if(dexter_inst) { L = [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5]; } //Link Lengths
		else            { L = [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5]; }
		let normal = direction;
    	let right_arm = config[0];
    	let elbow_up = config[1];
    	let wrist_out = config[2];
        
        if(direction.length == 2){
        	normal = Kin$1.angles_to_dir_xyz(direction[0], direction[1]);
        }else if(direction.length == 3){
        	if(Vector$1.magnitude(direction) == 0){
            	dde_error("Direction must have a magnitude. Try [0, 0, -1] or [0, 0] for the [x_angle, y_angle] form");
            }
        }else {dde_error("Direction must be in the form [x, y, z] or [x_angle, y_angle]");}
        
        
        let xyz_trans, normal_trans;
        if(workspace_pose == undefined || Vector$1.is_equal(workspace_pose, [0, 0, -1])){
        	workspace_pose = Vector$1.identity_matrix(4);
            xyz_trans = xyz.slice();
            normal_trans = normal.slice();
        }else if(Vector$1.is_equal([4,4], Vector$1.matrix_dimensions(workspace_pose))){
        	xyz_trans = Vector$1.transpose(Vector$1.matrix_multiply(workspace_pose, Vector$1.properly_define_point(xyz))).slice(0,3);
        	normal_trans = Vector$1.transpose(Vector$1.matrix_multiply(workspace_pose, Vector$1.properly_define_vector(normal))).slice(0,3);
        }else {
        	dde_error("Unsupported workspace_pose datatype: " + workspace_pose);
        }
        
        
    	//Knowns:
        P[0] = [1, 0, 0, 0];
    	let V54 = Vector$1.multiply(-1, Vector$1.normalize(normal_trans)); //Direction of EE
        U[0] = [0, 0, 0];
        let V10 = [0, 0, 1];
    	U[1] = Vector$1.multiply(L[0], V10);
        U[4] = Vector$1.add(xyz_trans, Vector$1.multiply(L[4], V54));
        U[5] = xyz_trans;
        
    	
    	//Solving for P1
    	P[1] = Vector$1.points_to_plane(U[1], U[0], U[4]);
        if(Vector$1.is_NaN_null_or_undefined(P[1])){
        	P[1] = Vector$1.points_to_plane(U[1], U[0], U[3]);
            if(Vector$1.is_NaN_null_or_undefined(P[1])){
        		dde_error(`Singularity: Toolpoint xyz is on Base axis. [0, 0, z] divides by 0.
            	Try [0, 1e-10, z] if it works use the ouputted joint angles for a move_all_joints() instead.
            	The first joint angle can be changed to any value without affecting the tool point`);
            }
        }

		//Solving for U3
    	var U54_Proj = Vector$1.project_vector_onto_plane(V54, P[1]);
    	var U3_a = Vector$1.add(U[4], Vector$1.multiply(L[3], Vector$1.rotate(Vector$1.normalize(U54_Proj), P[1], 90)));
        var U3_b = Vector$1.add(U[4], Vector$1.multiply(L[3], Vector$1.rotate(Vector$1.normalize(U54_Proj), P[1], -90)));
        
        
        //This is proven to work for directions of approx. [0, 1, 0] but has potentially not been tested enough
        var dist_a = Vector$1.distance(U3_a, [0, 0, 0]);
    	var dist_b = Vector$1.distance(U3_b, [0, 0, 0]);
        if (wrist_out){
    		if (dist_a < dist_b){
        		U[3] = U3_a;
        	}else {
        		U[3] = U3_b;
        	}
    	}else {
    		if (dist_a > dist_b){
        		U[3] = U3_a;
        	}else {
        		U[3] = U3_b;
        	}
    	}
    	
        
        
        /*
        //This is proven to work for directions of approx. [0, 0, -1] but not for [x, y, 0]
        var dist_a = Vector.distance(U3_a, U[1], U[0])
    	var dist_b = Vector.distance(U3_b, U[1], U[0])
        if (wrist_out){
    		if (dist_a < dist_b){
        		U[3] = U3_a
        	}else{
        		U[3] = U3_b
        	}
    	}else{
    		if (dist_a > dist_b){
        		U[3] = U3_a
        	}else{
        		U[3] = U3_b
        	}
    	}
        */
        
        
    	//Solving for P2
    	P[2] = Vector$1.points_to_plane(U[5], U[4], U[3]);
        if(Vector$1.is_NaN_null_or_undefined(P[2])){
        	dde_error("Unknown plane singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.");
        }
		
    	//Solving for U2
    	var D3 = Vector$1.distance(U[3], U[1]);
        if(Vector$1.is_equal(D3, L[1] + L[3], 9)){
        	D3 = L[1] + L[2];
        }
        
        //Checking if in reach
        if (D3 > L[1] + L[2]){
        	let out_of_reach_dist = Vector$1.round(D3 - (L[1] + L[2]), 4);
        	dde_error("Point [" + Vector$1.round(xyz, 3)+"], [" + Vector$1.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach');
        }
        
        
    	//let Beta = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3, 2)) / (2 * D3 * L[1])) // Law of Cosines
        let Beta = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3, 2)) / (2 * D3 * L[1])); // Law of Cosines
        let V31 = Vector$1.normalize(Vector$1.subtract(U[3], U[1]));
    	
    	let U2_a = Vector$1.add(U[1], Vector$1.multiply(L[1], Vector$1.rotate(V31, P[1], Beta)));
    	let U2_b = Vector$1.add(U[1], Vector$1.multiply(L[1], Vector$1.rotate(V31, P[1], -Beta)));
    	//let U2_a_dist = Vector.distance(U2_a, P[0])
    	//let U2_b_dist = Vector.distance(U2_b, P[0])
        let V2a1 = Vector$1.subtract(U2_a, U[1]);
        let V32a = Vector$1.subtract(U[3], U2_a);
        //let V2b1 = Vector.subtract(U2_b, U[1])
        //let V32b = Vector.subtract(U[3], U2_b)
    	
    	if (elbow_up){
    		if(Vector$1.dot(Vector$1.cross(V2a1, V32a), P[1]) < 0){
        		U[2] = U2_a;
        	}else {
        		U[2] = U2_b;
        	}
    	}else {
      		if(Vector$1.dot(Vector$1.cross(V2a1, V32a), P[1]) > 0){
        		U[2] = U2_a;
        	}else {
        		U[2] = U2_b;
        	}
    	}


    	//Solving for joint angles
    
		//var V10 = minus(U[1], U[0])
    	var V21 = Vector$1.normalize(Vector$1.subtract(U[2], U[1]));
    	var V32 = Vector$1.normalize(Vector$1.subtract(U[3], U[2]));
    	var V43 = Vector$1.normalize(Vector$1.subtract(U[4], U[3]));
    	//var V54 = minus(U[5], U[3])

		if(right_arm == 1){
    		J[0] = Vector$1.signed_angle(P[1], P[0], V10); 
    		J[1] = Vector$1.signed_angle(V21, V10, P[1]);
    		J[2] = Vector$1.signed_angle(V32, V21, P[1]);
    		J[3] = Vector$1.signed_angle(V43, V32, P[1]);
    		J[4] = Vector$1.signed_angle(P[2], P[1], V43);
    	}else {
    		J[0] = Vector$1.signed_angle(P[1], P[0], V10) + 180;
    		J[1] = -Vector$1.signed_angle(V21, V10, P[1]);
    		J[2] = -Vector$1.signed_angle(V32, V21, P[1]);
    		J[3] = -Vector$1.signed_angle(V43, V32, P[1]);
    		J[4] = Vector$1.signed_angle(P[2], P[1], V43) + 180;
    	}
    
    	if(Vector$1.is_NaN_null_or_undefined(J[2])){
        	let thres = 100;
        	if(L[0] > thres || L[1] > thres || L[2] > thres || L[3] > thres || L[4] > thres){
            	dde_error("Link lengths are non properly defined: "  
                + "</br>LINK1: " + L[0] + " (meters)"
                + "</br>LINK2: " + L[1] + " (meters)"
                + "</br>LINK3: " + L[2] + " (meters)"
                + "</br>LINK4: " + L[3] + " (meters)"
                + "</br>LINK5: " + L[4] + " (meters)");
            }
        	dde_error("Singularity at: " + xyz + ", " + direction + ", " + config + ".</br>Please copy this message and report it as a bug.");
    	}
    
    	return [J, U, P]
    } 
    
    static forward_kinematics (joint_angles, dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        let J = Vector$1.deep_copy(joint_angles); //Joint Angles
        let U = new Array(5).fill(new Array(3)); //Point Locations

        let dexter_inst, workspace_pose;
        if(Array.isArray(dexter_inst_or_workspace_pose))  { workspace_pose = dexter_inst_or_workspace_pose;}
        else { dexter_inst = dexter_inst_or_workspace_pose; workspace_pose = dexter_inst_or_workspace_pose.pose;}
        let L;
        if(dexter_inst) { L = [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5]; } //Link Lengths
        else            { L = [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5]; }

        let P = new Array(3).fill(new Array(4)); //Planes
        
        let V21, V32, V43, V54;
        //Knowns:
        let U0 = [0, 0, 0];
        let V10 = [0, 0, 1];
        let P0 = [1, 0, 0];
        
        //Calculates all vectors first
        P[0] = P0;
		P[1] = Vector$1.rotate(P[0], V10, -(J[0]-180));
        V21 = Vector$1.rotate(V10, P[1], J[1]);
        V32 = Vector$1.rotate(V21, P[1], J[2]);
        V43 = Vector$1.rotate(V32, P[1], J[3]);
        P[2] = Vector$1.rotate(P[1], V43, -(J[4]-180));
        V54 = Vector$1.rotate(V43, P[2], -90);
		let V = [V10, V21, V32, V43, V54];
        
        //Dimensionalizes vectors by multiplying by link lengths
        U[0] = U0;
		U[1] = Vector$1.add(U[0], Vector$1.multiply(L[0], V10));
        U[2] = Vector$1.add(U[1], Vector$1.multiply(L[1], V21));
        U[3] = Vector$1.add(U[2], Vector$1.multiply(L[2], V32));
        U[4] = Vector$1.add(U[3], Vector$1.multiply(L[3], V43));
        U[5] = Vector$1.add(U[4], Vector$1.multiply(L[4], V54));
		
        P[1] = Vector$1.round(P[1], 15);
        P[2] = Vector$1.round(P[2], 15);
        
        
        let trans_mat = Vector$1.inverse(workspace_pose);
        if(Vector$1.is_equal([4,4], Vector$1.matrix_dimensions(workspace_pose))){
        	for(let i = 0; i < U.length; i++){
            	U[i] = Vector$1.transpose(Vector$1.matrix_multiply(trans_mat, Vector$1.properly_define_point(U[i]))).slice(0,3);
            }
            //debugger
            for(let i = 0; i < P.length; i++){
            	P[i] = Vector$1.transpose(Vector$1.matrix_multiply(trans_mat, Vector$1.properly_define_vector(P[i]))).slice(0,3);
            }
            for(let i = 0; i < V.length; i++){
            	V[i] = Vector$1.transpose(Vector$1.matrix_multiply(trans_mat, Vector$1.properly_define_vector(V[i]))).slice(0,3);
            }
        }else {
        	dde_error("Unsupported workspace_pose datatype");
        }
        
        return [U, V, P]
    }

    /*static is_in_reach(xyz, J5_direction = [0, 0, -1], config = [1, 1, 1], dexter_inst){
    	let base_xyz = [0, 0, 0] // Come back to this and pull it from robot_pose
        let base_plane = [0, 0, 1]
        let U3
        let L
        if(dexter_inst) { L = [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5] } //Link Lengths
        else            { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5] }

        let U1 = Vector.add(base_xyz, Vector.multiply(base_plane, L[0]))
    	let U4 = Vector.add(xyz, Vector.multiply(-L[4], Vector.normalize(J5_direction)))

		//Solving for P1
    	let P1 = Vector.points_to_plane(U1, base_xyz, U4)
        if(Vector.is_NaN(P1)){
        	P1 = Vector.points_to_plane(U1, base_xyz, U3)
            if(Vector.is_NaN(P1)){
        		return false
            }
        }
    }*/



    static is_in_reach (xyz, J5_direction = [0, 0, -1], config = [1, 1, 1], dexter_inst_or_workspace_pose){
            let base_xyz = [0, 0, 0]; // Come back to this and pull it from robot_pose
            let base_plane = [0, 0, 1];
            let U3;
            let U1 = Vector$1.add(base_xyz, Vector$1.multiply(base_plane, Dexter$1.LINK1));
            let dexter_inst, workspace_pose;
            if(Array.isArray(dexter_inst_or_workspace_pose)) { workspace_pose = dexter_inst_or_workspace_pose;}
            else if (dexter_inst_or_workspace_pose) { dexter_inst = dexter_inst_or_workspace_pose; workspace_pose = dexter_inst_or_workspace_pose.pose;}
            let L;
            if(dexter_inst) { L = [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5]; } //Link Lengths
            else            { L = [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5]; }

            let xyz_trans;
            let normal_trans;
            if(workspace_pose == undefined){
                workspace_pose = Vector$1.identity_matrix(4);
                xyz_trans = xyz.slice();
                normal_trans = J5_direction.slice();
            }else if(Vector$1.is_equal([4,4], Vector$1.matrix_dimensions(workspace_pose))){
                xyz_trans = Vector$1.transpose(Vector$1.matrix_multiply(workspace_pose, Vector$1.properly_define_point(xyz))).slice(0,3);
                normal_trans = Vector$1.transpose(Vector$1.matrix_multiply(workspace_pose, Vector$1.properly_define_vector(J5_direction))).slice(0,3);
            }else {
                dde_error("Unsupported workspace_pose datatype: " + workspace_pose);
            }
            let U5 = xyz_trans;
            let U4 = Vector$1.add(U5, Vector$1.multiply(-L[4], Vector$1.normalize(normal_trans)));


            //Solving for P1
            let P1 = Vector$1.points_to_plane(U1, base_xyz, U4);
            if(Vector$1.is_NaN_null_or_undefined(P1)){
                P1 = Vector$1.points_to_plane(U1, base_xyz, U3);
                if(Vector$1.is_NaN_null_or_undefined(P1)){
                    return false
                }
            }


            //Solving for U3
            let V54 = Vector$1.subtract(U5, U4);
            var U54_Proj = Vector$1.project_vector_onto_plane(V54, P1);
            var U3_a = Vector$1.add(U4, Vector$1.multiply(L[2], Vector$1.rotate(Vector$1.normalize(U54_Proj), P1, 90)));
            var U3_b = Vector$1.add(U4, Vector$1.multiply(L[2], Vector$1.rotate(Vector$1.normalize(U54_Proj), P1, -90)));
            var dist_a = Vector$1.distance(U3_a, U1, base_xyz);
            var dist_b = Vector$1.distance(U3_b, U1, base_xyz);
            if (config[2] == 1){
                if (dist_a < dist_b){
                    U3 = U3_a;
                }else {
                    U3 = U3_b;
                }
            }else {
                if (dist_a > dist_b){
                    U3 = U3_a;
                }else {
                    U3 = U3_b;
                }
            }


            if (Vector$1.distance(U1, U3) <= L[1] + L[2]){
                return true
            }else {
                return false
            }
    }
    
    //Public
    static J_angles_to_config (joint_angles, dexter_inst_or_workspace_pose){
    	let U54_Proj, U3_a, U3_b, dist_a, dist_b;
    	let J = Vector$1.deep_copy(joint_angles);
        let fk = Kin$1.forward_kinematics(J, dexter_inst_or_workspace_pose);
        let U = fk[0];
        let V = fk[1];
        let dexter_inst;
        if(Array.isArray(dexter_inst_or_workspace_pose)) ;
        else if (dexter_inst_or_workspace_pose) { dexter_inst = dexter_inst_or_workspace_pose;}
        //note that dexter_inst_or_workspace_pose might be undefined.
        //we don't actually need workspace_pose in this method, but I'm following a pattern here.
        let L;
        if(dexter_inst) { L = [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5]; } //Link Lengths
        else            { L = [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5]; }

        let right_arm, elbow_up, wrist_out;
        let P = fk[2];
        
        P[1] = Vector$1.points_to_plane(U[1], U[0], U[4]);
        U54_Proj = Vector$1.project_vector_onto_plane(V[4], P[1]);
    	U3_a = Vector$1.add(U[4], Vector$1.multiply(L[3], Vector$1.rotate(Vector$1.normalize(U54_Proj), P[1], 90)));
        U3_b = Vector$1.add(U[4], Vector$1.multiply(L[3], Vector$1.rotate(Vector$1.normalize(U54_Proj), P[1], -90)));
        
        
        dist_a = Vector$1.distance(U3_a, U[2]);
    	dist_b = Vector$1.distance(U3_b, U[2]);
        if (Vector$1.is_equal(U[3], U3_a)){
    		if (dist_a < dist_b){
        		wrist_out = 0;
        	}else {
        		wrist_out = 1;
        	}
    	}else {
    		if (dist_a > dist_b){
        		wrist_out = 1;
        	}else {
        		wrist_out = 0;
        	}
    	}
        /*
        //Old code:
        dist_a = Vector.distance(U3_a, U[1], U[0])
    	dist_b = Vector.distance(U3_b, U[1], U[0])
    		
        if(U[3] == U3_a){
        	if (dist_a < dist_b){
            	wrist_out = 1
            }else{
            	wrist_out = 0
            }
        }else{
        	if (dist_a < dist_b){
            	wrist_out = 0
            }else{
            	wrist_out = 1
            }
        }
        */
        
        
        let U50 = Vector$1.subtract(U[5], U[0]);
        if(Vector$1.dot(Vector$1.cross(U50, P[1]), V[0]) > 0){
        	right_arm = 0;
            
            if(wrist_out == 0){
            	wrist_out = 1;
            }else {
            	wrist_out = 0;
            }
        }else {
        	right_arm = 1;
        }
        
        if(right_arm == 1){
        	if(Vector$1.dot(Vector$1.cross(V[1], V[2]), P[1]) > 0){
        		elbow_up = 0;
        	}else {
        		elbow_up = 1;
        	}
        }else {
        	if(Vector$1.dot(Vector$1.cross(V[1], V[2]), P[1]) < 0){
        		elbow_up = 0;
        	}else {
        		elbow_up = 1;
        	}
        }
        
        
        return [right_arm, elbow_up, wrist_out]
    }

	/*
	this.point_at_xyz = function(xyz, current_J5_xyz, current_config, base_xyz = [0, 0, 0], base_plane = [0, 0, 1], base_rotation = 0){
    	let pointing_direction = Vector.subtract(xyz, current_J5_xyz)
        Kin.xyz_to_J_angles(current_J5_xyz, pointing_direction, current_config, base_xyz, base_plane, base_rotation)
    }
    */
    
    
    
    //Torque:
    
    
    /*
    I've run a mile in 4:24 what is that in MPH?
    var meter_per_sec = _mile / (4*_min+24*_s)
    var MPH = meter_per_sec / (_mile/_hour)
    
    
    
    this.gravity_torques = function(J_angles, base_xyz = [0, 0, 0], base_plane = [0, 0, 1], base_rotation = 0){
    	//This will return the torques expected due to the forces of gravity
        //As of now the output units are in Newton-meters but are subject to change
        
        
        //These will change once measurements are taken
        let L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5] //Link Lengths
        let CM_L = Vector.multiply(.5, L) // Center of mass as distance along the link
        let M = [5, 2, 2, .5, .5] //Link masses (kg) (guesses)
        let g = [0, 0, -9.80665] // (micron/millisecond^2 or m/s^2, they are equivalent)
        var T_vector = new Array(5).fill(new Array(3))
        var T = new Array(5)
        var F_vector = new Array(5).fill(new Array(3))
        var CM_r = new Array(5).fill(new Array(3))

        let P0 = Kin.base_rotation_to_plane(base_rotation, base_plane)
        let fk_result = Kin.forward_kinematics(J_angles, base_xyz, base_plane, P0)
        let U = fk_result[0]
        let V = (fk_result[1])
        let Vn = new Array(3).fill(new Array(5))
        for(var i = 0; i < 5; i++){
        	Vn[i] = Vector.normalize(V[i])
            F_vector[i] = Vector.multiply(M[i], g)
            CM_r[i] = Vector.multiply(CM_L[i], Vn[i])
        }
        //var P1 = Vector.points_to_plane(U[1], U[0], U[4])
        var P1 = Vector.rotate(P0, base_plane, J_angles[0])
        
        
        
        
        //Torques are calculated backwards from the end effector
        //The system is stationary so the sum of the torques equal zero 
        //the torque vector is found by crossing the radius (distance from joint to link's center of mass) and the weight vector
        //that torque vector may only have some components that affect the actual joint's torque reading
        //This is dealt with by projecting the torque vector onto the axis of the joint's rotation 
        let T_sum = [0, 0, 0]
        let F_sum = 0
        let radius
        let planes_of_rotation = [Vn[0], P1, P1, P1, Vn[3]]
        
        //Joints 1 and 2 
        T_sum = [0, 0, 0]
        T_sum = Vector.add(T_sum, Vector.cross(Vector.multiply(CM_L[1], Vn[1]), F_vector[1]))
        radius = Vector.add(V[1], CM_r[2])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[2]))
        radius = Vector.add(V[1], V[2], CM_r[3])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[3]))
        radius = Vector.add(V[1], V[2], V[2], CM_r[4])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
        T_vector[0] = T_sum
        T_vector[1] = T_sum
        
        //Joint 3
        T_sum = [0, 0, 0]
        radius = CM_r[2]
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[2]))
        radius = Vector.add(V[2], CM_r[3])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[3]))
        radius = Vector.add(V[2], V[3], CM_r[4])
		T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
		T_vector[2] = T_sum
        
        //Joint 4
        T_sum = [0, 0, 0]
        radius = CM_r[3]
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[3]))
        radius = Vector.add(V[3], CM_r[4])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
		T_vector[3] = T_sum
        
        //Joint 5
        T_sum = [0, 0, 0]
        radius = CM_r[4]
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
		T_vector[4] = T_sum
        
        for(var i = 0; i < 5; i++){
        	T[i] = Vector.dot(planes_of_rotation[i], T_vector[i])
        }
        
        T = Vector.multiply(.000001, T) // Converting to Nm (will change)
		return [T, T_vector, U, planes_of_rotation] 
    }*/
    
 
    //similar to Dexter.joints_out_of_range, but returns different values
    static check_J_ranges(J_angles, dexter_inst){
        let lower_limit;
        let upper_limit;
        if(dexter_inst instanceof Dexter$1) {
            lower_limit = [dexter_inst.J1_angle_min, dexter_inst.J2_angle_min, dexter_inst.J3_angle_min, dexter_inst.J4_angle_min, dexter_inst.J5_angle_min];
            upper_limit = [dexter_inst.J1_angle_max, dexter_inst.J2_angle_max, dexter_inst.J3_angle_max, dexter_inst.J4_angle_max, dexter_inst.J5_angle_max];
        }
        else {
    	    lower_limit = [Dexter$1.J1_ANGLE_MIN, Dexter$1.J2_ANGLE_MIN, Dexter$1.J3_ANGLE_MIN, Dexter$1.J4_ANGLE_MIN, Dexter$1.J5_ANGLE_MIN];
            upper_limit = [Dexter$1.J1_ANGLE_MAX, Dexter$1.J2_ANGLE_MAX, Dexter$1.J3_ANGLE_MAX, Dexter$1.J4_ANGLE_MAX, Dexter$1.J5_ANGLE_MAX];
        }
        for(var i = 0; i < J_angles.length; i++){
        	let angle = J_angles[i];
        	if((angle != null) && ((lower_limit[i] > angle) || (upper_limit[i] < angle))){
            	return false
            }
        }
        return true
    }

	/**************************************************************
	Wrapper Functions:
	***************************************************************/

    //Wrapper function for inverse kinematics
    //Returns joint angles
    
    //Depricated wrapper functions:
    static xyz_to_J_angles(xyz, J5_direction = [0, 0, -1], config = Dexter$1.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        return Kin$1.inverse_kinematics(xyz, J5_direction, config, dexter_inst_or_workspace_pose)[0]
    }

    static xyz_to_J_points(xyz, J5_direction = [0, 0, -1], config = Dexter$1.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        return Kin$1.inverse_kinematics(xyz, J5_direction, config, dexter_inst_or_workspace_pose)[1]
    }
    
    static xyz_to_J_planes(xyz, J5_direction = [0, 0, -1], config = Dexter$1.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        return Kin$1.inverse_kinematics(xyz, J5_direction, config, dexter_inst_or_workspace_pose)[2]
    }

    
    /*
    var EE_pose = Vector.make_pose([-0.4, 0.4, 0.2], [90, 0, 0])
    var direction = Vector.transpose(Vector.pull(EE_pose, [0,2], [1,1]))
    debugger
    var J_angles = Kin.xyz_to_J_angles_6_axes(EE_pose)
    
    
    */
    static xyz_to_J_angles_6_axes(EE_pose, config = Dexter$1.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        let direction = Vector$1.transpose(Vector$1.pull(EE_pose, [0,2], [1,1]));
        let xyz = Vector$1.transpose(Vector$1.pull(EE_pose, [0,2], [3,3]));
        let kin_res = Kin$1.inverse_kinematics(xyz, direction, config, dexter_inst_or_workspace_pose);
        let x_vector = kin_res[2][2].slice(0,3);
        //let y_vector = direction
        //let z_vector = Vector.cross(x_vector, y_vector)
        let x_vector_desired = Vector$1.transpose(Vector$1.pull(EE_pose, [0,2], [0,0]));
        let J6 = Vector$1.signed_angle(x_vector, x_vector_desired, direction);
		
        return [kin_res[0][0], kin_res[0][1], kin_res[0][2], kin_res[0][3], kin_res[0][4], J6]
    }
    
	
    //Wrapper function for forward kinematics
    static J_angles_to_xyz(joint_angles, dexter_inst_or_workspace_pose = Vector$1.make_pose()){
        let temp_angles = Vector$1.deep_copy(joint_angles);
        let xyzs = Kin$1.forward_kinematics(temp_angles, dexter_inst_or_workspace_pose)[0];
        //out(xyzs)
        let direction = Vector$1.normalize(Vector$1.subtract(xyzs[5], xyzs[4]));
        let config = Kin$1.J_angles_to_config(temp_angles, dexter_inst_or_workspace_pose);
        return [xyzs[5], direction, config]
    }
    
    static J_angles_to_coor(joint_angles, L0_pose, dexter_inst){
        let L0;
        if(Object.isNewObject(L0_pose)){
            L0 = L0_pose;
        }else if(Vector$1.is_pose(L0_pose)){
        	L0 = Coor.Table.create_child(L0_pose);
        }else if(L0_pose == undefined){ // this should get replaced with is_Coor()
            L0 = Coor.Table.create_child(Vector$1.make_pose());
        }else {
        	dde_error("L0_pose input arg must be a Coordinate System Object, a pose, or undefined");
        }
        let L = ((dexter_inst instanceof Dexter$1) ?
                   [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5] :
                   [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5]);
        let J = joint_angles;
        
        
		let L1 = L0.create_child(Vector$1.make_pose([0, 0, L[0]]), "L1");
		let L2 = L1.create_child(Vector$1.make_pose([0, 0, L[1]]), "L2");
		let L3 = L2.create_child(Vector$1.make_pose([0, 0, L[2]]), "L3");
        let L4 = L3.create_child(Vector$1.make_pose([0, 0, L[3]]), "L4");
        let L5 = L4.create_child(Vector$1.make_pose([0, 0,    0]), "L5");
		
        L1.rotate("Z", J[0], [0, 0, 0]);
        L2.rotate("X", J[1], [0, 0, 0]);
        L3.rotate("X", J[2], [0, 0, 0]);
        L4.rotate("X", J[3], [0, 0, 0]);
        L5.rotate("Z", J[4], [0, 0, 0]);
        
        return [L0.get_pose(Coor.Table), L1.get_pose(Coor.Table), L2.get_pose(Coor.Table), L3.get_pose(Coor.Table), L4.get_pose(Coor.Table), L5.get_pose(Coor.Table)]
    }
    
    static three_positions_to_pose(J_angles_1, J_angles_2, J_angles_3, scale_factor, dexter_inst){
    	let points_A, points_B, points_C, UA5, UA4, UB5, UB4, UC5, UC4, U5_ave, U4_ave, U45;
        let point, x_vector, z_vector, pose, angleA, angleB, angleC, vector_1, vector_2;
        
        points_A = Kin$1.forward_kinematics(J_angles_1, dexter_inst)[0];
        points_B = Kin$1.forward_kinematics(J_angles_2, dexter_inst)[0];
        points_C = Kin$1.forward_kinematics(J_angles_3, dexter_inst)[0];
        
        UA5 = points_A[5];
        UA4 = points_A[4];
        UB5 = points_B[5];
        UB4 = points_B[4];
        UC5 = points_C[5];
        UC4 = points_C[4];
        
        U5_ave = Vector$1.average(UA5, UB5, UC5);
        U4_ave = Vector$1.average(UA4, UB4, UC4);
        U45 = Vector$1.subtract(U4_ave, U5_ave);
        
        angleA = Vector$1.angle(Vector$1.subtract(UB5, UA5), Vector$1.subtract(UC5, UA5));
        angleB = Vector$1.angle(Vector$1.subtract(UA5, UB5), Vector$1.subtract(UC5, UB5));
        angleC = Vector$1.angle(Vector$1.subtract(UB5, UC5), Vector$1.subtract(UA5, UC5));
        
        switch(Math.max(angleA, angleB, angleC)){
        	case angleA:
            	point = UA5;
                vector_1 = Vector$1.subtract(UB5, UA5);
                vector_2 = Vector$1.subtract(UC5, UA5);
            	break
                
            case angleB:
            	point = UB5;
                vector_1 = Vector$1.subtract(UA5, UB5);
                vector_2 = Vector$1.subtract(UC5, UB5);
            	break
                
            case angleC:
            	point = UC5;
                vector_1 = Vector$1.subtract(UB5, UC5);
                vector_2 = Vector$1.subtract(UA5, UC5);
            	break
        }
        
        if(0 < Vector$1.dot(Vector$1.cross(vector_1, vector_2), U45)){
        	x_vector = Vector$1.normalize(vector_1);
        }else {
        	x_vector = Vector$1.normalize(vector_2);
        }
        
        z_vector = Vector$1.pull(Vector$1.points_to_plane(UA5, UB5, UC5), 0, [0, 2]);
        if(0 > Vector$1.dot(z_vector, U45)){
        	z_vector = Vector$1.multiply(-1, z_vector);
        }
        
        pose = Vector$1.make_pose(point, Vector$1.make_DCM_from_3_vectors(x_vector, undefined, z_vector), scale_factor);
        return pose
    }
    /*
    var applied_force = -75 //N
    var angles = [0, 45, 90, -45, 0]
    var fk = Kin.forward_kinematics(angles)
    var points = fk[0]

	var forcepoint = points[5]
    var arm1 = Vector.subtract(points[5], points[1])[1]
    var arm2 = 0
    var arm3 = 0
    //var arm1 = 0
    //var arm2 = Vector.subtract(points[5], points[1])[1]
    //var arm3 = Vector.subtract(points[5], points[2])[1]
    var T = [0, 0, 0]
    T[0] = arm1*applied_force
    T[1] = arm2*applied_force
    T[2] = arm3*applied_force
    out(T)
    
    //var angles = [0, 45, 0, 0, 0]
    //T = [0, -0.8255, 0.8255]
    //debugger
    Kin.three_torques_to_force(angles, T)
    
    */

    static three_torques_to_force(J_angles, torques = [0, 0, 0], dexter_inst){
    	if(torques.length != 3){dde_error("Only the first three torques are required for this function");}
        
        let U, V, P, U_contact;
        let axes = [0, 0, 0];
        let D = [0, 0, 0];
        let T = [0, 0, 0];
        let F = [0, 0, 0];
        let temp_J_angles = Vector$1.deep_copy(J_angles);
        temp_J_angles[0] = 0;
        let fk = Kin$1.forward_kinematics(temp_J_angles);
        U = fk[0];
        V = fk[1];
        P = fk[2];
        (dexter_inst ? dexter_inst.Link2 : Dexter$1.LINK2);
        (dexter_inst ? dexter_inst.Link3 : Dexter$1.LINK3);
        
        U_contact = U[5];
        
        //Torque axes
        axes[0] = Vector$1.normalize(V[0]);
        axes[1] = P[1];
        axes[2] = P[1];
        
        //Moment arms (as vectors):
        D[0] = Vector$1.project_vector_onto_plane(U_contact, axes[0]);
        D[1] = Vector$1.subtract(Vector$1.project_vector_onto_plane(U_contact, P[1]), U[1]);
        D[2] = Vector$1.subtract(Vector$1.project_vector_onto_plane(U_contact, P[1]), U[2]);
		
        //Torques (as vectors):
        T[0] = Vector$1.multiply(torques[0], axes[0]);
        T[1] = Vector$1.multiply(torques[1], axes[1]);
        T[2] = Vector$1.multiply(torques[2], axes[2]);
        
        //Perpendicular forces:
        F[0] = Vector$1.multiply(Vector$1.abs(torques[0]/Vector$1.magnitude(D[0])), Vector$1.normalize(Vector$1.cross(D[0], T[0])));
        F[1] = Vector$1.multiply(Vector$1.abs(torques[1]/Vector$1.magnitude(D[1])), Vector$1.normalize(Vector$1.cross(D[1], T[1])));
        F[2] = Vector$1.multiply(Vector$1.abs(torques[2]/Vector$1.magnitude(D[2])), Vector$1.normalize(Vector$1.cross(D[2], T[2])));
        
        //Force-space calcs:
        let F1a = F[1];
        let F1b = Vector$1.add(F[1], Vector$1.cross(F[1], P[1]));
        let F2a = F[2];
        let F2b = Vector$1.add(F[2], Vector$1.cross(F[2], P[1]));
        
        
        let A = (F2b[1]-F1b[1])/(F1a[1]-F1b[1]);
        let B = ((F2a[1]-F2b[1])*(F1b[2]-F2b[2]))/((F1a[1]-F1b[1])*(F2a[2]-F2b[2]));
        let C = ((F2a[1]-F2b[1])*(F1a[2]-F1b[2]))/((F1a[1]-F1b[1])*(F2a[2]-F2b[2]));
        let alpha = (A+B)/(1-C);
        let beta = (F1b[2]-F2b[2]+(F1a[2]-F1b[2])*alpha)/(F2a[2]-F2b[2]);
        
        let ForceYZ = Vector$1.add(F2b, Vector$1.multiply(beta, Vector$1.subtract(F2a, F2b)));
		if(torques[1] == 0 && torques[2] == 0){
        	ForceYZ[1] = 0;
            ForceYZ[2] = 0;
        }

		let lineYZa = [0, ForceYZ[1], ForceYZ[2]];
        let lineYZb = [1, ForceYZ[1], ForceYZ[2]];
        let ForceXYZ;
        if(torques[0] == 0){
        	ForceXYZ = [0, ForceYZ[1], ForceYZ[2]];
        }else {
        	ForceXYZ = Vector$1.project_point_onto_line(F[0], lineYZa, lineYZb);
        }
        
        ForceXYZ[1] *= -1;
        ForceXYZ[2] *= -1;
        return ForceXYZ
    }
    /*
    var J_angles = Convert.degrees_to_arcseconds([0, 0, 0, 0, 0]) 
    var F = 22
    var T = [F*Convert.mms_to_microns(40.7), F*(Dexter.LINK2 + Dexter.LINK3), F*Dexter.LINK3]
    debugger
    out(Kin.three_joints_force(J_angles, T, 'EndAxisHub'))
    
    
    
    var J_angles = Convert.degrees_to_arcseconds([0, 0, 90, 0, 0]) 
    var F = 22
    var F2 = 0
    var T = [F2*Dexter.LINK3, F*Dexter.LINK3, F*Dexter.LINK3]
    //debugger
    out(Kin.three_joints_force(J_angles, T, 'EndAxisHub'))
    
    var J_angles = Convert.degrees_to_arcseconds([45, 0, 45, 0, 0]) 
    var Fz = 13
    var Fx = 0
    var T = [Fx*Dexter.LINK3, Fz*Dexter.LINK3, Fz*Dexter.LINK3]
    //debugger
    out(Kin.three_joints_force(J_angles, T, 'EndAxisHub'))
    
    
    var Fv_mag = Vector.magnitude(Fv[1])
    var angle = Math.atan(Fv[1][1]/Fv[1][2])
    var hyp = Fv_mag/Math.cos(angle)
    var hyp2 = Fv_mag*Math.sqrt(1+Math.pow(Math.hypot(Fv[1][1], Fv[0][1])/Fv[1][2],2))
    var hyp2 = Fv_mag*Math.sqrt(1+Math.pow(Fv[0][1]/Fv[1][2],2))
    Vector.cross(Fv[1], [0,0,1])
    */
    /*
    function dde_warning(message){
        if(!(dde_warning_list.indexOf(message) > -1)){
        	dde_warning_list.push(message)
    		out("dde_warning: " + message, "red")
        }
    }
    */
    
    static make_xyz_dir_config(xyz = [0, 0.5, 0.1], dir = [0, 0, -1], config = [1, 1, 1]){
    	return [xyz, dir, config]
    }

    /*returns time in milliseconds*/
    /* this errors if the 2 args are of different length.
       It also counts joints beyond joint 5, which it shouldn't
	static predict_move_dur(J_angles_original, J_angles_destination, robot){
        
        //let speed = robot.prop("MAX_SPEED")
        let speed = 30
        let delta = Vector.subtract(J_angles_destination, J_angles_original)
        for(let i = 0; i < delta.length; i++){
        	delta[i] = Math.abs(delta[i])
        }
        return Vector.max(delta)/speed
    }*/

    /*returns time in milliseconds*/
    static predict_move_dur_5_joint(J_angles_original, J_angles_destination, robot){
        //let speed = robot.prop("MAX_SPEED")
        let speed = 30; //degrees per second
        let angle_length = Math.min(J_angles_original.length, J_angles_destination.length);
        angle_length = Math.min(angle_length, 5);
        let delta = [];
        for(let i = 0; i < angle_length; i++){
            let delta_val = J_angles_destination[i] - J_angles_original[i];
            delta.push(Math.abs(delta_val));
        }
        return Vector$1.max(delta)/speed
    }

    static predict_move_dur(J_angles_original, J_angles_destination, robot){
        //let speed = robot.prop("MAX_SPEED")
        //let speed = 30 //degrees per second
        let angle_length = Math.min(J_angles_original.length, J_angles_destination.length);
        //angle_length = Math.min(angle_length, 5)
        let result_dur_in_seconds = 0;
        for(let i = 0; i < angle_length; i++){
            let delta_val = J_angles_destination[i] - J_angles_original[i];
            delta_val = Math.abs(delta_val);
            let speed = ((i <= 4) ? Kin$1.j1_thru_j5_motor_degrees_per_second  :
                                    Kin$1.dynamixel_320_degrees_per_second);
            let dur = delta_val / speed;
            result_dur_in_seconds = Math.max(result_dur_in_seconds, dur);
        }
        return result_dur_in_seconds
    }

    static tip_speed_to_angle_speed(J_angles_original, J_angles_destination, tip_speed, dexter_inst_or_workspace_pose){
        let EE_point_1 = Kin$1.J_angles_to_xyz(J_angles_destination, dexter_inst_or_workspace_pose)[0];
        let EE_point_2 = Kin$1.J_angles_to_xyz(J_angles_original, dexter_inst_or_workspace_pose)[0];
        let delta = Vector$1.subtract(J_angles_destination, J_angles_original);
        let dist = Vector$1.distance(EE_point_2, EE_point_1);
        if(dist == 0){return 30}
        let time = dist/tip_speed;
        for(let i = 0; i < delta.length; i++){
        	delta[i] = Math.abs(delta[i]);
        }
        let max_theta = Vector$1.max(delta);
        return max_theta/time
    }
    
    static delta_time_to_angle_speed(J_angles_original, J_angles_destination, delta_time){
		let delta = Vector$1.subtract(J_angles_destination, J_angles_original);
    	for(let i = 0; i < delta.length; i++){
    		delta[i] = Math.abs(delta[i]);
    	}
    	let max_theta = Vector$1.max(delta);
    	return max_theta/delta_time
	}
    
    /*
    Kin.tip_speed_to_angle_speed([0, 90, 0, 0, 0], [1, 90, 0, 0, 0], 5*_mm/_s)
    */
    
    static angles_to_dir_xyz (x_angle = 0, y_angle = 0){
        if(x_angle.length == 2){
        	y_angle = x_angle[1];
            x_angle = x_angle[0];
        }
        let ZX_plane = [0, cosd(y_angle), sind(y_angle)];
        let ZY_plane = [cosd(x_angle), 0, sind(x_angle)];
        if(Vector$1.is_equal(ZX_plane, ZY_plane) || Vector$1.is_equal(Vector$1.multiply(-1, ZX_plane), ZY_plane)){
        	dde_error("Direction (" + x_angle +", " + y_angle + ") causes a singularity");
        }
		return Vector$1.round(Vector$1.normalize(Vector$1.cross(ZX_plane, ZY_plane)), 15)
    }
    
    static dir_xyz_to_angles(dir_xyz = [0, 0, -1]){
    	let x_angle, y_angle;
        if(dir_xyz[2] == 0){
        	dde_error("The direction " + dir_xyz + " cannot be converted to angles");
        }
        if(dir_xyz[2] < 0){
        	x_angle = atan2d(dir_xyz[0], -dir_xyz[2]);
        	y_angle = atan2d(dir_xyz[1], -dir_xyz[2]);
        }else {
        	if(Math.abs(dir_xyz[0]) > Math.abs(dir_xyz[1])){
        		x_angle = atan2d(dir_xyz[0], -dir_xyz[2]);
        		y_angle = -atan2d(dir_xyz[1], dir_xyz[2]);
            }else {
            	x_angle = -atan2d(dir_xyz[0], dir_xyz[2]);
        		y_angle = atan2d(dir_xyz[1], -dir_xyz[2]);
            }
        }
		return [x_angle, y_angle]
    }
    
    /*
    
    Kin.angles_to_dir_xyz(90, 0)
    
    Kin.angles_to_dir_xyz(91, 45) //[0.999695459881888, -0.017449749160683, 0.017449749160683]
    Kin.angles_to_dir_xyz(91, -45) //[0.999695459881888, 0.017449749160683, 0.017449749160683]
    Kin.angles_to_dir_xyz(-91, 45) //[-0.999695459881888, -0.017449749160683, 0.017449749160683]
    Kin.angles_to_dir_xyz(-91, -45) //[-0.999695459881888, 0.017449749160683, 0.017449749160683]
    
    
    Kin.angles_to_dir_xyz(45, 91) //[-0.017449749160683, 0.999695459881888, 0.017449749160683]
    Kin.angles_to_dir_xyz(-45, 91) //[0.017449749160683, 0.999695459881888, 0.017449749160683]
    
    Kin.angles_to_dir_xyz(91, 91) //[-0.707052927141246, -0.707052927141246, -0.012341654750937]
    Kin.angles_to_dir_xyz(-91, 91) //[0.707052927141246, -0.707052927141246, -0.012341654750937]
    Kin.angles_to_dir_xyz(91, -91) //[-0.707052927141246, 0.707052927141246, -0.012341654750937]
    Kin.angles_to_dir_xyz(-95, -95) //[0.707052927141246, 0.707052927141246, -0.012341654750937]
    
    [0.705757556807952, 0.705757556807952, -0.061745785418449]
    [0.705757556807952, 0.705757556807952, -0.061745785418449] 
    
    Kin.angles_to_dir_xyz(85, 85) //[0.707052927141246, 0.707052927141246, -0.012341654750937]
    
    */
    
    static dir_xyz_to_percent(dir_xyz = [0, 0, -1]){
    	let total = Vector$1.sum(Vector$1.abs(dir_xyz));
		return Vector$1.multiply(100, Vector$1.divide(dir_xyz, total))
    }
    
	/*
    debugger
    Kin.interp_movement([0, 0, 0, 0, 0], [44, 45, 0, 0, 0], 30)
    */
    static interp_movement(J_angles_original, J_angles_destination, resolution = 5*_deg){
    	let delta = Vector$1.subtract(J_angles_destination, J_angles_original);
        let abs_delta = [0, 0, 0, 0, 0];
        for(let i = 0; i < delta.length; i++){
        	abs_delta[i] = Math.abs(delta[i]);
        }
        let max_delta = Vector$1.max(abs_delta);
        let div = 1;
    	let step = Infinity;
    	while(resolution < step){
    		div++;
        	step = max_delta / div;
    	}
        let J_angles_array = [];
        let delta_steps = Vector$1.divide(delta, div);
        for(let i = 1; i < div+1; i++){
    		J_angles_array.push(Vector$1.add(Vector$1.multiply(i, delta_steps), J_angles_original));
    	}
        return J_angles_array
    }
    /*
    out(Kin.angles_to_direction(0, 45))
    */
    
    static move_to_straight(xyz_1, xyz_2, J5_direction, config, tool_speed = 5*_mm / _s, resolution = .5*_mm, dexter_inst_or_workspace_pose, no_error = false){
    	let U1 = xyz_1;
    	let U2 = xyz_2;
    	let U21 = Vector$1.subtract(U2, U1);
    	let v21 = Vector$1.normalize(U21);
    	let mag = Vector$1.magnitude(U21);
    	let div = 1;
    	let step = Infinity;
    	while(resolution < step){
    		div++;
        	step = mag / div;
    	}
    	let angular_velocity;
    	let Ui, new_J_angles;
    	let old_J_angles = Kin$1.xyz_to_J_angles(U1, J5_direction, config, dexter_inst_or_workspace_pose);
        let xyzs = [];
        let speeds = [];
    	for(let i = 0; i < div+1; i++){
    		Ui = Vector$1.add(U1, Vector$1.multiply(i*step, v21));
            if(!Kin$1.is_in_reach(Ui, J5_direction, config, dexter_inst_or_workspace_pose) && no_error){
        		return xyzs
            }
            new_J_angles = Kin$1.xyz_to_J_angles(Ui, J5_direction, config, dexter_inst_or_workspace_pose);
        	angular_velocity = Kin$1.tip_speed_to_angle_speed(old_J_angles, new_J_angles, tool_speed, dexter_inst_or_workspace_pose);
        	old_J_angles = new_J_angles;
            
            xyzs.push(Ui);
            speeds.push(angular_velocity);
            /*
        	movCMD.push(make_ins("S", "MaxSpeed", angular_velocity))
    		movCMD.push(make_ins("S", "StartSpeed", angular_velocity))
        	movCMD.push(Dexter.move_to(Ui, J5_direction, config, workspace_pose))
            */
    	}
		return [xyzs, speeds]
	}

    //this will probably be put into Kin at some point
    //will only work with configs of [1, 1, 1] or [1, 0, 1]
    /*static point_down(J_angles){
        //let J = JSON.parse(JSON.stringify(J_angles)) //the new copy function we wrote doesn't exist in LTS
        //J[3] = 90 - J[2] - J[1]
        //J[4] = 0
        //return J
        return [J_angles[0],
                J_angles[1],
                J_angles[2],
                90 - J_angles[2] - J_angles[1],
                0 ]
    }*/

    static point_down(J_angles){
        let result = [];
        for(let i = 0; i < J_angles.length; i++){
            if(i === 3) { result.push(90 - J_angles[2] - J_angles[1]); }
            else if(i === 4) { result.push(0); }
            else { result.push(J_angles[i]); }
        }
        return result
    }

    //if angles(the joint angles of a dexter) are
    //pointing in the direction of "direction" within a
    //tolerance of tolerance_in_deg, then return true.
    static is_direction(angles,
                        direction=[0, 0, -1], //down
                        tolerance_in_deg=0.01){ //always non-negative
        let cur_dir = Kin$1.J_angles_to_xyz(angles)[1];
        let deg = Math.abs(Vector$1.angle(direction, cur_dir)); //angle between the cur dir and the arg direction
        return deg <= tolerance_in_deg
    }

    //Returns an array of an inner radius, an outer radius, and the center point
    //of the outer circle. All xyz locations between the two radii are valid "in-range"
    //locations including locations ON the returned inner and outer radii.
    static xy_donut_slice_approx(Z, dir){
        let inner_r, outer_r;
        let feet_r = 210 * _mm;
        let non_zero_r = 2 * _cm; //5 * _mm
        if(Z < Dexter$1.LINK1){
            inner_r = feet_r;
        }else if(Z < Dexter$1.LINK1 + feet_r){
            inner_r = Math.sqrt(Math.pow(feet_r, 2) - Math.pow(Z - Dexter$1.LINK1, 2));
            if(inner_r < non_zero_r){
                inner_r = non_zero_r;
            }
        }else {
            inner_r = non_zero_r;
        }

        let v54 = Vector$1.multiply(-Dexter$1.LINK5, dir);
        let v54_proj = [v54[0], 0, v54[2]];
        let v43 = Vector$1.multiply(Dexter$1.LINK4, Vector$1.normalize(Vector$1.rotate(v54_proj, [0, 1, 0], 90)));
        let v35 = Vector$1.add(v54, v43);

        outer_r = v35[0] + Math.sqrt(Math.pow(Dexter$1.LINK2 + Dexter$1.LINK3, 2) - Math.pow((Z + v35[2] - Dexter$1.LINK1), 2));

        let outer_xy = [0, 0];
        if(Number.isNaN(outer_r)) {
            inner_r = 0;
            outer_r = 0;
        }
        return [inner_r, outer_r, outer_xy]
    }

    //example of use:
    //var my_angles = Kin.xyz_to_J_angles([0, 0.3, 0.3], [1, 1, -1])
    //out(Kin.J_angles_to_dir(my_angles))
    static J_angles_to_dir(J_angles){
        let U = Kin$1.forward_kinematics(J_angles.slice(0, 5));
        return Vector$1.normalize(Vector$1.subtract(U[0][5], U[0][4]))
    }

    //Returns one positive float in meters of how far Dexter can go from its origin, the table,
    //to straight up. ie is maximun height.
    //When the Kin fns are changed to using the actual link lengths from
    //a particular Dexter, this fn will get passed a dexter instance
    //and get its link lengths from that.
    //ultimately needs to get the link lengths from the dexter instance,
    //bot for now, all kin fns work off just the Dexter.LINK1 to 5 constants
    //return Dexter.LINK1 + Dexter.LINK2 + Dexter.LINK3 - Dexter.LINK5
    //returns the highest z value you can move Dexter to for a given xy position and direction
    //returns NaN if xy is out of range or in singularity
    static max_z( x, y, dir = [0, 0, -1],) {
            let L = [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5];
            if(x == 0 && y == 0){
                return NaN
            }

            let u54 = Vector$1.multiply(-L[4], dir);
            let u54_xy_proj = [u54[0], u54[1], 0];
            let u4 = Vector$1.add([x, y, 0], u54_xy_proj);

            let u0 = [0, 0, 0];
            let u1 = [0, 0, L[0]];

            let p1 = Vector$1.points_to_plane(u1, u0, u4);

            let v54_p1_proj = Vector$1.project_vector_onto_plane(u54, p1);
            let u43_a = Vector$1.multiply(L[3], Vector$1.rotate(Vector$1.normalize(v54_p1_proj), p1, 90));
            let u43_b = Vector$1.multiply(L[3], Vector$1.rotate(Vector$1.normalize(v54_p1_proj), p1, -90));

            let u3_a = [u43_a[0], u43_a[1], 0];
            let u3_b = [u43_b[0], u43_b[1], 0];
            u3_a = Vector$1.add(u3_a, u4);
            u3_b = Vector$1.add(u3_b, u4);

            let dist_a = Vector$1.distance(u3_a, [0, 0, 0]);
            let dist_b = Vector$1.distance(u3_b, [0, 0, 0]);

            let u3, u34;
            if(dist_a < dist_b){
                u3 = u3_a;
                u34 = Vector$1.multiply(-1, u43_a);
            }else {
                u3 = u3_b;
                u34 = Vector$1.multiply(-1, u43_b);
            }
            let xy_mag = Vector$1.magnitude(u3);
            let R = L[1] + L[2];
            u3[2] = Math.sqrt(Math.pow(R, 2) - Math.pow(xy_mag, 2));

            let u45 = Vector$1.multiply(-1, u54);
            let u5 = Vector$1.add(u3, u34, u45, u1);

            return u5[2]
        }
//Examples:
        /*
        reach_extents()
        */

        /*
        var my_x = 0
        var my_y = 0.4
        var my_dir = [0, 0, -1]

        max_z(my_x, my_y, my_dir)
        */

        /*
        //Brute force method of finding max z:
        for(let z = 0; z < 1; z+=1*_mm){
            Kin.xyz_to_J_angles([my_x, my_y, z], my_dir)
            out(z)
        }
        */


    //returns furthest possible reach in each axis
    //format: [[x_min, x_max], [y_min, y_max], [z_min, z_max]]
    //assumes obscure but maximized direction vector
    static reach_extents(){
        let L = [Dexter$1.LINK1, Dexter$1.LINK2, Dexter$1.LINK3, Dexter$1.LINK4, Dexter$1.LINK5];
        let R = L[1] + L[2] + Math.hypot(L[3], L[4]);
        return [[-R, R], [-R, R], [L[0] - R, L[0] + R]]
    }

    static roll_to_J6(xyz, roll = 0){
        return atan2d(xyz[1], xyz[0]) - 90 - roll
    }

    static J6_to_roll(xyz, J6 = 0){
        return atan2d(xyz[1], xyz[0]) - 90 - J6
    }
    
    /*
	Kin.inverse_kinematics([0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4], [0, 1, 0])
	debugger
    Kin.context_inverse_kinematics(
    	[0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4],
        [0, 1, 0],
        [1, 1, 1],
        {similar_J_angles: [30, 1e-10, 0, -1e-10, 0]}
    )
    var my_context = {similar_J_angles: [30, 1e-10, 0, -1e-10, 0]}
    Kin.context_inverse_kinematics(
    	[0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4],
        [0, 1, 0],
        [1, 1, 1],
        my_context
    )
	
    */
    
    /*
    this.context_inverse_kinematics = function (xyz, direction = [0, 0, -1], config = [1, 1, 1], 
    	context = {
        	workspace_pose: Vector.make_pose(),
            similar_J_angles: [30, 0, 0, 0, 0],
            link_lengths: [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]
        }
        
     this.context_inverse_kinematics = function (xyz, direction = [0, 0, -1], config = [1, 1, 1], 
    	context = {
        	workspace_pose: Vector.make_pose(),
            similar_J_angles: [30, 0, 0, 0, 0],
            link_lengths: [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]
        }
        
		
        //Singularity at home position
		var jangles = Kin.context_inverse_kinematics({
     		xyz: [0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4],
            dir: [0, 1, 0],
     		similar_J_angles: [-30, 0, 0, 0, 0],
     	})[0]
        out(jangles, 3)
        
        
        
        
        
        //Singularity when J5 is +/- 90
		var jangles = Kin.context_inverse_kinematics({
     		xyz: [Dexter.LINK5, 0.5, 0.3],
            dir: [1, 0, 0],
     		similar_J_angles: [0, 0, 0, 0, 0],
     	})[0]
        out(jangles, 3)
        
        
        new Job({name: "my_job",
         do_list: [
         	Dexter.set_parameter("MaxSpeed", 20),
         	Dexter.move_all_joints(jangles),
            //Dexter.move_to([0, 0.0001, 0.45])
         ]}).start()
		
        
        function main(){
        	CMD = []
            let jangles
            let start_theta = -90
            let end_theta = 90
            let theta_step = 1
            
            CMD.push(Dexter.set_parameter("MaxSpeed", 3))
            CMD.push(Dexter.set_parameter("StartSpeed", 3))
            
            for(let theta = start_theta; theta < end_theta; theta += theta_step){
            	jangles = Kin.context_inverse_kinematics({
     				xyz: [Dexter.LINK5, 0.5, 0.3],
            		dir: [1, 0, 0],
     				similar_J_angles: [0, 0, 0, theta, 0],
     			})[0]
            	CMD.push(Dexter.move_all_joints(jangles))
            }
            for(let theta = end_theta; theta > start_theta; theta -= theta_step){
            	jangles = Kin.context_inverse_kinematics({
     				xyz: [Dexter.LINK5, 0.5, 0.3],
            		dir: [1, 0, 0],
     				similar_J_angles: [0, 0, 0, theta, 0],
     			})[0]
            	CMD.push(Dexter.move_all_joints(jangles))
            }
            
            return CMD
        }
        
        new Job({name: "J4_90_Singularity",
         do_list: [
         	Dexter.set_parameter("MaxSpeed", 20),
            Dexter.set_parameter("StartSpeed", 0.1),
         	main
         ]}).start()
         
        
        
        Kin.inverse_kinematics([0, 0.0001, 0.45])[0]
        
        //Singularity at [0, 0, z]
		var jangles = Kin.context_inverse_kinematics({
     		xyz: [0, 0, 0.45],
            dir: [0, 0, -1],
            config: [1, 1, 1],
     		similar_J_angles: [0, 0, 0, 0, 0],
     	})[0]
        out(jangles, 3)
        
        
        
        
        
        Kin.context_inverse_kinematics({
     		xyz: [0, 0.5, 0.1],
            dir: [0, 1, 0],
     		similar_J_angles: [0, 0, 0, 0, 0],
     	})
        
      	Kin.context_inverse_kinematics()
     */

     /*not called may 30, 2019 and James W said ok to comment out. --fry
     static signed_angle_test(vector_A, vector_B, plane){
    	let epsilon = 1e-14
    	//checks if vectors lie in plane
        let cross_product = Vector.normalize(Vector.cross(Vector.shorten(vector_A), Vector.shorten(vector_B)))
        let short_plane = Vector.shorten(plane)
        
        let guess_angle = Vector.angle(vector_A, vector_B)
        if(Vector.is_equal(cross_product, short_plane)){
        	return guess_angle
        }else if(Vector.is_equal(Vector.multiply(-1, cross_product), short_plane)){
        	return -guess_angle
        }else{
        	dde_error("Error: input vectors do not lie in plane")
        }
    }*/
    
     
     /* not called. May be used some day. Has the pre-may 2019 use of global vars for Dexter.LINK1 nd firends.
     this.context_inverse_kinematics = function(args){
	
		//Input arg management:
        
        if(args.xyz_dir_config && (args.xyz || args.dir || args.config)){
        	let error_string
            if(args.config){error_string = "config"}
            if(args.dir){error_string = "dir"}
            if(args.xyz){error_string = "xyz"}
            
            dde_error("Both " + error_string + " and xyz_dir_config cannot be passed into Kin.context_inverse_kinematics")
        }
        
        //Defaults:
        if(args.xyz === undefined){				args.xyz = [0, 0.5, 0.1]}
        if(args.dir === undefined){				args.dir = [0, 0, -1]}
        if(args.config === undefined){			args.config = [1, 1, 1]}
        if(args.workspace_pose === undefined){	args.workspace_pose = Vector.make_pose()}
        if(args.similar_J_angles === undefined){args.similar_J_angles = [0, 0, 0, 0, 0]}
        if(args.link_lengths === undefined){	args.link_lengths = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]}

		let xyz, direction, config
		if(args.xyz_dir_config){
			xyz = args.xyz_dir_config[0]
            direction = args.xyz_dir_config[1]
            config = args.xyz_dir_config[2]
        }else{
        	xyz = args.xyz
            direction = args.dir
            config = args.config
        }


		//Kinematics Start
        let J = Vector.make_matrix(1, 5)[0] // Joint Angles
        let U = Vector.make_matrix(5, 3)
        let P = [0, 0, 0, 0]
        let L = args.link_lengths 
		let normal = direction
    	let right_arm = config[0]
    	let elbow_up = config[1]
    	let wrist_out = config[2]
        
        if(direction.length == 2){
        	normal = Kin.angles_to_dir_xyz(direction[0], direction[1])
        }else if(direction.length == 3){
        	if(Vector.magnitude(direction) == 0){
            	dde_error("Direction must have a magnitude. Try [0, 0, -1] or [0, 0] for the [x_angle, y_angle] form")
            }
        }else{
        	dde_error("Direction must be in the form [x, y, z] or [x_angle, y_angle]")
        }
        
  		let xyz_trans = Vector.transpose(Vector.matrix_multiply(args.workspace_pose, Vector.properly_define_point(xyz))).slice(0,3)
		let normal_trans = Vector.transpose(Vector.matrix_multiply(args.workspace_pose, Vector.properly_define_vector(normal))).slice(0,3)

        
        
    	//Knowns:
        P[0] = [1, 0, 0, 0]
    	let V54 = Vector.multiply(-1, Vector.normalize(normal_trans)) //Direction of EE
        U[0] = [0, 0, 0]
        let V10 = [0, 0, 1]
    	U[1] = Vector.multiply(L[0], V10)
        U[4] = Vector.add(xyz_trans, Vector.multiply(Dexter.LINK5, V54))
        U[5] = xyz_trans
        
    	
    	//Solving for P1
    	P[1] = Vector.points_to_plane(U[1], U[0], U[4])
        if(Vector.is_NaN(P[1])){
        	P[1] = Vector.points_to_plane(U[1], U[0], U[3])
            if(Vector.is_NaN(P[1])){

        		//dde_error(`Singularity: Toolpoint xyz is on Base axis. [0, 0, z] divides by 0.
            	//Try [0, 1e-10, z] if it works use the ouputted joint angles for a move_all_joints() instead.
            	//The first joint angle can be changed to any value without affecting the tool point`)

                
                P[1] = Vector.rotate([1, 0, 0], [0, 0, -1], args.similar_J_angles[0])
                
            }
        }
		
    
		//Solving for U3
    	let U54_Proj = Vector.project_vector_onto_plane(V54, P[1])
        
        let U3_a, U3_b, dist_a, dist_b
        if(Vector.magnitude(U54_Proj) > 1e-10){
        
    		U3_a = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], 90)))
        	U3_b = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], -90)))
        	
        
        	//This is proven to work for directions of approx. [0, 1, 0] but has potentially not been tested enough
        	dist_a = Vector.distance(U3_a, [0, 0, 0])
    		dist_b = Vector.distance(U3_b, [0, 0, 0])

        	//if (wrist_out){
    		//	if (dist_a < dist_b){
        	//		U[3] = U3_a
        	//	}else{
        	//		U[3] = U3_b
        	//	}
    		//}else{
    		//	if (dist_a > dist_b){
        	//		U[3] = U3_a
        	//	}else{
        	//		U[3] = U3_b
        	//	}
    		//}

            
            //Solving for P2
    		//P[2] = Vector.points_to_plane(U[5], U[4], U[3])
        	let P2_a = Vector.points_to_plane(U[5], U[4], U3_a)
            if(Vector.is_NaN(P2_a)){
        		dde_error("Unknown plane_a singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.")
        	}
            let P2_b = Vector.points_to_plane(U[5], U[4], U3_b)
            if(Vector.is_NaN(P2_b)){
        		dde_error("Unknown plane_b singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.")
        	}
		
    		//Solving for U2
    		let D3_a = Vector.distance(U3_a, U[1])
        	if(Vector.is_equal(D3_a, Dexter.LINK2 + Dexter.LINK3, 9)){
        		D3_a = Dexter.LINK2 + Dexter.LINK3
        	}
            let D3_b = Vector.distance(U3_b, U[1])
        	if(Vector.is_equal(D3_b, Dexter.LINK2 + Dexter.LINK3, 9)){
        		D3_b = Dexter.LINK2 + Dexter.LINK3
        	}
        	
        	let wrist_a_in_reach = true
            let wrist_b_in_reach = true
        	
        	//Checking if in reach
        	if (D3_a > Dexter.LINK2 + Dexter.LINK3){
        		let out_of_reach_dist_a = Vector.round(D3_a - (Dexter.LINK2 + Dexter.LINK3), 4)
        		wrist_a_in_reach = false
                //dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
        	}
            if (D3_b > Dexter.LINK2 + Dexter.LINK3){
        		let out_of_reach_dist_b = Vector.round(D3_b - (Dexter.LINK2 + Dexter.LINK3), 4)
        		//dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
        		wrist_b_in_reach = false
            }
        
        
    		//let Beta = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3, 2)) / (2 * D3 * L[1])) // Law of Cosines
        	let Beta_a = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3_a, 2)) / (2 * D3_a * L[1])) // Law of Cosines
        	let V31_a = Vector.normalize(Vector.subtract(U3_a, U[1]))
            
            let Beta_b = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3_b, 2)) / (2 * D3_b * L[1])) // Law of Cosines
        	let V31_b = Vector.normalize(Vector.subtract(U3_b, U[1]))
            
            
    		let V23_a, V23_b
        	//For wrist a
    		let U2_aA = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_a, P[1], Beta_a)))
    		let U2_aB = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_a, P[1], -Beta_a)))
        	let V2A1_a = Vector.subtract(U2_aA, U[1])
        	let V32A_a = Vector.subtract(U[3], U2_aA)
        	
        	let U2_a
    		if (elbow_up){
    			if(Vector.dot(Vector.cross(V2A1_a, V32A_a), P[1]) < 0){
        			U2_a = U2_aA
        		}else{
        			U2_a = U2_aB
        		}
    		}else{
      			if(Vector.dot(Vector.cross(V2A1_a, V32A_a), P[1]) > 0){
        			U2_a = U2_aA
        		}else{
        			U2_a = U2_aB
        		}
    		}
            
            
            
            //For wrist b
    		let U2_bA = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_b, P[1], Beta_b)))
    		let U2_bB = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_b, P[1], -Beta_b)))
        	let V2A1_b = Vector.subtract(U2_bA, U[1])
        	let V32A_b = Vector.subtract(U[3], U2_bA)
        
        	let U2_b
    		if (elbow_up){
    			if(Vector.dot(Vector.cross(V2A1_b, V32A_b), P[1]) < 0){
        			U2_b = U2_bA
        		}else{
        			U2_b = U2_bB
        		}
    		}else{
      			if(Vector.dot(Vector.cross(V2A1_b, V32A_b), P[1]) > 0){
        			U2_b = U2_bA
        		}else{
        			U2_b = U2_bB
        		}
    		}
            
            
            //Solving for joint angles
            
            //wrist a
    		let V21_a = Vector.normalize(Vector.subtract(U2_a, U[1]))
    		let V32_a = Vector.normalize(Vector.subtract(U3_a, U2_a))
    		let V43_a = Vector.normalize(Vector.subtract(U[4], U3_a))
            let J0_a = Vector.signed_angle(P[1], P[0], V10) 
    		let J1_a = Vector.signed_angle(V21_a, V10, P[1])
    		let J2_a = Vector.signed_angle(V32_a, V21_a, P[1])
    		let J3_a = Vector.signed_angle(V43_a, V32_a, P[1])
    		let J4_a = Vector.signed_angle(P2_a, P[1], V43_a)
            
            //wrist b
            let V21_b = Vector.normalize(Vector.subtract(U2_b, U[1]))
    		let V32_b = Vector.normalize(Vector.subtract(U3_b, U2_b))
    		let V43_b = Vector.normalize(Vector.subtract(U[4], U3_b))
            let J0_b = Vector.signed_angle(P[1], P[0], V10) 
    		let J1_b = Vector.signed_angle(V21_b, V10, P[1])
    		let J2_b = Vector.signed_angle(V32_b, V21_b, P[1])
    		let J3_b = Vector.signed_angle(V43_b, V32_b, P[1])
    		let J4_b = Vector.signed_angle(P2_b, P[1], V43_b)
            
            let J0, J1, J2, J3, J4
            let wrist_score_a = Math.abs(J3_a) + Math.abs(J4_a)
            let wrist_score_b = Math.abs(J3_b) + Math.abs(J4_b)
            if(!wrist_a_in_reach){
            	wrist_score_a = Infinity 
            }
            if(!wrist_b_in_reach){
            	wrist_score_b = Infinity 
            }
            
            if(wrist_score_a < wrist_score_b){
            	if(!wrist_a_in_reach){
            		dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
            	}
            	J0 = J0_a
                J1 = J1_a
                J2 = J2_a
                J3 = J3_a
                J4 = J4_a
            }else{
            	if(!wrist_b_in_reach){
            		dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
            	}
            	J0 = J0_b
                J1 = J1_b
                J2 = J2_b
                J3 = J3_b
                J4 = J4_b
            }
            
			if(right_arm == 1){
    			J[0] = J0
    			J[1] = J1
    			J[2] = J2
    			J[3] = J3
    			J[4] = J4
    		}else{
    			J[0] = J0
    			J[1] = -J1
    			J[2] = -J2
    			J[3] = -J3
    			J[4] = -J4
    		}
            
            
    	}else{
        	let a = L[3]
            let b = L[2]
            let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) -2*a*b*cosd(180-args.similar_J_angles[3])) //Law of Cosines
            
            let Gamma = acosd((-Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2)) / (2 * c * b)) // Law of Cosines
            
            
            a = L[1]
            b = Vector.distance(U[4], U[1])
            
            let L41_max = L[1] + L[2] + L[3]
        	if(Vector.is_equal(b, L41_max, 9)){
        		b = L41_max
        	}
        
        	//Checking if in reach
        	if (b > L41_max){
        		let out_of_reach_dist = Vector.round(b - (L41_max), 4)
        		dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
        	}
            
        	let Beta = acosd((-Math.pow(c, 2) + Math.pow(a, 2) + Math.pow(b, 2)) / (2 * a * b)) // Law of Cosines
        	let V41 = Vector.normalize(Vector.subtract(U[4], U[1]))
    		let V23
            
            let U2_a = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V41, P[1], Beta)))
    		let U2_b = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V41, P[1], -Beta)))
        	
            let V2a1 = Vector.subtract(U2_a, U[1])
            let V2b1 = Vector.subtract(U2_b, U[1])
        	//let V32a = Vector.subtract(U[3], U2_a)
            
            let V42a = Vector.subtract(U[4], U2_a)
            let V42b = Vector.subtract(U[4], U2_b)
            
			
            
            let rot_sign = -1
            
            let theta_a = signed_angle_test(V2a1, V41, P[1])
            let theta_b = signed_angle_test(V2b1, V41, P[1])
            
            if (elbow_up){
    			if(theta_a < theta_b){
        			U[2] = U2_a
                    
        		}else{
        			U[2] = U2_b
                    rot_sign = 1
        		}
    		}else{
      			if(theta_a < theta_b){
        			U[2] = U2_a
                    rot_sign = 1
        		}else{
        			U[2] = U2_b
        		}
    		}
            

    		//if (elbow_up){
    		//	if(Vector.dot(Vector.cross(V2a1, V32a), P[1]) < 0){
        	//		U[2] = U2_a
            //        rot_sign = 1
        	//	}else{
        	//		U[2] = U2_b
        	//	}
    		//}else{
      		//	if(Vector.dot(Vector.cross(V2a1, V32a), P[1]) > 0){
        	//		U[2] = U2_a
        	//	}else{
        	//		U[2] = U2_b
            //        rot_sign = 1
        	//	}
    		//}

            

           // V21 = Vector.normalize(Vector.subtract(U[2], U[1]))
           // V31 = Vector.rotate(V21, P[1], rot_sign*Gamma)
           // U[3] = Vector.add(U[2], Vector.multiply(L[2], V31))

            
            let V42 = Vector.normalize(Vector.subtract(U[4], U[2]))
            let V32 = Vector.rotate(V42, P[1], Math.sign(args.similar_J_angles[3])*Gamma)
            U[3] = Vector.add(U[2], Vector.multiply(L[2], V32))
            
            //Solving for P2
    		P[2] = Vector.points_to_plane(U[5], U[4], U[3])
        	if(Vector.is_NaN(P[2])){
        		dde_error("Unknown plane singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.")
        	}
            
            
            //Solving for joint angles
    		let V21 = Vector.normalize(Vector.subtract(U[2], U[1]))
    		V32 = Vector.normalize(Vector.subtract(U[3], U[2]))
    		let V43 = Vector.normalize(Vector.subtract(U[4], U[3]))
			if(right_arm == 1){
    			J[0] = Vector.signed_angle(P[1], P[0], V10) 
    			J[1] = Vector.signed_angle(V21, V10, P[1])
    			J[2] = Vector.signed_angle(V32, V21, P[1])
    			J[3] = Vector.signed_angle(V43, V32, P[1])
    			J[4] = Vector.signed_angle(P[2], P[1], V43)
    		}else{
    			J[0] = Vector.signed_angle(P[1], P[0], V10) + 180
    			J[1] = -Vector.signed_angle(V21, V10, P[1])
    			J[2] = -Vector.signed_angle(V32, V21, P[1])
    			J[3] = -Vector.signed_angle(V43, V32, P[1])
    			J[4] = -Vector.signed_angle(P[2], P[1], V43)
    		}
            
            
        }
        
        
       
    	


    	
    	
    	if(Vector.is_NaN(J[2])){
        	let thres = 100
        	if(Dexter.LINK1 > thres || Dexter.LINK2 > thres || Dexter.LINK3 > thres || Dexter.LINK4 > thres || Dexter.LINK5 > thres){
            	dde_error("Link lengths are non properly defined: "  
                + "</br>Dexter.LINK1: " + Dexter.LINK1 + " (meters)"
                + "</br>Dexter.LINK2: " + Dexter.LINK2 + " (meters)"
                + "</br>Dexter.LINK3: " + Dexter.LINK3 + " (meters)"
                + "</br>Dexter.LINK4: " + Dexter.LINK4 + " (meters)"
                + "</br>Dexter.LINK5: " + Dexter.LINK5 + " (meters)")
            }
        	dde_error("Singularity at: " + xyz + ", " + direction + ", " + config + ".</br>Please copy this message and report it as a bug.")
    	}
    
    	return [J, U, P]
    } end of context_inverse_kinematics */
}

module.exports = Kin$1;


//Used in predict_move_dur
//Computation based on James N reading of Dynamixel XL 320, 114RPM at 7.4 volts.
//but we're running it at 5 volts so down to 77RPM, which is 1.28rps
//which is 461 deg per sec.
//the dynamixel 430 has a slower RPM, but the 320 is our default.
//used in
Kin$1.dynamixel_320_degrees_per_second = 461;
Kin$1.j1_thru_j5_motor_degrees_per_second = 30;
    /*
    
    Kin.move_to_straight([0, .5, .075], [0, .6, .075])
    */
    /*
    this.make_ins_move_straight(xyz_1, xyz_2, J5_direction, config, tool_speed = 5*_mm / _s, resolution = .5*_mm, robot_pose){
    	let CMD = []
        
        
        for(let i = 0; i < .length; i++){
    		CMD.push(make_ins("S", "MaxSpeed", angular_velocity))
    		CMD.push(make_ins("S", "StartSpeed", angular_velocity))
        	CMD.push(Dexter.move_to(Ui, J5_direction, config, robot_pose))
        }
        return CMD
    }*/

/*
var point_1 = [0, .3, .4]
//debugger
//var myJangles = Kin.xyz_to_J_angles([-0.4961591506890708, 0.4961591506890706, 0.08255000000000005], [0, 0, -1], Dexter.RIGHT_UP_OUT)
myJangles = [0,-45, -45, 0, 0]
var myPoints = Kin.forward_kinematics(myJangles)[0]
var myPosition = Kin.J_angles_to_xyz(myJangles)
debugger
Kin.xyz_to_J_angles(myPosition[0], myPosition[1], myPosition[2])


var point_1 = [.1, .2, .3]
//debugger
var myJangles = Kin.xyz_to_J_angles(point_1, [0, 1, -1], Dexter.RIGHT_DOWN_OUT)
var new_point = Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, 1, -1], Dexter.RIGHT_DOWN_OUT))
*/

/*
new TestSuite("Inverse to Forward Kinematics and Back",
	["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3]))", "[[0.09999999999999996, 0.20000000000000004, 0.30000000000000004],[0, 0, -1],[1, 1, 1]]"],
	["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, .1, -1]))", "[ [0.10000000000000012, 0.19999999999999998, 0.30000000000000004], [3.362274453740632e-16, 0.09950371902099878, -0.995037190209989], [1, 1, 1]]"],
	["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, 0, -1], [1, 0, 1]))", "[ [0.09999999999999994, 0.20000000000000004, 0.3], [-3.362274453740631e-16, -6.724548907481262e-16, -1], [1, 0, 1]]", "known, wrist_out vs wrist_in issue"],
    ["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, 0, -1], [1, 0, 0]))", "[[0.1, 0.20000000000000012, 0.29999999999999993], [0, 0, -1], [1, 0, 0]]"],
    ["Kin.xyz_to_J_angles(Kin.J_angles_to_xyz([0, 45, 45, 30, 0]))", "[0, 45, 44.999999999999986, 30.000000000000014, 0]"]
)

debugger
Kin.xyz_to_J_angles([.1, .2, .3])
Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3]))

Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([0.1, .5, .3]))



*/

/* the queue is an array of 16 "a" instruction arrays.
   pos 0 is the "front" of the queue, the currently being executed instruction
   by the FPGA. instructions are removed at the end of the queue.
   The last elt in the queue is the latests "sent" instruction.
   It is pushed onto the end of the queue when the Job "executes" the instruction.

   J6 and J7: although its good for "whole instruction display purposes" to have
   J6 and j7 in an instruction, they aren't put in the queue.
   As soon as Dextrun gets an "a" instruction with a J6 and/or J7,
   or a set_parameter("EERoll") (J6) or "EESpan" (J7) it starts
   executing it, bypassing the queue. thus they are out of sequence
   with the movement of J1 thru 5, unless the queue is empty.
   They have their own "speed" (not variable) and generally take much shorter time
   to execute than a j1 thru 5 long move. ie j 6 or 7 long move
   might take 0.5 sec or less.
   Also, J6 and J7 aren't coordinated with each other like the
   j1 thru 5 are in an "a" cmd.
   Also, if a move for j7 comes in WHILE another move
   for J7 is going on, that ongoing move is aborted, and
   the new commanded angle takes over before finishing the old move.
   (same for J6). So there's no special "queue" for J6/J7.

   Sleep (z oplet) have times in microseconds (as their dexter units).
   When one comes in to dexrun, ack_reply is not sent,
   but a countdown for the dur starts as soon as it get to dexrun,
   and when the dur is up, the ack_reply is sent.
   A sleep instruction does not affect exiting items in queue,
   but does prevent DDE from sending more instructions until
   the sleep dur is up.

   So we really have up to 4 different independent "processes" going on.
   1. Moving j1 thru j5, all the joints can move simulaneously.
          // the fastest joint takes the top speed, and the others
          //all move slower such that all 5 joints start and end together.
   2. Moving j6
   3. Moving j7
   4. Sleep
   j1 thru 5 are similar to each other.
   J6 & J7 are similar to each other.

   Despite the fact that j6 & j7 and sleep aren't in the queue, this
   file processes them anyway for modularity and
   because a move_all_joints has its first 5 joints processes
   here, so this code strips off the j6 and 7 and handles them
   separately.
*/

var Simqueue$1 = class Simqueue{
    static queue_max_length = 16
    constructor(sim_instance){
        this.sim_instance = sim_instance;
        this.queue = []; //new Array of 16 fails because length will == 16, and first push pushes to index 16  new Array(Simqueue.queue_max_length)
        this.queue_blocking_instruction = null; //set when F cmd comes in, to that F instruction_array
        this.sleep_dur_us = 0;   //microseconds
        this.queue_dom_elt_id_string_prefix         = this.sim_instance.robot_name + "_queue_";
        this.queue_dom_elt_status_string            = this.queue_dom_elt_id_string_prefix + "status_id";
        this.queue_dom_elt_instruction_table_string = this.queue_dom_elt_id_string_prefix + "instruction_table_id";
        this.latest_sent_queued_instruction = null; //every time a cmd is added to the queue, this var is set to it.
         //we can't just pull the last item off the queue because,
         //at the beginning. this is null, and if the queue is emptied, the lasteset wouldn't be on the queue.
         //so we need this state var. J1 thru 5 make up the "SENT" robot_status row.
        this.instr_to_param_map = {}; //keys are an instruction array. Values are an array of a set param name (string) and its new value
                                     //to be set in sim_inst.parameters whenever the instr is done executing (ie when removed from queue
        this.joint_number_to_j6_plus_status_map = {6: "stopped at " + sim_instance.angles_dexter_units[5],
                                                   7: "stopped at " + sim_instance.angles_dexter_units[6]
                                                  };
        this.joint_number_to_render_j6_plus_frame_call_map = {};
        this.show_degrees = false;
    }

    //called by test suite
    is_simulator_running(){
        return (!this.is_queue_empty() || (this.sleep_dur_us > 0))
    }
    
    is_queue_full(){
      return (this.queue.length === Simqueue.queue_max_length)
    }
    
    is_queue_empty(){ 
    	return (this.queue.length === 0)
    }
    
    //returns an instruction_array or null if the queue is empty
    newest_instruction_in_queue() {
       if(this.is_queue_empty()) { return null }
       else return this.queue[this.queue.length - 1]
    }

    current_instruction_in_queue(){
        if(this.is_queue_empty()) { return null }
        else return this.queue[0]
    }

    
    ok_to_add_to_queue(){
        if(this.is_queue_full()) { return false }
        else if(this.queue_blocking_instruction) { return false }
        else { return true }
    }
    
    is_valid_instruction_for_queue(instruction_array){
        let oplet = instruction_array[Dexter.INSTRUCTION_TYPE];
        return  ["a", "P"].includes(oplet)
    }

    simple_instruction_array_test(instruction_array){
        for(let i = 0; i < instruction_array.length; i++){
            let val = instruction_array[i];
            let type = typeof(val);
            if(!["number", "string", "undefined"].includes(type)) {
                dde_error("Simulator passed invalid instruction arg at index " + i +
                    " of : " + val +
                    " in instruction array: " + instruction_array);
            }
        }
    }

    add_to_queue(instruction_array){
        this.simple_instruction_array_test(instruction_array);
        if(this.is_queue_full()){
            shouldnt("Simqueue is full so can't be added to.");
        }
        else {
            let queue_was_empty = this.is_queue_empty();
            this.queue.push(instruction_array);
            this.latest_sent_queued_instruction = instruction_array;
            this.update_show_queue_if_shown();
            if(queue_was_empty) {
                this.start_running_instruction_if_any();
            }
            let j6_du = instruction_array[Instruction.INSTRUCTION_ARG5];
            if(j6_du !== undefined) { //if it is undefined, no change so do nothing
                this.start_running_j6_plus_instruction(6, j6_du);
            }
            let j7_du = instruction_array[Instruction.INSTRUCTION_ARG6];
            if(j7_du !== undefined) {
                this.start_running_j6_plus_instruction(7, j7_du);
            }
        }
    }

    //called when graphics simulator is done executing the now-running instruction.
    //dont set params in here because remove_from_queue is called by
    //empty_instruction_queue which we DON'T want to set_params.
    remove_from_queue(){ //takes off of front of queue, returns the removed instruction
        this.queue.shift();
        if(this.is_queue_empty()) {
            this.unset_queue_blocking_instruction_maybe();
        }
    }

    done_with_instruction(){
        let cur_inst = this.current_instruction_in_queue();
        this.remove_from_queue();
        let param_names_and_values = this.instr_to_param_map[cur_inst];
        if(param_names_and_values){
            for(let param_name in param_names_and_values){
                let param_value = param_names_and_values[param_name];
                this.sim_instance.parameters[param_name] = param_value;
                this.sim_instance.simout("set_parameter: " + param_name + " to " + param_value);
            }
        }
        delete this.instr_to_param_map[cur_inst]; //not needed anymore
        this.unblock_from_unfull_maybe();
        this.update_show_queue_if_shown();
        let queue_instance = this;
        setTimeout(function(){
                    queue_instance.start_running_instruction_if_any();
                   }, 1); //even if 0, its probably a good idea to give JS chance to run other stuff between instructions.
    }

    //do not remove the front instruction from the queue until AFTER its done running
    start_running_instruction_if_any(){
        if(this.is_queue_empty()) {
            this.sim_instance.simout("queue is empty.");
        }
        else {
            let instruction_array = this.current_instruction_in_queue();
            this.render_instruction(instruction_array);
        }
    }

    //implements  the "E" oplet
    empty_instruction_queue(){
        while (this.queue.length) { this.remove_from_queue();  }
        this.update_show_queue_if_shown();
    }

    //implements the "F" oplet. called from DexterSim
    set_queue_blocking_instruction(f_instruction_array) {
        if(this.queue_blocking_instruction) { //yikes we got an F cmd before the prev F cmd was finished.
          //we need to ack_reply to the first one so DDE will know that one was handled.
          //but that doesn't mean DDE can expect its other instructions from
          //getting handled because this call returns on blocking.
          //But maybe this never happens because if DDE can't send ANY instructions
          //to Dexter after an "F" until the block is cleared, then maybe this clause
          //never happens.
           let instr = this.queue_blocking_instruction;
           this.queue_blocking_instruction = f_instruction_array;
           this.update_show_queue_if_shown(); //probably not necessary because queue is already blocked
           this.sim_instance.ack_reply(instr);
        }
        else if(this.is_queue_empty()){ //since the queue is already empty,
        //this instruction is basically a no-op. Don't set this.queue_blocking_instruction
        //just ack_reply
            this.sim_instance.ack_reply(f_instruction_array);
        }
        else { //normal case
            this.queue_blocking_instruction = f_instruction_array;
            this.update_show_queue_if_shown();
        }
    }

    unset_queue_blocking_instruction_maybe(){
        if(this.queue_blocking_instruction){
            let instr = this.queue_blocking_instruction;
            this.queue_blocking_instruction = null;
            this.sim_instance.ack_reply(instr);
        }
    }

    //called by done_with_instruction just after the cur instruction is removed from the queue.
    unblock_from_unfull_maybe(){
        if(this.queue.length === (Simqueue.queue_max_length - 1)){
          let newest_instr = this.newest_instruction_in_queue();
          this.sim_instance.ack_reply(newest_instr); //because its ack_reply wasn't called when it first came in and filled the queue
        }
    }

    actions_for_instruction(instruction_array){
        return this.instr_to_param_map[instruction_array]
    }

    //called from DexSim.send, "P" clause for MaxSpeed, & friends and from the  "z" clause
    set_instruction_done_action(param_name, param_value){
        let newest = this.newest_instruction_in_queue();
        if(newest){
           let actions = this.actions_for_instruction(newest);
           if(!actions) {  //might not be any action yet.
              actions = {};
              this.instr_to_param_map[newest] = actions;    
           }
           //beware, there can be more than one action, and
           //we might even have a do_list that attempts to set
           //the same param more than once. We want to keep the LATEST of them,
           //an this data structure will do that by overwriting previous same param_name values.
           actions[param_name] = param_value;
        }
        else { //queue is empty so just set params immediately and don't put them in instr_to_param_map
               this.sim_instance.parameters[param_name] = param_value;
               this.sim_instance.simout("set_parameter: " + param_name + " to " + param_value);
        }
    }

    //J6_plus
    start_running_j6_plus_instruction(joint_number, new_angle_in_dexter_units){
        let ds_instance = this.sim_instance;
        let dur_in_ms = ds_instance.predict_j6_plus_instruction_dur_in_ms(new_angle_in_dexter_units, joint_number);
        if(dur_in_ms === 0) ; //the joint is already at the commanded angle so nothing to do. This is a big optimization for a common case.
        else if (SimUtils.is_simulator_showing()){
            let val_for_show = (this.show_degrees ? Socket.dexter_units_to_degrees(new_angle_in_dexter_units, joint_number) : new_angle_in_dexter_units);
            val_for_show = (Number.isInteger(val_for_show) ? val_for_show : val_for_show.toFixed(3));
            this.joint_number_to_j6_plus_status_map[joint_number] = "moving to " + val_for_show;
            this.update_j6_plus_status_if_shown(joint_number);
            let robot_name = ds_instance.robot_name;
            SimUtils.render_j6_plus(ds_instance, new_angle_in_dexter_units, robot_name, dur_in_ms, joint_number);
        }
    }

    //just sets j6_plus status and updates
    done_with_j6_plus_instruction(joint_number){
        let du = this.sim_instance.angles_dexter_units[joint_number - 1];
        let val_for_show = (this.show_degrees ? Socket.dexter_units_to_degrees(du, joint_number) : du);
        val_for_show = (Number.isInteger(val_for_show) ? val_for_show : val_for_show.toFixed(3));
        this.joint_number_to_j6_plus_status_map[joint_number] = "stopped at " + val_for_show;
        this.update_j6_plus_status_if_shown(joint_number);
    }

    start_sleep(instruction_array_in_us) {
        this.sleep_dur_us = instruction_array_in_us[Instruction.INSTRUCTION_ARG0];
        let sleep_instruction = instruction_array_in_us; //for closure
        this.update_show_queue_status_if_shown();
        let sleep_dur_ms = this.sleep_dur_us / 1000;
        let queue_instance = this;
        setTimeout(function(){ //end sleep
                     queue_instance.sleep_dur_us = 0; //must do before update_show_queue_status
                     queue_instance.update_show_queue_status_if_shown();
                     queue_instance.sim_instance.ack_reply(sleep_instruction);
                    }, sleep_dur_ms);
    }


    //______Render instruction ________
    //called at the start of rendering an instruction
    render_instruction(instruction_array){
        let ins_args  = instruction_array.slice(Instruction.INSTRUCTION_ARG0, Instruction.INSTRUCTION_ARG7);
        let dur_in_ms = this.sim_instance.predict_a_instruction_dur_in_ms(ins_args);
        //out("render_instruction passed instruction_array: " + instruction_array)
        //let job_id    = instruction_array[Instruction.JOB_ID]
        //let job_instance = Job.job_id_to_job_instance(job_id)
        //I use to pass job name to render_multi, but it doesn't really need it.
        //I took it out because in the testsuite or ref man, if you have 2 job defs of the same
        //name next to each other, then the 2nd one removes the first one.
        //but if the first one has instructions in the queue, they belong to a
        //non_exisitant job so getting the job_id out of the instruction array and
        //looking it up to find the job def will fail, causing an error.
        //so just avoid that. Dexter (and by extension the simulator) don't
        //know about Jobs and don't care. Useful for debugging perhaps, but
        //causes problems as in above.
        let rob_name  = this.sim_instance.robot_name;
        if(SimUtils.is_simulator_showing()) { //window.platform == "dde") //even if we're in dde, unless the sim pane is up, don't attempt to render
            SimUtils.render_multi(this.sim_instance, ins_args, rob_name, dur_in_ms);
        }
        else {
            warning('To see a graphical simulation,<br/>choose from the Misc pane menu: "Simulate" then select: "Simulate."');
            let the_job = this.sim_instance.job_of_last_instruction_sent();

            this.render_once_node(instruction_array, the_job.name, rob_name); //renders after dur, ie when the dexter move is completed.
        }
    }
    render_once_node(instruction_array, job_name, rob_name, dur_in_ms){
        this.sim_instance.simout("For Job." + job_name +
               "<br/>Starting to similate instruction: " + instruction_array, "green");
          let queue_instance = this;
          setTimeout(function(){
              queue_instance.sim_instance.simout("Done simulating instruction: <span style='margin-right;40px;'/>" + instruction_array, "green");
              queue_instance.done_with_instruction();
          }, dur_in_ms);
    }


    //________show_queue_______
    queue_status(){
        if(this.is_queue_full())                  { return "full" }
        else if (this.sleep_dur_us > 0)           { return "sleep" } //put before blocked as robot can sleep even when blocked
        else if (this.queue_blocking_instruction) { return "blocked" }
        else if (this.is_queue_empty())           { return "empty" }
        else                                      { return "accepting" }
    }

    queue_status_color(){
        let q_status = this.queue_status();
        if      (q_status === "accepting") { return "#aaf1aa" } //green
        else if (q_status === "blocked")   { return "#ff7e79" } //pale red/orange
        else if (q_status === "empty")     { return "#76cdf1" } //blue
        else if (q_status === "full")      { return "#da7900" } //brown
        else if (q_status === "sleep")     { return "#ffff00" } //yellow
        else { shouldnt("In Simqueue.queue_status_color got invalid status: " + status);}
    }
    queue_is_shown(){
        if(window[this.queue_dom_elt_status_string]){
            return true
        }
        else { return false }
    }

    //top level show called from clicking the "Show Queue" button in Sim header.
    // Simqueue.show_queue_for_default_dexter()
    static show_queue_for_default_dexter(){
        if(misc_pane_menu_selection !== "Simulate Dexter"){
            show_in_misc_pane("Simulate Dexter"); //if Simulate Dexter is not shown when queue is shown, we'll get an error
        }
        let rob_name = Dexter.default.name;
        let sim_inst = (DexterSim.robot_name_to_dextersim_instance_map ?
                         DexterSim.robot_name_to_dextersim_instance_map[rob_name] :
                         null);
        if(!sim_inst){ //create one, even before we actually send any instructions.
                       //then we can at least show an empty version of the queue.
            let connect_success_cb = function(){
                //has to be an out, not a simout because sim_inst isn't available to make the cb.
                out("show_queue_for_default_dexter initialized DexterSim instance for Dexter." + rob_name);
            };
            DexterSim.create_or_just_init(rob_name, true, connect_success_cb);
            sim_inst = DexterSim.robot_name_to_dextersim_instance_map[rob_name];
        }
        sim_inst.queue_instance.show_queue();
    }

    static show_queue_cb(vals){
        let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[vals.robot_name];
        if(!sim_inst) { warning("The simulator has not yet been initialized. Run a Job."); }
        else if(vals.clicked_button_value === "show_instructions") {
           Simqueue.show_instructions(vals.robot_name);
       }
       else if(vals.clicked_button_value === "show_parameters"){
           Simqueue.show_parameters(vals.robot_name);
       }
       else if (vals.clicked_button_value === "show_fpga_reg"){
           Simqueue.show_fpga_reg(vals.robot_name);
       }
       else if (vals.clicked_button_value === "init"){
            Simqueue.init(vals.robot_name);
       }
       else if (vals.clicked_button_value === "show_degrees"){
           sim_inst.queue_instance.show_degrees = vals.show_degrees;
           sim_inst.queue_instance.done_with_j6_plus_instruction(6);
           sim_inst.queue_instance.done_with_j6_plus_instruction(7);
           sim_inst.queue_instance.update_show_queue_if_shown();
       }
    }

    show_queue(){
        if(!this.queue_is_shown()) {
            let content = '<div>\n' +
                          this.make_show_queue_status() +
                          this.make_show_queue_instructions_table() +
                          '\n</div>';
            show_window({title: "Queue simulation for Dexter:" + this.sim_instance.robot_name,
                         content: content,
                         x:520, y:0, width:600, height: 400,
                         callback: "Simqueue.show_queue_cb"});
        }
        else {
            this.sim_instance.simout("simqueue is already shown.");
        }
        this.update_show_queue_if_shown();
    }
    make_show_queue_status(){
        let rob_name = this.sim_instance.robot_name;
        return  '<input type="hidden" name="robot_name" value="' + rob_name + '"/>\n' +

                `<input type="button" name="show_instructions" ` +
                `title="Show the instructions sent\nto the simulated Dexter." ` +
                `value="&#9432; instructions"/>&nbsp;&nbsp;` +

                `<input type="button" name="show_parameters" ` +
                `title="Show the simulated set_parameters\nand their values." ` +
                `value="&#9432; params">&nbsp;&nbsp;` +

                `<input type="button" name="show_fpga_reg" ` +
                `title="Show the simulated FGPA register\naddresses, names and values." ` +
                `value="&#9432; FPGA reg">&nbsp;&nbsp;`+

                `<input type="button" name="init" ` +
                `title="Initialize the simulator for Dexter.` + rob_name + `\nThis simulates turning Dexter off and on." ` +
                `value="init">`+

                `<span title="Unchecked shows&#013;Joints 1 thru 5 in arcseconds and&#013;Joints 6 & 7 in Dynamixel units."> ` +
                    `<input name="show_degrees" style="margin-left:15px;" type="checkbox" data-onchange='true' ` +
                    `/>Show degrees` +
                 `</span>` +
                 `<div style="margin-top:4px;"><i>Status </i>` +
                 '<b>Queue:</b> <div style="display:inline-block; padding-left:10px; padding-bottom:3px; padding-top:2px; width:80px;" id="' + this.queue_dom_elt_status_string + '"></div> ' +
                 '<b>J6:   </b> <div style="display:inline-block; padding-left:10px; padding-bottom:3px; padding-top:2px; width:150px;" id="sim_j6_dom_elt_status_id"></div> ' +
                 '<b>J7:   </b> <div style="display:inline-block; padding-left:10px; padding-bottom:3px; padding-top:2px; width:150px;" id="sim_j7_dom_elt_status_id"></div> ' +
                 '</div>'
    }

    update_show_queue_if_shown(){
        if(this.queue_is_shown()){
            this.update_show_queue_status_if_shown();
            this.update_show_queue_instructions_table();
            this.update_j6_plus_status_if_shown();
        }
    }

    update_show_queue_status_if_shown(){
        if(this.queue_is_shown()){
            let elt = window[this.queue_dom_elt_status_string];
           /* let html = '<span id="' + this.queue_dom_elt_status_string + '" '  +
                       'style="background-color:' + this.queue_status_color()        + ';">&nbsp;' +
                       this.queue_status() +
                       '&nbsp;</span>'*/
            let q_stat = this.queue_status();
            if(q_stat === "sleep"){
                q_stat += " " + (this.sleep_dur_us/1000000).toFixed(1);
            }
            elt.innerHTML = q_stat;
            elt.style["background-color"] = this.queue_status_color();
            //elt.outerHTML = html
            if(this.sleep_dur_us > 0){
                let queue_instance = this;
                setTimeout(function(){
                             queue_instance.sleep_dur_us -= 100000; //subtract 100 ms
                             if (queue_instance.sleep_dur_us <= 0) { //we're done with the sleep
                                 queue_instance.sleep_dur_us = 0;
                             }
                             //even if we're now at 0, n
                             queue_instance.update_show_queue_status_if_shown(); //updates the sleep time left display

                           }, 100);
            }
        }
    }

    static show_instructions(robot_name){
        let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
        let the_job = sim_inst.job_of_last_instruction_sent();
        if(!the_job) {
            warning("No instructions sent to Dexter." + sim_inst.robot_name);
        }
        else {
            let title = "<b>Job." + the_job.name + ".sent_instructions</b>";
            let html = Dexter.sent_instructions_to_html(the_job.sent_instructions);
            let start_pos = html.indexOf("<table>");
            let end_pos   = html.indexOf("</table>") + 7;
            html = html.substring(start_pos, end_pos);
            sim_inst.simout(title + html);
        }
    }
    
    static show_parameters(robot_name){
      let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
      let title = " <b>set_parameters</b>";
      let html = "<table>";
      let params_obj = sim_inst.parameters;
      let param_names = Object.getOwnPropertyNames(params_obj);
      param_names.sort();
      for(let param_name of param_names){
          html += "<tr><td>" + param_name + "</td><td>" + params_obj[param_name] + "</td></tr>";
      }
        html += "</table>";
        sim_inst.simout(title + html);
    }
    
    static show_fpga_reg(robot_name){
      let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
      let fr_arr = sim_inst.fpga_register;
      let display_html = "<table><tr><th>Address</th><th>Address Name</th><th>Value</th></tr>\n";
      for(let i = 0; i < fr_arr.length; i++) {
         let val = fr_arr[i];
         let row = "<tr><td>"  + i + 
                   "</td><td>" + Instruction.w_address_names[i] +
                   "</td><td>" + val + 
                   "</td></tr>";
         display_html += row;
      }
      display_html += "</table>";
        sim_inst.simout("<b> Simulated FPGA Registers </b>" + display_html);
    }

    static init(robot_name){
        let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
        let rob = Dexter[robot_name];
        let sim_actual = Robot.get_simulate_actual(rob.simulate); //true, false, or "both"
        if(sim_actual === false) { sim_actual = true; } //we know we're simulating
        sim_inst.init(sim_actual);
        sim_inst.simout("initialized.");
    }


    
    make_show_queue_instructions_table(){
        let result = '<table id="' + this.queue_dom_elt_instruction_table_string + '" style="margin-top:5px;">\n' +
                     this.make_show_queue_instruction_labels();
        for(let inst_queue_index = 0; inst_queue_index < Simqueue.queue_max_length; inst_queue_index++){
            let instr = this.queue[inst_queue_index];
            let row_html;
            if(instr === undefined) {
                row_html = "<tr><td  class='simqueue_td'>" + inst_queue_index + "</td></tr>\n";
            }
            else {
                row_html = this.make_show_queue_instruction_data(inst_queue_index);
            }
            result += row_html;
        }
        result += "</table>";
        return result
    }

    make_show_queue_instruction_labels(){
        let columns_labels = ["Q&nbsp;Pos", "JOB", "INSTR#", "Joint&nbsp;1", "Joint&nbsp;2", "Joint&nbsp;3", "Joint&nbsp;4", "Joint&nbsp;5", "Joint&nbsp;6", "Joint&nbsp;7"];
        let result = "<tr>";
        for(let i = 0; i < columns_labels.length; i++) {
            let header_label = columns_labels[i];
            if((i === 8) || (i === 9)) {
                let joint_number = i - 2;
                header_label = "<span style='color:blue;' " +
                               "title='" +
`These values are sent directly to the J` + joint_number + ` motor
 when they are first added to the queue.
 They do not wait until their instruction is at
 the front of the queue (Q Pos=0)
 to start moving the motor. 
 J1 thru J5 do wait.` +
                               "'>" + header_label + "</span>";
            }
            result += "<th>" + header_label + "</th>";
        }
        result += "</tr>\n";
        return result
    }

    //returns one row of data for one instruction_array
    make_show_queue_instruction_data(inst_queue_index){
        let instruction_array = this.queue[inst_queue_index];
        let data_labels   = ["Q Pos", "JOB_ID", "INSTRUCTION_ID", "INSTRUCTION_ARG0", "INSTRUCTION_ARG1","INSTRUCTION_ARG2","INSTRUCTION_ARG3","INSTRUCTION_ARG4","INSTRUCTION_ARG5","INSTRUCTION_ARG6"];
        let result = "<tr>";
        let job_name;
        let instruction_id;
        for(let q_pos = 0; q_pos < data_labels.length; q_pos++) {
            let data_val;
            if(q_pos === 0) { data_val = inst_queue_index; }
            else {
               let data_label = data_labels[q_pos];
               let instr_elt_index = Instruction[data_label];
               data_val = instruction_array[instr_elt_index];
               if(data_label === "JOB_ID") { //data_val is a job_id
                    let job_instance = Job.job_id_to_job_instance(data_val);
                    if(job_instance) {
                        job_name = job_instance.name;
                        data_val = job_name; //job_name also used below for set_params
                    }
                    //else //rarely, the job_id doesn't find a job. In that case don't error. just show the job_id in place of the job name
               }
               else if(data_label === "INSTRUCTION_ID") {
                   instruction_id = data_val;
               }
               else if (this.show_degrees) { //we only get INSTRUCTION_ARG0 and up in this clause
                   let joint_number = q_pos - 2;
                   data_val = Socket.dexter_units_to_degrees(data_val, joint_number);
               }
            }
            result += "<td class='simqueue_td'>" + data_val + "</td>";
        }
        result += "</tr>\n";
        let actions = this.actions_for_instruction(instruction_array);
        if(actions) {
            let actions_string = "" + "set_parameters: " + JSON.stringify(actions);
            result +=  "<tr><td class='simqueue_td'>"  + (inst_queue_index + 0.5) +
                      "</td><td class='simqueue_td'>" + job_name +
                      "</td><td class='simqueue_td'>" + (instruction_id + 1) +  //because there could be multiple set params, all of them at instruction id's higher than instruction_id variable. Just go with instruction_id as a simplification
                      "</td><td class='simqueue_td'colspan='7'>" + actions_string + "</td></tr>";
        }
        return result
    }

    update_show_queue_instructions_table(){
        let table_elt        = window[this.queue_dom_elt_instruction_table_string];
        table_elt.outerHTML  = this.make_show_queue_instructions_table();
    }

    update_j6_plus_status_if_shown(joint_number){
        if(this.queue_is_shown()){
            if(!joint_number) {
                this.update_j6_plus_status_if_shown(6);
                this.update_j6_plus_status_if_shown(7);
            }
            else {
                let status = this.joint_number_to_j6_plus_status_map[joint_number];
                let elt_id = "sim_j" + joint_number + "_dom_elt_status_id";
                let elt = window[elt_id];
                elt.innerHTML = status;
                let color = (status.startsWith("stopped") ? "#76cdf1" : //blue
                                                            "#aaf1aa"); //green
                elt.style["background-color"] = color;
            }
        }
    }
};

/* Created by Fry on 3/30/16.*/

var DexterSim$1 = class DexterSim{
    constructor(robot_name){ //called once per DDE session per robot_name by create_or_just_init
        this.robot_name = robot_name;
        this.robot      = Robot$1[robot_name]; //mostly used by predict_move_dur
        DexterSim.robot_name_to_dextersim_instance_map[robot_name] = this;
        this.angles_dexter_units = [0,0,0,0,0,
                                   Socket$1.degrees_to_dexter_units(0, 6), //different from the others because for the others, 0 deg is also 0 dexter units, but not for j6
                                   50];  //50 which is the new HOME angle so that j7 doesn't overtorque.
        this.pid_angles_dexter_units = [0,0,0,0,0,0,0];  //last 2 angles are always zero.
    }

    compute_measured_angles_dexter_units(){
        return Vector$1.add(this.angles_dexter_units, this.pid_angles_dexter_units)
    }

    compute_measured_angles_degrees(){
        let ma_du = this.compute_measured_angles_dexter_units();
        return Socket$1.dexter_units_to_degrees_array(ma_du)
    }

    compute_measured_angle_degrees(joint_number){ //joint is 1 thru 7
        let ma_du = this.angles_dexter_units[joint_number - 1];
        let ma_deg = Socket$1.dexter_units_to_degrees(ma_du, joint_number);
        return ma_deg
    }

    static is_simulator_running(){
        for(let rob_name in DexterSim.robot_name_to_dextersim_instance_map){
            let sim_instance = DexterSim.robot_name_to_dextersim_instance_map[rob_name];
            if(sim_instance.queue_instance.is_simulator_running()){
                return true
            }
        }
        return false
    }

    simout(string){
       let sim_html = '<span style="color:black; background-color:#ab99ff;"> &nbsp;Simulator: </span> &nbsp;&nbsp;';
        let rob_name = "Dexter." + this.robot_name;
        out(sim_html + rob_name + " " + string);
    }

    //sim_actual passed in is either true or "both"
    //called by Socket.init. This is the top level initializer for the simulator
    static create_or_just_init(robot_name, sim_actual = "required"){
        if (!DexterSim.robot_name_to_dextersim_instance_map){
            DexterSim.init_all();
        }
        var sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
        if(!sim_inst) {
            sim_inst = new DexterSim(robot_name);
            sim_inst.init(sim_actual);
        }
        else {
            sim_inst.sim_actual = sim_actual;
        }
        //if (sim_actual === true) { //do not call new_socket_callback if simulate is "both" because we don't want to call it twice
        //    Socket.new_socket_callback(robot_name)
        //}
    }

    static init_all(){ //called once per DDE session (normally)
        DexterSim.robot_name_to_dextersim_instance_map = {};
        //DexterSim.set_interval_id = setInterval(DexterSim.process_next_instructions, 10)
    }

    init(sim_actual){
        this.sim_actual = sim_actual;
        this.queue_instance = new Simqueue$1(this);

        //these should be in dexter_units
        this.parameters = { //set_params. see Socket.js instruction_array_degrees_to_arcseconds_maybe
            Acceleration:  0.0001,        // in _nbits_cf units
            MaxSpeed:     30 * _nbits_cf, // in _nbits_cf units
            StartSpeed:    0 * _nbits_cf  // in _nbits_cf units
        };
        this.status_mode = 0; //can also be 1, set by "g" command.
        this.fpga_register = new Array(Instruction$1.w_address_names.length); //the make_ins("w", index, val) instructions stored here. //write fpga register
        this.fpga_register.fill(0);
        this.write_file_file_name = null;
        this.write_file_file_content = ""; //grows as "m" instructions come in
        this.last_instruction_sent = null;

        // not used  this.pid_angles_arcseconds      = [0,0,0,0,0,0,0]
        this.velocity_arcseconds_per_second = [0,0,0,0,0,0,0];
    }

    static array_buffer_to_string(arr_buff, terminating_char=";"){
        let str = arr_buff.toString();
        let end_index = str.indexOf(terminating_char);
        return str.substring(0, end_index)
    }


    static array_buffer_to_oplet_array(arr_buff){
        let str = this.array_buffer_to_string(arr_buff);
        let split_str = str.split(" ");
        let oplet_array = [];
        let oplet;
        for(let i = 0; i <  split_str.length; i++) {
            let substr = split_str[i];
            if(i == Instruction$1.INSTRUCTION_TYPE) { oplet = substr;}
            else if ((oplet == "W") && (i == Instruction$1.INSTRUCTION_ARG2)) { //this is the payload of Dexter.write_file
                let raw_string = arr_buff.toString(); //can't use str because that ends at first semicolon, and payload might have semicolons in it.
                let ending_semicolon_pos = raw_string.lastIndexOf(";"); //note that the payload might have semicolons in it so don't choose those by using LASTindexOf
                let W_pos = raw_string.indexOf(" W ");
                let start_payload_length_pos = W_pos + 5; //5 skips over the "W f " (oplet and write_kind letter and spaces)
                //but now we must skip over the payload length, which is an int of variable length
                let start_payload_pos = raw_string.indexOf(" ", start_payload_length_pos) + 1; //skip over palyoad length and the space after it
                let payload = raw_string.substring(start_payload_pos, ending_semicolon_pos); //excludes final semicolon
                oplet_array.push(payload);
                break;
            }
            if(substr == "")               ; //ignore. this is having more than one whitespace together. Just throw out
            else if(substr == "undefined") { oplet_array.push(undefined); }
            else if (substr == "NaN")      { oplet_array.push(NaN); }
            else {
                let num_maybe = parseFloat(substr); //most are ints but some are floats
                if(Number.isNaN(num_maybe)) { oplet_array.push(substr); } //its a string
                else                        { oplet_array.push(num_maybe); } //its an actual number
            }
        }
        return oplet_array
    }

    //used in Simqueue for showing sent instructions
    job_of_last_instruction_sent() {
        let instr = this.last_instruction_sent;
        if(!instr) { return null }
        else {
            let job_id = instr[Instruction$1.JOB_ID];
            return Job.job_id_to_job_instance(job_id)
        }
    }

    //called from Socket.send
    //typically adds instruction to ds_instance.instruction_queue
    static send(robot_name, arr_buff){
        let instruction_array = this.array_buffer_to_oplet_array(arr_buff); //instruction_array is in dexter_units
        //out("Sim.send passed instruction_array: " + instruction_array + " robot_name: " + robot_name)
        let ds_instance = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
        /*if(!ds_instance) {
            let rob = Dexter[robot_name]
            rob.instruction_to_send_on_connect = instruction_array
            const sim_actual = Robot.get_simulate_actual(rob.simulate)
            this.create_or_just_init(robot_name, sim_actual)
            return
        }*/
        ds_instance.last_instruction_sent = instruction_array;
        let ins_args = Instruction$1.args(instruction_array); //in dexter_units
        let oplet  = instruction_array[Dexter$1.INSTRUCTION_TYPE];
        switch(oplet){
            case "a":
                ds_instance.queue_instance.add_to_queue(instruction_array);
                ds_instance.ack_reply_maybe(instruction_array);
                break;
            case "e": //cause an error. Used for testing only
                //not needed as ack_reply pulls the error_code out of instruction_array for "e" oplets. let the_error_code = instruction_array[Instruction.INSTRUCTION_ARG0]
                ds_instance.ack_reply_maybe(instruction_array);
                break;
            case "E": //not implemented on Dexter Mar 13, 2021 but should be. Requires FPGA programming
                ds_instance.queue_instance.empty_instruction_queue(); //this will call ack_reply IFF the queue is blocked (by a previous "F" cmd
                break;
            case "F": //empty_instruction_queue. blocks adding to queue until its empty.
                ds_instance.queue_instance.set_queue_blocking_instruction(instruction_array);
                //do not ack_reply! That happens when all items removed from the queue.
                break;
            case "g":
                let inst_status_mode = instruction_array[Instruction$1.INSTRUCTION_ARG0];
                if((inst_status_mode === null) || (inst_status_mode === undefined)){ ds_instance.status_mode = 0;} //helps backwards compatibility pre status modes.
                else { ds_instance.status_mode = inst_status_mode; }
                ds_instance.ack_reply(instruction_array);
                break;
            /*case "G": //deprecated. get immediate. The very first instruction sent to send should be  "G",
                                     //so let it be the first call to process_next_instruction & start out the setTimeout chain
                ds_instance.add_instruction_to_queue(instruction_array) //stick it on the front of the queue so it will be done next
                break;*/
            case "h": //doesn't go on instruction queue, just immediate ack
                ds_instance.ack_reply(instruction_array);
                break;
            case "P": //does not go on queue  //ds_instance.queue_instance.add_to_queue(instruction_array)
                //pid_move_all_joints for j6 and 7 are handled diffrently than J1 thru 5.
                //IF we get a pid_maj for j6 and/or j7, just treat it like
                // an maj for j6 and j7, ie just more the joints to those locations.
                //pid_move_all_joints can construct an istruction array that has less than 7 joint angles.
                //IF a j6 or j7 is NOT present, then don't do anything with j6 and j7 ie don't set it to zero.
                let pid_ang_du = Instruction$1.extract_args(instruction_array); //probably will be 5 long but could be 7
                for(let i = 0; i < pid_ang_du.length; i++){
                    let new_ang = pid_ang_du[i];
                    if(i < 5) {
                        ds_instance.pid_angles_dexter_units[i] = new_ang;
                    }
                    else {
                        ds_instance.angles_dexter_units[i] = new_ang; //j6 & J7.
                    }
                }
                ds_instance.compute_measured_angles_degrees();
                //let angle_degrees_array = Socket.dexter_units_to_degrees_array(ds_instance.angles_dexter_units)
                //let pid_angle_degrees_array = Socket.dexter_units_to_degrees_array(ds_instance.pid_angles_dexter_units)
                //let sum_degrees_array = Vector.add(angle_degrees_array, pid_angle_degrees_array).slice(0, 5)
                if(SimUtils.is_simulator_showing()) {
                    SimUtils.render_j1_thru_j5(ds_instance); //todo this just jumps to the new angles, not move smoothly as it should
                    if(pid_ang_du.length > 5) {
                        SimUtils.render_j6(ds_instance);
                    }
                    if(pid_ang_du.length > 6) {
                        SimUtils.render_j7(ds_instance); //don't bother to pass xyz and robot.pose as that's only used by simBuild.
                    }
                }
                ds_instance.ack_reply(instruction_array);
                break;
            case "r": //Dexter.read_file. does not go on queue
                let payload_string_maybe = ds_instance.process_next_instruction_r(instruction_array);
                ds_instance.ack_reply(instruction_array, payload_string_maybe);
                break;
            case "S":
                let param_name = ins_args[0];
                let param_val  = ins_args[1];
                if(["Acceleration", "MaxSpeed", "StartSpeed"].includes(param_name)) {
                    ds_instance.queue_instance.set_instruction_done_action(param_name, param_val);
                }
                //EERoll & EESpan *ought* to go on queue but Dexter Mar 19, 2021 does them immediately
                //so the simulator follows suit.
                //Also, the belwo sets the peasured angles immediately to the commanded angle
                //bit really should "animate" it based on the speed of these motors
                //though they're much faster than j1 thru 5.
                //Note that if the robot has 320 motors vs 430, the speed will vary.
                //So this is a cheap simulation.
                else {
                    if(param_name === "EERoll") { //joint 6
                        //ds_instance.measured_angles_dexter_units[5] = param_val
                        ds_instance.queue_instance.start_running_j6_plus_instruction(6, param_val);
                    }
                    else if(param_name === "EESpan") { //joint 7
                        //ds_instance.measured_angles_dexter_units[6] = param_val
                        ds_instance.queue_instance.start_running_j6_plus_instruction(7, param_val);
                    }
                    //else if(param_name === "RebootServo"){
                       //we don't need special processing for RebootServo. After it will be
                       //a "z" oplet instruction (Dexter.sleep) that will cause Sim queue to show "sleep"
                    //}
                    else {
                        ds_instance.parameters[param_name] = param_val;
                        ds_instance.simout("set parameter: " + param_name + " to " + param_val);
                    }
                }
                ds_instance.ack_reply(instruction_array);
                break;
            case "T":
                let angles_dexter_units = ds_instance.convert_T_args_to_joint_angles_dexter_units(ins_args);
                let new_instruction_array = instruction_array.slice(0, Instruction$1.INSTRUCTION_ARG0);
                new_instruction_array[Instruction$1.INSTRUCTION_TYPE] = "a"; //change from "T" to "a"
                new_instruction_array.concat(angles_dexter_units);
                ds_instance.queue_instance.add_to_queue(instruction_array); //just like "a" for now

            case "w": //write fpga register
                const write_location = ins_args[0];
                if (write_location < ds_instance.fpga_register.length) {
                    let new_val = ins_args[1];
                    ds_instance.fpga_register[write_location] = new_val;
                    let reg_name = Instruction$1.w_address_names[write_location];
                    ds_instance.simout("FPGA Register: " + reg_name + " ( " + write_location + " )  set to: " + new_val);
                    ds_instance.ack_reply(instruction_array);
                }
                else { shouldnt$1('DexterSim.fpga_register is too short to accommodate "w" instruction<br/> with write_location of: ' +
                    write_location + " and value of: " + ins_args[1]); 
                }  
                 break;
            case "W": //write file
                ds_instance.process_next_instruction_W(ins_args);
                ds_instance.ack_reply(instruction_array);
                break;
            case "z": //sleep, first arg holds microseconds dur
                //all sleep does is wait for the dur, (starting when the instruction is received
                // by the robot) and then return the ack_reply.
                //so it just holds up DDE sending more instructions.
                //Any ongoing queued instructions just keep running as they would
                //without the sleep.
                //When the dur is up, the queue_instance takes care of sending the ack_reply.
                ds_instance.queue_instance.start_sleep(instruction_array);
                break;
            default:
                warning("In DexterSim.send, got instruction not normally processed: " + oplet);
                ds_instance.ack_reply(instruction_array);
                break;
        }
    }

    //this is called by "a" and "P" instructions only, ie only
    //instuctions that add to the queue.
    ack_reply_maybe(instruction_array, payload_string_maybe){
        if(this.queue_instance.is_queue_full()) {
            this.simout("queue is full.<br/>There will be no reply until the current instruction completes.");
        }
        else {
            this.ack_reply(instruction_array, payload_string_maybe);
        }
    }

    //hacked to now create and pass to on_receive a full robot status
    //payload_string_maybe might be undefined, a string payload or an error number positive int.
    ack_reply(instruction_array, payload_string_maybe){
        let robot_status_array = Dexter$1.make_default_status_array_g_sm(this.status_mode);
        let rs_inst = new RobotStatus({robot_status: robot_status_array});
        let opcode = instruction_array[Instruction$1.INSTRUCTION_TYPE];
        robot_status_array[Dexter$1.JOB_ID]            = instruction_array[Instruction$1.JOB_ID];
        robot_status_array[Dexter$1.INSTRUCTION_ID]    = instruction_array[Instruction$1.INSTRUCTION_ID];
        robot_status_array[Dexter$1.START_TIME]        = instruction_array[Instruction$1.START_TIME]; //Date.now()
        robot_status_array[Dexter$1.STOP_TIME]         = Date.now();
        robot_status_array[Dexter$1.INSTRUCTION_TYPE]  = opcode; //leave this as a 1 char string for now. helpful for debugging
        if((opcode === "r")   &&
            (typeof(payload_string_maybe) == "number") &&
            (payload_string_maybe > 0)){
            robot_status_array[Dexter$1.ERROR_CODE] = payload_string_maybe;
        }
        else if(opcode === "e"){
            robot_status_array[Dexter$1.ERROR_CODE] = instruction_array[Dexter$1.ERROR_CODE];
        }
        if(rs_inst.supports_measured_angles()) {
            let ma_du = this.compute_measured_angles_dexter_units();
            rs_inst.set_measured_angles(ma_du, true); //we want to install arcseconds, as Socket is expected arcseconds and will convert to degrees
        }

        if(this.status_mode === 0){
           robot_status_array[Dexter$1.J1_ANGLE] = this.angles_dexter_units[0];
           robot_status_array[Dexter$1.J2_ANGLE] = this.angles_dexter_units[1];
           robot_status_array[Dexter$1.J3_ANGLE] = this.angles_dexter_units[2];
           robot_status_array[Dexter$1.J4_ANGLE] = this.angles_dexter_units[3];
           robot_status_array[Dexter$1.J5_ANGLE] = this.angles_dexter_units[4];
           //there are no slots in robot_status_array g0 for j6 and j7 angles
           let latest = this.queue_instance.latest_sent_queued_instruction;
           let j1_5_arcsecs;
           if(latest) {
              j1_5_arcsecs = [latest[Instruction$1.INSTRUCTION_ARG0], 
                              latest[Instruction$1.INSTRUCTION_ARG1], 
                              latest[Instruction$1.INSTRUCTION_ARG2], 
                              latest[Instruction$1.INSTRUCTION_ARG3], 
                              latest[Instruction$1.INSTRUCTION_ARG4]];  
           }
           else { j1_5_arcsecs = [0,0,0,0,0]; }
           robot_status_array[Dexter$1.J1_SENT] = j1_5_arcsecs[0];
           robot_status_array[Dexter$1.J2_SENT] = j1_5_arcsecs[1];
           robot_status_array[Dexter$1.J3_SENT] = j1_5_arcsecs[2];
           robot_status_array[Dexter$1.J4_SENT] = j1_5_arcsecs[3];
           robot_status_array[Dexter$1.J5_SENT] = j1_5_arcsecs[4];
           //unfortunately g0 doesn't support J6_SENT or J7_SENT
        } 
         
        if (this.sim_actual === true){
            let dexter_instance = this.robot;  //for closure variable
            setTimeout(function(){
                        Socket$1.on_receive(robot_status_array, payload_string_maybe, dexter_instance);
                        }, 1);
        }
    }

    //from https://stackoverflow.com/questions/15761790/convert-a-32bit-integer-into-4-bytes-of-data-in-javascript/24947000
    //not called mar 18, 2021
    /*toBytesInt32 (num) {
        arr = new ArrayBuffer(4); // an Int32 takes 4 bytes
        view = new DataView(arr);
        view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false
        return arr;
    }*/

    //when we're running the simulator on Dexter
    static render_once_node(ds_instance, job_name, robot_name, force_render=true){ //inputs in arc_seconds
         //note that SimUtils.render_once has force_render=false, but
         //due to other changes, its best if render_once_node default to true
         rs_inst = ds_instance.robot.rs;
        if (force_render){
            let j1 = rs_inst.measured_angle(1); //joint_number)robot_status[Dexter.J1_MEASURED_ANGLE]
            let j2 = rs_inst.measured_angle(2);
            let j3 = rs_inst.measured_angle(3);
            let j4 = rs_inst.measured_angle(4);
            let j5 = rs_inst.measured_angle(5);
            let j6 = rs_inst.measured_angle(6);
            let j7 = rs_inst.measured_angle(7);
            j1 = j1; //* -1 //fix for j1 wrong sign
            j5 = j5 * -1; //fix for j5 wrong sign
            out("DexterSim " + job_name + " " + robot_name + " J1: " + j1 + ", J2: " + j2 + ", J3: " + j3 + ", J4: " + j4 + ", J5: " + j5 + ", J6: " + j6 + ", J7: " + j7,
                "#95444a", //brown,
                true); //temp output
        }
    }

    // also called by process_next_instruction_T()
    /*process_next_instruction_a(angles_dexter_units){
        //predict needs its angles in degrees but ins_args are in arcseconds
        const orig_angles_in_deg = Socket.dexter_units_to_degrees_array(this.measured_angles_dexter_units)  //Socket.dexter_units_to_degrees(this.measured_angles_dexter_units) //this.measured_angles_dexter_units.map(function(ang) { return ang / 3600 })
        const angles_in_deg  = Socket.dexter_units_to_degrees_array(angles_dexter_units) //ns_args.map(function(ang)    { return ang / 3600 })
        //ins_args_in_deg[5] = Socket.dexter_units_to_degrees(ins_args[5], 6) //joint 6
        //ins_args_in_deg[6] = Socket.dexter_units_to_degrees(ins_args[6], 7) //joint 7

        //predict_move_dur takes degrees in and returns seconds
        let dur_in_seconds = Math.abs(Kin.predict_move_dur(orig_angles_in_deg, angles_in_deg, this.robot))
        let dur_in_milliseconds = dur_in_seconds * 1000
        return dur_in_milliseconds
    }*/

    //same as the above. just better named for its functionality
    predict_a_instruction_dur_in_ms(angles_dexter_units){
        if(angles_dexter_units === this.angles_dexter_units) { //an optimization for this common case of no change
            return 0
        }
        else {
            //predict needs its angles in degrees but ins_args are in arcseconds
            const orig_angles_in_deg = Socket$1.dexter_units_to_degrees_array(this.angles_dexter_units);  //Socket.dexter_units_to_degrees(this.measured_angles_dexter_units) //this.measured_angles_dexter_units.map(function(ang) { return ang / 3600 })
            const angles_in_deg  = Socket$1.dexter_units_to_degrees_array(angles_dexter_units); //ns_args.map(function(ang)    { return ang / 3600 })
            //ins_args_in_deg[5] = Socket.dexter_units_to_degrees(ins_args[5], 6) //joint 6
            //ins_args_in_deg[6] = Socket.dexter_units_to_degrees(ins_args[6], 7) //joint 7

            //predict_move_dur takes degrees in and returns seconds
            //let dur_in_seconds = Math.abs(Kin.predict_move_dur(orig_angles_in_deg, angles_in_deg, this.robot))
            let dur_in_seconds = Math.abs(Kin$1.predict_move_dur_5_joint(orig_angles_in_deg, angles_in_deg, this.robot));
            //use 5 joint as j6 and j7 aren't part of this path.
            let dur_in_milliseconds = dur_in_seconds * 1000;
            return dur_in_milliseconds
        }
    }

    predict_j6_plus_instruction_dur_in_ms(new_angle_in_dexter_units, joint_number){
        let orig_angle_in_dexter_units = this.angles_dexter_units[joint_number -1];
        let diff_du = new_angle_in_dexter_units - orig_angle_in_dexter_units;
        let diff_deg = Socket$1.dexter_units_to_degrees(diff_du, joint_number);
        let dur_in_seconds = Math.abs(diff_deg) / Kin$1.dynamixel_320_degrees_per_second;
        let dur_in_ms = dur_in_seconds * 1000;
        return dur_in_ms
    }

    /*
    process_next_instruction_T(ins_args){ //ins_args xyz in microns
        let xyz_in_microns = [ins_args[0], ins_args[1], ins_args[2]]
        let J5_direction   = [ins_args[3], ins_args[4], ins_args[5]]
        let config         = [ins_args[6], ins_args[7], ins_args[8]]
        let j6_angle       = ins_args[11]
        let j7_angle       = ins_args[12]
        let pose           = undefined //its not in the ins_args, and defaults just fine

        let xyz_in_meters = [xyz_in_microns[0] / 1000000,
                             xyz_in_microns[1] / 1000000,
                             xyz_in_microns[2] / 1000000]
        let angles_in_degrees = Kin.xyz_to_J_angles(xyz_in_meters, J5_direction, config, pose)
        let angles_in_dexter_units = Socket.degrees_to_dexter_units(angles_in_degrees)
        angles_in_dexter_units.push(j6_angle)
        angles_in_dexter_units.push(j7_angle)
        return this.process_next_instruction_a(angles_in_dexter_units)
    }*/

    convert_T_args_to_joint_angles_dexter_units(ins_args){ //ins_args contains xyz in microns
        let xyz_in_microns = [ins_args[0], ins_args[1], ins_args[2]];
        let J5_direction   = [ins_args[3], ins_args[4], ins_args[5]];
        let config         = [ins_args[6], ins_args[7], ins_args[8]];
        let j6_angle       = ins_args[11];
        let j7_angle       = ins_args[12];
        let pose           = undefined; //its not in the ins_args, and defaults just fine

        let xyz_in_meters = [xyz_in_microns[0] / 1000000,
            xyz_in_microns[1] / 1000000,
            xyz_in_microns[2] / 1000000];
        let angles_in_degrees = Kin$1.xyz_to_J_angles(xyz_in_meters, J5_direction, config, pose);
        let angles_in_dexter_units = Socket$1.degrees_to_dexter_units(angles_in_degrees);
        angles_in_dexter_units.push(j6_angle);
        angles_in_dexter_units.push(j7_angle);
        return angles_in_dexter_units //this.process_next_instruction_a(angles_in_dexter_units)
    }

    process_next_instruction_r(instruction_array) {
        let hunk_index = instruction_array[Instruction$1.INSTRUCTION_ARG0];
        let source     = instruction_array[Instruction$1.INSTRUCTION_ARG1];
        let whole_content;
        try { whole_content = read_file(source); }//errors if path in "source" doesn't exist
        catch(err){
            return 2 //return the error code
        }
        let start_index = hunk_index * Instruction$1.Dexter.read_file.payload_max_chars;
        let end_index = start_index + Instruction$1.Dexter.read_file.payload_max_chars;
        let payload_string = whole_content.substring(start_index, end_index); //ok if end_index is > whole_cotnent.length, it just gets how much it can, no error
        return payload_string
    }
    //Dexter.write_file
    process_next_instruction_W(ins_args, rob){
        let kind_of_write  = ins_args[0];
        ins_args[1];
        let payload        = ins_args[2];
        let robot_name     = this.robot_name;
        let dde_computer_file_system_start = "dexter_file_systems/" + robot_name + "/";
        switch(kind_of_write){
            case "f": //payload is file name to write to. Just one of these to start with
                this.write_file_file_name = payload;
                this.write_file_file_content = "";
                break;
            case "m": //middle, ie a content instruction, many of these
                this.write_file_file_content += payload;
                break;
            case "e":   //end, just one of these
                this.write_file_file_content += payload;
                let last_slash_pos = this.write_file_file_name.lastIndexOf("/");
                let folders_string = "";
                if(last_slash_pos != -1) { folders_string = this.write_file_file_name.substring(0, last_slash_pos + 1); }
                let folder_path;
                if(folders_string.startsWith("/")) {
                    folder_path = folders_string;
                }
                else {
                    folder_path = dde_computer_file_system_start + folders_string; //ends with slash
                }
                folder_path = make_full_path(folder_path);
                make_folder(folder_path);
                let full_path = dde_computer_file_system_start + this.write_file_file_name;
                full_path = make_full_path(full_path);
                //fs.mkdirSync(path, options-recursive???)
                write_file(full_path, this.write_file_file_content);
                break;
            default:
              dde_error('The "W" write_file instruction received<br/>' +
                        'a "kind_of-write" letter of "' + kind_of_write + "<br/>" +
                        'but the only valid letters are "f", "m" and "e".');
        }
        return 0 //dur
    }
    //The corresponding fn for Dexter causes DexRun to crash, so we've commented out all calls to it.
    //When FPGA is updated to support it, we can re_instate it as a regular function.
    static empty_instruction_queue_now(robot_name){
        if(DexterSim.robot_name_to_dextersim_instance_map) {
            let ds_instance = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
            if(ds_instance) {
                ds_instance.queue_instance.empty_instruction_queue();
            }
        }
    }
    
};

DexterSim$1.robot_name_to_dextersim_instance_map = {};
DexterSim$1.set_interval_id      = null;

/* Created by Fry on 2/4/16. */
//import {_nbits_cf, _arcsec, _um} = from "./units.js" //don't do this. These units and all the rest are
//already global vars.

//never create an instance
var Socket$1 = class Socket{
    //returns a net_soc_inst or null if none in Socket.robot_name_to_soc_instance_map
    //this is reverse lookup in robot_name_to_soc_instance_map
    static net_soc_inst_to_robot_name(net_soc_inst){
        for(let robot_name in Socket.robot_name_to_soc_instance_map){
            let a_net_soc_inst = Socket.robot_name_to_soc_instance_map[robot_name];
            if (a_net_soc_inst === net_soc_inst) { return robot_name }
        }
        return null
    }

    //when a job starts, it calls robot.start, which calls start_aux, which (for Dexter's)
    //calls Socket.init, which for sim, calls DexterSim.create_or_just_init
    static init(robot_name, job_instance, instruction_to_send_on_connect=null){
       //out(job_instance.name + " Socket.init passed: " + robot_name + " " + instruction_to_send_on_connect)
       if(!job_instance.is_active()) {
            warning(job_instance.name + " Attempt to Socket.init with inactive status: " + job_instance.status_code);
            return
        }
        let rob = Robot$1[robot_name];
        const sim_actual = Robot$1.get_simulate_actual(rob.simulate); //true, false, or "both"
        if (sim_actual === true){ //when we are ONLY simulating
            DexterSim$1.create_or_just_init(robot_name, sim_actual);
            //out("socket for Robot." + robot_name + ". is_connected? " + Robot[robot_name].is_connected)
            Socket.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
        }
        else if ((sim_actual === false) || (sim_actual == "both")) {
            if(sim_actual == "both"){
                DexterSim$1.create_or_just_init(robot_name, sim_actual); //harmless if done a 2nd time. returns without callbaack
            }
            let net_soc_inst = Socket.robot_name_to_soc_instance_map[robot_name];
            if(net_soc_inst && (net_soc_inst.readyState === "closed")) { //we need to init all the "on" event handlers
                this.close(robot_name, true);
                net_soc_inst = null;
            }
            if(!net_soc_inst){
                //out(job_instance.name + " Socket.init net_soc_inst for " + robot_name + " doesn't yet exist or is closed.")
                try {
                    net_soc_inst = new net.Socket();
                    net_soc_inst.setKeepAlive(true);
                    //out(job_instance.name + " Just after created, net_soc_inst.readyState: " + net_soc_inst.readyState)
                    /* on error *could* be called, but its duration from a no-connection is
                       highly variable so I have below a setTimeout to kill the connection
                       after a second. But then both on error and the setTimeout method
                       *could* get called so I take pains to kill off the setTimeout
                       so that only one will get called.

                    */
                }
                catch(err){
                    console.log(job_instance.name + " Socket.init catch clause with err: " + err.message);
                    dde_error("Error attempting to create socket to Dexter." + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port + err.message);
                    this.close(robot_name, true);
                }
                // I must define the below just once (on actual new socket init, because  calling
                // net_soc_inst.on("data", function(data) {...} actually gives the socket 2 versions of the callback
                // and so each will be called once, giving us a duplication that causes a difficult to find bug.
                net_soc_inst.on("data", function(data) {
                    Socket.on_receive(data, undefined, rob);
                });
                net_soc_inst.on("connect", function(){
                    out(job_instance.name + " Succeeded connection to Dexter: " + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port, "green");
                    //clearTimeout(st_inst)
                    Socket.robot_name_to_soc_instance_map[robot_name] = net_soc_inst;
                    //the 3 below closed over vars are just used in the one call to when this on connect happens.
                    Socket.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
                });
                net_soc_inst.on("error", function(err){
                    console.log("Probably while running " + job_instance.name + " Socket.init on error while waiting for ack from instruction: " + instruction_to_send_on_connect  +
                        " with err: " + err.message);
                    //clearTimeout(st_inst)
                    let rob_name = Socket.net_soc_inst_to_robot_name(net_soc_inst);
                    if (rob_name == null) { rob_name = "unknown"; } //should be rare if at all.
                    let rob_maybe = (rob_name ? Dexter[rob_name] : null);
                    if (rob_maybe) {
                        //warning("in Socket.init on error callback, could not find Dexter." + rob_name)
                        rob = rob_maybe;
                    } //let rob "default" to the closed over "rob" because can't find anything else
                    //if(st_inst || (st_inst == 0)){ clearTimeout(st_inst) } //st_inst is just a non-neg int.
                    //Socket.close(robot_name, true) //true, means force_close, needed if job is still active becuse that will remove the soc from the robot_name_to_soc_instance_map and get init to really work.
                    if (rob.resend_count && (rob.resend_count >= 4)) {  //give up retrying and error
                        let active_jobs_using_rob = Job.active_jobs_using_robot(rob);
                        rob.resend_count = 0;
                        for(let job_inst of active_jobs_using_rob) {
                            job_inst.stop_for_reason("errored_from_dexter", "can't connect to Dexter." + rob_name);
                        }
                        return
                    }
                    else { //we've got a rob, keep trying
                        if(!rob.resend_count) {
                            rob.resend_count = 1;
                        }
                        else { rob.resend_count += 1; }
                        Socket.close(robot_name, true);
                        let timeout_dur = Math.pow(10, rob.resend_count);
                        setTimeout(function(){
                            console.log("re-initing Socket to Dexter." + rob_name);
                            //in the below, for the 3 closed over vars, its possible that these aren't
                            //the right closed over vars, because multiple jobs can send to a given robot.
                            //but if we're only running one robot, or in 2 or more jobs hitting a robot,
                            //maybe these are right, so worth a shot. Not sure what else to do.
                            Socket.prepare_for_re_init(robot_name);
                            Socket.init(rob_name, job_instance, instruction_to_send_on_connect);
                        }, timeout_dur);
                    }
                }); //end of on("error"
                setTimeout(function() {
                    if(!net_soc_inst) ; //presume the job completed and so nothing to do
                    else if (job_instance.is_done()) ; //presume the job completed and so nothing to do
                    else if(net_soc_inst.readyState === "open") ; //connection worked, leave it alone
                    else { //connection failed
                        job_instance.stop_for_reason("errored_from_dexter_connect", "Connection to Dexter." + robot_name +
                                                     "\n failed after 2 seconds.");
                    }
                }, 2000);
                net_soc_inst.connect(rob.port, rob.ip_address);
            } //ending the case where we need to make a new net_soc_inst

            /*out(job_instance.name + "Socket.init before connect, net_soc_inst.readyState: " + net_soc_inst.readyState)
            if (net_soc_inst.readyState === "closed") {
                 st_inst = setTimeout(function(){
                    out(job_instance.name + " in Socket.init, setTimout of st_inst")
                    if(net_soc_inst.readyState !== "open") { //still trying to connect after 1 sec, so presume it never will. kill it
                        Socket.close(robot_name, true)
                        rob.resend_count = 0
                        if(!job_instance.is_done()){
                            job_instance.stop_for_reason("errored_from_dexter", " socket timeout while connecting to Dexter." + rob.name)
                        }
                    }
                    else {
                        Socket.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect)
                    }
                }, Socket.connect_timeout_seconds * 5000)
                out(job_instance.name + " Now attempting to connect to Dexter." + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port + " ...", "brown")
                net_soc_inst.connect(rob.port, rob.ip_address) //the one call to .connect()
            } */
            else { //net_soc_inst already existed and is open
                Socket.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
            }
        }
        //out(job_instance.name + " Socket.init, very bottom")
    }

    //called from both above socket code and from dexsim
    static new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect){
        Dexter.set_a_robot_instance_socket_id(robot_name);
        let rob = Robot$1[robot_name];
        if(instruction_to_send_on_connect) { //usually this clause hits. happens for initial g oplet for a job
              //and when connection is dropped and we need to resetablish connection and resend.
              //ok to call this even if we were already connected.
            let inst_id = instruction_to_send_on_connect[1];
            if((inst_id === undefined) || (inst_id === -1)) { //we have the initial "g" instr for a job, that has yet to get filled out by Job.prototype.send
                //out("new_socket_callback with initial g instruction.")
                job_instance.send(instruction_to_send_on_connect, rob);
            }
            else {
                rob.send(instruction_to_send_on_connect);
            }
        }
        else {
            warning("In new_socket_callback without instruction to send.");
        }
    }

    static oplet_array_or_string_to_array_buffer(oplet_array_or_string){
        let str = this.oplet_array_or_string_to_string(oplet_array_or_string);
        return this.string_to_array_buffer(str)
    }

    static oplet_array_or_string_to_string(oplet_array_or_string) {
        if (typeof(oplet_array_or_string) == "string") { return oplet_array_or_string }
        else { //oplet_array_or_string is an array
            let str = "";
            for(var i = 0; i < oplet_array_or_string.length; i++){
                let suffix = ((i == (oplet_array_or_string.length - 1))? ";": " ");
                //let elt = oplet_array_or_string[i] + suffix
                let elt = oplet_array_or_string[i];
                if (Number.isNaN(elt)) { elt = "NaN"; } //usually only for "a" instructions and only for elts > 4
                  //looks like this is never used now because I convert from NaN to the prev val
                  //in the the higher level code so only numbers get passed to DexRun.
                elt = elt + suffix;
                str += elt;
            }
            return str
        }
    }

    static string_to_array_buffer(str){
        var arr_buff = Buffer.alloc(128); //dexter code expecting fixed length buf of 128
        //var view1    = new Uint8Array(arr_buff)
        for(var i = 0; i < str.length; i++){
            let char = str[i];
            let code = char.charCodeAt(0);
            arr_buff[i] = code;
        }
        return arr_buff
    }

    static degrees_to_dexter_units_array(arr){
        let new_array = [];
        for(let index = 0; index < arr.length; index++){
            let joint_number = index + 1;
            new_array.push(this.degrees_to_dexter_units(arr[index], joint_number));
        }
        return new_array
    }

    static dexter_units_to_degrees_array(arr){
        let new_array = [];
        for(let index = 0; index < arr.length; index++){
            let joint_number = index + 1;
            new_array.push(this.dexter_units_to_degrees(arr[index], joint_number));
        }
        return new_array
    }

    static degrees_to_dexter_units(deg, joint_number){
        if(joint_number == 6) {
            return Math.round(deg / Socket.DEGREES_PER_DYNAMIXEL_320_UNIT) +
                              Socket.J6_OFFSET_SERVO_UNITS //512
        }
        else if (joint_number == 7) {
            return Math.round(deg / Socket.DEGREES_PER_DYNAMIXEL_320_UNIT)
        }
        else {
            return Math.round(deg * 3600)  //convert to arcseconds
        }
    }

    static dexter_units_to_degrees(du, joint_number){
        if(joint_number == 6) {
            let ang_deg = (du - Socket.J6_OFFSET_SERVO_UNITS ) *
                       Socket.DEGREES_PER_DYNAMIXEL_320_UNIT;
            return ang_deg
        }
        else if (joint_number == 7) {
              let ang_deg = du * Socket.DEGREES_PER_DYNAMIXEL_320_UNIT;
              return ang_deg
        }
        else { return du / 3600 }
    }

    static instruction_array_degrees_to_arcseconds_maybe(instruction_array, rob){
        if(typeof(instruction_array) == "string") { return instruction_array} //no conversion needed.
        const oplet = instruction_array[Dexter.INSTRUCTION_TYPE];
        let number_of_args = instruction_array.length - Instruction$1.INSTRUCTION_ARG0;
        if ((oplet === "a") || (oplet === "P")){
            //take any number of angle args
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy.length - Instruction$1.INSTRUCTION_ARG0;
            for(let i = 0; i < number_of_args; i++) {
                let index = Instruction$1.INSTRUCTION_ARG0 + i;
                let arg_val = instruction_array_copy[index];
                let converted_val = this.degrees_to_dexter_units(arg_val, i + 1);
                instruction_array_copy[index] = converted_val;
            }
            return instruction_array_copy
        }
        else if (oplet === "S") {
            const name = instruction_array[Instruction$1.INSTRUCTION_ARG0];
            const args = instruction_array.slice(Instruction$1.INSTRUCTION_ARG1, instruction_array.length);
            const first_arg = args[0];
            //first convert degrees to arcseconds
            if(["MaxSpeed", "StartSpeed", "Acceleration",
                "AngularSpeed", "AngularSpeedStartAndEnd", "AngularAcceleration",
                "CartesianPivotSpeed", "CartesianPivotSpeedStart", "CartesianPivotSpeedEnd",
                "CartesianPivotAcceleration", "CartesianPivotStepSize" ].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                instruction_array_copy[Instruction$1.INSTRUCTION_ARG1] = Math.round(first_arg * _nbits_cf);
                return instruction_array_copy
            }
            else if (name.includes("Boundry")) { //the full name is  J1BoundryHigh thru J5BoundryHigh, or J1BoundryLow thru J5BoundryLow
                let instruction_array_copy = instruction_array.slice();
                let joint_number = parseInt(name[1]);
                instruction_array_copy[Instruction$1.INSTRUCTION_ARG1] = this.degrees_to_dexter_units(first_arg, joint_number); //Math.round(first_arg * 3600) //deg to arcseconds
                                            //only expecting j1 thru J5, and since j1 thru j5 are to be converted the same, just pass joint 1
                return instruction_array_copy
            }
            else if (["CommandedAngles", "RawEncoderErrorLimits", "RawVelocityLimits"].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                for(let i = Instruction$1.INSTRUCTION_ARG1; i <  instruction_array.length; i++){
                    let orig_arg = instruction_array_copy[i];
                    instruction_array_copy[i] = this.degrees_to_dexter_units(orig_arg, i + 1); // Math.round(orig_arg * 3600)
                }
                return instruction_array_copy
            }
            //dynamixel conversion
            else if (name == "EERoll"){ //J6 no actual conversion here, but this is a convenient place
                //to put the setting of robot.angles and is also the same fn where we convert
                // the degrees to dynamixel units of 0.20 degrees
                //val is in dynamixel units
                rob.angles[5] = this.dexter_units_to_degrees(first_arg, 6); //convert dynamixel units to degrees then shove that into rob.angles for use by subsequent relative move instructions
                return instruction_array
            }
            else if (name == "EESpan") { //J7
                rob.angles[6] = this.dexter_units_to_degrees(first_arg, 7);
                return instruction_array
            }
            //convert meters to microns
            else if ((name.length == 5) && name.startsWith("Link")){
                let instruction_array_copy = instruction_array.slice();
                let new_val = Math.round(first_arg / _um); //convert from meters to microns
                instruction_array_copy[Instruction$1.INSTRUCTION_ARG1] = new_val;
                return instruction_array_copy
            }
            else if (["CartesianSpeed", "CartesianSpeedStart", "CartesianSpeedEnd", "CartesianAcceleration",
                "CartesianStepSize", ].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                let new_val = Math.round(first_arg / _um); //convert from meters to microns
                instruction_array_copy[Instruction$1.INSTRUCTION_ARG1] = new_val;
                return instruction_array_copy
            }
            else { return instruction_array }
        }
        else if (oplet == "T") { //move_to_straight
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy[Instruction$1.INSTRUCTION_ARG0] =
                Math.round(instruction_array_copy[Instruction$1.INSTRUCTION_ARG0] / _um); //meters to microns
            instruction_array_copy[Instruction$1.INSTRUCTION_ARG1] =
                Math.round(instruction_array_copy[Instruction$1.INSTRUCTION_ARG1] / _um); //meters to microns
            instruction_array_copy[Instruction$1.INSTRUCTION_ARG2] =
                Math.round(instruction_array_copy[Instruction$1.INSTRUCTION_ARG2] / _um); //meters to microns
            instruction_array_copy[Instruction$1.INSTRUCTION_ARG11] =
                Math.round(instruction_array_copy[Instruction$1.INSTRUCTION_ARG11] * 3600); //degrees to arcseconds
            instruction_array_copy[Instruction$1.INSTRUCTION_ARG12] =
                Math.round(instruction_array_copy[Instruction$1.INSTRUCTION_ARG12] * 3600); //degrees to arcseconds
            return instruction_array_copy
        }
        else if (oplet == "z") { //sleep
            let instruction_array_copy = instruction_array.slice(); //instruction array contains dur in seconds, but Dexter expects microseconds
            instruction_array_copy[Instruction$1.INSTRUCTION_ARG0] =
                Math.round(instruction_array_copy[Instruction$1.INSTRUCTION_ARG0] * Socket.DEXTER_UNITS_PER_SECOND_FOR_SLEEP); //seconds to nanoseconds
            return instruction_array_copy
        }
        else { return instruction_array }
    }

    static send(robot_name, oplet_array_or_string){ //can't name a class method and instance method the same thing
        let rob = Robot$1[robot_name];
        let oplet_array_or_string_du = Socket.instruction_array_degrees_to_arcseconds_maybe(oplet_array_or_string, rob);
        let job_id = Instruction$1.extract_job_id(oplet_array_or_string);
        let job_instance = Job.job_id_to_job_instance(job_id);
        if(!job_instance){
            shouldnt("Socket.send passed: " + robot_name + " " + oplet_array_or_string +
                     "<br/>extracted job_id:" + job_id + " but no defined Job with that ID.");
        }
        //out(job_instance.name + " " + robot_name + " Socket.send passed oplet_array_or_string: " + oplet_array_or_string)

        const str =  Socket.oplet_array_or_string_to_string(oplet_array_or_string_du);
        if(Instruction$1.is_F_instruction_string(str)) {
            rob.waiting_for_flush_ack = true;
        }
        if(job_instance.keep_history) {
            job_instance.sent_instructions_strings.push(str);
        }
        const arr_buff = Socket.string_to_array_buffer(str);
        const sim_actual = Robot$1.get_simulate_actual(rob.simulate);
        if((sim_actual === true) || (sim_actual === "both")){
            let sim_inst = DexterSim$1.robot_name_to_dextersim_instance_map[robot_name];
            if(sim_inst) {
                setTimeout( function() { //eqiv to net_soc_inst.write(arr_buff) below.
                    DexterSim$1.send(robot_name, arr_buff);
                }, 1);}
            else {
                Socket.close(robot_name, true); //both are send args
                setTimeout(function(){
                    Socket.init(robot_name, job_instance, oplet_array_or_string);
                }, 100);
            }
        }
        if ((sim_actual === false) || (sim_actual === "both")) {
            let net_soc_inst = Socket.robot_name_to_soc_instance_map[robot_name];
            if(net_soc_inst && (net_soc_inst.readyState === "open")) {
                try {
                    //console.log("Socket.send about to send: " + str)
                    net_soc_inst.write(arr_buff); //if doesn't error, success and we're done with send
                    //console.log("Socket.send just sent:     " + str)
                    //this.stop_job_if_socket_dead(job_id, robot_name)
                    return
                }
                catch(err) {
                    console.log("Socket.send just after write in catch clause with err: " + err.message);
                    if (rob.resend_count && (rob.resend_count >= 4)) {  //give up retrying and error
                        rob.resend_count = 0;
                        job_instance.stop_for_reason("errored_from_dexter", "can't connect to Dexter");
                        //job_instance.color_job_button() //automatically done by job.prototype.finish
                        job_instance.set_up_next_do(0);  //necessary?
                        return
                    }
                    else { //keep trying
                        /*if(!rob.resend_count) {
                            rob.resend_count = 1
                        }
                        else { rob.resend_count += 1 }*/
                        Socket.close(robot_name, true);
                        let timeout_dur = Math.pow(10, rob.resend_count);
                        setTimeout(function(){
                            console.log("re-initing Socket to Dexter." + robot_name);
                            Socket.init(robot_name, job_instance, oplet_array_or_string);
                        }, timeout_dur);
                        return
                    }
                }
            }
            else { //maybe never hits. it only hits if there is no net_soc_inst in Socket.robot_name_to_soc_instance_map
                Socket.close(robot_name, true); //both are send args
                setTimeout(function(){
                    Socket.init(robot_name, job_instance, oplet_array_or_string);
                }, 100);
            }
        }
    } //end of send method
    /* apr 2019: sim calls on_receive now
    static on_receive_sim(robot_status_in_arcseconds, robot_name){ //robot_status_in_arcseconds might also be an ack_array, wbich doens't have any degrees, and won't be converted. or modified.
        let rob = Robot[robot_name]
        let sim_actual = Robot.get_simulate_actual(rob.simulate)
        if(sim_actual === true) { //don't include "both"
            Socket.convert_robot_status_to_degrees(robot_status_in_arcseconds) //modifies its input
            rob.robot_done_with_instruction(robot_status_in_arcseconds) //now robot_status_in_arcseconds is really in degrees
        }
        //else {} rob.simulate will be "both", so let the real Dexter supply the call to
        //rob.robot_done_with_instruction and the rs_status from Dexter, not the simulated one.
    }*/

    //called both from Dexter returning, and from Sim.
    //data should be a Buffer object. https://nodejs.org/api/buffer.html#buffer_buffer
    //payload_string_maybe is undefined when called from the robot,
    //and if called from sim and we have an "r" oplet, it is either a string (everything ok)
    //or a positive integer (1) when sim get file-not-found.
    //
    static on_receive(data, payload_string_maybe, dexter_instance){
        //data.length == 240 data is of type: Uint8Array, all values between 0 and 255 inclusive
        //console.log("Socket.on_receive passed data:        " + data)
        let robot_status;
        let oplet;
        if(Array.isArray(data)) {  //todo return from sim same data type as Dexter returns.   //a status array passed in from the simulator
            robot_status = data;
            oplet = robot_status[Dexter.INSTRUCTION_TYPE];
        }
        else { //a Uint8Array when called from the robot.
            let view1 = new Int32Array(data.buffer); //array_buff1.bytelength / 4); //weird google syntax for getting length of a array_buff1
            robot_status = [];
            for(var i = 0; i < view1.length; i++){
                var elt_int32 = view1[i];
                robot_status.push(elt_int32);
            }
            let opcode = robot_status[Dexter.INSTRUCTION_TYPE];
            oplet  = String.fromCharCode(opcode);
        }
        //console.log("Socket.on_receive passed DU robot status: " + robot_status)
        //the simulator automatically does this so we have to do it here in non-simulation
        //out("on_receive got back oplet of " + oplet)
        robot_status[Dexter.INSTRUCTION_TYPE] = oplet;
        if(oplet == "r"){ //Dexter.read_file
            if(typeof(payload_string_maybe) == "number") { //only can hit im sim.// should be 2 if it hits
                robot_status[Dexter.ERROR_CODE] = 0; //even though we got an error from file_not_found,
                //don't set the error in the robot status. Just let that error
                //be used in r_payload_grab_aux which passes it to got_content_hunk
                //which sets the user data to the error code and
                // read_file_instance.is_done = true
                //so the loop in read_file_instance terminates normally.
            }
            else if ((payload_string_maybe === undefined) && //real. not simulated
                     (robot_status[Dexter.ERROR_CODE] > 0)) { //got an error, probably file not found
                payload_string_maybe = robot_status[Dexter.ERROR_CODE];
                robot_status[Dexter.ERROR_CODE] = 0;
            }
            //now robot_status does NOT have an error code, but if there is an error,
            //payload_string_maybe is an int > 0
            //but if no error, payload_string_maybe is a string
            Socket.r_payload_grab(data, robot_status, payload_string_maybe);
        }
        else {
            Socket.convert_robot_status_to_degrees(robot_status);
        }

        //the below line became unnecessary, and too complex, too hieruasic once we
        //changed capturing the dexter_instance in the closure that is the wrapper
        //for the call to on_received, in Socket.init
        //let rob = this.find_dexter_instance_from_robot_status(robot_status) //= Dexter[robot_name]
        if (oplet === "F") {
            dexter_instance.waiting_for_flush_ack = false;
        }
        let job_id = robot_status[Dexter.JOB_ID];
        Job.job_id_to_job_instance(job_id);
        //out(job_instance.name + " " + rob.name + " bottom of Socket.on_receive with: " + robot_status)
        dexter_instance.robot_done_with_instruction(robot_status); //robot_status ERROR_CODE *might* be 1
    }

    //this is needed bacause we might have an instruction like Dexter.dexter2.move_all_joints()
    //the enclosing job might not have that dexter as its default robot,
    //or might not even have a Dexter instance as the Job robot at all.
    //so we want to first check the instruction to see if it has a robot.
    //if so. use it, if not, go for the default robot for the job and if that is an instance
    //of Dexter, use it, else error with shouldnt
    //uPDATE JUl 18, 2021
    //now unnecessary due to the Socket.init closure for on_receive capturiing the
    //dexter intstnace and passing it to on_receive,
    //BUT this code might come in handy some day
    /*
    static find_dexter_instance_from_robot_status(robot_status){
        let job_id       = robot_status[Dexter.JOB_ID]
        let job_instance = Job.job_id_to_job_instance(job_id)
        if(!job_instance){
            shouldnt("Socket.find_dexter_instance_from_robot_status passed: " + oplet_array_or_string +
                "<br/>extracted job_id:" + job_id + " but there is no defined Job with that ID.")
        }
        let instr_id     = robot_status[Dexter.INSTRUCTION_ID]
        let rob
        if(instr_id === -1) { //the initial g instruction, only sent when a Job has as its robot, a dexter
           rob = job_instance.robot
        }
        else {
            let instr = job_instance.do_list[instr_id]
            rob = instr.robot //this is the best we can do if there's a robot indicated in the instr
            if(!rob) {
                if(Array.isArray(instr)) {
                    let last_elt = last(instr)
                    if(last_elt instanceof Dexter){
                        rob = last_elt
                    }
                    else {
                        rob = job_instance.robot
                    }
                }
                else if(job_instance.robot instanceof Dexter) { //next best we can do
                    rob = job_instance.robot
                }
                else {
                    shouldnt("Socket.find_dexter_instance_from_robot_status 2 couldn't find robot from: " + robot_status +
                             "<br/>using Job.id: " + job_id + " Job.name: " + job_instance.name +
                             "<br/>instr id: " + instr_id + " instruction: " + instr)
                }
            }
        }
        return rob
    }*/

    static r_payload_grab(data, robot_status, payload_string_maybe) {
        if(payload_string_maybe === undefined) { //only in real, not in sim
            let payload_length = robot_status[Socket.PAYLOAD_LENGTH];
            let data_start = Socket.PAYLOAD_START;
            let data_end = data_start + payload_length;
            payload_string_maybe = data.slice(data_start, data_end).toString();
        }
        else if (payload_string_maybe instanceof Buffer) { //beware, sometimes payload_string_maybe is a buffer. This converts it to a string.
            payload_string_maybe = payload_string_maybe.toString();
        }
        //else { payload_string_maybe is normally a string, but could be an integer of > 0 if there's an error }
        Socket.r_payload_grab_aux(robot_status, payload_string_maybe);  //payload_string still might be an integer error code, ie 1 when file not found
    }

    //payload_string_maybe could be a string or an integer error code like 1 when no file found
    static r_payload_grab_aux(robot_status, payload_string_maybe){
        let job_id = robot_status[Dexter.JOB_ID];
        let ins_id = robot_status[Dexter.INSTRUCTION_ID];
        Instruction$1.Dexter.read_file.got_content_hunk(job_id, ins_id, payload_string_maybe);
    }

    static convert_robot_status_to_degrees(robot_status){
        let raw_status_mode = robot_status[Dexter.STATUS_MODE];
        //out("convert_robot_status_to_degrees got raw_status_mode of: " + raw_status_mode)
        if((raw_status_mode === null) || (raw_status_mode === 0) || (raw_status_mode === "0")){
            robot_status[Dexter.STATUS_MODE] = 0;
            if (robot_status.length == Dexter.robot_status_labels.length){
                robot_status[Dexter.J1_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J1_ANGLE], 1); //0.0002777777777777778 //this number === _arcsec
                robot_status[Dexter.J2_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J2_ANGLE], 2);
                robot_status[Dexter.J3_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J3_ANGLE], 3);
                robot_status[Dexter.J4_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J4_ANGLE], 4);
                robot_status[Dexter.J5_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J5_ANGLE], 5);

                robot_status[Dexter.J1_DELTA] = Socket.dexter_units_to_degrees(robot_status[Dexter.J1_DELTA], 1);
                robot_status[Dexter.J2_DELTA] = Socket.dexter_units_to_degrees(robot_status[Dexter.J2_DELTA], 2);
                robot_status[Dexter.J3_DELTA] = Socket.dexter_units_to_degrees(robot_status[Dexter.J3_DELTA], 3);
                robot_status[Dexter.J4_DELTA] *= 0.00001736111111111111;   //todo get the "S" interpolation values from Defaults.make_ins instead  ie robot_status[Dexter.J4_DELTA] *= _arcsec / the_make_int_number
                robot_status[Dexter.J5_DELTA] *= 0.00001736111111111111;   //for this one too.

                robot_status[Dexter.J1_PID_DELTA] = Socket.dexter_units_to_degrees(robot_status[Dexter.J1_PID_DELTA], 1);
                robot_status[Dexter.J2_PID_DELTA] = Socket.dexter_units_to_degrees(robot_status[Dexter.J2_PID_DELTA], 2);
                robot_status[Dexter.J3_PID_DELTA] = Socket.dexter_units_to_degrees(robot_status[Dexter.J3_PID_DELTA], 3);
                robot_status[Dexter.J4_PID_DELTA] *= 0.00001736111111111111;  //for this one too.
                robot_status[Dexter.J5_PID_DELTA] *= 0.00001736111111111111;  //for this one too.

                robot_status[Dexter.J1_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J1_MEASURED_ANGLE], 1);
                robot_status[Dexter.J2_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J2_MEASURED_ANGLE], 2);
                robot_status[Dexter.J3_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J3_MEASURED_ANGLE], 3);
                robot_status[Dexter.J4_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J4_MEASURED_ANGLE], 4);
                robot_status[Dexter.J5_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J5_MEASURED_ANGLE], 5);
                robot_status[Dexter.J6_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J6_MEASURED_ANGLE], 6);
                robot_status[Dexter.J7_MEASURED_ANGLE] = Socket.dexter_units_to_degrees(robot_status[Dexter.J7_MEASURED_ANGLE], 7);

                robot_status[Dexter.J1_SENT] = Socket.dexter_units_to_degrees(robot_status[Dexter.J1_SENT], 1); //0.0002777777777777778 //this number === _arcsec
                robot_status[Dexter.J2_SENT] = Socket.dexter_units_to_degrees(robot_status[Dexter.J2_SENT], 2);
                robot_status[Dexter.J3_SENT] = Socket.dexter_units_to_degrees(robot_status[Dexter.J3_SENT], 3);
                robot_status[Dexter.J4_SENT] = Socket.dexter_units_to_degrees(robot_status[Dexter.J4_SENT], 4);
                robot_status[Dexter.J5_SENT] = Socket.dexter_units_to_degrees(robot_status[Dexter.J5_SENT], 5);

            }
        }
        //else not g0 so no conversion
    }

    static close(robot_name, force_close=false){
        let rob = Robot$1[robot_name];
        const sim_actual = Robot$1.get_simulate_actual(rob.simulate);
        if ((sim_actual === false) || (sim_actual === "both")){
           if((rob.active_jobs_using_this_robot().length == 0) || force_close){
                const net_soc_inst = Socket.robot_name_to_soc_instance_map[robot_name];
                if(net_soc_inst){
                    net_soc_inst.removeAllListeners();
                    net_soc_inst.destroy();
                    delete Socket.robot_name_to_soc_instance_map[robot_name];
                }
            }
        }
    }

    static prepare_for_re_init(robot_name){
            let rob = Robot$1[robot_name];
            const sim_actual = Robot$1.get_simulate_actual(rob.simulate);
            if ((sim_actual === false) || (sim_actual === "both")){
                 const net_soc_inst = Socket.robot_name_to_soc_instance_map[robot_name];
                 if(net_soc_inst){
                     net_soc_inst.removeAllListeners();
                     net_soc_inst.destroy();
                     delete Socket.robot_name_to_soc_instance_map[robot_name];
                 }
            }
    }

    /*this causes DexRun to crash. Ultimately we need to rewrite FPGA code to get this functionality.
    static empty_instruction_queue_now(robot_name){
        let rob = Robot[robot_name]
        const sim_actual = Robot.get_simulate_actual(rob.simulate)
        if ((sim_actual === true) || (sim_actual === "both")){ //simulation
            DexterSim.empty_instruction_queue_now(robot_name)
        }
        if ((sim_actual === false) || (sim_actual == "both")){
            const soc_inst = Socket.robot_name_to_soc_instance_map[robot_name]
            if(soc_inst && !soc_inst.destroyed){
                const oplet_array = make_ins("E") //don't expect to hear anything back from this.
                const arr_buff = this.oplet_array_or_string_to_array_buffer(oplet_array)
                try { soc_inst.write(arr_buff) } //band-aid for not knowing what's in Dexter's queue.
                                              //if the queue is empty we shouldn't do.
                                              //we should empty the queue whenever DDE detects an error,
                                              //but before closing the socket.
                catch(err) {
                    warning("Writing to the robot: " + robot_name +
                            " while emptying its queue failed, but that may be ok.")
                }
            }
        }
    }*/
};

//Socket.robot_is_waiting_for_reply = {} //robot_name to boolean map.
//Socket.max_dur_to_wait_for_reply_ms = 200

Socket$1.connect_timeout_seconds = 1;
Socket$1.PAYLOAD_START = 7 * 4; //7th integer array index, times 4 bytes per integer
Socket$1.PAYLOAD_LENGTH = 6; //6th integer array index

////Socket.resend_count = null

Socket$1.robot_name_to_soc_instance_map = {};
Socket$1.DEGREES_PER_DYNAMIXEL_320_UNIT = 0.29;   //range of motion sent is 0 to 1023
Socket$1.DEGREES_PER_DYNAMIXEL_430_UNIT = 360 / 4096;
Socket$1.J6_OFFSET_SERVO_UNITS = 512;
Socket$1.DEXTER_UNITS_PER_SECOND_FOR_SLEEP = 1000000; //ie microseconds

/*dexter0.joints = []
             joint_instances
                 motor_instance of a 2, 320, 430 or stepper
                        speed=30

                 min=-360
                 max=360
                 gear_ratio=1

                 convert_deg_to_dexter_units()
                 init() // ie like reboot_servo
                 set_indicator(val)   //ie turn on LED for J6
 */



//Socket.on_receive_added = false

/* Created by Fry on 3/29/16. */


var Robot$1 = class Robot {
    constructor (args){
       if(!is_string_an_identifier(args.name)) {
           dde_error('You have attempted to make a new Robot with an invalid name of: "' + args.name +
                     '".<br/>Robot names should start with a letter and be followed only by letters, digits, or underscores.');
       }
    }
    /*static robot_names(){
        var result = []
        for(var name in Robot){
            if (Robot[name] instanceof Robot){
                result.push(name)
            }
        }
        return result
    }
    */
    static all_robots(){
        let result = [];
        for(let robot_name of Robot.all_names) { result.push(Robot[robot_name]); }
        return result
    }
    //superclass can be a string name like "Dexter" or "Serial", OR it can be the class object.
    //returns true or false
    static is_valid_robot_class_name(robot_class_name) {
        return ["Brain", "Dexter", "Human", "Serial"].includes(robot_class_name)
    }
    static robot_instances_exist_for_running_instructions_of_superclass(superclass){
        let rob_class = ((typeof(superclass) == "string") ? value_of_path$1(superclass) : superclass);
        if ([Robot, Human].includes(rob_class)) { return true } //Robot and Human instructions can be run on any class of robot
        else { return rob_class.all_names.length > 0 }
    }

    //put the new item on the end, even if you have to remove it from the middle,
    //because we want the latest on the end for default_robot_name
    static set_robot_name(name, robot_instance){
        Robot[name] = robot_instance;
        //ensure name is on end of all_names
        let i = Robot.all_names.indexOf(name);
        if (i != -1){ Robot.all_names.splice(i, 1); }
        Robot.all_names.push(name);
        //for Make Instance dialog
        if ((i == -1) &&
             window["add_dexter_to_dexter_default_menu"] &&
            (robot_instance instanceof Dexter$1)) {
            add_dexter_to_dexter_default_menu(robot_instance);
        }
    }

    static get_simulate_actual(simulate_val){
        if      (simulate_val === true)   { return true   }
        else if (simulate_val === false)  { return false  }
        else if (simulate_val === "both") { return "both" }
        else if (simulate_val === null)   { return persistent_get$1("default_dexter_simulate") }
        else { shouldnt$1("get_simulate_actual passed illegal value: " + simulate_val); }
    }

    static simulate_or_both_selected(){
        if(persistent_get$1("default_dexter_simulate")) { return true} //persistent_get call returns true or "both"
        else { return false } //persistent_get call returns false
    }

    to_path(){ return "Robot." + this.name }

    jobs_using_this_robot(){
        let result = [];
        for (let j of Job$1.all_jobs()){
            if (j.robot === this){ result.push(j); }
        }
        return result
    }

    active_jobs_using_this_robot(){
        let result = [];
        for (let j of Job$1.all_jobs()){
            if ((j.robot === this) &&
                 j.is_active()){
                result.push(j);
            }
        }
        return result
    }

    //this is shadowed by Dexter, but all other robots are never busy.
    is_busy(){ return false }

    add_to_busy_job_array(a_job){ } //no-op. shadowed by Dexter.

    remove_from_busy_job_array(a_job){} //no-op. shadowed by Dexter.

    is_initialized(){ return true }

    //pretty weak. Only will work as long as Robots don't overlap in oplets
    //used in robot_history_status
    static instruction_type_to_function_name(ins_type){
        let fn_name = Dexter$1.instruction_type_to_function_name_map[ins_type];
        if (fn_name) {return "Dexter." + fn_name}
        fn_name = Serial$1.instruction_type_to_function_name_map[ins_type];
        if (fn_name) {return "Serial." + fn_name}
        return null
    }

    static is_oplet(oplet, known_oplet=false){
        if((typeof(oplet) === "string") && (oplet.length == 1)){
            if(known_oplet){
                if(Dexter$1.instruction_type_to_function_name_map[oplet]) {
                    return true
                }
                else { return false }
            }
            else { return true }
        }
        else { return false }
    }

    //Control Instructions
    static break(){ //stop a Control.loop
        return new Instruction$1.break()
    }
    static continue(){ //start next iteration of a Control.loop
        return new Instruction$1.continue()
    }
    static debugger(){
        return new Instruction$1.debugger()
    }
    static step_instructions(){
        return new Instruction$1.step_instructions()
    }
    static error(reason="Job stopped due to executing a Control.error instruction.",
                 perform_when_stopped=true){ //declare that an error happened. This will cause the job to stop.
        return new Instruction$1.error(reason, perform_when_stopped)
    }

    static go_to(instruction_location){
        return new Instruction$1.go_to(instruction_location)
    }

    static grab_robot_status(user_data_variable = "grabbed_robot_status",
                             starting_index = Serial$1.DATA0,
                             ending_index=null){
        return new Instruction$1.grab_robot_status(user_data_variable,
                                                         starting_index,
                                                         ending_index)
    }
    //very useful for grabbing rs from a preceeding instr in the do_list of my_serial.string_instruction("foo")
    grab_robot_status(user_data_variable = "grabbed_robot_status",
                      starting_index = Serial$1.DATA0,
                      ending_index=null){
        return new Instruction$1.grab_robot_status(user_data_variable,
                                                         starting_index,
                                                         ending_index,
                                                         this)
    }

    static if_any_errors(job_names=[], instruction_if_error=null){
        return new Instruction$1.if_any_errors(job_names, instruction_if_error)
    }
    static label(name="my_label"){
        return new Instruction$1.label(name)
    }

    static loop(boolean_int_array_fn=2, body_fn){
        return new Instruction$1.loop(boolean_int_array_fn, body_fn)
    }

    static out(val="", color="black", temp=false, print_job_info=false){
        return new Instruction$1.out(val, color, temp, print_job_info)
    }

    /* Warning the below is at least somewhat obsolete as of new arch Aug 25, 2016
    The workflow for sent_to_job.
     job.sent_to_job calls Instruction.Contol.sent_to_job as for all control instructions.
     That creates an instance to sent_to_job and sticks it on the source_job do_list.
     When that instruction is run, its do_item calls
     to_job_instance.destination_do_send_to_job(this) which sticks the
     do_list_item onto the destination job's do list,
     and, if the source job is going to wait for the instruction to be done,
     an additonal control instruction of type
     Instruction.destination_send_to_job_is_done is stuck on the do_list
     of the desitination job.
     Then the destination job runs those items
     and when the instruction destination_send_to_job_is_done is run,
     it calls the fns to get the values for the vars to set in from_instance,
     and calls from_job_instance.send_to_job_receive_done(this.params)
     passing those values to the from_instance.
     Then send_to_job_receive_done sets the user_data vars in the from job.
     */

    static send_to_job({do_list_item    = null,
                        where_to_insert = null,
                        wait_until_done = false, //if true, a_job.send_to_job_receive_done will be called when the do_list_item is done by the to_job
                        start           = false,
                        unsuspend       = false,
                        status_variable_name = null} = {}){
        return new Instruction$1.send_to_job(arguments[0])
    }

    //rarely used, but can be used to customize a job with additional do_list items at the start.
    static sent_from_job ({do_list_item        = null, //can be null, a single instruction, or an array of instructions
                           from_job_name       = null,
                           from_instruction_id = null,
                           where_to_insert     = "next_top_level", //just for debugging
                           wait_until_done     = false} = {}){
        return new Instruction$1.sent_from_job(arguments[0])
    }

    static set_inter_do_item_dur(dur, instructions_array){
        return new Instruction$1.set_inter_do_item_dur({dur: dur, instructions_array: instructions_array})
    }

    static start_job(job_name, start_options={}, if_started="ignore", wait_until_job_done=false){
        return new Instruction$1.start_job(job_name, start_options, if_started, wait_until_job_done)
    }

    static stop_job(instruction_location, reason, perform_when_stopped = true){
        return new Instruction$1.stop_job(instruction_location, reason, perform_when_stopped)
    }

    static include_job(job_name, start_loc=null, end_loc=null){
        return new Instruction$1.include_job(job_name, start_loc, end_loc)
    }

    static suspend(job_name = null, reason = ""){
        return new Instruction$1.suspend(job_name, reason)
    }
    //unsuspend is also instance meth on Job and should be!
    static unsuspend(job_name = "required", stop_reason=false){
        return new Instruction$1.unsuspend(job_name, stop_reason)
    }

    static sync_point(name, job_names=[]){
        return new Instruction$1.sync_point(name, job_names)
    }

    static wait_until(fn_date_dur=1){
        return new Instruction$1.wait_until(fn_date_dur)
    }

    //arg order is a bit odd because the headers come after the response_variable_name.
    //but the response_variable_name is takes the place of the primary callback,
    //and that's the order I have for get_page (headers on end) which very often
    //default to undefined.
    static get_page(url_or_options, response_variable_name="http_response"){
        if(url_or_options === undefined){
            dde_error("Control.get_page called with no <b>url_or_options</b> argument<br/>" +
                      "which is typically the string of a url.");
        }
        return new Instruction$1.Get_page(url_or_options, response_variable_name)
    }
    //static play(note_or_phrase){
    //    return new Instruction.play_notes(note_or_phrase)
    //}
    close_robot(){ //overridden in Serial and Dexter
    }

    static save_picture({canvas_id_or_mat="canvas_id",
                         path="my_pic.png"}={}) {
        return new Instruction$1.save_picture({canvas_id_or_mat: canvas_id_or_mat,
                                             path: path})
    }

    static show_picture({canvas_id="canvas_id", //string of a canvas_id or canvasId dom elt
                            content=null, //mat or file_path
                            title=undefined,
                            x=200, y=40, width=320, height=240,
                            rect_to_draw=null}={}) {
        return new Instruction$1.show_picture({canvas_id: canvas_id, //string of a canvas_id or canvas dom elt
                                                     content: content, //mat or file_path
                                                     title: title,
                                                     x: x,
                                                     y: y,
                                                     width: width,
                                                     height: height,
                                                     rect_to_draw: rect_to_draw})
    }

    static show_video({video_id="video_id", //string of a video_id or video dom elt
                        content="webcam", //"webcam" or file_path
                        title=undefined,
                        x=200, y=40, width=320, height=240,
                        play=true,
                        visible=true}={}) {
        return new Instruction$1.show_video({video_id: video_id, //string of a video_id or video dom elt
                                                    content: content, //mat or file_path
                                                    title: title,
                                                    x: x,
                                                    y: y,
                                                    width: width,
                                                    height: height,
                                                    play: play,
                                                    visible: visible})
    }
    static take_picture({video_id="video_id", //string of a video_id or video dom elt
                         camera_id=undefined,
                         width=320, height=240,
                         callback=Picture.show_picture_of_mat}={}) {
        return new Instruction$1.take_picture({video_id: video_id, //string of a video_id or video dom elt
                                             camera_id: camera_id,
                                             width: width,
                                             height: height,
                                             callback: callback})
    }
};
Robot$1.all_names = [];

Robot$1.robot_status_labels = []; //overridden by Serial and Dexter, needed by Show robot status history button

/*simulate vs non-simulate makes no difference so set simulate to false */
var Brain = class Brain extends Robot$1 { /*no associated hardware */
    constructor({name = "b1"}={}){
        super(arguments[0]);
        this.name = name;
        Robot$1.set_robot_name(this.name, this);
        let i = Brain.all_names.indexOf(this.name);
        if (i != -1) {  Brain.all_names.splice(i, 1); }
        Brain.all_names.push(this.name); //ensures the last name on the list is the latest with no redundancy
        Brain.last_robot = this;
        this.simulate = false;
        //the_job //a Robot can have at most 1 current job associated with it.
    }
    toString(){ return "Brain." + this.name }

    stringify(){
        return "Brain: <i>name</i>: " + this.name
    }
    start(job_instance) {
        job_instance.set_status_code("running");
        job_instance.set_up_next_do(0);
    }
    finish_job() {}

    send(inst_array_with_inst_id) {
        let job_id = inst_array_with_inst_id[Instruction$1.JOB_ID];
        var job_instance = Job$1.job_id_to_job_instance(job_id);
        var reason = "An instruction intended for a physical robot: " + inst_array_with_inst_id + "<br/>was sent to a Robot.Brain: " + this.name + ",<br/> which has no physical robot.";
        job_instance.stop_for_reason("errored", reason);
        out(reason, "red");
        throw new Error("send called on Robot.Brain, which has no physical robot.")
    }

    static eval_python(python_source, user_data_variable="python_value"){
        return [
            function() {
              let the_job = this;
              the_job.user_data[user_data_variable + "_python_source"] = python_source;
              Py.eval(python_source,
                function(json_obj){
                    the_job.user_data[user_data_variable] = json_obj.result;
                });
            },
            Control.wait_until(function() {
                      //out("this.user_data." + user_data_variable = ": " + this.user_data.[user_data_variable])
                      return this.user_data[user_data_variable] !== undefined})
            ]
    }
};

Brain.all_names = [];

var Human = class Human extends Brain { /*no associated hardware */
    constructor({name = "h1"}={}){
        super(arguments[0]);
        this.name = name;
        Robot$1.set_robot_name(this.name, this);
        let i = Human.all_names.indexOf(this.name);
        if (i != -1) {  Human.all_names.splice(i, 1); }
        Human.all_names.push(this.name); //ensures the last name on the list is the latest with no redundancy
        Human.last_robot = this;
        this.simulate = false;
        //the_job //a Robot can have at most 1 current job associated with it.
    }
    toString(){ return "Human." + this.name }

    stringify(){
        return "Human: <i>name</i>: " + this.name
    }
    start(job_instance) {
        job_instance.set_status_code("running");
        job_instance.set_up_next_do(0);
    }
    finish_job() {}
    send(inst_array_with_inst_id) {
        let job_id = inst_array_with_inst_id[Instruction$1.JOB_ID];
        var job_instance = Job$1.job_id_to_job_instance(job_id);
        var reason = "An instruction intended for a physical robot: " + inst_array_with_inst_id + "<br/>was sent to a Robot.Human: " + this.name + ",<br/> which has no physical robot.";
        job_instance.stop_for_reason("errored", reason);
        out(reason, "red");
        throw new Error("send called on Robot.Human, which has no physical robot.")
    }

    //the human instructions
    /*
    static recognize_speech ({title="Recognize Speech", prompt="",
                             only_once=true, click_to_talk=true,
                             width=430, height=270, x=400, y=200,
                             background_color="rgb(238, 238, 238)",
                             phrase_callback=recognize_speech_default_phrase_callback,
                             finish_callback=null,
                             finish_phrase="finish", //unused if only_once=true
                             user_data_variable_name="recognized_speech"
                             } = {}){ //
        let args = {title: title, prompt: prompt, only_once:only_once, click_to_talk: click_to_talk,
                    width:width, height: height, x: x, y: y,
                    background_color: background_color,  phrase_callback:  phrase_callback,
                    //finish_callback=null,   //unused if only_once=true does not have calLback on purpose
                    finish_phrase:"finish",
                    finish_callback: finish_callback,
                    user_data_variable_name: user_data_variable_name}
        return new Instruction.human_recognize_speech(args)
    }*/

    static speak ({speak_data = "hello", volume = 1.0, rate = 1.0, pitch = 1.0,
                     lang = "en_US", voice = 0, wait = true} = {}){ //does not have calLback on purpose
        if (arguments[0].length > 0){ speak_data = arguments[0]; }
        let args = {speak_data: speak_data, volume: volume, rate: rate, pitch: pitch,
                    lang: lang, voice: voice, wait: wait};
        return new Instruction$1.human_speak(args)
    }


    static task({task = "", dependent_job_names=[],
                 title, x=200, y=200, width=400, height=400,
                 background_color = "rgb(238, 238, 238)",
                 add_stop_button=true} = {}){
        return new Instruction$1.human_task(arguments[0])
    }

    static enter_choice({
        task = "",
        choices=[["Yes", true], ["No", false]],
        show_choices_as_buttons=false,
        one_button_per_line=false,
        user_data_variable_name="a_choice",
        dependent_job_names=[],
        add_stop_button=true,
        title,
        x=200, y=200, width=400, height=400,
        background_color = "rgb(238, 238, 238)"} = {}){
        return new Instruction$1.human_enter_choice(arguments[0])
    }

    static enter_filepath({task = "",
                           user_data_variable_name="a_filepath",
                           initial_value="",
                           add_stop_button = true,
                           dependent_job_names=[],
                           title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"} = {}){
        return new Instruction$1.human_enter_filepath(arguments[0])
    }

    static enter_instruction({task = "Enter a next instruction for this Job.",
        instruction_type = "Dexter.move_all_joints",
        instruction_args = "5000, 5000, 5000, 5000, 5000",
        add_stop_button=true,
        dependent_job_names = [],
        title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}){
        return new Instruction$1.human_enter_instruction(arguments[0])
    }

    static enter_number({task="",
        user_data_variable_name="a_number",
        initial_value=0,
        min=0,
        max=100,
        step=1,
        add_stop_button = true,
        dependent_job_names=[],
        title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}) {
        return new Instruction$1.human_enter_number(arguments[0])
    }

    static enter_position({task="Position Dexter&apos;s end effector<br/>to the position that you want to record,<br/>and click <b>Continue Job</b>.",
                           user_data_variable_name="a_position",
                           add_stop_button = true,
                           dependent_job_names=[],
                           title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}) {
        return [Dexter$1.empty_instruction_queue,
               Dexter$1.set_follow_me,
               new Instruction$1.human_enter_position(arguments[0])
              ]
    }

    static enter_text({task="",
        user_data_variable_name="a_text",
        add_stop_button = true,
        initial_value="OK",
        line_count=1, //if 1, makes an input type=text. If > 1 makes a resizeable text area.
        dependent_job_names=[],
        title,
        close_same_titled_windows = false,
        x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}){
        return new Instruction$1.human_enter_text(arguments[0])
    }

    static notify({task="",
        window=true,
        output_pane=true,
        beep_count=0,
        speak=false,
        add_stop_button=true,
        dependent_job_names=[],
        title,
        close_same_titled_windows = false,
        x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"
    }={}){
        return new Instruction$1.human_notify(arguments[0])
    }
    static show_window({content=`<input type="submit" value="Done"/>`,
                        title="DDE Information",
                        x=200, y=200, width=400, height=400,
                        background_color = "rgb(238, 238, 238)",
                        is_modal = false,
                        show_close_button = true,
                        show_collapse_button = true,
                        trim_strings = true,
                        add_stop_button=true,
                        callback = window.show_window_values,
                        user_data_variable_name="show_window_vals",
                        dependent_job_names=[]
    }={}){
        return new Instruction$1.human_show_window({
            content: content,
            title: title,
            x: x, y: y, width: width, height: height,
            background_color:        background_color,
            is_modal:                is_modal,
            show_close_button:       show_close_button,
            show_collapse_button:    show_collapse_button,
            trim_strings:            trim_strings,
            add_stop_button:         add_stop_button,
            callback:                callback,
            user_data_variable_name: user_data_variable_name,
            dependent_job_names:     dependent_job_names
    })
    }
};

Human.all_names = [];

var Serial$1 = class Serial extends Robot$1 {
    constructor({name = "s1", simulate = null, //get sim val from Jobs menu item check box.
                 sim_fun = return_first_arg, path = "required", connect_options={},
                 capture_n_items = 1, item_delimiter="\n", trim_whitespace=true,
                 parse_items = true, capture_extras = "error", /*"ignore", "capture", "error"*/
                 instruction_callback = Job$1.prototype.set_up_next_do }={}){
        super(arguments[0]);
        let keyword_args = {name: name, simulate: simulate, sim_fun: sim_fun, path: path, connect_options: connect_options,
                            capture_n_items: capture_n_items, item_delimiter: item_delimiter, trim_whitespace: trim_whitespace,
                            parse_items: parse_items, capture_extras: capture_extras,
                            instruction_callback: instruction_callback};
        this.make_new_robot_1(keyword_args);
        let old_same_named_robot = Robot$1[name];
        let old_same_path_robot  = Serial.get_robot_with_path(path);
        if (old_same_named_robot){
            if (old_same_named_robot.active_jobs_using_this_robot().length > 0){
                if(Serial.robots_equivalent(old_same_named_robot, this)){
                    warning("There's already a robot with the name: " + name +
                            ",<br/>that is a serial robot that has an active job " +
                            "<br/>so that's being used instead of a new Robot.Serial instance.<br/>" +
                            "Stop a job by clicking on its button in the Output pane's header.");
                    return old_same_named_robot
                }
                else { //same name, active jobs, different robot characteristics
                    dde_error("Attempt to create Robot.Serial with name: " + name +
                              "<br/>but there is already a robot with that name with different properties " +
                              "that is active.<br/>" +
                              "Stop a job by clicking on its button in the Output pane's header."
                              );
                }
            }
            else { //same name but no active jobs
                old_same_named_robot.close_robot();
                return this.make_new_robot_2()
            }
        }
        else if(old_same_path_robot) {
            if (old_same_path_robot.active_jobs_using_this_robot().length > 0){
                dde_error("There's already a robot named: " +  old_same_path_robot.name +
                        " that has an active job.");
            }
            else {
                old_same_path_robot.close_robot();
                return this.make_new_robot_2()
            }
        }
        else { //no same named or same pathed robot
            return this.make_new_robot_2()
        }
    }
    toString(){ return "Serial." + this.name }

    make_new_robot_1(keyword_args){
        this.name                  = keyword_args.name;
        this.path                  = keyword_args.path;
        this.connect_options       = keyword_args.connect_options;
        this.capture_n_items       = keyword_args.capture_n_items;
        this.item_delimiter        = keyword_args.item_delimiter;
        this.trim_whitespace       = keyword_args.trim_whitespace;
        this.parse_items           = keyword_args.parse_items;
        this.capture_extras        = keyword_args.capture_extras;
        this.simulate              = keyword_args.simulate;
        this.sim_fun               = keyword_args.sim_fun;
        this.instruction_callback  = keyword_args.instruction_callback;
    }
    make_new_robot_2(){
        this.is_connected          = false;
        this.connecting            = false;
        this.robot_status          = null;
        Robot$1.set_robot_name(this.name, this);
        let i = Serial.all_names.indexOf(this.name);
        if (i != -1) {  Serial.all_names.splice(i, 1); }
        Serial.all_names.push(this.name); //ensures the last name on the list is the latest with no redundancy
        Serial.last_robot = this;
        //if (this.simulate){
        //    let callback_number = cbr.store_callback(this.sim_fun)
        //    this.sim_fun_number  = callback_number
        //}
        return this
    }

    static robots_equivalent(rob1, rob2){
        if (rob1.constructor != rob2.constructor)          { return false }
        if (rob1.name            != rob2.name)             { return false }
        if (rob1.simulate        != rob2.simulate)         { return false }
        if (rob1.path            != rob2.path)             { return false }
        if (!similar(rob1.connect_options, rob2.connect_options))  { return false }
        if (rob1.capture_n_items != rob2.capture_n_items)  { return false }
        if (rob1.item_delimiter  != rob2.item_delimiter)   { return false }
        if (rob1.trim_whitespace != rob2.trim_whitespace)  { return false }
        if (rob1.parse_items     != rob2.parse_items)      { return false }
        if (rob1.capture_extras  != rob2.capture_extras)   { return false }
        if (!similar(rob1.instruction_callback, rob2.instruction_callback)) { return false }
        if (!similar(rob1.sim_fun, rob2.sim_fun))            { return false }
        return true
    }

    static get_robot_with_path(path){
        for(let robot_name of Serial.all_names){
            let rob = Robot$1[robot_name];
            if (rob.path == path) { return rob} //there should be at most 1
        }
        return null
    }

    static get_job_with_robot_path(path){
        for(let job_name of Job$1.all_names){
            let job_instance = Job$1[job_name];
            if (job_instance.robot.path == path) { return job_instance} //there should be at most 1
        }
        return null
    }

    is_initialized(){ return this.is_connected }

    start(job_instance) { //fill in initial robot_status
        if (this.is_initialized()) {
            //unlike the other set_a_robot_instance_socket_id methods, we must pass job_instance
            //as a 2nd arg.
            Serial.set_a_robot_instance_socket_id(this.path, job_instance); //we don't now actually use socket_id outside of serial.js
        }
        else {
            serial_connect(this.path, this.connect_options, this.simulate, this.capture_n_items, this.item_delimiter, this.trim_whitespace, this.parse_items, this.capture_extras, job_instance);
        }
    }

    init(job_instance){
            this.connecting = true;
            serial_connect(this.path, this.connect_options, this.simulate, this.capture_n_items, this.item_delimiter, this.trim_whitespace, this.parse_items, this.capture_extras, job_instance);
        /*serial_init_one_info_map_item(this.path,
                                        this.options,
                                        this.simulate,
                                        this.capture_n_items,
                                        this.item_delimiter,
                                        this.trim_whitespace,
                                        this.parse_items,
                                        this.capture_extras)*/
        //this.is_connected = true //do this only in set_a_robot_instance_socket_id
    }

    ///called from Serial.start
    static set_a_robot_instance_socket_id(path, job_instance){ //do I really need the socket_id of a serial?
        let rob          = Serial.get_robot_with_path(path);
        //rob.socket_id    = socket_id
        rob.connecting   = false; //connection and is_connected will never both be true
        rob.is_connected = true;
        out("Connected to serial port at: " + rob.path, undefined, true);
        //let job_instance = Serial.get_job_with_robot_path(path) //beware, this means only 1 job can use this robot!
        if(job_instance) {
            if (job_instance.status_code === "starting") {
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(0); //we don't want to increment because PC is at 0, so we just want to do the next instruction, ie 0.
            }
            //before setting it should be "starting"
            else if (job_instance.status_code === "running") {
                rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do() //initial pc value is 0.
            }
        }
    }

    send(ins_array){
        Robot$1.get_simulate_actual(this.simulate);
        let job_id       = ins_array[Serial.JOB_ID];
        let job_instance = Job$1.job_id_to_job_instance(job_id);
        if (this.connecting) {
            job_instance.set_up_next_do(0);
            out("Connecting to serial port at: " + this.path, undefined, true);
        }
        else if (!this.is_connected){
            //this.start(job_instance)
            out("Initializing serial port at: " + this.path, undefined, true);
            this.init(job_instance);
            job_instance.set_up_next_do(0);
        }
        else if (this.is_connected) { // || (sim_actual === true) || (sim_actual === "both"))  {
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter; //we don't want to continue the job until this instr is done.
            serial_send(ins_array, this.path, this.simulate, this.sim_fun); //ok time to finally run the instruction!
        }
        else {
            const job_inst = Instruction$1.job_of_instruction_array(ins_array);
            job_inst.stop_for_reason("errored",
                                     "Series Robot: " + this.name +
                                     " was sent an instruction to execute on path: " + this.path +
                                     " but this robot is not connected");
        }
    }

    perform_instruction_callback(job_instance){
        if (this.instruction_callback) { this.instruction_callback.call(job_instance); }
    }

    robot_done_with_instruction(robot_status){ //called from UI sockets
        let stop_time    = Date.now(); //the DDE stop time for the instruction, NOT Dexter's stop time for the rs.
        let job_id       = robot_status[Serial.JOB_ID];
        let job_instance = Job$1.job_id_to_job_instance(job_id);
        if (job_instance == null){
            job_instance.stop_for_reason("errored",
                      "Serial.robot_done_with_instruction passed job_id: " + job_id +
                      " but couldn't find a Job instance with that job_id.");

        }
        robot_status[Serial.INSTRUCTION_TYPE];
        let ins_id = robot_status[Serial.INSTRUCTION_ID]; //-1 means the initiating status get, before the first od_list instruction
        //let ins = ((ins_id >= 0) ? job_instance.do_list[ins_id] : null)
        let rob = this;
        //if (ins && ins.robot) { rob = ins.robot } //used when instruction src code has a subject of a robot isntance
       // else                  { rob = job_instance.robot } //get the default robot for the job
        //let op_let = String.fromCharCode(op_let_number)
        job_instance.record_sent_instruction_stop_time(ins_id, stop_time);
        if (!rob.is_connected) ; //ignore any residual stuff coming back from Serial robot
        //we don't want to change robot_status for instance because that will confuse
        //debugging in the case that we've had an error and want to close.
        //on the other hand, we want accurate info. Hmm, maybe the "residual" is
        //only comming for simulation and not from read dexter.
        //else if (ins_id == -1) {}
        else if (!(Array.isArray(robot_status))) {
            job_instance.stop_for_reason("errored",
                              "Serial.robot_done_with_instruction received a robot_status array: " +
                               robot_status + " that is not an array.");
            if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
            }
            rob.perform_instruction_callback(job_instance);
            return
        }
        else if (robot_status.length < Serial.DATA0){
            job_instance.stop_for_reason("errored",
                "Serial.robot_done_with_instruction received a robot_status array: " +
                robot_status + "<br/> of length: " + robot_status.length +
                " that is less than the : " + (Serial.DATA0 - 1) + " required.<br/>" + stringify_value$1(robot_status));
            if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
            }
            rob.perform_instruction_callback(job_instance);
            return
        }
        else {
            //job_instance.highest_completed_instruction_id = ins_id //now always done by set_up_next_do
            //job_instance.robot_status = robot_status
            rob.robot_status          = robot_status; //thus rob.robot_status always has the latest rs we got from Dexter.
            if (job_instance.keep_history){
                job_instance.rs_history.push(robot_status);
            }
            var error_code = robot_status[Serial.ERROR_CODE];
            if (error_code != 0){ //we've got an error
                job_instance.stop_for_reason("errored", "Robot status got error: " + error_code);
                if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                    job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
                }
                rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do()
            }
            else { //the normal, no error, not initial case
                if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                    job_instance.wait_until_instruction_id_has_run = null;
                    if (ins_id == job_instance.program_counter) {
                        rob.perform_instruction_callback(job_instance);// job_instance.set_up_next_do() //note before doing this, pc might be on last do_list item.
                        //but that's ok. increment pc and call do_next_item.
                    }
                    else {
                        shouldnt$1("In job: " + job_instance.name +
                            " \n robot_done_with_instruction got ins_id: " + ins_id +
                            " \n which matched wait_until_instruction_id_has_run " +
                            " \n but the PC wasn't the same. Its: "  + job_instance.program_counter);
                    }
                }
                else { //instr coming back is not a wait for,
                    // so its just a non-last instr in a group, so we shouldn't call do_next_item for it
                    //and don't even set robot_status from it. May 2016 decided to set robot status
                    //and history ... see above. status and history should be consistent
                    //but still status can get into a race condition with user code so
                    //am not fond of setting it. ask kent.
                    rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do() //calling this is mostly a no-op, because
                    //job_instance.wait_until_instruction_id_has_run should be set to
                    //something higher than this instr coming back.
                    //BUT in case the user has stopped the job or another job does so,
                    //then calling do_next_item here would actually stop the job.
                    //so this call to do_next_item will at most get down to the
                    //this.wait_until_instruction_id_has_run clause but never further.
                }
            }
        }
    }

    close_robot(){
        serial_disconnect(this.path);
        this.is_connected = false;
    }

    //called when a job is finished.
    //returns true if no jobs are connected to this robot, false otherwise
    finish_job(){
        if(this.active_jobs_using_this_robot().length == 0) {
            this.close_robot(); //don't do as we may want to use this serial robot for some other job.
            return true        //nope. close_robot just like Dexter robot does.
                               //starting a job with this robot will reconnect the serial port
        }
        else { return false }
    }

    stringify(){
        return "Serial: <i>name</i>: "  + this.name           + ", " +
            ", <i>path</i>: "  + this.path  + ", <i>is_connected</i>: " + this.is_connected +
            Serial.robot_status_to_html(this.robot_status, " on robot: " + this.name)
    }

    static robot_status_to_html(rs, where_from){
        return where_from + " robot_status: " + rs
    }



}; //end Serial class
Serial$1.all_names = [];
Serial$1.last_name = null;

Serial$1.robot_status_labels = [
    "JOB_ID",              // 0
    "INSTRUCTION_ID",      // 1
    "START_TIME",          // 2 //ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           // 3 //ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    // 4 //"oplet"

    "ERROR_CODE",          // 5   0 means no error.
    "DATA0",               // 6  data coming back from the board
    "DATA1",
    "DATA2",
    "DATA3",
    "DATA4",
    "DATA5",
    "DATA6",
    "DATA7",
    "DATA8",
    "DATA9"
];

Serial$1.robot_status_index_labels = [];
//its inefficient to have effectively 3 lists, but the sans-index list is good for
//short labels used in tables, and the index is nice and explicit
//for robot.robot_status[Dexter.foo_index] access
//The explicit Dexter.robot_status_index_labels is needed for a series.
Serial$1.make_robot_status_indices = function(){
    for(var i = 0; i < Serial$1.robot_status_labels.length; i++){
        var label = Serial$1.robot_status_labels[i];
        var index_label = "Series." + label; //+ "_INDEX"
        Serial$1[label] = i;
        Serial$1.robot_status_index_labels.push(index_label);
    }
};

Serial$1.make_robot_status_indices();

Serial$1.instruction_type_to_function_name_map = {
    I:"string_instruction" // "S" is used by Dexter and I isn't so use I just in case it helps in debugging.
};

Serial$1.string_instruction = function(instruction_string){
    if (typeof(instruction_string) != "string") {
        instruction_string = JSON.stringify(instruction_string);
    }
    return make_ins$1("I", instruction_string)
};

Serial$1.prototype.string_instruction = function(instruction_string){
    return new Instruction$1.Serial.string_instruction(instruction_string, this)
};

/*anticipate classes for Dexter2, etc.
//the pose matrix includes info on position and orientation
* */
var Dexter$1 = class Dexter extends Robot$1 {
    constructor({name = null,
                 simulate = null,
                 ip_address = null,
                 port = null,
                 pose = Vector$1.identity_matrix(4),
                 enable_heartbeat=true,
                 instruction_callback = Job$1.prototype.set_up_next_do}={}){
        for(let key in arguments[0]){
            if(!["name", "simulate", "ip_address", "port", "pose", "enable_heartbeat", "instruction_callback"].includes(key)){
                dde_error("Attempt to create a Dexter with an invalid argument of: " + key +
                          "<br/>Click on 'Dexter' to see its valid argument names.");
            }
        }
        if(!name) {
            name = Dexter.generate_default_name();
        }
        if((name.length == 1) && (name >= "A") && (name <= "Z")){
           dde_error("While construction a Dexter robot named: " + name +
                     "<br/>Sorry, you can't name a Dexter with a single upper case letter.");
        }
        if(!ip_address) { ip_address = persistent_get$1("default_dexter_ip_address"); }
        if(!port)       { port       = persistent_get$1("default_dexter_port"); }

        let keyword_args = {name: name,
                            simulate: simulate,
                            ip_address: ip_address,
                            port: port,
                            pose: pose,
                            enable_heartbeat: enable_heartbeat,
                            instruction_callback: instruction_callback };
        let old_same_named_robot = Robot$1[name];
        if (old_same_named_robot){
           if ((old_same_named_robot.ip_address === ip_address) &&
               (old_same_named_robot.port       === port)){
               if (old_same_named_robot.active_jobs_using_this_robot().length > 0){
                    warning("There's already a robot with the name: " + name +
                             ", with same ip_address and port that has active jobs " +
                             " so that's being used instead of a new Dexter instance.");
                    return old_same_named_robot
               }
               else {
                   old_same_named_robot.close_robot();
                   super(keyword_args //arguments[0]
                   );
                   return this.make_new_robot(keyword_args)
               }
            }
            else {//old_same_named_robot is same_named but has different ip address
               if (old_same_named_robot.active_jobs_using_this_robot().length > 0){
                   dde_error("Attempt to create a robot named: " + name +
                            " but there is already robot with that name that has active jobs " +
                             " but a different ip_address and/or port.");
               }
               else {
                   old_same_named_robot.close_robot();
                   super(keyword_args //arguments[0]
                   );
                   return this.make_new_robot(keyword_args)
               }
           }
        }
        else {//there's no same-named robot
            let old_same_ip_address_robot = Dexter.get_robot_with_ip_address_and_port(ip_address, port);
            if (old_same_ip_address_robot){
                if (old_same_ip_address_robot.active_jobs_using_this_robot().length > 0){
                    dde_error("Attempt to create a robot named: " + name +
                            " but a robot named: " + old_same_ip_address_robot.name +
                            " is already using that ip_address and port and has active jobs.");
                }
                else {
                    old_same_ip_address_robot.close_robot();
                    super(keyword_args //arguments[0]
                     );
                    return this.make_new_robot(keyword_args)
                }
            }
            else {//different name, unused ip_address and port
                super(arguments[0]);
                return this.make_new_robot(keyword_args)
            }
        }
    }

    static generate_default_name(){
        for(let i = 1; i < 1000000; i++) {
           let candidate_name = "dexter" + i;
           if(!Dexter[candidate_name]) {
                return candidate_name
           }
        }
        dde_error("When making an instance of Dexter,<br/>the first million default names are used.<br/> Probably something wrong.");
    }

    static class_init(){  //inits Dexter class as a whole. called by ready
        this.dexter_default_params =
            {name: "dex1",
             simulate: null,
             ip_address: null,
             port: null,
             pose: Vector$1.identity_matrix(4),
             enable_heartbeat: true,
             instruction_callback: Job$1.prototype.set_up_next_do
        };
    }

    toString(){ return "Dexter." + this.name }

    dexter_filepath(){
        if (operating_system == "win"){
            return "//" + this.ip_address + "/share"
        }
        else if (operating_system == "mac"){
            return "//" + this.ip_address + "/share" //probably wrong
        }
        else { //presume linux
            return "//" + this.ip_address + "/share" //probably wrong
         }
    }

    make_new_robot(keyword_args){
        this.name                  = keyword_args.name;
        this.ip_address            = keyword_args.ip_address;
        this.port                  = keyword_args.port;
        this.pose                  = keyword_args.pose;

        this.simulate              = keyword_args.simulate;
        this.instruction_callback  = keyword_args.instruction_callback;
        this.robot_status          = null; //now contains the heartbeat rs
        this.is_connected          = false;

        this.enable_heartbeat      = keyword_args.enable_heartbeat;
        this.waiting_for_heartbeat = false;
        this.heartbeat_timeout_obj = null;

        this.angles     = [0, 0, 0, 0, 0, 0, 0]; //used by move_to_relative, set by move_all_joints, move_to, and move_to_relative
        this.pid_angles = [0, 0, 0, 0, 0, 0, 0];
        //this.processing_flush = false //primarily used as a check. a_robot.send shouldn't get called while this var is true
        this.busy_job_array = [];
        Robot$1.set_robot_name(this.name, this);
         //ensures the last name on the list is the latest with no redundancy
        let i = Dexter.all_names.indexOf(this.name);
        if (i != -1) {  Dexter.all_names.splice(i, 1); }
        Dexter.all_names.push(this.name);
        Dexter.last_robot = this;
        return this
    }

    start(job_instance){
        //out("top of Dexter.start() for "+ job_instance.name)
        //let sim_actual = Robot.get_simulate_actual(this.simulate)
        //let this_robot = this
        //let this_job   = job_instance
        //if ([false, "both"].includes(sim_actual)){ //runnig in "real" not simulated.
              /*let ping = require('ping') //https://www.npmjs.com/package/ping
                ping.sys.probe(this.ip_address,
                                function(isAlive, err){
                                    if (isAlive) {
                                        if(job_instance.name == "set_link_lengths") { //don't attempt to set link lengths again!
                                            this_robot.start_aux(job_instance)
                                        }
                                        else { setTimeout(function(){
                                                            this_robot.set_link_lengths(this_job)
                                                          },
                                                          500)} //in case dexster is booting up, give it a chance to complete boot cycle
                                        //this_robot.use_ping_proxy(job_instance)
                                    }
                                    else if (err){
                                        this_job.stop_for_reason("errored_from_dexter_connect", "Ping on robot: " + this_robot.name + " errored with: " + err.message)
                                    }
                                    else {
                                        this_job.stop_for_reason("errored_from_dexter_connect", "Could not connect to Dexter.\nIf it is because Dexter is initializing,\ntry again in a minute,\nor click Misc pane 'simulate' button.", true)
                                        //3rd arg is true so that we will run the stop method for dex_read_file job,
                                        //so that this error of "not connected" will reset the orig editor files menu item.
                                    }
                                },
                               {timeout: 10}
                               )*/
          //new strategy: just let the socket interface test Dexter connectivity because ping fails on Linux
          //run same code for sim and real
        if(job_instance.name === "set_link_lengths") { //don't attempt to set link lengths again!
            this.start_aux(job_instance);
        }
        else {
            this.set_link_lengths(job_instance); //eventually calls start_aux
        }
        /*}
        else { //running in simulation
            if(job_instance.name == "set_link_lengths") { //don't attempt to set link lengths again!
                this_robot.start_aux(job_instance)
            }
            else {
                this_robot.set_link_lengths(this_job)
            }
        } //no actual connection to Dexter needed as we're only simulating, BUT
                                 //to keep similation as much like non-sim. due the same timeout.
       */
    }

    start_aux(job_instance) { //fill in initial robot_status
        //give it a bit of time in case its in the process of initializing
        /*let connect_success_cb = function(){ //give robot a chance to get its socket before doing the initial "g" send.
                        const sim_actual = Robot.get_simulate_actual(this_robot.simulate)
                        if(!this_robot.is_initialized()){ //bad. stop the job
                            if (this_robot.simulate === true){
                                this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                    "<br/>\nwith simulate=true, but could not connect with the Dexter simulator.")
                            }
                            else if ((this_robot.simulate === false) || (this_robot.simulate === "both")){
                                this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                "<br/>but could not connect with a Dexter robot at: " +
                                this_robot.ip_address + " port: " + this_robot.port +
                                "<br/>You can change this robot to <code>simulate=true</code> and run it.")
                            }
                            else if (this_robot.simulate === null){
                                if ((sim_actual === false) || (sim_actual === "both")){
                                    this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                    '<br/>with the Misc Pane "Simulate?" radio button being: ' + sim_actual  +
                                    "<br/>but could not connect with Dexter." +
                                    "<br/>You can use the simulator by clicking 'simulate' in the Misc Pane header. ")
                                    out("Could not connect to Dexter.", "red")
                                }
                                else {
                                    this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                              "<br/>\nwith a Jobs menu, 'Simulate?' value of 'true', " +
                                              "<br/>\nbut could not connect with the Dexter simulator.")
                                }
                            }
                            else {
                                shouldnt("Dexter.start got invalid simulate value of: " + this_robot.simulate +
                                         '.<br/>\nThe value values are: true, false, "both" and null.')
                            }

                        }
                        else { //good. normal case
                            //this_job.send(Dexter.get_robot_status(), this_robot)
                        } //the initial g stareting off the job
        }*/
        /* not needed if pass job_instance into Socket.init
             let connect_error_cb = function(){
             this_job.stop_for_reason("errored_from_dexter_connect",
                 "The job: " + this_job.name + " could not connect to Dexter." + this_robot.name)
        }
        this_robot.connect_error_cb = connect_error_cb*/
        let instruction_to_send_on_connect = Dexter.get_robot_status(); //the inital g instr
        Socket$1.init(this.name, job_instance, instruction_to_send_on_connect);
    }

    static get_robot_with_ip_address_and_port(ip_address, port){
        for(let robot_name of Dexter.all_names){
            let dex = Robot$1[robot_name];
            if (dex.ip_address && //note: if we have 2 Dexter instances that have the default ip_address of null and port of 5000, then we DON'T want to call them "at the same ip_address"
               (dex.ip_address == ip_address) &&
               (dex.port == port)){
                return dex //there should be at most 1
            }
        }
        return null
    }

    //return true if it is, false if it isn't and null if can't tell
    is_calibrated(){
        let sim_actual = Robot$1.get_simulate_actual(this.simulate);
        if(sim_actual === true) { return true } //simulation is always calibrated
        else if(this.rs === undefined) { return null } //calibration unknown
        else if (this.rs.supports_measured_angles()) {
                for(let j_deg of this.rs.measured_angles()){ //gets joint angles 1 through 5
                    if(j_deg != 0) { return true } //is calibrated
                }
                return false //not calibrated, ie all joint angles are 0
        }
        else { return null }
    }

    //returns null if don't know (because no job yet run,
    //otherwise gets the latest robot status run on this dexter,
    //and sees if its pointing down and returns true or false.
    //so null (don't know) is presumed to be false,
    //which is good for Dexter UI's call to this fn.
    /*is_pointing_down(){
        if(!this.rs) { return null }
        let measured_angles = this.rs.measured_angles(7)
        let angles_to_make_dexter_point_down = Kin.point_down(measured_angles)
        for(let j = 0; j < 5; j++){
            if(measured_angles[j] !== angles_to_make_dexter_point_down[j]){
                return false
            }
        }
        return true
    }*/

    //returns null if don't know (because no job yet run,
    //otherwise gets the latest robot status run on this dexter,
    //and sees if its pointing in "direction" and returns true or false.
    is_direction(direction=[0, 0, -1], //pointing down
                 tolerance_in_deg=0.01){
        if(!this.rs) { return null } //meaning we don't know what direction its pointing
        else { return Kin$1.is_direction(this.rs.measured_angles(5)) }
    }

    //______phui_button processing
    is_phui_button_down(){
        if(!this.robot_status) { return false }
        else {
            return ((this.robot_status[Dexter.END_EFFECTOR_IO_IN] & 1) === 1)
        }
    }

    /* changed to an instance variable on Dexter instances, may 18, 2021
    waiting_for_flush_ack(){
        let rob = this
        let instr = rob.instruction_to_send_on_connect
        if(instr) {
            if(Array.isArray(instr)){
                if(instr[Instruction.INSTRUCTION_TYPE] === "F"){
                    return true }
                else { return false }
            }
            else if (typeof(instr) === "string") { //we have a string, pull the "F" out of the string.
               let str_parts = instr.split(" ")
               let oplet = str_parts[4]
               if(oplet.startsWith("F")) { //might have a semicolon in the oplet.
                    return true
               }
               else { return false }
            }
            else { return false }
        }
        else { return false }
    }*/

    set_robot_status(robot_status) {
        let old_robot_status_button_down = this.is_phui_button_down(); //do this first before setting robot_status
        this.robot_status = robot_status; //thus rob.robot_status always has the latest rs we got from Dexter.
        if(window.platform == "dde"){
            if(this.rs) { this.rs.robot_status = robot_status; }
            else {
                this.rs = new RobotStatus$1({robot_status: robot_status});
            }
        }
        let new_robot_status_button_down = this.is_phui_button_down(); //tricky. Not the same as 2 lines up!
        if((!old_robot_status_button_down) &&
            new_robot_status_button_down) {
            this.time_of_last_phui_button_click_ms = Date.now();
        }
    }
    clear_time_of_last_phui_button_click_ms(){
        this.time_of_last_phui_button_click_ms = null;
    }

    /*candidate names:
    //phui_button_clicked
    //was_phui_button_clicked
    //was_phui_button_down
    //phui_button_clicked_but_not_processed
    This is the main fn called by job authors.
    It returns true if the phui button was pressed down since the
    last time this fn was called. THUS its an async input,
    so that the job author doesn't "miss" calling is_phui_button_down
    by not calling it at exactly the right time.
    */
    was_phui_button_down(){
        if(this.time_of_last_phui_button_click_ms) {
            this.clear_time_of_last_phui_button_click_ms();
            return true
        }
        else { return false }
    }
    seconds_since_phui_button_clicked(){
        if(!this.time_of_last_phui_button_click_ms) {
            return null
        }
        else {
            return (Date.now() - this.time_of_last_phui_button_click_ms) / 1000
        }
    }
    //end phui button processing

    run_heartbeat(){
        let this_dex = this;
        this.heartbeat_timeout_obj =
          setTimeout(function(){
            if (this_dex.finish_job()) ;
            else if (this_dex.waiting_for_heartbeat){ //stop recursive timeout
                out("Dexter " + this_dex.name + " did not receive a response to the heartbeat. Stopping Job.");
                //this_dex.is_connected      = false //should be done by stop_for_reaason and next item
                //this_dex.socket_id         = null  //should be done by stop_for_reaason and next item
                for (let job_instance of this.active_jobs_using_this_robot()){
                    job_instance.stop_for_reason("errored_from_dexter", "No heartbeat response from dexter hardware.");
                    job_instance.do_next_item();
                }
            }
            else if (this_dex.enable_heartbeat) { //everything ok. Note: user might disable heartbeat during a job so check here.
                let h_ins = Dexter.get_robot_status_heartbeat();
                let job_instance = this_dex.active_jobs_using_this_robot()[0];
                h_ins[Instruction$1.JOB_ID] = job_instance.job_id;
                h_ins[Instruction$1.INSTRUCTION_ID] = -4;
                this_dex.send(h_ins); //heartbeat associated with the last job created using this robot as its robot.
                this.waiting_for_heartbeat = true;
                this_dex.run_heartbeat();
            }
        }, Dexter.heartbeat_dur);
    }

    //called when a job is finished.
    //returns true if no jobs are connected to this robot, false otherwise
    finish_job(){
        if(this.active_jobs_using_this_robot().length == 0) {
            this.close_robot();
            return true
        }
        else { return false }
    }

    close_robot(){
        //out("top of Dexter.close_robot")
        //setTimeout(function(){
        //out("top of timeout fn Dexter.close_robot")
        clearTimeout(this.heartbeat_timeout_obj); //looks like not working
        this.waiting_for_heartbeat = false;
        this.heartbeat_timeout_obj = null;
        this.is_connected          = false;
        Socket$1.close(this.name, false); //must be before setting socket_id to null
        // delete Dexter[this.name] //don't do this. If the robot is still part of a Job,
        //and that job is inactive, then we can still "restart" the job,
        //and as such we want that binding of Robot.this_name to still be around.
        //}, 5000)
    }

    /* causes DexRun to crash. re-inswtate when FPGA code rewriten to support this
    empty_instruction_queue_now(){
        Socket.empty_instruction_queue_now(this.name)
    }*/

    //ins_array can be an oplet array or a raw string
    send(oplet_array_or_string){
        //var is_heartbeat = ins_array[Instruction.INSTRUCTION_TYPE] == "h"
        //let oplet = Instruction.extract_instruction_type(oplet_array_or_string)
        /*if (oplet === "F") { this.processing_flush = true } //ok even if flush is already true. We can send 2 flushes in a row if we like, that's ok. essentially only 1 matters
        if (this.processing_flush && (oplet !== "F")) {
            shouldnt(this.name + ".send called with oplet: " + oplet +
                     ", but " + this.name + ".processing_flush is true so send shouldn't have been called.")
        }*/
        //note: we send F instructions through the below.
        Socket$1.send(this.name, oplet_array_or_string);
    }

    perform_instruction_callback(job_instance){
        if (this.instruction_callback) { this.instruction_callback.call(job_instance); }
    }
    stringify(){
        return "Dexter: <i>name</i>: "  + this.name           +
               ", <i>ip_address</i>: "  + this.ip_address     + ", <i>port</i>: "         + this.port         + ",<br/>" +
               "<i>socket_id</i> "      + this.socket_id      + ", <i>is_connected</i>: " + this.is_connected + ", <i>waiting_for_heartbeat</i>: " + this.waiting_for_heartbeat +
               Dexter.robot_status_to_html(this.robot_status, " on robot: " + this.name)
    }

    ///called from Socket in ui
    static set_a_robot_instance_socket_id(robot_name){
        let rob          = Dexter[robot_name];
        //rob.socket_id    = socket_id
        rob.is_connected = true;
        //out("bottom of set_a_robot_instance_socket_id with rob.name: " + rob.name + " rob.is_connected: " + rob.is_connected)
    }

    //is_initialized(){ return ((this.socket_id || (this.socket_id === 0)) ? true : false ) }

    is_initialized(){
        //out("is_initialized() returning: " + this.is_connected)
       return this.is_connected
    }

    //Class: Dexter
    //beware, robot_status could be an ack, can could be called by sim or real
    //but if sim is "both", will only be called by real (from socket)
    robot_done_with_instruction(robot_status){ //called from UI sockets
        let job_id       = robot_status[Dexter.JOB_ID];
        let job_instance = Job$1.job_id_to_job_instance(job_id);
        let ins_id       = robot_status[Dexter.INSTRUCTION_ID]; //-1 means the initiating status get, before the first od_list instruction
        let oplet        = robot_status[Dexter.INSTRUCTION_TYPE];
        let error_code   = robot_status[Dexter.ERROR_CODE];
        let rob          = this; //job_instance.robot
        if(oplet === "F") {
            rob.waiting_for_flush_ack = false;
        }
        if (!(Array.isArray(robot_status))) { //note: we have to error here because we can't get the job
            //so we can't call stop_for_reason
            job_instance.stop_for_reason("errored_from_dexter",
                                 "Dexter.robot_done_with_instruction received a robot_status array: " +
                                  robot_status + " that is not an array.");
            job_instance.wait_until_instruction_id_has_run = null;
            job_instance.set_up_next_do(0);
            return
        }
        //rob.robot_status = robot_status //beware, is possibly the wrong length, but if so we're going to error, so might as well have that bad robot_status accessible for debugging
        rob.set_robot_status(robot_status); //makes RobotStatus updated too
        if (job_instance == null){
            shouldnt$1("In robot_done_with_instruction, got job_id: " + job_id +
                     " which does not refer to a valid Job instance.<br/>" +
                     "robot_status: " + robot_status);
        }
        else if (robot_status.length < Dexter.robot_status_labels.length){ //allows when_stopped action to run if any
            //if its longer than 60, ie 120, then we got 2 robot status's back.
            //just use the first 60 from the array.
            job_instance.condition_when_stopped = "errored_from_dexter";
            job_instance.stop_for_reason("errored_from_dexter",
                "Dexter.robot_done_with_instruction received a robot_status array: " +
                robot_status + "<br/> of length: " + robot_status.length +
                " that is not the proper length of: " + Dexter.robot_status_labels.length);
            job_instance.wait_until_instruction_id_has_run = null;
            job_instance.set_up_next_do(0);
            return
        }
        else if (job_instance.wait_until_instruction_id_has_run !== ins_id){
            job_instance.stop_for_reason("errored_from_dexter",
                "Dexter.robot_done_with_instruction received a robot_status array with an instruction_id of: " + ins_id +
                "<br/> but expected: " + job_instance.wait_until_instruction_id_has_run);
            job_instance.wait_until_instruction_id_has_run = null;
            job_instance.set_up_next_do(0);
            return
        }
        else if((error_code !== 0) && (oplet !== "r")){ //we've got an error
                //job_instance.stop_for_reason("errored", "Robot status got error: " + error_code)
            job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
            let instruction_to_run_when_error = job_instance.if_robot_status_error; //.call(job_instance, robot_status)
            if(instruction_to_run_when_error){
                //note instruction_to_run_when_error can be a single instruction or an array
                //of instructions. If its an array, we insert it as just one instruction,
                //and that will cause all to be run.
                job_instance.insert_single_instruction(instruction_to_run_when_error);
            }
            rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do()
            return
        }

        job_instance.wait_until_instruction_id_has_run = null;
        let busy_job_array_copy = rob.busy_job_array.slice();
        rob.clear_busy_job_array(); //so that the other jobs that I call set_up_next_do, won't hang up because they are busy,
         //because they no longer should be busy, because we got back our ack from Dexter that was keeping them busy,
        for(let busy_job of busy_job_array_copy){
            if(busy_job === job_instance) ; //let this pass through to the below as the passed in robot_status is from this instrr and this job_instance
            else {
               busy_job.set_up_next_do(0); //now execute the instr at the PC in an OTHER job, without advancing it.
               return
            }
        }
        if ((error_code !== 0) && (oplet === "r")){ //we have an error but its "file not found" handled specially
             //Dexter.read_file errored, assuming its "file not found" so end the rfr loop and set the "content read" as null, meaning file not found
                //the below setting of the user data already done by got_content_hunk
                //let rfr_instance = Instruction.Dexter.read_file.find_read_file_instance_on_do_list(job_instance, ins_id)
                // job_instance.user_data[ins.destination] = null //usually means "file not found"
                //rfr_instance.is_done = true
                this.perform_instruction_callback(job_instance); //calls set_up_next_do(1) but we want 0, because we want to give the Dexter.read_file instance code a chance to clean up before ending its loop
                //job_instance.set_up_next_do(0)
                return
        }
        if (oplet === "h") { //we got heartbeat acknowledgement of reciept by phys or sim so now no longer waiting for that acknowledgement
            rob.waiting_for_heartbeat = false;
            return
        }
        let stop_time    = Date.now(); //the DDE stop time for the instruction, NOT Dexter's stop time for the rs.
        job_instance.record_sent_instruction_stop_time(ins_id, stop_time);
       // if (!rob.is_connected) {} //ignore any residual stuff coming back from dexter
        //we don't want to change robot_status for instance because that will confuse
        //debugging in the case that we've had an error and want to close.
        //on the other hand, we want accurate info. Hmm, maybe the "residual" is
        //only comming for simulation and not from read dexter.
        //else if (ins_id == -1) {}
     // else {
        if (job_instance.keep_history && (oplet == "g")){ //don't do it for oplet "G", get_robot_status_immediate
                job_instance.rs_history.push(robot_status);
        }
        if(window.platform === "dde"){
            RobotStatusDialog.update_robot_status_table_maybe(rob); //if the dialog isn't up, this does nothing
        }

        if (job_instance.status_code === "starting") { //at least usually ins_id is -1
            job_instance.set_status_code("running");
            //pass robot_status because we *might* not be keeping it in the history
            //rob.perform_instruction_callback(job_instance)
            //if(job_instance.dont_proceed_after_initial_g) {//used by MakeInstruction
            //    MiRecord.start_is_done_with_initial_g_and_paused(job_instance)
            //}
            job_instance.set_up_next_do(0);//we've just done the initial g instr, so now do the first real instr. PC is already pointing at it, so don't increment it.
        }
        else if ((job_instance.status_code === "stopping") && (oplet === "F")){
            job_instance.stop_for_reason("interrupted", "Completed Dexter.empty_instruction_queue after user stopped the Job.");
            rob.perform_instruction_callback(job_instance);
        }
        else if (ins_id == job_instance.program_counter) { //the normal case.
            rob.perform_instruction_callback(job_instance);// job_instance.set_up_next_do() //note before doing this, pc might be on last do_list item.
                    //but that's ok. increment pc and call do_next_item.
        }
        else {
            shouldnt$1("In job: " + job_instance.name +
                " \n robot_done_with_instruction got ins_id: " + ins_id +
                " \n which matched wait_until_instruction_id_has_run " +
                " \n but the PC wasn't the same. Its: "  + job_instance.program_counter);
        }
    }

    //Dexter busy
    clean_up_busy_job_array(){
       let result = [];
       for(let a_job of this.busy_job_array){
            if(a_job.is_active()) { //remove inactive jobs from busy_job_array by preserviong the still active ones
                if(!result.includes(a_job)) { //remove duplicates
                    result.push(a_job);
                }
            }
       }
       this.busy_job_array = result;
    }

    //returns true or false
    is_busy(){
        this.clean_up_busy_job_array();
        return (this.busy_job_array.length > 0)
    }

    add_to_busy_job_array(a_job){
        if(!this.busy_job_array.includes(a_job)){
            this.busy_job_array.push(a_job);
        }
    }

    remove_from_busy_job_array(a_job){
        let i = this.busy_job_array.indexOf(a_job);
        if(i >= 0) { this.busy_job_array.splice(i, 1); }
    }

    //called when a job is finished. Note that we might have a
    //job that has, say a brain default robot but has instructions that are sent to a Dexter,
    //and Job.send still adds its Job to the busy_job_array of a Dexter,
    //so we better remove it from all Dexters' busy_job_array
    static remove_from_busy_job_arrays(a_job) {
        for(let dex_name of Dexter.all_names){
            let dex = Dexter[dex_name];
            dex.remove_from_busy_job_array(a_job);
        }
    }

    clear_busy_job_array(){
        this.busy_job_array = [];
    }
    //end robot_busy

    //Robot status accessors (read only for users)
    joint_angle(joint_number=1){
        switch(joint_number){
            case 1: return this.robot_status[Dexter.J1_MEASURED_ANGLE]
            case 2: return this.robot_status[Dexter.J2_MEASURED_ANGLE]
            case 3: return this.robot_status[Dexter.J3_MEASURED_ANGLE]
            case 4: return this.robot_status[Dexter.J4_MEASURED_ANGLE]
            case 5: return this.robot_status[Dexter.J5_MEASURED_ANGLE]
            default:
                dde_error("You called Robot." + this.name + ".joint_angle(" + joint_number + ")" +
                          " but joint_number must be 1, 2, 3, 4, or 5.");
        }
    }

    joint_angles(){
        let rs = this.robot_status;
        return [rs[Dexter.J1_MEASURED_ANGLE], rs[Dexter.J2_MEASURED_ANGLE], rs[Dexter.J3_MEASURED_ANGLE], rs[Dexter.J4_MEASURED_ANGLE], rs[Dexter.J5_MEASURED_ANGLE]]
    }

    joint_xyz(joint_number=5){
        let xyzs = this.joint_xyzs(); //note the first elt is the pos of the base, defaulting to 0,0,0
        return xyzs[joint_number]
    }
    joint_xyzs(){ //todo ask James about this
        return Kin$1.forward_kinematics(this.joint_angles(), this.pose)[0]
    }

    move_all_joints_fn(angle_array=Dexter.HOME_ANGLES, set_default_speed_first = true){
        let is_home_angles = similar(angle_array, Dexter.HOME_ANGLES);
        let do_list = [];
        if(set_default_speed_first) { do_list.push(make_ins$1("S", "MaxSpeed", 25)); }
        do_list.push(Dexter.move_all_joints(angle_array));
        if(is_home_angles) {
            do_list.push(Dexter.pid_move_all_joints([0, 0, 0, 0, 0])); //only do 5 joints here. let the angle_array's version of j6 and j7 dictate their movvement.
            do_list.push(Dexter.empty_instruction_queue());
        }
        new Job$1({name: "job_00", robot: this,
                 do_list: do_list}).start();
    }

    move_to_fn(xyz=[0,0,0], set_default_speed_first = true){
        let job_00;
        if (set_default_speed_first) {
            job_00 = new Job$1({name: "job_00", robot: this,
                              do_list: [make_ins$1("S", "MaxSpeed", 25),
                                        Dexter.move_to(xyz)
                                        ]
                     });
        }
         else {
            job_00 = new Job$1({name: "job_00", robot: this,
                              do_list: [Dexter.move_to(xyz)]
                     });
         }
        job_00.start();
    }
    run_instruction_fn(instr){
        const job_00 = new Job$1({name: "job_00",
            robot: this,
            do_list: [instr]
        });
        job_00.start();
    }
    /* The below is a smarter version of run_instruction_fn that just defines job_00 once,
       leaves it running and just adds the instruction to it the 2nd through nth times
       its called. BUT this screws up if you are togglein between
       running an instruction and running a regular job because the job_oo uses up the robot.
       So to avoid that interferance, I've gone back to just
       defining job_00 each time this fn is called and starting the job as above.
    run_instruction_fn(instr){
        let the_job = Job.job_00
        if (!the_job) { //job has yet to be defined in this session of dde, so define it
            the_job = new Job({name: "job_00",
                               robot: this,
                               when_do_list_done: "wait"})
        }
        if (!the_job.is_active()) { //job is defined but is not running so start it. Might be brand new or might have just stopped
            the_job.start()
        }
        Job.insert_instruction(instr, //finally add in the instr to run.
                               {job: "job_00",
                                offset: "end"})
        //now job_00 is just waiting for another instruction to be passed to it.
    }*/
};

Dexter$1.all_names = [];
Dexter$1.last_robot = null; //last Dexter defined.

Dexter$1.heartbeat_dur = 100; //milliseconds

//_______series robot_config ______
Dexter$1.LEFT            = [0, null, null];
Dexter$1.LEFT_DOWN       = [0, 0,    null];
Dexter$1.LEFT_UP         = [0, 1,    null];
Dexter$1.LEFT_IN         = [0, null, 0];
Dexter$1.LEFT_OUT        = [0, null, 1];
Dexter$1.LEFT_DOWN_IN    = [0, 0,    0];
Dexter$1.LEFT_DOWN_OUT   = [0, 0,    1];
Dexter$1.LEFT_UP_IN      = [0, 1,    0];
Dexter$1.LEFT_UP_OUT     = [0, 1,    1];

Dexter$1.RIGHT           = [1, null, null];
Dexter$1.RIGHT_DOWN      = [1, 0,    null];
Dexter$1.RIGHT_UP        = [1, 1,    null];
Dexter$1.RIGHT_IN        = [1, null, 0];
Dexter$1.RIGHT_OUT       = [1, null, 1];
Dexter$1.RIGHT_DOWN_IN   = [1, 0,    0];
Dexter$1.RIGHT_DOWN_OUT  = [1, 0,    1];
Dexter$1.RIGHT_UP_IN     = [1, 1,    0];
Dexter$1.RIGHT_UP_OUT    = [1, 1,    1];

Dexter$1.DOWN            = [null, 0, null];
Dexter$1.DOWN_IN         = [null, 0, 0];
Dexter$1.DOWN_OUT        = [null, 0, 1];
Dexter$1.UP              = [null, 1, null];
Dexter$1.UP_IN           = [null, 1, 0];
Dexter$1.UP_OUT          = [null, 1, 1];

Dexter$1.IN              = [null, null, 0];
Dexter$1.OUT             = [null, null, 1];


//__________INSTRUCTIONS______________
//called only for testing purposes. Goes all the way through to the simulate
//or dexter, unlike Job.error
Dexter$1.make_ins = make_ins$1;
Dexter$1.capture_ad     = function(...args){ return make_ins$1("c", ...args) };
Dexter$1.prototype.capture_ad = function(...args){ args.push(this); return Dexter$1.capture_ad(...args) };

Dexter$1.capture_points           = function(...args){ return make_ins$1("i", ...args) };
Dexter$1.prototype.capture_points = function(...args){ args.push(this); return Dexter$1.capture_points(...args) };

Dexter$1.cause_error              = function(error_code=1){ return make_ins$1("e", error_code) }; //fry made up. useful for testing
Dexter$1.prototype.cause_error    = function(error_code=1){ return make_ins$1("e", error_code, this) };

Dexter$1.draw_dxf;   //set to DXF.dxf_to_instructions in ready.js
Dexter$1.prototype.draw_dxf; //set in ready.js

Dexter$1.dummy_move = function(){
    let CMD = [];
    CMD.push(function(){return Dexter$1.get_robot_status()});
    CMD.push(function(){
        let rs = this.robot.robot_status; //Dexter.my_dex.robot_status
        let J_angles = [rs[Dexter$1.J1_MEASURED_ANGLE], rs[Dexter$1.J2_MEASURED_ANGLE], rs[Dexter$1.J3_MEASURED_ANGLE], rs[Dexter$1.J4_MEASURED_ANGLE], rs[Dexter$1.J5_MEASURED_ANGLE]];
        return Dexter$1.move_all_joints(J_angles)
    });
    return CMD
};

Dexter$1.prototype.dummy_move = function(){
    let robot = this;
    let CMD = [];
    CMD.push(function(){return robot.get_robot_status()});
    CMD.push(function(){
        let rs = robot.robot_status; //Dexter.my_dex.robot_status
        let J_angles = [rs[Dexter$1.J1_MEASURED_ANGLE], rs[Dexter$1.J2_MEASURED_ANGLE], rs[Dexter$1.J3_MEASURED_ANGLE], rs[Dexter$1.J4_MEASURED_ANGLE], rs[Dexter$1.J5_MEASURED_ANGLE]];
        return robot.move_all_joints(J_angles)
    });
    return CMD
};

//Dexter.run_gcode_workspace_pose_default = Vector.make_pose([0, 0.5, 0.1], [0, 0, 0], _mm)

Dexter$1.prototype.run_gcode = function({gcode = "",
                                       filepath = null,
                                       workspace_pose = Vector$1.make_pose([0, 0.5, 0.1], [0, 0, 0], _mm)}){
    return Dexter$1.run_gcode({gcode: gcode,
                             filepath:filepath,
                             workspace_pose: workspace_pose,
                             robot: this})
};

Dexter$1.run_gcode      = function({gcode = "", filepath = null, workspace_pose = Vector$1.make_pose([0, 0.5, 0.1], [0, 0, 0], _mm), robot=Dexter$1}){
                            return function(){
                                return Gcode.gcode_to_instructions({gcode: gcode,
                                                                    filepath: filepath,
                                                                    workspace_pose: workspace_pose,
                                                                    robot: robot})
                            }
                        };

Dexter$1.dma_read           = function(...args){ return make_ins$1("d", ...args) };
Dexter$1.prototype.dma_read = function(...args){ args.push(this); return Dexter$1.dma_read(...args) };

Dexter$1.dma_write           = function(...args){ return make_ins$1("t", ...args) };
Dexter$1.prototype.dma_write = function(...args){ args.push(this); return Dexter$1.dma_write(...args) };

Dexter$1.exit           = function(...args){ return make_ins$1("x", ...args) };
Dexter$1.prototype.exit = function(...args){ args.push(this); return Dexter$1.exit(...args) };


Dexter$1.empty_instruction_queue_immediately = function(){
        //return make_ins("E")
        let num = Instruction$1.w_address_name_to_number("RESET_PID_AND_FLUSH_QUEUE");
        if(num >= 0) {
            return [ Dexter$1.write_fpga(num, 1), //this flushes the queue
                     Dexter$1.write_fpga(num, 0)  //this resets the ode to normal so Dexter can accept new instructions
                   ]
        }
        else {
            shouldnt$1("Dexter.empty_instruction_queue_immediately could not find w name: RESET_PID_AND_FLUSH_QUEUE.");
        }
};
Dexter$1.prototype.empty_instruction_queue_immediately = function(...args){ args.push(this); return Dexter$1.empty_instruction_queue_immediately(...args) };

Dexter$1.empty_instruction_queue           = function() { return make_ins$1("F") };
Dexter$1.prototype.empty_instruction_queue = function(...args){ args.push(this); return Dexter$1.empty_instruction_queue(...args) };

Dexter$1.find_index           = function(...args){ return make_ins$1("n", ...args) };
Dexter$1.prototype.find_index = function(...args){ args.push(this); return Dexter$1.find_index(...args) };


//dec 6, 2020: this gives us backwards compatibility of
//Dexter.get_robot_status()
//Dexter.get_robot_status(rob)
//and also allows for
//Dexter.get_robot_status(1)
//Dexter.get_robot_status(rob)
//Dexter.get_robot_status(1, rob)
//Dexter.get_robot_status(null, rob)
Dexter$1.get_robot_status = function(status_mode = null){
                                if(typeof(status_mode) === "number") {
                                    return make_ins$1("g", status_mode)
                                }
                                else if((status_mode === null) || (status_mode === undefined)) {
                                    return make_ins$1("g")
                                }
                                else {
                                    dde_error("Dexter.get_robot_status called with invalid status mode: " +
                                               status_mode +
                                               "<br/>The valid status_modes are null or non-negative integers, usually 0 or 1.");
                                }
};

//must be different from Dexter.get_robot_status. See commment in Instruction.Dexter.get_robot_statu
Dexter$1.prototype.get_robot_status = function(status_mode = null){
                                        if((typeof(status_mode) != "number") &&
                                            (status_mode !== null)){
                                            dde_error("Dexter.get_robot_status called with invalid status mode: " +
                                                       status_mode +
                                                       "<br/>The valid status_modes are null or non-negative integers, usually 0 or 1.");
                                        }
                                        else {
                                            return new Instruction$1.Dexter.get_robot_status(status_mode, this)
                                        }
};


    //this forces do_next_item to wait until robot_status is
    //updated before it runs any more do list items.
Dexter$1.get_robot_status_heartbeat           = function(){ return make_ins$1("h") };//never called by user do_list items. Only called by system
Dexter$1.prototype.get_robot_status_heartbeat = function(){ return Dexter$1.get_robot_status_heartbeat(this) };

Dexter$1.get_robot_status_immediately           = function(){ return make_ins$1("G") }; //deprecated
Dexter$1.prototype.get_robot_status_immediately = function(){ return Dexter$1.get_robot_status_immediately(this) }; //deprecated

//pass in an array of up to 5 elts OR up to 5 separate args.
//If an arg is not present or null, keep the value now in dexer_status unchanged.
//EXCEPT if no args passed in, set to home position.
Dexter$1.load_tables     = function(...args){ return make_ins$1("l", ...args) }; //
//loads the data created from calibration onto the SD card for persistent storage.
Dexter$1.prototype.load_tables = function(...args){ args.push(this); return Dexter$1.load_tables(...args) };


Dexter$1.joint_to_servo_number_map = {6: 3, 7: 1};
Dexter$1.joint_to_servo_number = function(joint_number){
    return Dexter$1.joint_to_servo_number_map[joint_number]
};
Dexter$1.servo_to_joint_number = function(servo_number){
    for(let a_joint_number in Dexter$1.joint_to_servo_number_map){
       let a_servo_number = Dexter$1.joint_to_servo_number_map[a_joint_number];
       if(a_servo_number === servo_number) { return parseInt(a_joint_number) }
    }
    return undefined
};
//the instruction
Dexter$1.reboot_joints = function(joint_number_array="all"){
   if(joint_number_array === "all") {
       joint_number_array = Object.getOwnPropertyNames(Dexter$1.joint_to_servo_number_map);
       for(let i = 0; i < joint_number_array.length; i++){
           joint_number_array[i] =  parseInt(joint_number_array[i]);
       }
   }
   let instrs = [];
   for(let joint_number of joint_number_array){
       instrs.push(
            Dexter$1.set_parameter("RebootServo", Dexter$1.joint_to_servo_number(joint_number)));
       instrs.push(Dexter$1.sleep(1)); //sleep for 1 sec to allow dynamixel bus to settle
   }
   return instrs
};

Dexter$1.prototype.reboot_joints = function(joint_number_array="all"){
    if(joint_number_array === "all"){
        joint_number_array = Object.getOwnPropertyNames(Dexter$1.joint_to_servo_number_map);
        for(let i = 0; i < joint_number_array.length; i++){
            joint_number_array[i] =  parseInt(joint_number_array[i]);
        }
    }
    let instrs = [];
    for(let joint_number of joint_number_array){
        instrs.push(
            this.set_parameter("RebootServo", Dexter$1.joint_to_servo_number(joint_number)));
        instrs.push(this.sleep(1)); //sleep for 1 sec to allow dynamixel bus to settle
    }
    return instrs
};

//the function
Dexter$1.prototype.reboot_joints_fn = function (){
    new Job$1({name: "reboot_joints",
        robot: new Brain({name: "brain_reboot_joints"}),
        do_list: [
            //Dexter.set_parameter("RebootServo", 1), //reset J7 SPAN
            //Dexter.sleep(1), //give the servo time to reset.
            //Dexter.set_parameter("RebootServo", 3), //reset J6 ROLL
            //Dexter.sleep(1) //give the servo time to reset.
            this.reboot_joints()
        ]
    }).start();
};



//Dexter.make_ins = make_ins this is below due to loading order issues

Dexter$1.prototype.make_ins = function(instruction_type, ...args){
    args = new Array(...args);
    args.unshift(instruction_type);
    args.push(this);
    return make_ins$1.apply(null, args)
};

Dexter$1.move_home = function(){ //move straight up
    return Dexter$1.move_all_joints(Dexter$1.HOME_ANGLES)
};
Dexter$1.prototype.move_home = function(){
    return this.move_all_joints(Dexter$1.HOME_ANGLES)
};

Dexter$1.check_joint_limits = false;

//similar to Kin.check_J_ranges except returns string if out of range,
//and false if in range whereas Kin.check_J_ranges returns true if
//in range and false otherwise.
Dexter$1.joints_out_of_range = function(J_angles, dexter_inst){
    if (!Dexter$1.check_joint_limits) { return false }
    else {
        let lower_limit;
        let upper_limit;
        if(dexter_inst instanceof Dexter$1) {
            lower_limit = [dexter_inst.J1_angle_min, dexter_inst.J2_angle_min, dexter_inst.J3_angle_min, dexter_inst.J4_angle_min, dexter_inst.J5_angle_min];
            upper_limit = [dexter_inst.J1_angle_max, dexter_inst.J2_angle_max, dexter_inst.J3_angle_max, dexter_inst.J4_angle_max, dexter_inst.J5_angle_max];
        }
        else {
            lower_limit = [Dexter$1.J1_ANGLE_MIN, Dexter$1.J2_ANGLE_MIN, Dexter$1.J3_ANGLE_MIN, Dexter$1.J4_ANGLE_MIN, Dexter$1.J5_ANGLE_MIN];
            upper_limit = [Dexter$1.J1_ANGLE_MAX, Dexter$1.J2_ANGLE_MAX, Dexter$1.J3_ANGLE_MAX, Dexter$1.J4_ANGLE_MAX, Dexter$1.J5_ANGLE_MAX];
        }
        for(var i = 0; i < J_angles.length; i++){
            let angle = J_angles[i];
            if(angle == null) ;
            else if (angle < lower_limit[i]){
                return "Joint " + (i + 1) + " with angle: " + angle + "\nis less than the minimum: " + lower_limit[i]
            }
            else if (angle > upper_limit[i]){
                return "Joint " + (i + 1) + " with angle: " + angle + "\nis more than the maximun: " + upper_limit[i]
            }
        }
        return false
    }
};

//take the actual args passed to maj (sans a possible robot at the end) and
//convert them into an array for further processing
//this always returns an array, and it is an array of angles (or nested array of 1 number for rel angle.
//array will be between 1 and  7 long inclusive.
//elts can be number or NaN
Dexter$1.convert_maj_angles = function(args_array, instruction_name=""){
      let result;
      if(args_array.length == 1){ //user is only setting J1.
          let first_elt = args_array[0];
          if(Array.isArray(first_elt)){ //This could POSSIBLY be user intending to pass one *relative* joint angle for j1
                                        //but lets presume not.
                                        //but if first_elt is a number or an array of 1 number,
                                        //that's ok, return turn it
              result = first_elt; //user passed in an array, use it as the array for the angles.
          }
          else { //only one arg and its not an array, (probably a number) so stick it in an array and we're done.
              result = [first_elt];
          }
      }
      else { // > 1 elt, so all those elts are in an array
          result =  args_array;
      }
      //get rid of undefineds and NaN's on the end down to joint 5.
      for(let i = result.length - 1; i > 4; i--){
            let ang = result[i];
            if ((ang === undefined) || Number.isNaN(ang)) {
                result.pop();
            }
       }
       if (result.length > 7){
          warning("You are creating a " + instruction_name + " instruction with more than 7 angles:<br/>" +
                   args_array + "<br/>" +
                  "Usually 7 is the maximum.");
       }
       return result
};

Dexter$1.prototype.move_all_joints = function(...array_of_angles) {
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "move_all_joints");
    return new Instruction$1.Dexter.move_all_joints(array_to_use, this)
};

Dexter$1.move_all_joints = function(...array_of_angles){
    let robot;
    if (last(array_of_angles) instanceof Dexter$1) {robot = pop(array_of_angles);}
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "move_all_joints");
    return new Instruction$1.Dexter.move_all_joints(array_to_use, robot)
};

//the same as move_all_joints but generates a "P" oplet

Dexter$1.prototype.pid_move_all_joints = function(...array_of_angles) {
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "pid_move_all_joints");
    return new Instruction$1.Dexter.pid_move_all_joints(array_to_use, this)
};

Dexter$1.pid_move_all_joints = function(...array_of_angles){
    let robot;
    if (last(array_of_angles) instanceof Dexter$1) {robot = pop(array_of_angles);}
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "pid_move_all_joints");
    return new Instruction$1.Dexter.pid_move_all_joints(array_to_use, robot)
};

Dexter$1.prototype.move_all_joints_relative = function(...array_of_angles) {
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "move_all_joints_relative");
    return new Instruction$1.Dexter.move_all_joints_relative(array_to_use, this)
};
Dexter$1.move_all_joints_relative = function(...delta_angles){
    let robot;
    if (last(delta_angles) instanceof Dexter$1) {robot = pop(delta_angles);}
    let array_to_use = Dexter$1.convert_maj_angles(delta_angles, "move_all_joints_relative");
    return new Instruction$1.Dexter.move_all_joints_relative(array_to_use, robot)
};



Dexter$1.is_position = function(an_array){
    return (Array.isArray(an_array)     &&
             (an_array.length == 3)     &&

             Array.isArray(an_array[0]) &&
            (an_array[0].length == 3)   &&

            Array.isArray(an_array[1])  &&
            (an_array[1].length == 3)   &&

             Array.isArray(an_array[2]) &&
            (an_array[2].length == 3)
    )
};
//warning: calling with no args to default everything will be out-of-reach because JS_direction is not straight up,
//params info:
// xyz New defaults are the cur pos, not straight up.
// J5_direction  = [0, 0, -1], //end effector pointing down
//warning: soe valid xyz locations won't be valid with the default J5_direction and config.
Dexter$1.prototype.move_to = function(xyz            = [],
                                    J5_direction   = [0, 0, -1],
                                    config         = Dexter$1.RIGHT_UP_OUT,
                                    workspace_pose = null, //will default to the job's default workspace_pose
                                    j6_angle       = [0],
                                    j7_angle       = [0]) {
    return Dexter$1.move_to(xyz,
                         J5_direction,
                         config,
                         workspace_pose,
                         j6_angle,
                         j7_angle,
                         this)
};

//note that a workspace_pose = null, will default to the job's default workspace_pose
Dexter$1.move_to = function(xyz            = [],
                          J5_direction   = [0, 0, -1],
                          config         = Dexter$1.RIGHT_UP_OUT,
                          workspace_pose = null,
                          j6_angle       = [0],
                          j7_angle       = [0],
                          robot
                         ){
       return new Instruction$1.Dexter.move_to(xyz, J5_direction, config, workspace_pose, j6_angle, j7_angle, robot)
};

//the same as move_to but generates a "P" oplet
Dexter$1.prototype.pid_move_to = function(xyz        = [],
                                    J5_direction   = [0, 0, -1],
                                    config         = Dexter$1.RIGHT_UP_OUT,
                                    workspace_pose = null, //will default to the job's default workspace_pose
                                    j6_angle       = [0],
                                    j7_angle       = [0]) {
    return Dexter$1.pid_move_to(xyz,
                              J5_direction,
                              config,
                              workspace_pose,
                              j6_angle,
                              j7_angle,
                              this)
};

Dexter$1.pid_move_to = function(xyz            = [],
                              J5_direction   = [0, 0, -1],
                              config         = Dexter$1.RIGHT_UP_OUT,
                              workspace_pose = null, //will default to the job's default workspace_pose
                              j6_angle       = [0],
                              j7_angle       = [0],
                              robot
                              ){
    return new Instruction$1.Dexter.pid_move_to(xyz, J5_direction, config, workspace_pose, j6_angle, j7_angle, robot)
};

Dexter$1.prototype.move_to_relative = function(delta_xyz = [0, 0, 0], workspace_pose=null,
                                             j6_delta_angle = 0, j7_delta_angle = 0){
    return Dexter$1.move_to_relative(delta_xyz, workspace_pose, j6_delta_angle, j7_delta_angle, this)
};
Dexter$1.move_to_relative = function(delta_xyz = [0, 0, 0], workspace_pose=null, j6_delta_angle=0, j7_delta_angle=0, robot){
    return new Instruction$1.Dexter.move_to_relative(delta_xyz, workspace_pose, j6_delta_angle, j7_delta_angle,  robot)
};

Dexter$1.prototype.move_to_straight = function({xyz           = "required",
                                             J5_direction   = [0, 0, -1],
                                             config         = Dexter$1.RIGHT_UP_OUT,
                                             workspace_pose = null,
                                             tool_speed     = 5*_mm / _s,
                                             resolution     = 0.5*_mm,
                                             j6_angle       = [0],
                                             j7_angle       = [0],
                                             single_instruction = false}) {
    return Dexter$1.move_to_straight({xyz: xyz,
                                    J5_direction: J5_direction,
                                    config: config,
                                    workspace_pose: workspace_pose,
                                    tool_speed: tool_speed,
                                    resolution: resolution,
                                    j6_angle: j6_angle,
                                    j7_angle: j7_angle,
                                    single_instruction: single_instruction,
                                    robot: this})
                            };

Dexter$1.move_to_straight = function({xyz          = "required",
                                   J5_direction  = [0, 0, -1],
                                   config        = Dexter$1.RIGHT_UP_OUT,
                                   workspace_pose = null,
                                   tool_speed    = 5*_mm / _s,
                                   resolution    = 0.5*_mm,
                                   j6_angle      = [0],
                                   j7_angle      = [0],
                                   single_instruction = false,
                                   robot}){
    if(xyz == "required") { dde_error("Dexter.move_to_straight was not passed the required 'xyz' arg.<br/>move_to_straight takes keyword args."); }
    return new Instruction$1.Dexter.move_to_straight({xyz: xyz,
                                                    J5_direction: J5_direction,
                                                    config: config,
                                                    workspace_pose: workspace_pose,
                                                    tool_speed: tool_speed,
                                                    resolution: resolution,
                                                    j6_angle: j6_angle,
                                                    j7_angle: j7_angle,
                                                    single_instruction: single_instruction,
                                                    robot: robot})
};

Dexter$1.record_movement           = function(...args){ return make_ins$1("m", ...args) };
Dexter$1.prototype.record_movement = function(...args){ args.push(this); return Dexter$1.record_movement(...args) };


Dexter$1.replay_movement           = function(...args){ return make_ins$1("o", ...args) };
Dexter$1.prototype.replay_movement = function(...args){ args.push(this); return Dexter$1.replay_movement(...args) };


Dexter$1.set_parameter   = function(name="Acceleration", ...values){
                              let first_arg = values[0];
                              if (name == "StartSpeed") {
                                  if (first_arg < 0){
                                      dde_error("Dexter.set_parameter called with StartSpeed of: " + first_arg +
                                                " but it must be greater than or equal to zero.");
                                  }
                              }
                              else if (name == "MaxSpeed") {
                                  if (first_arg <= 0){
                                      dde_error("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                                " but it must be greater than zero.");
                                  }
                                  else if (first_arg < (1 / _nbits_cf)){
                                      warning("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                      " which is too low.<br/>MaxSpeed set to the minimum permissible speed of: " + (1 / _nbits_cf));
                                  }
                              }
                              return make_ins$1("S", name, ...values)
                         };
Dexter$1.prototype.set_parameter = function(name="Acceleration", ...values){
                                    let first_arg = values[0];
                                    if (name == "StartSpeed") {
                                        if (first_arg < 0){
                                            dde_error("Dexter.set_parameter called with StartSpeed of: " + first_arg +
                                                " but it must be greater than or equal to zero.");
                                        }
                                    }
                                    else if (name == "MaxSpeed") {
                                        if (first_arg <= 0){
                                            dde_error("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                                " but it must be greater than zero.");
                                        }
                                        else if (first_arg < (1 / _nbits_cf)){
                                            warning("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                                " which is too low.<br/>MaxSpeed set to the minimum permissible speed of: " + (1 / _nbits_cf));
                                        }
                                    }
                                    return make_ins$1("S", name, ...values, this)
                                };


Dexter$1.sleep           = function(seconds){ return make_ins$1("z", seconds) };
Dexter$1.prototype.sleep = function(seconds){ return make_ins$1("z", seconds, this) };

Dexter$1.slow_move           = function(...args){ return make_ins$1("s", ...args) };
Dexter$1.prototype.slow_move = function(...args){ args.push(this); return Dexter$1.slow_move(...args) };

//address is a non-neg integer, probably below 82, value is an integer
Dexter$1.write_fpga           = function(address, value){ return make_ins$1("w", address, value) };
Dexter$1.prototype.write_fpga = function(address, value){ return make_ins$1("w", address, value, this) };

Dexter$1.socket_encode = function(char){
    let code = char.charCodeAt(0);
    if((0x00 == code) || (0x3B == code) || (0x25 == code)){
        return "%" + code.toString(16).toUpperCase()
    }
    else { return char }
};

Dexter$1.write_file = function(file_name=null, content=""){
    let max_content_chars = 62; //244 //252 //ie 256 - 4 for (instruction_id, oplet, suboplet, length
    //payload can be max_contect_chars + 2 long if last character is escaped
    let payload = "";
    let instrs = [];
    if (file_name){
        instrs.push(make_ins$1("W", "f", 0, file_name));
    }
    for(let char of content) {
        payload += Dexter$1.socket_encode(char);
        if (payload.length >= max_content_chars) {
            instrs.push(make_ins$1("W", "m", payload.length, payload));
            payload = "";
        }
    }
    instrs.push(make_ins$1("W", "e", payload.length, payload)); //close the file
    return instrs
};

//deprecated. Note reversed args from Dexter.write_file and default path adjustment
Dexter$1.write_to_robot = function(content="", file_name=null){
    file_name = Dexter$1.srv_samba_share_default_to_absolute_path(file_name);
    return Dexter$1.write_file(file_name, content)
};

Dexter$1.prototype.write_file = function(file_name=null, content=""){
    let max_content_chars = 62; //244 //252 //ie 256 - 4 for (instruction_id, oplet, suboplet, length
    //payload can be max_contect_chars + 2 long if last character is escaped
    let payload = "";
    let instrs = [];
    if (file_name){
        instrs.push(make_ins$1("W", "f", 0, file_name, this));
    }
    for(let char of content) {
        payload += Dexter$1.socket_encode(char);
        if (payload.length >= max_content_chars) {
            instrs.push(make_ins$1("W", "m", payload.length, payload, this));
            payload = "";
        }
    }
    instrs.push(make_ins$1("W", "e", payload.length, payload, this)); //close the file
    return instrs
};

//deprecated. Note reversed args from Dexter.write_file
Dexter$1.prototype.write_to_robot = function(content="", file_name=null){
    return this.write_file(file_name, content)
};

/*testing code
    var data = ""
//for (var i = 255; i > 0; i--) { //top to bottom
for (var i = 0; i < 256; i++) {  //bottom to top
    data += String.fromCharCode(i)
}

//out(data);
out(data.length)

new Job({name: "my_job",
    do_list: [out(Dexter.write_file(data, "/srv/samba/share/test.txt"))]})
*/

Dexter$1.read_file = function(source, destination="read_file_content"){
    return new Instruction$1.Dexter.read_file(source, destination)
};
//examples pf path input:
//  ./foo.txt =>  /srv/samba/share/foo.txt
// ../foo.txt =>  /srv/samba/foo.txt
//    foo.txt => /srv/samba/share/foo.txt
Dexter$1.srv_samba_share_default_to_absolute_path = function(path){
    if      (path.startsWith("/"))   { return path }
    else if (path.startsWith("#"))   { return path }
    else if (path.startsWith("./"))  { return "/srv/samba/share/" + path.substring(2) }
    else if (path.startsWith("../")) { return "/srv/samba/"       + path.substring(3) }
    else                             { return "/srv/samba/share/" + path }
};

Dexter$1.read_from_robot =  function (source, destination="read_file_content"){ //deprecated. simlar to read_file but differs in that srv_sama_share is the default folder
    source = Dexter$1.srv_samba_share_default_to_absolute_path(source);
    return Dexter$1.read_file(source, destination)
};

Dexter$1.prototype.read_file = function (source, destination="read_file_content"){
    return new Instruction$1.Dexter.read_file(source, destination, this)
};

Dexter$1.prototype.read_from_robot = Dexter$1.prototype.read_file;


//See James N email Jul 14, 2021
Dexter$1.turn_off_j6_and_j7_torque  = function(){
    return [Dexter$1.set_parameter("ServoSet", 3, 24, 0), //J6, for XL-320 motors
            Dexter$1.set_parameter("ServoSet", 1, 24, 0)] //J7, for XL-320 motors
};

Dexter$1.prototype.turn_off_j6_and_j7_torque  = function(){
    return [this.set_parameter("ServoSet", 3, 24, 0), //J6, for XL-320 motors
            this.set_parameter("ServoSet", 1, 24, 0)] //J7, for XL-320 motors
};

Dexter$1.turn_on_j6_and_j7_torque  = function(){
    return [Dexter$1.set_parameter("ServoSet", 3, 24, 1), //J6, for XL-320 motors
            Dexter$1.set_parameter("ServoSet", 1, 24, 1)] //J7, for XL-320 motors
};

Dexter$1.prototype.turn_on_j6_and_j7_torque  = function(){
    return [this.set_parameter("ServoSet", 3, 24, 1), //J6, for XL-320 motors
            this.set_parameter("ServoSet", 1, 24, 1)] //J7, for XL-320 motors
};


//from Dexter_Modes.js (these are instructions. The fns return an array of instructions
Dexter$1.set_follow_me                = function(){ return [make_ins$1("S", "RunFile", "setFollowMeMode.make_ins"),
                                                          Dexter$1.turn_off_j6_and_j7_torque()]};
Dexter$1.prototype.set_follow_me      = function(){ return [make_ins$1("S", "RunFile", "setFollowMeMode.make_ins", this),
                                                          this.turn_off_j6_and_j7_torque()]};

Dexter$1.set_force_protect            = function(){ return [make_ins$1("S", "RunFile", "setForceProtectMode.make_ins"),
                                                          Dexter$1.turn_on_j6_and_j7_torque()]};
Dexter$1.prototype.set_force_protect  = function(){ return [make_ins$1("S", "RunFile", "setForceProtectMode.make_ins", this),
                                                          this.turn_on_j6_and_j7_torque()]};

Dexter$1.set_keep_position            = function(){ return [make_ins$1("S", "RunFile", "setKeepPositionMode.make_ins"),
                                                          Dexter$1.turn_on_j6_and_j7_torque()]};
Dexter$1.prototype.set_keep_position  = function(){ return [make_ins$1("S", "RunFile", "setKeepPositionMode.make_ins", this),
                                                          this.turn_on_j6_and_j7_torque()]};

Dexter$1.set_open_loop                = function(){ return [make_ins$1("S", "RunFile", "setOpenLoopMode.make_ins"),
                                                          Dexter$1.turn_on_j6_and_j7_torque()]};
Dexter$1.prototype.set_open_loop      = function(){ return [make_ins$1("S", "RunFile", "setOpenLoopMode.make_ins", this),
                                                          this.turn_on_j6_and_j7_torque()]};


//End Dexter Instructions
//____________Dexter Database______________
//Note: often you should use Robot.instruction_type_to_
Dexter$1.instruction_type_to_function_name_map = {
    a:"move_all_joints",
    //b:"move_to",           //fry  obsolete
    B:"set_boundries", //10 args: j1BoundryHigh, j1Boundrylow,  j2BoundryHigh, j2Boundrylow, j3BoundryHigh, j3Boundrylow, j4BoundryHigh, j4Boundrylow, j5BoundryHigh, j5Boundrylow,
    C:"pid_move_to",
    c:"capture_ad",
    D:"pid_move_to_straight",
    d:"dma_read",
    e:"cause_dexter_error", //fry
    //E:"empty_instruction_queue_immediately", //new Sept 1, 2016
    F:"empty_instruction_queue",   //new Sept 1, 2016
    G:"get_robot_status_immediately",        //new Sept 1, 2016. Deprecated Dec 8, 2020
    g:"get_robot_status",   //fry
    h:"get_robot_status_heartbeat", //fry
    i:"capture_points",
    l:"load_tables",
    m:"record_movement",
    n:"find_index",
    o:"replay_movement",
    P:"pid_move_all_joints",
    R:"move_all_joints_relative",
    r:"read_file",
    s:"slow_move",
    S:"set_parameter",
    t:"dma_write",
    T:"move_to_straight",
    w:"write_fpga",
    W:"write_file",
    x:"exit",
    z:"sleep"
};

/*
var cache_of_dexter_instance_files = {}

//returns undefined or value of prop_name
//errors if the robot file is not valid json format
//first checks dexter instance, then file prop, then Dexter class prop

//returns a string if error, or literal name-value pairs object.
Dexter.prototype.get_dexter_props_file_object = function(){
    let file_path  = "//" + this.ip_address + "/share/robot_props.json" //todo needs verificatin
    if (file_exists(file_path)) {
        let content = read_file(file_path)
        try {
            const result = JSON.parse(content)
            return result
            //cache_of_dexter_instance_files[this.name] = result
        }
        catch(err) {
            return "The file: " + __dirname + "/" + file_name +
                "<br/>is not valid jason format: " + err.message
        }
    }
    else { return null }
}

Dexter.prototype.prop = function(prop_name, get_from_dexter=false){
    if (get_from_dexter){
        const file_result = this.get_dexter_props_file_object()
        if (typeof(file_result) == "string") { dde_error(file_result) }
        else { return file_result[prop_name] }
    }
    else {
        var val = this[prop_name]
        if(val !== undefined) { return val }
        else if (cache_of_dexter_instance_files[this.name] === undefined){ //fill up cache_of_dexter_instance_files or error, but don't even attempt to get actual result yet
            const file_result = this.get_dexter_props_file_object()
            if (typeof(file_result) == "string") {
                dde_error(file_result)
            }
            else if (file_result === null){
                let file_path  = "//" + this.ip_address + "/share/robot_props.json"
                warning("The file: " + file_path + " does not exist.")
                cache_of_dexter_instance_files[this.name] = false
            }
        }
        const obj = cache_of_dexter_instance_files[this.name] //obj will NOT be undefined. Its eitehr false or is a lit obj
        if (obj !== false){
            const result = obj[prop_name]
            if (result !== undefined) { return result }
        }
        return Dexter[prop_name]  //get the typical "class value" of the prop
    }
}
*/

//Dexter constants
//values in microns, pivot point to pivot point, not actual link length.
//Dexter manufacturing tolerance is about 5 microns for these link lengths.

//             HDI         ORIG DEX              ORIG DEX
Dexter$1.LINK1 = 0.235200;    //0.228600   //meters   6.5 inches,
Dexter$1.LINK2 = 0.339092;   //0.320676   //meters  12 5/8 inches
Dexter$1.LINK3 = 0.307500;    //0.330201   //meters  13 inches
Dexter$1.LINK4 = 0.059500;    //0.050801   //meters  2 inches
Dexter$1.LINK5 = 0.082440;   //0.082551   //meters  3.25 inches  // from pivot point to tip of the end-effector
//Dexter.LINKS = [0, Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]

/*These are the HDI Link Lengths as of Jan 1, 2020:
Dexter.LINK1 = 0.2352
Dexter.LINK2 = 0.339092
Dexter.LINK3 = 0.3075
Dexter.LINK4 = 0.0595
Dexter.LINK5 = 0.08244
*/

Dexter$1.LINK1_v1 = Dexter$1.LINK1 * 1000000; //in microns
Dexter$1.LINK2_v1 = Dexter$1.LINK2 * 1000000; //in microns
Dexter$1.LINK3_v1 = Dexter$1.LINK3 * 1000000; //in microns
Dexter$1.LINK4_v1 = Dexter$1.LINK4 * 1000000; //in microns
Dexter$1.LINK5_v1 = Dexter$1.LINK5 * 1000000; //in microns

Dexter$1.LINK1_AVERAGE_DIAMETER =  0.090000; //meters
Dexter$1.LINK2_AVERAGE_DIAMETER =  0.120000; //meters
Dexter$1.LINK3_AVERAGE_DIAMETER =  0.050000; //meters
Dexter$1.LINK4_AVERAGE_DIAMETER =  0.035000; //meters
Dexter$1.LINK5_AVERAGE_DIAMETER =  0.030000; //meters

//gets called regardless of whether simulate = true or not because
//even if we're simulating, we like to get that actual link lengths from
//the dexter IF its available
/*Dexter.prototype.set_link_lengths = function(job_to_start_when_done = null){
    let job_to_start = job_to_start_when_done //for closure
    let the_robot  = this //for closure
    let sim_actual = Robot.get_simulate_actual(this.simulate)
    if(this.Link1 &&
      (sim_actual !== true) && //ie "real"
      (this.link_lengths_set_from_dde_computer == true)){
        this.Link1 = undefined  //we want to get vals from Dexter.
        this.Link2 = undefined
        this.Link3 = undefined
        this.Link4 = undefined
        this.Link5 = undefined
    }
    if(!this.Link1 &&
       (!job_to_start || (job_to_start.name != "set_link_lengths"))){
       //we're going to set link lengths.
        if(sim_actual !== true) { //get link lengths from Dexter
            if(node_server_supports_editor(this)) {
                this.set_link_lengths_using_node_server(job_to_start)
            }
            else {
                warning("Dexter." + the_robot.name + "'s node server is not responding.<br/>" +
                        "Now attempting to get link lengths via a Job.")
                this.set_link_lengths_using_job(job_to_start)
            }
        }
        else { //get link lengths from dde computer
            this.set_link_lengths_using_dde_db(job_to_start)
        }
    }
    else {
        this.start_aux(job_to_start)
    }
}*/

//note that
Dexter$1.prototype.set_link_lengths = function(job_to_start_when_done = null){
    let sim_actual = Robot$1.get_simulate_actual(this.simulate);
    if(job_to_start_when_done && (job_to_start_when_done.name === "set_link_lengths")) {
        this.start_aux(job_to_start_when_done);
    }
    else if(!this.Link1) { //no values set since dde launch
        if(sim_actual !== true) { //ie "real"
            if(node_server_supports_editor(this)) {
                this.set_link_lengths_using_node_server(job_to_start_when_done);
            }
            else {
                warning("Dexter." + this.name + "'s node server is not responding.<br/>" +
                    "Setting link lengths via DDE's internal defaults.");
                //this.set_link_lengths_using_job(job_to_start_when_done)
                this.set_link_lengths_using_dde_db(job_to_start_when_done);
            }
        }
        else { //simulating
            this.set_link_lengths_using_dde_db(job_to_start_when_done);
        }
    }
    //already set the Link lengths once, but ...
    else if((sim_actual !== true) && //ie real
            (this.link_lengths_set_from_dde_computer === true)) { //the only time we read link_lengths_set_from_dde_computer
        if(node_server_supports_editor(this)) {
            this.set_link_lengths_using_node_server(job_to_start_when_done);
        }
        else {
            warning("Dexter." + this.name + "'s node server is not responding.<br/>" +
                    "Setting link lengths via DDE's internal defaults.");
            //this.set_link_lengths_using_job(job_to_start_when_done)
            this.set_link_lengths_using_dde_db(job_to_start_when_done);
        }
    }
    else {//link lengths already set correctly
        this.start_aux(job_to_start_when_done);
    }
};

/*
Dexter.prototype.set_link_lengths_using_node_server = function(job_to_start){
    let path = //"https://" + this.ip_address + "/srv/samba/share/Defaults.make_ins"
              "http://192.168.1.142/edit?edit=/srv/samba/share/Defaults.make_ins"
    let the_dexter = this
    let callback = function(err, data){
        if(err){
            dde_error("in set_link_lengths_using_node_server, could not get content of:<br/>" +
                       path)
        }
        else {
            if(typeof(data) !== "string") {
                data = data.body
            }
            the_dexter.set_link_lengths_from_file_content(data)
            if(job_to_start) { job_to_start.start }
        }
    }
    read_file_async(path, undefined, callback)
}
*/

Dexter$1.prototype.set_link_lengths_using_node_server = function(job_to_start){
    let ip = job_to_start.robot.ip_address;
    let path = "http://" + ip + "/edit?edit=/srv/samba/share/Defaults.make_ins";
    let content = get_page(path);
    if(content.startsWith("Error: ")) {
        warning("set_link_lengths_using_node_server with path: " + path +
                " got error: " + content +
                "<br/> so now setting link lengths using a DDE Job.");
        this.set_link_lengths_using_dde_db(job_to_start); //this will deal with link_lengths_set_from_dde_computer
    }
    else {
        this.set_link_lengths_from_file_content(content);
        delete this.link_lengths_set_from_dde_computer;
        if(job_to_start) {
            this.start_aux(job_to_start);
        }
    }
};
/*
Dexter.prototype.set_link_lengths_using_job = function(job_to_start){
    let the_robot = this
    let callback = function() {
        if(Job.set_link_lengths) {
            out("in sll cbb")
        }
        the_robot.start_aux(job_to_start)
    }
    let ssl_job =  new Job({name: "set_link_lengths",
                            robot: this,
                            show_instructions: false,
                            when_stopped: (job_to_start ? callback : "stop"),
                            if_dexter_connect_error: function(robot_name){
                                 warning("Can't connect to Dexter." + robot_name + " executing Job." + "set_link_lengths")
                                if(job_to_start.if_dexter_connect_error){
                                    job_to_start.if_dexter_connect_error(robot_name)
                                }
                                job_to_start.stop_for_reason("errored", "Can't connect to robot: " + robot_name)
                            },
                            do_list: [
                                Dexter.read_file("../Defaults.make_ins", "default_content"), //gets file from Dexter
                                function() {
                                    if(typeof(this.user_data.default_content) == "string"){
                                        this.robot.set_link_lengths_from_file_content(this.user_data.default_content)
                                        delete the_robot.link_lengths_set_from_dde_computer //because link lengths set from Dexter
                                    }
                                    else { //no file because we got an error code integer in this.user_data.default_content
                                        this.robot.set_link_lengths_using_dde_db(job_to_start) //will deal with link_lengths_set_from_dde_computer
                                    }
                                }
                            ]})
    ssl_job.start()
}
*/

Dexter$1.prototype.set_link_lengths_using_dde_db = function(job_to_start){
    let path = dde_apps_folder + "/dexter_file_systems/"  + this.name + "/Defaults.make_ins";
    if(file_exists$1(path)) {
        let content = read_file$1(path);
        this.set_link_lengths_from_file_content(content);
    }
    else {
        this.Link1 = Dexter$1.LINK1;
        this.Link2 = Dexter$1.LINK2;
        this.Link3 = Dexter$1.LINK3;
        this.Link4 = Dexter$1.LINK4;
        this.Link5 = Dexter$1.LINK5;

        this.J1_angle_min = Dexter$1.J1_ANGLE_MIN;
        this.J2_angle_min = Dexter$1.J2_ANGLE_MIN;
        this.J3_angle_min = Dexter$1.J3_ANGLE_MIN;
        this.J4_angle_min = Dexter$1.J4_ANGLE_MIN;
        this.J5_angle_min = Dexter$1.J5_ANGLE_MIN;
        this.J6_angle_min = Dexter$1.J6_ANGLE_MIN;
        this.J7_angle_min = Dexter$1.J7_ANGLE_MIN;

        this.J1_angle_max = Dexter$1.J1_ANGLE_MAX;
        this.J2_angle_max = Dexter$1.J2_ANGLE_MAX;
        this.J3_angle_max = Dexter$1.J3_ANGLE_MAX;
        this.J4_angle_max = Dexter$1.J4_ANGLE_MAX;
        this.J5_angle_max = Dexter$1.J5_ANGLE_MAX;
        this.J6_angle_max = Dexter$1.J6_ANGLE_MAX;
        this.J7_angle_max = Dexter$1.J7_ANGLE_MAX;
    }
    this.link_lengths_set_from_dde_computer = true;
    if(job_to_start) {
        this.start_aux(job_to_start);
    }
};

//content is the content of a Defaults.make_ins file
//sets link lengths as well as any other params in the file.
Dexter$1.prototype.set_link_lengths_from_file_content = function(content){
    for(let line of content.split("\n")){
        //first get rid of comment, if any, at line end.
        let semi_pos = line.indexOf(";");
        if (semi_pos > -1) { line = line.substring(0, semi_pos); }
        line = line.trim();
        if(line.length > 0) {
            let line_elts = line.split(",");
            let oplet = line_elts[0].trim();
            if(oplet == "S"){
                let param_name = line_elts[1].trim();
                if(line_elts.length == 3){
                    let val = parseFloat(line_elts[2].trim());
                    let new_param_name = param_name;
                    if(param_name.includes("Boundry")) {
                        val = val * _arcsec;
                        new_param_name = "J";
                        new_param_name += param_name[1];
                        new_param_name = new_param_name + "_angle_"; //+= fails here. JS bug
                        if(param_name.endsWith("Low")) {new_param_name += "min";}
                        else                           {new_param_name += "max";}
                    }
                    this[new_param_name] = val;
                }
                //the rest have more than one val
                else if (param_name == "LinkLengths") { //link5 length is in the array first. }
                    for(let i = 2; i < line_elts.length; i++){
                        let i_val = parseFloat(line_elts[i].trim()) * _um;  //convert from string of microns to meters.
                        if     (i == 2) { this.Link5 = i_val; }
                        else if(i == 3) { this.Link4 = i_val; }
                        else if(i == 4) { this.Link3 = i_val; }
                        else if(i == 5) { this.Link2 = i_val; }
                        else if(i == 6) { this.Link1 = i_val; }
                        else { shouldnt$1("set_parameter of: " + param_name + " got more than 5 link lengths."); }
                    }
                }
                else {
                    val = line_elts.slice(2, line_elts.length - 1);
                    this[param_name] = val;
                }
            }
        }
    }
    if(!this.J6_angle_min) { //not included in some defaults.makeins files
        this.J6_angle_min = Dexter$1.J6_ANGLE_MIN;
    }
    if(!this.J6_angle_max) { //not included in some defaults.makeins files
        this.J6_angle_max = Dexter$1.J6_ANGLE_MAX;
    }
    if(!this.J7_angle_min) { //not included in some defaults.makeins files
        this.J7_angle_min = Dexter$1.J7_ANGLE_MIN;
    }
    if(!this.J7_angle_max) { //not included in some defaults.makeins files
        this.J7_angle_max = Dexter$1.J7_ANGLE_MAX;
    }
};

Dexter$1.LEG_LENGTH = 0.152400; //meters  6 inches

//values in degrees, Dexter HDI
Dexter$1.J1_ANGLE_MIN = -185;
Dexter$1.J1_ANGLE_MAX = 185;
Dexter$1.J2_ANGLE_MIN = -105;
Dexter$1.J2_ANGLE_MAX = 105;
Dexter$1.J3_ANGLE_MIN = -150;
Dexter$1.J3_ANGLE_MAX = 150;
Dexter$1.J4_ANGLE_MIN = -120; //-100
Dexter$1.J4_ANGLE_MAX = 120;  //100
Dexter$1.J5_ANGLE_MIN = -185;
Dexter$1.J5_ANGLE_MAX = 185;
Dexter$1.J6_ANGLE_MIN = -150; //0
Dexter$1.J6_ANGLE_MAX = 150; //296
Dexter$1.J7_ANGLE_MIN = 0;
Dexter$1.J7_ANGLE_MAX = 296;

Dexter$1.MAX_SPEED    = 30;  //degrees per second. NOT the max speed of the robot,
                         //but rather for a given instruction's envelope of speed,
                         //its the max speed that will be attined by that instruction.
                         //The JOINT that this is the max speed for is
                         //the joint that changes the most in a given call to move_all_joints.
Dexter$1.START_SPEED  = 0.5; //degrees per second
Dexter$1.ACCELERATION = 0.000129; //degrees/(second^2)

Dexter$1.RIGHT_ANGLE    = 90; // 90 degrees
Dexter$1.HOME_ANGLES    = [0, 0, 0, 0, 0, 0, 50];  //j2,j3,j4 straight up, link 5 horizontal pointing frontwards. If J7 is 0 it will overtorque, turning on the red light as it closes too tightly. James W likes 50 degrees.
Dexter$1.NEUTRAL_ANGLES = [0, 45, 90, -45, 0, 0, 0]; //lots of room for Dexter to move from here.
Dexter$1.PARKED_ANGLES  = [0, 0, 135, 45, 0, 0, 0]; //all folded up, compact.

Dexter$1.HOME_POSITION    = [[0, 0.08255, 0.866775],[0, 1, 0], [1, 1, 1]]; //meters, j5 direction, config
Dexter$1.NEUTRAL_POSITION = [[0, 0.5,     0.075],   [0, 0, -1],[1, 1, 1]];    //meters, j5 direction, config
//don't define   Dexter.PARKED_POSITION = [0, 0.151, 0.20],  [0, -1, 0],   [1, 1, 1]

    /*Dexter.robot_status_labels = [
        "ds_instruction_id",    // = 0
        "ds_instruction_type",  // = 1 //helps in debugging
        "ds_error_code",        // = 2 //0 means no error.

        "ds_j0_angle", //  = 3
        "ds_j1_angle", //  = 4
        "ds_j2_angle", //  = 5
        "ds_j3_angle", //  = 6
        "ds_j4_angle", //  = 7

        "ds_j0_x", //  = 8
        "ds_j0_y", //  = 9
        "ds_j0_z", //  = 10

        "ds_j1_x", //  = 11
        "ds_j1_y", //  = 12
        "ds_j1_z", //  = 13

        "ds_j2_x", //  = 14
        "ds_j2_y", //  = 15
        "ds_j2_z", //  = 16

        "ds_j3_x", //  = 17
        "ds_j3_y", //  = 18
        "ds_j3_z", //  = 19

        "ds_j4_x", //  = 20
        "ds_j4_y", //  = 21
        "ds_j4_z", //  = 22

        "ds_j5_x", //  = 23
        "ds_j5_y", //  = 24
        "ds_j5_z", //  = 25

        "ds_tool_type"   //  = 26
    ]*/
/*
Dexter.robot_status_labels = [
    "INSTRUCTION_ID",       // = 0
    "INSTRUCTION_TYPE",     // = 1 //the "oplet". helps in debugging
    "ERROR_CODE",           // = 2 //0 means no error.

    "BASE_POSITION_AT",     // 3  j0  means angle degrees.  base is bottom
    "END_POSITION_AT",      // 4  j2
    "PIVOT_POSITION_AT",    // 5  j1
    "ANGLE_POSITION_AT",    // 6  j3
    "ROTATE_POSITION_AT",   // 7  j4

//TABLE CALCULATED DELTA
    "BASE_POSITION_DELTA",   // 8   delta diff between where commanded to go and where optical encoder says.
    "END_POSITION_DELTA",    // 9
    "PIVOT_POSITION_DELTA",  // 10
    "ANGLE_POSITION_DELTA",  // 11
    "ROTATE_POSITION_DELTA", // 12

//PID CALCULATED DELTA
    "BASE_POSITION_PID_DELTA",   // 13     proportion integraded d.... math fn. helps hone in, reducing ocillation. closest to the force
    "END_POSITION_PID_DELTA",    // 14
    "PIVOT_POSITION_PID_DELTA",  // 12
    "ANGLE_POSITION_PID_DELTA",  // 13
    "ROTATE_POSITION_PID_DELTA", // 14

// FORCE CALCULATED POSITION MODIFICATION
    "BASE_POSITION_FORCE_DELTA",    // 15   hair
    "END_POSITION_FORCE_DELTA",     // 16
    "PIVOT_POSITION_FORCE_DELTA",   // 17
    "ANGLE_POSITION_FORCE_DELTA",   // 18
    "ROT_POSITION_FORCE_DELTA",     // 19

// RAW ANALOG TO DIGITAL VALUES from A 2 D converter
    "BASE_SIN", //  20
    "BASE_COS", //  21
    "END_SIN",  //  22
    "END_COS",  //  23
    "PIVOT_SIN",//  24
    "PIVOT_COS",//  25
    "ANGLE_SIN",//  26
    "ANGLE_COS",//  27
    "ROT_SIN",  //  28
    "ROT_COS",  //  29

    "DMA_READ_DATA",    //  30   // PROB SHOULD NOT BE USED WITH DDE

// RECORD AND PLAYBACK
    "RECORD_BLOCK_SIZE",        //  31
    "READ_BLOCK_COUNT",         //  32
    "PLAYBACK_BASE_POSITION",   //  33
    "PLAYBACK_END_POSITION",    //  34
    "PLAYBACK_PIVOT_POSITION",  //  35
    "PLAYBACK_ANGLE_POSITION",  //  36
    "PLAYBACK_ROT_POSITION",    //  37

    "END_EFFECTOR_IO_IN",   //  38   32 bits coming from the end effector.

    "SENT_BASE_POSITION",   //  39  where we told joint to go, - 250k to + 250k fixed
    "SENT_END_POSITION",    //  40
    "SENT_PIVOT_POSITION",  //  41
    "SENT_ANGLE_POSITION",  //  42
    "SENT_ROT_POSITION",    //  43

    "SLOPE_BASE_POSITION",  //  44   where at in acell curve. minimize jerk
    "SLOPE_END_POSITION",   //  45
    "SLOPE_PIVOT_POSITION", //  46
    "SLOPE_ANGLE_POSITION", //  47
    "SLOPE_ROT_POSITION"    //  48
] */
//for acknowledgement
/* obsolete Jan 2021
Dexter.robot_ack_labels = [
//new name   old name                   array index
// misc block
    "JOB_ID",              //0
    "INSTRUCTION_ID",      //1
    "START_TIME",          //2 //ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //3 //ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //4 "oplet"
    "ERROR_CODE"           //5   0 means ok
]*/

//call this from most code
Dexter$1.robot_status_labels_sm = function(sm=0){
    if(sm === 0) { return Dexter$1.robot_status_labels }
    else {
        let labels_name = "robot_status_labels_g" + sm;
        let actual_labels_array = Dexter$1[labels_name];
        if(actual_labels_array) { return actual_labels_array}
        else { return Dexter$1.robot_status_labels_g_other }
    }
};

Dexter$1.robot_status_labels = [
//new name             old name
// misc block                    array index
"JOB_ID",              //new field                    0 //for commmanded instruction (when added to queue)
"INSTRUCTION_ID",      //same name                    1 //for cmd ins
"START_TIME",          //new field                    2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
"STOP_TIME",           //new field                    3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
"INSTRUCTION_TYPE",    //same name                    4 //for cmd ins  //"oplet"

"ERROR_CODE",          //same name                    5 //for any error      //0 means no error. 1 means an error
"DMA_READ_DATA",       //                             6 // deprecated DMA_READ_DATA  then deprecated  "JOB_ID_OF_CURRENT_INSTRUCTION"
"READ_BLOCK_COUNT",    //                             7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
"STATUS_MODE",         //same name                    8 //was RECORD_BLOCK_SIZE and was unused
"END_EFFECTOR_IO_IN",     //END_EFFECTOR_IO_IN        9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector
//J1 block
"J1_ANGLE",            // BASE_POSITION_AT           10 //means commanded stepped angle, not commanded_angle and not current_angle
"J1_DELTA",            // BASE_POSITION_DELTA        11
"J1_PID_DELTA",        // BASE_POSITION_PID_DELTA    12
null,                  // BASE_POSITION_FORCE_DELTA  13 //was J1_FORCE_CALC_ANGLE
"J1_A2D_SIN",          // BASE_SIN                   14
"J1_A2D_COS",          // BASE_COS                   15
"J1_MEASURED_ANGLE",   // PLAYBACK_BASE_POSITION     16 //deprecated J1_PLAYBACK
"J1_SENT",             // SENT_BASE_POSITION         17 //unused. angle sent in the commanded angle of INSTRUCTION_ID
"J7_MEASURED_ANGLE",   // SLOPE_BASE_POSITION        18 //deprecated J1_SLOPE
 null,                 //                            19 //was J1_MEASURED_ANGLE. not used, get rid of, now don't compute on dde side,
//J2 block of 10
"J2_ANGLE",            // END_POSITION_AT            20
"J2_DELTA",            // END_POSITION_DELTA         21
"J2_PID_DELTA",        // END_POSITION_PID_DELTA     22 was J2_FORCE_CALC_ANGLE
null,                  // END_POSITION_FORCE_DELTA   23
"J2_A2D_SIN",          // END_SIN                    24
"J2_A2D_COS",          // END_COS                    25
"J2_MEASURED_ANGLE",   // PLAYBACK_END_POSITION      26 //deprecated J2_PLAYBACK
"J2_SENT",             // SENT_END_POSITION          27 //unused
"J7_MEASURED_TORQUE",  // SLOPE_END_POSITION         28 //deprecated J2_SLOPE
 null,                 // new field                  29 //was J2_MEASURED_ANGLE, not used, get rid of,
//J2 block of 10
"J3_ANGLE",            // PIVOT_POSITION_AT           30
"J3_DELTA",            // PIVOT_POSITION_DELTA        31
"J3_PID_DELTA",        // PIVOT_POSITION_PID_DELTA    32
null,                  // PIVOT_POSITION_FORCE_DELTA  33  was "J3_FORCE_CALC_ANGLE"
"J3_A2D_SIN",          // PIVOT_SIN                   34
"J3_A2D_COS",          // PIVOT_SIN                   35
"J3_MEASURED_ANGLE",   // PLAYBACK_PIVOT_POSITION     36 //deprecated J3_PLAYBACK
"J3_SENT",             // SENT_PIVOT_POSITION         37 //unused
"J6_MEASURED_ANGLE",   // SLOPE_PIVOT_POSITION        38 //deprecated  J3_SLOPE
 null,                 // new field                   39 //was J3_MESURED_ANGLE not used get rid of
//J4 block of 10
"J4_ANGLE",            // ANGLE_POSITION_AT           40
"J4_DELTA",            // ANGLE_POSITION_DELTA        41
"J4_PID_DELTA",        // ANGLE_POSITION_PID_DELTA    42
null,                  // ANGLE_POSITION_FORCE_DELTA  43 was "J4_FORCE_CALC_ANGLE"
"J4_A2D_SIN",          // ANGLE_SIN                   44
"J4_A2D_COS",          // ANGLE_SIN                   45
"J4_MEASURED_ANGLE",   // PLAYBACK_ANGLE_POSITION     46 //deprecated J4_PLAYBACK
"J4_SENT",             // SENT_ANGLE_POSITION         47 //unused
"J6_MEASURED_TORQUE",  // SLOPE_ANGLE_POSITION        48 //deprecated J4_SLOPE
null,                  // new field                   49 //not used get rid of
//J4 block of 10
"J5_ANGLE",            // ROTATE_POSITION_AT          50
"J5_DELTA",            // ROTATE_POSITION_DELTA       51
"J5_PID_DELTA",        // ROTATE_POSITION_PID_DELTA   52
null,                  // ROT_POSITION_FORCE_DELTA    53 was "J5_FORCE_CALC_ANGLE"
"J5_A2D_SIN",          // ROT_SIN                     54
"J5_A2D_COS",          // ROT_SIN                     55
"J5_MEASURED_ANGLE",   // PLAYBACK_ROT_POSITION       56 //deprecated J5_PLAYBACK
"J5_SENT",             // SENT_ROT_POSITION           57 //unused
null,                  // SLOPE_ROT_POSITION          58 //deprecated J5_SLOPE  unusued
null                   // new field                   59 //was J5_MEASURED_ANGLE, not used get rid of
];


//its inefficient to have effectively 3 lists, but the sans-index list is good for
//short labels used in tables, and the index is nice and explicit
//for robot.robot_status[Dexter.foo_index] access
//The explicit Dexter.robot_status_index_labels is needed for a series.
Dexter$1.make_robot_status_indices = function(labels = Dexter$1.robot_status_labels, index_array=Dexter$1.robot_status_index_labels){
    for(var i = 0; i < labels.length; i++){
        var label = labels[i]; //could be null
        if (label) {
            var index_label = "Dexter." + label; //+ "_INDEX"
            Dexter$1[label] = i;
            index_array.push(index_label);
        }
    }
};

Dexter$1.robot_status_index_labels = [];
Dexter$1.make_robot_status_indices();

Dexter$1.make_backward_compatible_robot_status_indices = function(){
    Dexter$1.DMA_READ_DATA    = 6;
    Dexter$1.READ_BLOCK_COUNT = 7;
    Dexter$1.RECORD_BLOCK_SIZE = 8;
    Dexter$1.END_EFFECTOR_IN  = 9;

    Dexter$1.J1_PLAYBACK = 16;
    Dexter$1.J1_SLOPE    = 18;

    Dexter$1.J2_PLAYBACK = 26;
    Dexter$1.J2_SLOPE    = 28;

    Dexter$1.J3_PLAYBACK = 36;
    Dexter$1.J3_SLOPE    = 38;

    Dexter$1.J4_PLAYBACK = 46;
    Dexter$1.J4_SLOPE    = 48;

    Dexter$1.J5_PLAYBACK = 56;
    Dexter$1.J5_SLOPE    = 58;

    Dexter$1.J1_FORCE_CALC_ANGLE = Dexter$1.J1_MEASURED_ANGLE;
    Dexter$1.J2_FORCE_CALC_ANGLE = Dexter$1.J2_MEASURED_ANGLE;
    Dexter$1.J3_FORCE_CALC_ANGLE = Dexter$1.J3_MEASURED_ANGLE;
    Dexter$1.J4_FORCE_CALC_ANGLE = Dexter$1.J4_MEASURED_ANGLE;
    Dexter$1.J5_FORCE_CALC_ANGLE = Dexter$1.J5_MEASURED_ANGLE;
};

Dexter$1.make_backward_compatible_robot_status_indices();


Dexter$1.make_default_status_array = function(){
    let result = new Array(Dexter$1.robot_status_labels.length).fill(0);
    result[Dexter$1.INSTRUCTION_ID]   = -1;
    result[Dexter$1.INSTRUCTION_TYPE] = "g";
    result[Dexter$1.J6_MEASURED_ANGLE] = (0 - 512) * Socket$1.DEGREES_PER_DYNAMIXEL_UNIT;  //should result in degrees
    return result
};

Dexter$1.make_default_status_array_g1 = function(){
    let result = new Array(Dexter$1.robot_status_labels_g1.length).fill(0);
    result[Dexter$1.INSTRUCTION_ID]   = -1;
    result[Dexter$1.INSTRUCTION_TYPE] = "g";
    result[Dexter$1.STATUS_MODE] = 1;
    let index_j6_ma = Dexter$1.robot_status_labels_g1.indexOf("J6_MEASURED_ANGLE_G1");
    result[index_j6_ma] = -512;
    return result
};

Dexter$1.make_default_status_array_g_other = function(sm){
    let result = new Array(Dexter$1.robot_status_labels.length).fill(0);
    result[Dexter$1.INSTRUCTION_ID]   = -1;
    result[Dexter$1.INSTRUCTION_TYPE] = "g";
    result[Dexter$1.STATUS_MODE] = sm;
    return result
};

//call this from most code
Dexter$1.make_default_status_array_g_sm = function(sm=0){
    let meth_name = "make_default_status_array_g" + sm;
    let meth = Dexter$1[meth_name];
    if(meth) { return  meth.call(this) }
    else     { return Dexter$1.make_default_status_array_g_other(sm) }
};

Dexter$1.robot_status_labels_g1 = [
    // misc block
    "JOB_ID",              //new field  0 //for commmanded instruction (when added to queue)
    "INSTRUCTION_ID",      //same name  1 //for cmd ins
    "START_TIME",          //new field  2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //new field  3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //same name  4 //for cmd ins  //"oplet"

    "ERROR_CODE",          //same name  5 //for any error      //0 means no error. 1 means an error
    "DMA_READ_DATA",       //           6 // deprecated DMA_READ_DATA then deprecated JOB_ID_OF_CURRENT_INSTRUCTION
    "READ_BLOCK_COUNT",    //           7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
    "STATUS_MODE",   //same name        8
    "END_EFFECTOR_IO_IN",  //END_EFFECTOR_IO_IN 9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector

    "J1_MEASURED_ANGLE_G1", //10
    "J2_MEASURED_ANGLE_G1", //11
    "J3_MEASURED_ANGLE_G1", //12
    "J4_MEASURED_ANGLE_G1", //13
    "J5_MEASURED_ANGLE_G1", //14
    "J6_MEASURED_ANGLE_G1", //15
    "J7_MEASURED_ANGLE_G1", //16
    null,                   //17
    null,                   //18
    null,                   //19

    "J1_TORQUE_G1", //20
    "J2_TORQUE_G1", //21
    "J3_TORQUE_G1", //22
    "J4_TORQUE_G1", //23
    "J5_TORQUE_G1", //24
    "J6_TORQUE_G1", //25
    "J7_TORQUE_G1", //26
    null,           //27
    null,           //28
    null,           //29

    "J1_VELOCITY_G1", //30
    "J2_VELOCITY_G1", //31
    "J3_VELOCITY_G1", //32
    "J4_VELOCITY_G1", //33
    "J5_VELOCITY_G1", //34
    "J6_VELOCITY_G1", //35
    "J7_VELOCITY_G1", //36
    null,             //37
    null,             //38
    null,             //39

    null,            //40
    null,            //41
    null,            //42
    null,            //43
    null,            //44
    null,            //45
    null,            //46
    null,            //47
    null,            //48
    null,            //49

    null,            //50
    null,            //51
    null,            //52
    null,            //53
    null,            //54
    null,            //55
    null,            //56
    null,            //57
    null,            //58
    null             //59
];

Dexter$1.robot_status_index_labels_g1 = [];
Dexter$1.make_robot_status_indices(Dexter$1.robot_status_labels_g1, Dexter$1.robot_status_index_labels_g1);

/* changes from g0 to g2:
DONE Replace *_AT (presumably ANGLE as in J1_ANGLE) with *_RAW_ENCODER_ANGLE_FXP
DONE Replace *_DELTA with *_EYE_NUMBER
NO CHANGE Keep *_PID_DELTA
DON'T DO: Replace *_FORCE_DELTA with AdcCenter  What's FORCE_DELTA?
NO CHANGE Keep *_SIN
NO CHANGE Keep *_COS
NO CHANGE Keep MEASURED_ANGLE
*/
Dexter$1.robot_status_labels_g2 = [
//new name             old name
// misc block                    array index
    "JOB_ID",              //new field                    0 //for commmanded instruction (when added to queue)
    "INSTRUCTION_ID",      //same name                    1 //for cmd ins
    "START_TIME",          //new field                    2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //new field                    3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //same name                    4 //for cmd ins  //"oplet"

    "ERROR_CODE",          //same name                    5 //for any error      //0 means no error. 1 means an error
    "DMA_READ_DATA",       //                             6 // deprecated DMA_READ_DATA  then deprecated  "JOB_ID_OF_CURRENT_INSTRUCTION"
    "READ_BLOCK_COUNT",    //                             7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
    "STATUS_MODE",   //same name                    8 //was RECORD_BLOCK_SIZE and was unused
    "END_EFFECTOR_IO_IN",     //END_EFFECTOR_IO_IN           9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector

//J1 block
    "J1_RAW_ENCODER_ANGLE_FXP_G2",            // BASE_POSITION_AT           10 //means commanded stepped angle, not commanded_angle and not current_angle
    "J1_EYE_NUMBER_G2",            // BASE_POSITION_DELTA        11
    "J1_PID_DELTA_G2",        // BASE_POSITION_PID_DELTA    12
    null,                  // BASE_POSITION_FORCE_DELTA  13 //was J1_FORCE_CALC_ANGLE
    "J1_A2D_SIN_G2",          // BASE_SIN                   14
    "J1_A2D_COS_G2",          // BASE_COS                   15
    "J1_MEASURED_ANGLE_G2",   // PLAYBACK_BASE_POSITION     16 //deprecated J1_PLAYBACK
    "J1_SENT_G2",             // SENT_BASE_POSITION         17 //unused. angle sent in the commanded angle of INSTRUCTION_ID
    "J7_MEASURED_ANGLE_G2",   // SLOPE_BASE_POSITION        18 //deprecated J1_SLOPE
    null,                 //                            19 //was J1_MEASURED_ANGLE. not used, get rid of, now don't compute on dde side,
//J2 block of 10
    "J2_RAW_ENCODER_ANGLE_FXP_G2",            // END_POSITION_AT            20
    "J2_EYE_NUMBER_G2",            // END_POSITION_DELTA         21
    "J2_PID_DELTA_G2",        // END_POSITION_PID_DELTA     22 was J2_FORCE_CALC_ANGLE
    null, // END_POSITION_FORCE_DELTA   23
    "J2_A2D_SIN_G2",          // END_SIN                    24
    "J2_A2D_COS_G2",          // END_COS                    25
    "J2_MEASURED_ANGLE_G2",   // PLAYBACK_END_POSITION      26 //deprecated J2_PLAYBACK
    "J2_SENT_G2",             // SENT_END_POSITION          27 //unused
    "J7_MEASURED_TORQUE_G2",  // SLOPE_END_POSITION         28 //deprecated J2_SLOPE
    null,                 // new field                  29 //was J2_MEASURED_ANGLE, not used, get rid of,
//J2 block of 10
    "J3_RAW_ENCODER_ANGLE_FXP_G2",            // PIVOT_POSITION_AT           30
    "J3_EYE_NUMBER_G2",            // PIVOT_POSITION_DELTA        31
    "J3_PID_DELTA_G2",        // PIVOT_POSITION_PID_DELTA    32
    null,                  // PIVOT_POSITION_FORCE_DELTA  33  was "J3_FORCE_CALC_ANGLE"
    "J3_A2D_SIN_G2",          // PIVOT_SIN                   34
    "J3_A2D_COS_G2",          // PIVOT_SIN                   35
    "J3_MEASURED_ANGLE_G2",   // PLAYBACK_PIVOT_POSITION     36 //deprecated J3_PLAYBACK
    "J3_SENT_G2",             // SENT_PIVOT_POSITION         37 //unused
    "J6_MEASURED_ANGLE_G2",   // SLOPE_PIVOT_POSITION        38 //deprecated  J3_SLOPE
    null,                 // new field                   39 //was J3_MESURED_ANGLE not used get rid of
//J4 block of 10
    "J4_RAW_ENCODER_ANGLE_FXP_G2",            // ANGLE_POSITION_AT           40
    "J4_EYE_NUMBER_G2",            // ANGLE_POSITION_DELTA        41
    "J4_PID_DELTA_G2",        // ANGLE_POSITION_PID_DELTA    42
    null,                  // ANGLE_POSITION_FORCE_DELTA  43 was "J4_FORCE_CALC_ANGLE"
    "J4_A2D_SIN_G2",          // ANGLE_SIN                   44
    "J4_A2D_COS_G2",          // ANGLE_SIN                   45
    "J4_MEASURED_ANGLE_G2",   // PLAYBACK_ANGLE_POSITION     46 //deprecated J4_PLAYBACK
    "J4_SENT_G2",             // SENT_ANGLE_POSITION         47 //unused
    "J6_MEASURED_TORQUE_G2",  // SLOPE_ANGLE_POSITION        48 //deprecated J4_SLOPE
    null,                  // new field                   49 //not used get rid of
//J4 block of 10
    "J5_RAW_ENCODER_ANGLE_FXP_G2",            // ROTATE_POSITION_AT          50
    "J5_EYE_NUMBER_G2",            // ROTATE_POSITION_DELTA       51
    "J5_PID_DELTA_G2",        // ROTATE_POSITION_PID_DELTA   52
    null,                  // ROT_POSITION_FORCE_DELTA    53 was "J5_FORCE_CALC_ANGLE"
    "J5_A2D_SIN_G2",          // ROT_SIN                     54
    "J5_A2D_COS_G2",          // ROT_SIN                     55
    "J5_MEASURED_ANGLE_G2",   // PLAYBACK_ROT_POSITION       56 //deprecated J5_PLAYBACK
    "J5_SENT_G2",             // SENT_ROT_POSITION           57 //unused
    null,                  // SLOPE_ROT_POSITION          58 //deprecated J5_SLOPE  unusued
    null                   // new field                   59 //was J5_MEASURED_ANGLE, not used get rid of
];
Dexter$1.robot_status_index_labels_g2 = [];
Dexter$1.make_robot_status_indices(Dexter$1.robot_status_labels_g2, Dexter$1.robot_status_index_labels_g2);

Dexter$1.robot_status_labels_g_other = [
    // misc block
    "JOB_ID",              //new field                    0 //for commmanded instruction (when added to queue)
    "INSTRUCTION_ID",      //same name                    1 //for cmd ins
    "START_TIME",          //new field                    2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //new field                    3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //same name                    4 //for cmd ins  //"oplet"

    "ERROR_CODE",          //same name                    5 //for any error      //0 means no error. 1 means an error
    "DMA_READ_DATA",       //                             6 // deprecated DMA_READ_DATA then deprecated JOB_ID_OF_CURRENT_INSTRUCTION
    "READ_BLOCK_COUNT",    //                             7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
    "STATUS_MODE",   //same name                    8
    "END_EFFECTOR_IO_IN",  //END_EFFECTOR_IO_IN           9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector

    "RS_10_G_OTHER", //10
    "RS_11_G_OTHER", //11
    "RS_12_G_OTHER", //12
    "RS_13_G_OTHER", //13
    "RS_14_G_OTHER", //14
    "RS_15_G_OTHER", //15
    "RS_16_G_OTHER", //16
    "RS_17_G_OTHER", //17
    "RS_18_G_OTHER", //18
    "RS_19_G_OTHER", //19

    "RS_20_G_OTHER", //20
    "RS_21_G_OTHER", //21
    "RS_22_G_OTHER", //22
    "RS_23_G_OTHER", //23
    "RS_24_G_OTHER", //24
    "RS_25_G_OTHER", //25
    "RS_26_G_OTHER", //26
    "RS_27_G_OTHER", //27
    "RS_28_G_OTHER", //28
    "RS_29_G_OTHER", //29

    "RS_30_G_OTHER", //30
    "RS_31_G_OTHER", //31
    "RS_32_G_OTHER", //32
    "RS_33_G_OTHER", //33
    "RS_34_G_OTHER", //34
    "RS_35_G_OTHER", //35
    "RS_36_G_OTHER", //36
    "RS_37_G_OTHER", //37
    "RS_38_G_OTHER", //38
    "RS_39_G_OTHER", //39

    "RS_40_G_OTHER", //40
    "RS_41_G_OTHER", //41
    "RS_42_G_OTHER", //42
    "RS_43_G_OTHER", //43
    "RS_44_G_OTHER", //44
    "RS_45_G_OTHER", //45
    "RS_46_G_OTHER", //46
    "RS_47_G_OTHER", //47
    "RS_48_G_OTHER", //48
    "RS_49_G_OTHER", //49

    "RS_50_G_OTHER", //50
    "RS_51_G_OTHER", //51
    "RS_52_G_OTHER", //52
    "RS_53_G_OTHER", //53
    "RS_54_G_OTHER", //54
    "RS_55_G_OTHER", //55
    "RS_56_G_OTHER", //56
    "RS_57_G_OTHER", //57
    "RS_58_G_OTHER", //58
    "RS_59_G_OTHER"  //59
];

Dexter$1.robot_status_index_labels_g_other = [];
Dexter$1.make_robot_status_indices(Dexter$1.robot_status_labels_g_other, Dexter$1.robot_status_index_labels_g_other);


Dexter$1.tool_names = [
    "no_tool",      //0
    "unknown_tool" //1
];

Dexter$1.error_code_strings = [
    "OK",   //0
    "error" //1
];

//____________END of Dexter Database______________
Dexter$1.tool_type_to_name = function(tool_type){
    if(tool_type < Dexter$1.tool_names.length){
        return Dexter$1.tool_names[tool_type]
    }
    else { return "unknown_tool" }
};

Dexter$1.error_code_to_string = function(error_code){
    if(error_code < Dexter$1.error_code_strings.length){
        return Dexter$1.error_code_strings[error_code]
    }
    else { return "error" }
};

Dexter$1.robot_status_to_html = function(rs, where_from = ""){
    if (rs === null) { return "robot_status " + where_from + " : null,<br/>" }
    else {
        let html_table = Dexter$1.robot_status_to_html_table(rs);
        return "<details><summary>robot_status fields " + where_from + "</summary>" + html_table + "</details>"
    }
};
//also called by Job.show_robot_status_history_item
Dexter$1.robot_status_to_html_table = function(ds){
        //setting table class and using css to set fonts in th and td cells fails
        //let cs = " style='font-size:10pt;' " //cell style
        let oplet = ds[Dexter$1.INSTRUCTION_TYPE];
        let long_start_time_string = date_integer_to_long_string(ds[Dexter$1.START_TIME]);
        let long_stop_time_string = date_integer_to_long_string(ds[Dexter$1.STOP_TIME]);
        let result =
        "<table class='robot_status_table'>" +
        "<tr><th></th>                        <th>JOB_ID</th>                           <th>INSTRUCTION_ID</th>                                                            <th>START_TIME</th>                                                         <th>STOP_TIME</th>                                                                              <th>INSTRUCTION_TYPE</th> </tr>" +
        "<tr><td></td><td>"           + ds[Dexter$1.JOB_ID]         + "</td><td>" + ds[Dexter$1.INSTRUCTION_ID]   + "</td><td title='" + long_start_time_string + "'>" + ds[Dexter$1.START_TIME] + "</td><td title='" + long_stop_time_string + "'>" + ds[Dexter$1.STOP_TIME] + "</td><td title='" + Robot$1.instruction_type_to_function_name(oplet)  + "'>" + oplet +        "</td></tr>" +

        "<tr><th></th>              <th>ERROR_CODE</th>                          <th>DMA_READ_DATA</th>                    <th>READ_BLOCK_COUNT</th>                   <th>STATUS_MODE</th>                                                                 <th>END_EFFECTOR_IO_IN</th></tr>"      +
        "<tr><td></td><td>" + ds[Dexter$1.ERROR_CODE] + "</td> <td>"       + ds[Dexter$1.DMA_READ_DATA]  + "</td><td>" + ds[Dexter$1.READ_BLOCK_COUNT] + "</td><td>" + ds[Dexter$1.STATUS_MODE]                                               + "</td><td>" + ds[Dexter$1.END_EFFECTOR_IO_IN] + "</td></tr>" +

        "<tr><th></th>                   <th>Joint 1</th>                          <th>Joint 2</th>                          <th>Joint 3</th>                          <th>Joint 4</th>                          <th>Joint 5</th></tr>" +
        "<tr><th>ANGLE</th><td>"      + ds[Dexter$1.J1_ANGLE]       + "</td><td>" + ds[Dexter$1.J2_ANGLE]       + "</td><td>" + ds[Dexter$1.J3_ANGLE]       + "</td><td>" + ds[Dexter$1.J4_ANGLE]       + "</td><td>" + ds[Dexter$1.J5_ANGLE]     + "</td></tr>" +
        "<tr><th>DELTA</th><td>"      + ds[Dexter$1.J1_DELTA]       + "</td><td>" + ds[Dexter$1.J2_DELTA]       + "</td><td>" + ds[Dexter$1.J3_DELTA]       + "</td><td>" + ds[Dexter$1.J4_DELTA]       + "</td><td>" + ds[Dexter$1.J5_DELTA]     + "</td></tr>" +
        "<tr><th>PID_DELTA</th><td>"  + ds[Dexter$1.J1_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J2_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J3_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J4_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J5_PID_DELTA] + "</td></tr>" +
        "<tr><th>FORCE_CALC_ANGLE</th><td>"     + ds[Dexter$1.J1_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J2_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J3_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J4_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J5_FORCE_CALC_ANGLE]    + "</td></tr>" +
        "<tr><th>A2D_SIN</th><td>"    + ds[Dexter$1.J1_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J2_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J3_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J4_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J5_A2D_SIN]   + "</td></tr>" +
        "<tr><th>A2D_COS</th><td>"    + ds[Dexter$1.J1_A2D_COS]     + "</td><td>" + ds[Dexter$1.J2_A2D_COS]     + "</td><td>" + ds[Dexter$1.J3_A2D_COS]     + "</td><td>" + ds[Dexter$1.J4_A2D_COS]     + "</td><td>" + ds[Dexter$1.J5_A2D_COS]   + "</td></tr>" +
        "<tr><th>PLAYBACK</th><td>"   + ds[Dexter$1.J1_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J2_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J3_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J4_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J5_PLAYBACK]  + "</td></tr>" +
        "<tr><th>SENT</th><td>"       + ds[Dexter$1.J1_SENT]        + "</td><td>" + ds[Dexter$1.J2_SENT]        + "</td><td>" + ds[Dexter$1.J3_SENT]        + "</td><td>" + ds[Dexter$1.J4_SENT]        + "</td><td>" + ds[Dexter$1.J5_SENT]      + "</td></tr>" +
        "<tr><th>SLOPE</th><td>"      + ds[Dexter$1.J1_SLOPE]       + "</td><td>" + ds[Dexter$1.J2_SLOPE]       + "</td><td>" + ds[Dexter$1.J3_SLOPE]       + "</td><td>" + ds[Dexter$1.J4_SLOPE]       + "</td><td>" + ds[Dexter$1.J5_SLOPE]     + "</td></tr>" +
        "</table>";
        return result
};


Dexter$1.sent_instructions_to_html = function(sent_ins){
    var result = "<table><tr>" +
        "<th>JOB_ID</th>" +
        "<th title='The instruction_id is the same as the program counter at send time.'>INS ID</th>" +
        "<th>START_TIME</th>" +
        "<th>STOP_TIME</th>" +
        "<th>INSTRUCTION_TYPE</th>" +
        "<th>Instruction arguments</th></tr>";
    for(var ins of sent_ins){
        var instruction_type = Instruction$1.extract_instruction_type(ins);
        var instruction_name = " (" + Robot$1.instruction_type_to_function_name(instruction_type) + ")";
        result +=  "<tr><td>" + Instruction$1.extract_job_id(ins)          + "</td><td>" +
                                Instruction$1.extract_instruction_id(ins)  + "</td><td>" +
                                Instruction$1.extract_start_time(ins)      + "</td><td>" +
                                Instruction$1.extract_stop_time(ins)       + "</td><td>" +
                                instruction_type + instruction_name      + "</td><td>" +
                                Instruction$1.extract_args(ins)            + "</td></tr>";
    }
    result += "</table>";
    return "<details style='display:inline-block;'><summary></summary>" + result + "</details>"
};
//called from utils stringify_value
Dexter$1.make_show_rs_history_button_html = function(job_id){
    return "<button class='onclick_via_data' data-onclick='Dexter.show_rs_history,," + job_id + "'>Show robot status history</button>"

};
//called from inspect
Dexter$1.make_show_rs_history_button_html2 = function(job_id){
    return "<button onclick='Dexter.show_rs_history(" + job_id + ")'>Show robot status history</button>"

};

//start the process in ui
Dexter$1.show_rs_history = function(job_id){
    job_id = parseInt(job_id); //coming from UI so job_id likely a string to start with.
    Dexter$1.show_rs_history_get_rs_history(job_id);
};

Dexter$1.show_rs_history_get_rs_history = function(job_id){
    var the_job = Job$1.job_id_to_job_instance(job_id);
    var rob     = the_job.robot;
    var rs_history = the_job.rs_history;
    var rs_labels  = rob.constructor.robot_status_labels;
    if (rob instanceof Dexter$1) { //shove the xyz on the end of every rs, and append xyz to the labels too.
         rs_labels = rs_labels.concat(["End_Effector_X", "End_Effector_Y","End_Effector_Z"]);
         let new_rs_history = [];
         for (let i = 0; i < rs_history.length; i++){
            let rs = rs_history[i];
            let robot_status_instance = new RobotStatus$1({robot_status: rs});
            let sm = robot_status_instance.status_mode();
            if((sm === 0) || (sm === 1)) {
                //let angles = [rs[Dexter.J1_MEASURED_ANGLE], rs[Dexter.J2_MEASURED_ANGLE], rs[Dexter.J3_MEASURED_ANGLE], rs[Dexter.J4_MEASURED_ANGLE], rs[Dexter.J5_MEASURED_ANGLE]]
                let a_xyz  = robot_status_instance.xyz()[0];
                new_rs_history.push(rs.concat(a_xyz));
            }
            else { new_rs_history.push(rs); }
        }
        rs_history = new_rs_history;
    }
    Dexter$1.show_rs_history_display(the_job.name, the_job.robot.name, the_job.status_code,
                 the_job.highest_completed_instruction_id,
                 the_job.sent_instructions,  rs_history, rs_labels
                );
};

Dexter$1.show_rs_history_display = function(job_name, robot_name, status, highest_completed_instruction_id, sent_instructions, rs_history, rs_labels){
    //var job_instance = Job.job_id_to_instance(job_id) //won't work cause we'er in the UI.
    //out("in show_rs_history_display: " + sent_instructions)
    var highest_sent_instruction = "null";
    if (sent_instructions.length > 0) {
        highest_sent_instruction = sent_instructions[sent_instructions.length - 1][1];
    }
    var top_info = "<div> " + status + ". highest_sent_instruction: " + highest_sent_instruction +
        " &nbsp;&nbsp;highest completed instruction: " + highest_completed_instruction_id + "</div>";
    show_window({content: top_info + "<div id='rs_history_table'/>",
        title: "Job: " + job_name + ",&nbsp;&nbsp; Robot: " + robot_name + ", &nbsp;&nbsp; Status History",
        width:  725,
        height: 300});
    Dexter$1.rs_history_populate_window(sent_instructions, rs_history, rs_labels);
};

Dexter$1.make_rs_history_dataFields = function(rs_labels){
    var result = [];
    for(var i  = 0; i < rs_labels.length; i++){
        result.push({name: i, type:"string"});
    }
    return result
};

Dexter$1.make_rs_history_columns = function(rs_labels, sent_instructions){
    var result = [];
    let label;
    let width;
    let cells_renderer = null; //function(row, column, value, rowData){
                                  //try { value =  JSON.stringify(value) }
                                  //catch (e) {}
                                 // return value}
    for(var i  = 0; i < rs_labels.length; i++){
        label  = rs_labels[i];
        width=90;
        cells_renderer = null;
        if      (label === null) { label = "unused"; }
        else if (label == "JOB_ID")   {
            label = "<span title='The Job this instruction is in.'>JOB_ID</span>"; //doesn't work. tooltip doesn't show up
            width=70;
        }
        else if (label == "INSTRUCTION_ID")   {
            label = "<span title='instruction_id in the Job of JOB_ID.'>INS_ID</span>"; //doesn't work. tooltip doesn't show up
            width=80;
            cells_renderer = function (row, column, value, rowData) {
                    let ins_id = parseInt(value);
                    let ins = Dexter$1.get_instruction_from_sent_instructions(sent_instructions, ins_id);
                    let ins_html = "Instruction Fields&#013;";
                    let label_index = 0;
                    for(let lab of Instruction$1.labels){
                        ins_html += lab +  ": " + ins[label_index] + "&#013";
                        label_index += 1;
                    }
                    let args_html = ins.slice(label_index);
                    try { args_html = JSON.stringify(args_html); }
                    catch (e) {}
                    ins_html += "args: " + args_html;
                    return "<div title='" + ins_html + "' style='width:100%;color:blue;'>" + value + "</div>"
                    };
        }
        else if (label == "START_TIME") {
            label = "<span title='In milliseconds since Jan 1, 1970.'>START_TIME</span>";
            width=120;
        }
        else if (label == "STOP_TIME") {
            label = "<span title='In milliseconds since Jan 1, 1970.'>STOP_TIME</span>";
            width=120;
        }
        else if (label == "INSTRUCTION_TYPE") { //beware, usually this tooltip doesn't show. Maybe a jqxwidget bug?
            label = "<span title='instruction_type, a.k.a oplet.'>Type</span>"; // setting title doesn't give tooltip
            width=54;
            cells_renderer = function (row, column, value, rowData) {
                let fn_name = Robot$1.instruction_type_to_function_name(value[1]); //value will be a string of 3 chars, an oplet surounded by double quots.
                return "<div title='" + fn_name + "' style='width:100%;color:blue;'>" + value + "</div>"
            };
        }
        else if (label == "ERROR_CODE") {  //beware, usually this tooltip doesn't show. Maybe a jqxwidget bug?
            label = "<span title='error_code. Zero means no error.'>Error</span>"; // setting title doesn't give tooltip
            width=60;
        }
        else if (label.startsWith("End_Effector")) {
            width = 170;
        }
        else { //other labels
           width = (Math.max(label.length, 8) * 10);
           if(i < 60) { width += 15; } //room for the array index number.
        }
        var pinned = (i < 3);
        if(i < 60) { label = i + ". " + label; }
        let col_obj = {text: label, dataField: i, width: width, pinned: pinned,
                        draggable: true, cellsRenderer: cells_renderer }; //draggable is supposed to make the column draggable but it doesn't
        result.push(col_obj);
    }
    return result
};

Dexter$1.get_instruction_from_sent_instructions = function(sent_instructions, instruction_id){
    for(var ins of sent_instructions){
        if(ins[Dexter$1.INSTRUCTION_ID] == instruction_id){
            return ins
        }
    }
    return null
};

Dexter$1.prepare_rses_for_display = function(rs_history){
    let result = [];
    for (let row of rs_history){
        let new_row = [];
        result.push(new_row);
        for(let elt of row){
            if (typeof(elt) != "number"){
                try{ elt = JSON.stringify(elt); }
                catch (e) {}
            }
            new_row.push(elt);
        }
    }
    return result
};

Dexter$1.rs_history_populate_window = function(sent_instructions, rs_history, rs_labels){
    // prepare the data
    var data = Dexter$1.prepare_rses_for_display(rs_history); // [] // rs_history //looks like all html formatting & tooltips in the data are just trhown out bu jqdatatable
    var source =
    {   localData: data,
        dataType: "array",
        dataFields: Dexter$1.make_rs_history_dataFields(rs_labels)
    };
    var dataAdapter = new $.jqx.dataAdapter(source);
    $("#rs_history_table").jqxDataTable(
        {   width:  700,
            height: 225,
            //columnsHeight: "32px", //jqx bug: when including this field, it causes the vertical scroll bar to disappear rendering scorlling of long tables impossible.
            // need 2 rows of text
            altRows:  true,
            sortable: true,
            //theme: 'energyblue',
            pageable: false, //true,
            //pagerButtonsCount: 10,
            source: dataAdapter,
            columnsResize: true,
            columns: Dexter$1.make_rs_history_columns(rs_labels, sent_instructions)
        });
};

/**
 * Created by Fry on 4/30/16.
 */

function ob_sys_is_class(obj){
    return ((typeof(obj) == "function") && obj.toString().startsWith("class "))
}

var Root$1 = {name: "Root"}; //"root" is an old node,js global that's been depricated but still defined. I decidd to steer clear of it by using capitalied Root.

//window.Root = Root //if I don't to this, value_of_path fails since window["rootObjject"] fails
//rootObject.name = "rootObject" //errors if I do this. the error happens in Jquery on something
                               //that looks very unlrelated, in ready, when seting the operating_system variable.
                               //mysterious. try again once electron is up.
                               //BUT search below for rootObject to see the solution.

    /* User can pass as many property_objects as they like.
     None will be modified by this fn.
     Properties from all will be combined in to one object.
     If there are duplicates, the last one wins.
     You might want a different winner so you can reorder the
     property_objects, but if there is a conflict in ordering,
     you can add an extra property_object to the end to
     ensure a win for a particular property. For instance
     var myboat = {prototype:boat, color:white}
     var my_fav_colors = {prototype:color_pallette, color:blue, trim:green},
     newObject(myboat, mycolors)
     Here we want to make an instance of myboat,
     BUT we want to over-ride the default color of "white" for a myboat,
     and use my_fav_colors to get the color from.
     If we just passed those 2 classes to newObject, we would indeed get
     a color of blue, however we'd make a color_pallette, not a boat.
     To fix that, we add an extra properties object on the end
     whose job is simply to over-ride the prototype in mycolors.
     newObject(myboat, mycolors, {prototype: boat})
     If no properties object has a prototype property, we use rootObject
     as the default.
     */

function newObject(...property_objects){
    property_objects.unshift({}); //put new obj on front as assign mungs the first arg and if first arg is used elsewhere, this would be bad.
    let properties = Object.assign(...property_objects);
    let prototype;
    if (properties.hasOwnProperty("prototype")){
        prototype = properties.prototype;
        delete properties.prototype;
    }
    if (!prototype){ prototype = Root$1; }
    else if (typeof(prototype) == "string"){
        var new_prototype = value_of_path$1(prototype);
        if ((new_prototype == null) || (typeof(new_prototype) != "object")){
            throw new Error("In a call to newObject, failed to resolve: " + prototype +
                " into the prototype object.")
        }
        else {prototype = new_prototype;}
    }
    if (!prototype) { //no prototype arg passed and no prototype property in properties
        prototype = Root$1;
    }
    if (properties.hasOwnProperty("name")){
        const name_val = properties.name;
        if (name_val) {
            if (typeof(name_val) != "string") {
                dde_error("newObject called with name: " + name_val + " but that is not a string. Names must be strings.");
            }
            //else OK as is
        }
        else { //name is null or undefined so just get rid of it. IF we don't, it will cause a bad bug
            delete properties.name;
        }
    }
    var result;
    if(ob_sys_is_class(prototype)){
        return new prototype(properties) //only works when the class accepts 1 literal object in its constructor
        //if (prototype == Job) {
        //return new Job(properties) //weak as hell
        //result = Reflect.construct(prototype, properties) //errors too
        // result = new (Function.prototype.bind.call(prototype, properties)) //errors
        //}
    }
    else if (ob_sys_is_class(prototype.constructor)){ //ie prototype is a job instance
        //we are going to call effectively new Job(props)
        //so we've got to get the class of prototype in its "constructor" prop,
        //then we have to fill in the defaults of the args to that class's
        //constructor params with values from the actual prototype.
        //
        var class_param_names = function_param_names(prototype.constructor);
        properties = Object.assign({}, properties); //make a copy
        for(let pname of class_param_names){
            if (!(properties.hasOwnProperty(pname))){ //props doesn't have a necessary arg so inherit it from the prototype
                var inherited_val;
                if ((pname == "do_list") && (prototype.constructor == Job)){ //special hack for Job's do_list because
                    //a running job modifies its do_list
                    //so we want to use the orig.
                    inherited_val = prototype.orig_args.do_list;
                }
                else {inherited_val = prototype[pname]; }
                properties[pname] = inherited_val;
            }
        }
        return new prototype.constructor(properties) //only works when the class accepts 1 literal object in its constructor
    }
    else { //not related to classes at all, ie a normal dobject object.
        result = Object.assign(Object.create(prototype), properties);
        if (properties.hasOwnProperty("name")){prototype[properties.name] = result;}
        else if(prototype.name) {//we don't want to inherit so block inheritance
            result.name = undefined;
        }
        result.prototype = prototype; //commenting this out doesn't get rid of jquery bug, but it has a different one.
        result.constructor(); //note this is called even on the obj that defines it! That's true prototype
        //it is never passed args but "this" inside it is the new obj.
        return result
    }
}

Object.defineProperty(Object, 'isNewObject',{
    enumerable : false,
    value : function(obj, require_name_in_prototype = true, permit_rootObject = true){
        if(obj == Root$1) {
            if (permit_rootObject) { return true}
            else { return false }
        }
        else if ((obj == undefined) || (obj == null) || (typeof(obj) != "object")) { return false }
        else {
            let proto;
            try { proto = Object.getPrototypeOf(obj);}
            catch (err) { return false }
            if (proto){
               if (obj.hasOwnProperty("prototype") && (obj.prototype == proto)){
                   if (require_name_in_prototype){
                       if ((proto == Root$1) || proto.name) {
                            if ((obj.name == undefined) || (proto[obj.name] == obj)) { return true }
                            else { return false} //obj has a name but it isn't in the proto bound to obj
                       }
                       else { return false }
                   }
                   else { return true }
               }
               else { return false }
            }
            else { return false }
        }
    }
});

//jquery breaks if you add properties to Object prototype in the usual way. ie
// Object.prototype.subObjectsOf129 = function(){ ...}
//but http://stackoverflow.com/questions/21729895/jquery-conflict-with-native-prototype
//says the workaround for this jquery bug is to add non-enumerable props.
/* Nope, the below also screws up Jquery. Try in next version of Jquery perhaps.
Object.defineProperty(Object.prototype, 'name',{
    enumerable : false,
    configurable: true,
    writable: true,
    value: "rootObject"})
*/

Object.defineProperty(Object.prototype, 'subObjects',{
    enumerable : false,
    value : function(){
        var result = [];
        for(var sub_ob_name in this){
            if(this.hasOwnProperty(sub_ob_name)){
                var sub_ob = this[sub_ob_name];
                if(Object.isNewObject(sub_ob) && (sub_ob.name == sub_ob_name)){
                   result.push(sub_ob);
                }
            }
        }
        return result
    }
});

Object.defineProperty(Object.prototype, 'isSubObject',{
    value : function(prototype_maybe){
        let pt = (prototype_maybe ? prototype_maybe : Object.getPrototypeOf(this));
        if (pt && //if this is rootObject, pt will be null and this will fail as it should.
                this.hasOwnProperty("name") &&
                this.name &&
                pt.hasOwnProperty(this.name) &&
                (pt[this.name] == this)) { return true } //note (null && 33)evals to null, not false
        else { return false }
    },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'isLeafObject',{
    value : function(){
        let sub_objs = this.subObjects();
        return sub_objs.length == 0
    }
});

Object.defineProperty(Object.prototype, 'leafObjectNamed',{
    value : function(leaf_name){
        if(this.isLeafObject()){
            if(this.name == leaf_name) { return this }
            else { return null }
        }
        else {
            for(let subobj of this.subObjects()){
                let result = subobj.leafObjectNamed(leaf_name);
                if(result) { return result }
            }
            return null
        }
    }
});


//returns true if this == ancestor. This makes sense for prototype object system.
Object.defineProperty(Object.prototype, 'isA',{
    value : function(ancestor){
        if (this == ancestor) { return true }
        else if (Object.isNewObject(ancestor)) { return ancestor.isPrototypeOf(this) }
        else { return false }
    },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'siblings',{
    value : function(include_this=false){
                if(this === Root$1) {
                    if (include_this){ return [Root$1] }
                    else { return [] }
                }
                else {
                    var pt;
                    try{ pt = Object.getPrototypeOf(this);}
                    catch(e) { return [] }
                    if(pt) {
                        var result = pt.subObjects();
                        if (!include_this){
                            for(var i = result.length-1; i--;){ //traverse in reverse order is necessary!
                                if (result[i] === this) result.splice(i, 1);
                            }
                        }
                        return result
                    }
                    else { return [] }
                }
    },
    enumerable : false
});

// retruns true if all args are siblings
Object.defineProperty(Object, 'areSiblings',{
    value : function(...maybe_siblings){
        if(maybe_siblings.length < 2) { return true }
        else {
            var pt;
            try{ pt = Object.getPrototypeOf(maybe_siblings[0]);}
            catch(e) { return [] }
            if(pt) {
                for(var maybe_sib of maybe_siblings){
                    if (Object.getPrototypeOf(maybe_sib) !== pt) { return false }
                }
                return true
            }
            else { return false } //hmm, I'm being conservative here.
        }
    },
    enumerable : false
});


//climbs up the prototype chain from obj,
//returning the first obj that has prop_name, or null
Object.defineProperty(Object.prototype, 'inheritsPropertyFrom',{
    value : function(property_name){
                if(this == null) { return null }
                else if (this.hasOwnProperty(property_name)) {return this}
                else if (this === Root$1) { return null }
                else { return Object.getPrototypeOf(this).inheritsPropertyFrom(property_name) }
    },
    enumerable : false
});

/*fails because "this" needs to be the original obj, but
as we go up the stack we need to remember the previous obj
we came from which isn't 'this' after we've alread gone up one.*/
Object.defineProperty(Object.prototype, 'callPrototypeConstructor',{
    value : function(){
        let next_cons = newObect_find_next_constructor(this);
        if (next_cons) {
            //return Object.getPrototypeOf(this).constructor.apply(this)
            next_cons.apply(this);
        }
       // else {} //do nothing if there is no next_cons
    }
});

//callPrototypeConstructor is called within a constructor.
//we don't want to return THAT constuctor, but rather the
//next one up the change.
function newObect_find_next_constructor(obj, cur_constructor){
    let obj_of_cur_cons = obj.inheritsPropertyFrom("constructor");
    let next_ans_above_cur_cons = Object.getPrototypeOf(obj_of_cur_cons);
    if(next_ans_above_cur_cons) { return next_ans_above_cur_cons.constructor } //might be nothing
    else { return null }
    //if(!cur_constructor) { cur_constructor = obj.constructor }
    //let obj_cons = obj.constructor
    //if (!obj_constructor) { return null } //there is no next constructor
    //else if (obj_cons != cur_constructor) { return obj_cons }
    //else { return newObject_find_next_constructor(Object.getPrototypeOf(obj), cur_constructor) }
}

Object.defineProperty(Object.prototype, 'normal_keys',{
    enumerable : false,
    value : function(include_inherited=false,
                     include_functions=false,
                     include_subobject_names=false,
                     include_name_and_prototype=false){
        return this.normal_keys_aux(include_inherited,  //maybe should be true
                                    include_functions,
                                    include_subobject_names,
                                    include_name_and_prototype,
                                    [])
    }

});

Object.defineProperty(Object.prototype, 'normal_keys_aux',{
    enumerable : false,
    value : function(include_inherited,  //maybe should be true
                     include_functions,
                     include_subobject_names,
                     include_name_and_prototype,
                     result){
        if (this == Root$1){ return result }
        else {
            for(let key of Object.getOwnPropertyNames(this)){
                if (!result.includes(key)) {
                   let val = this[key];
                   if (((typeof(val) != "function") || include_functions) &&
                       (!val.isSubObject() || include_subobject_names) &&
                       (((key != "name") && (key != "prototype")) || include_name_and_prototype)){
                        result.push(key);
                    }
                }
            }
            if (include_inherited) {
                return Object.getPrototypeOf(this).normal_keys_aux(include_inherited,  //maybe should be true
                                            include_functions,
                                            include_subobject_names,
                                            include_name_and_prototype,
                                            result)
            }
            else { return result }
        }
    }
});


//result array has Root first
Object.defineProperty(Object.prototype, 'ancestors',{
    value : function(include_self=false){
                if(this == Root$1){
                    if(include_self) { return [this] }
                    else { return [] }
                }
                else {
                    var obj = this;
                    if (!include_self) { obj = Object.getPrototypeOf(obj); }
                    var result = obj.ancestors_of_aux([]);
                    return result
                }
    },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'ancestors_of_aux',{
    value : function(result){
        if (this == null){ return result }
        else {
            result.unshift(this); //push onto front of array, order is top of ancestors first
            if (this == Root$1) { return result } //must do this becasue ancestors_of_axu not on this's prototype
            return Object.getPrototypeOf(this).ancestors_of_aux(result)
        }
    },
    enumerable : false
});

Object.defineProperty(Object, 'allCommonAncestors',{
    value : function(...objects){
        let result = [];
        for(let obj of objects){
            var ans = obj.ancestors();
            if(result.length == 0) { result = ans; }
            else {
                for(let i = 0; i < result.length; i++){
                    if(result[i] !== ans[i]) { result = result.slice(0, i);}
                }
            }
        }
        return result
    },
    enumerable : false
    });

Object.defineProperty(Object, 'lowestCommonAncestor',{
    value : function(...objects){
        let ans = Object.allCommonAncestors(...objects);
        if(ans.length == 0) { return null }
        else { return ans[ans.length - 1] }
    },
    enumerable : false
});


//returns a string of a path to "this", or null
//evaling the string should return "this" object.
Object.defineProperty(Object.prototype, 'objectPath',{
    value : function(){ return this.object_path_aux("") },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'object_path_aux',{
    value : function(result){
        if (this == null) {return result} //usually never hits
        else if (this == Root$1) { return "Root" } //hits just once in the recursion
        else if (this.hasOwnProperty("name") && this.name){ //note obj could have name == undefined when we block inheritance.
            //var separator = ((result == "")? "" : ".")
            //result = this.name + separator + result //push onto front of path, order is top of ancestors first
            var proto = Object.getPrototypeOf(this);
            //if (proto == Root) {
             //  return "Root." + this.name
            //}
            //else {
                var result = proto.object_path_aux(result);
                if (result){ return result + "." +  this.name}
                else       { return null }
            //}
        }
        else { return null }
    } ,
    enumerable : false
});

//new_obj.toString errors without this fn
Root$1.toString = function(){
    const path = this.objectPath();
    if (path) { return path }
    else {
        const anses = this.ancestors(true); //include self
        let result = "";
        for(let ans of anses){
            if(ans === Root$1) { result = "Root"; }
            else if (Object.hasOwnProperty("name") && ans.name){
                result +=  "." + ans.name;
            }
            else { //no more named ancestors
                result = "An instance of: " + result;
                break;
            }
        }
        return result
    }
};

// the printer!
// print_this=true, kid_levels="all" or non-neg-int, last_level_format="path"/"full"
/*hier arch printer, fails with refs up  tree
Object.defineProperty(Object.prototype, 'sourceCode',{
    value : function(print_object_values_as_strings=true, indent="  "){
        if (this == Root) { return "Root" }
        else {
            let proto = Object.getPrototypeOf(this)
            if (!proto) { throw new Error("Object.sourceCode passed this with no prototype: " + stringify_value(this))}
            else {
                let prop_names     = Object.getOwnPropertyNames(this)
                let proto_index    = prop_names.indexOf("prototype")
                proto_prop = prop_names.splice(proto_index, 1)
                prop_names = proto_prop.concat(prop_names) //move prototype to begin of list.
                let has_props      = prop_names.length != 0 //since newobjects will always have a prototype, I think this will always be true
                let last_prop_name = (has_props? prop_names[prop_names.length - 1] : undefined)
                let result = "newObject({\n"
                for(let prop_name of prop_names){
                   // let prefix
                   // if (prop_name == "prototype") { prefix = "{"}
                   // else                          { prefix = " "}
                    let val = this[prop_name]
                    let val_string
                    if (Object.isNewObject(val)){
                        if (print_object_values_as_strings || (prop_name == "prototype")) { val_string = val.objectPath() }
                        else {
                            val_string = val.sourceCode(false, indent + "  ")
                        }
                    }
                    else { val_string = stringify_value_sans_html(val) }
                    result += indent + prop_name + ": " + val_string + ((prop_name == last_prop_name)?
                                                                           "\n" +
                                                                           indent +
                                                                           "})" : ",\n")
                }
                return result
            }
        }
    } ,
    enumerable : false
})
*/
//flat list of obj def printer.
Object.defineProperty(Object.prototype, 'sourceCode',{
    value : function({include_this=true, include_subobjects=true, indent="", at_top_level=true}={}){
        if (this == Root$1) { return "Root" }
        else {
            let proto = Object.getPrototypeOf(this);
            if (!proto) { throw new Error("Object.sourceCode passed this with no prototype: " + stringify_value(this))}
            else {
                let prop_names     = Object.getOwnPropertyNames(this);
                let sub_objs = [];
                let non_subobject_prop_names = ["prototype"];
                for(let prop_name of prop_names){
                    let val = this[prop_name];
                    if (prop_name === "prototype") ; //already is first in non_subobject_prop_names
                    else if(val && val.isSubObject(this)) { sub_objs.push(val); } //needed to check that val is not undefined in order for val.isSubject to be found
                    else { non_subobject_prop_names.push(prop_name); }
                }
                let result = "";
                if(include_this){
                    result = indent + "newObject({\n";
                    indent += "  ";
                    for(let prop_name of non_subobject_prop_names){
                        let val = this[prop_name];
                        let val_string;
                        if (Object.isNewObject(val)){ //whether its the prototype or some other random, non-subobject, just print its path
                            if (val.hasOwnProperty("name")) { //hits for prototype and possibly others, but no subobjects will even be tried here
                                val_string = val.objectPath();
                            }
                            else { val_string = val.sourceCode({include_this: true, include_subobjects: true, indent: indent + "  ", at_top_level: false}); }
                        }
                        else { val_string = stringify_value_sans_html(val); }
                        result += indent + prop_name + ": " + val_string + ((prop_name == last(non_subobject_prop_names))?
                            "\n" +
                            indent.substring(2) +
                            "})\n" : ",\n");
                    }
                }
                //all non-subojects printed, so the only thing left in this to print are subojects, if any
                if (include_subobjects){
                    let on_first_subobject = true;
                    for (let sub_ob of sub_objs){
                        let comma_prefix = ((include_this || !on_first_subobject || !at_top_level) ? ", " : "");
                        result += comma_prefix + sub_ob.sourceCode({include_this: true, include_subobjects: true, indent: indent, at_top_level: false});
                        on_first_subobject = false;
                    }
                }
                if (at_top_level) {
                    if (include_this){
                        if(include_subobjects && (sub_objs.length > 0)) { result = "[" + result + "\n][0]"; } //only printing this, just leave the object src as is
                    }
                    else {
                        if(include_subobjects) { result = "[" + result + "]"; }  //result is empty string so just leave it.
                    }
                }
                return result
            }
        }
    } ,
    enumerable : false
});

function to_source_code$1({value, indent="", function_names=false, newObject_paths=false,
                        job_names=false, robot_names=false,
                        depth_limit=100, depth=0, job_orig_args=false,
                        one_line_per_array_elt=false, array_elt_max_chars=60} = {}){
        //console.log("Object.isNewObject: " + Object.isNewObject)
        if(window.Ammo && (value === Ammo)) { return "Ammo" } //if I let this go, it causes some infinite recursion which also happens in inspect
        if (!((typeof(arguments[0]) == "object") && arguments[0].hasOwnProperty("value"))){
            value = arguments[0]; //so we can just do calls of to_source_code("stuf")
        }
        if (depth > depth_limit) { return "***" } //stops infinite recursion in circular structures.
        //console.log("to_source_code before big if")
        if      (value === undefined)       { return "undefined" }
        else if (value === null)            { return "null" } //since typeof(null) == "object", this must be before the typeof(value) == "object" clause
        else if (value === true)            { return "true"}
        else if (value === false)           { return "false"}
        else if (typeof(value) == "number") { return value.toString() } //works for NaN too, no need to use (isNaN(value)) { result = "NaN" } //note the check for number before checking isNanN is necessary because JS wasn't designed.
        else if (typeof(value) == "string") {
            if (value.includes("\n") ||
                (value.includes("'") && value.includes('"')))
                                             { return indent + "`" + value + "`" }
            else if  (value.includes('"'))   { return indent + "'" + value + "'" }
            else                             { return indent + '"' + value + '"' }
        }
        else if (value instanceof Date)      { return value.toString() }
        else if (typeof(value) == "function"){
             let new_args = {value: value, indent: indent};
             return to_source_code_function(new_args)
        }
        else if (Object.isNewObject(value)) {
            //console.log("in to_source_code isNewObject")
            if (newObject_paths) { return value.objectPath }
            else                 { return value.sourceCode() }
        }
        else if (typed_array_name(value)){ //any type of array
            //console.log("calling to_source_code_array")
            return to_source_code_array(arguments[0])
        }
        //Job. Robot, Instruction, Duration
        else if (value.to_source_code){
            let new_args = {value: value, indent: indent, depth: depth + 1}; //use depth because we can potentially have infinite recursion here.
            return value.to_source_code(new_args)
        }
        else if (value === window)     { return "window"  } //too many weird values in there and too slow so punt.
        else if (window.Picture && Picture.is_mat(value)){ //we can't and probably shouldn't attempt to print out a readable mat here,
                                          //so just print a string to let a user know what it is in the inspector
                                          //without this, bad bug happens when inspecting Jobs that have taken a picture and
                                          //put it in a user_data variable
            let result = "Mat (picture) of: width: " +  Picture.mat_width(value) +
                         " height: "  + Picture.mat_height(value);
            return result
        }
        else if (typeof(value) == "object"){//beware if we didn't catch arrays above this would hit
                                            //assumes at this point we just have a lit obj.
            return to_source_code_lit_obj(arguments[0])
        }
        else { shouldnt("to_source_code passed: " + value + " which is not a handled type."); }
}

function to_source_code_array(args){
    let value = args.value;
    if (Instruction$1.is_oplet_array(value)) {
        return to_source_code_instruction_array(args)
    }
    let chars_added_since_last_newline = 0;
    let result = "[";
    let len = value.length;
    let max_chars = (args.array_elt_max_chars ? args.array_elt_max_chars : 60);
    for (let i = 0; i < len; i++){ //don't use "for ... in here as it gets some wrong stuff
        let prefix = "";
        let val = value[i];
        let val_str = to_source_code$1({value: val, array_elt_max_chars: max_chars});
        let comma_maybe = ((i < (len - 1)) ? "," : "");
        let newline_or_space_suffix = ((i == (len - 1))? "" : " ");
        let str_and_suffix_len = val_str.length;
        if (args.one_line_per_array_elt) { newline_or_space_suffix = "\n"; }
        else if (chars_added_since_last_newline > max_chars) {
            prefix = "\n";
            chars_added_since_last_newline = str_and_suffix_len;
        }
        else if ((chars_added_since_last_newline == 0) && (val_str.length > max_chars)) {
            chars_added_since_last_newline = str_and_suffix_len; //add it in the usual way
        }
        else if ((chars_added_since_last_newline + str_and_suffix_len) > args.array_elt_max_chars) {
            prefix = "\n";
            chars_added_since_last_newline = str_and_suffix_len;
        }
        else { chars_added_since_last_newline += str_and_suffix_len; }
        //if (Array.isArray(elt_val)) sep = sep + "<br/>" //put each sub-array on its own line
        result += prefix + val_str + comma_maybe + newline_or_space_suffix;
    }
    result += "]";
    return result
}

/* errors on at least some instruction arrays .function to_source_code_instruction_array(args){
    let inst_array = args.value
    let the_indent = ((args.indent === undefined) ? "" : args.indent)
    let result = the_indent + "make_ins("
    let prop_args = Object.assign({}, args) //jQuery.extend({}, args)
    prop_args.indent = ""
    for(let prop_index in inst_array) {
        prop_args.value = inst_array[prop_index]
        let prop_src = to_source_code(prop_args)
        let suffix = ((prop_index == (inst_array.length - 1)) ? "" : ", ")
        result += prop_src + suffix
    }
    result += ")"
    return result
}*/

function to_source_code_instruction_array(args){
    let inst_array = args.value;
    let the_indent = ((args.indent === undefined) ? "" : args.indent);
    let result = the_indent + "make_ins(";
    let start_array_index = Instruction$1.INSTRUCTION_TYPE;
    for(let i = start_array_index; i <  inst_array.length; i++) {
        let val = inst_array[i];
        let val_src = to_source_code$1(val);
        let suffix = ((i == (inst_array.length - 1)) ? "" : ", ");
        result += val_src + suffix;
    }
    result += ")";
    return result
}

function to_source_code_lit_obj(args){
        let value = args.value;
        let indent = args.indent;
        if (!indent) { indent = ""; }
        let result = indent + "{";
        let prop_names = Object.getOwnPropertyNames(value); //long objects like cv cause problems
        for (var prop_index = 0; prop_index < prop_names.length; prop_index++) {
            let prop_name   = prop_names[prop_index];
            let prop_val    = value[prop_name];
            let prop_args   = Object.assign({}, args); //jQuery.extend({}, args) //copy the args
            prop_args.value = prop_val;
            prop_args.indent = ""; //((prop_index == 0) ? "" : (indent + " "))
            let prop_indent = ((prop_index == 0) ? "" : (indent + " "));
            let quote_char = "";
            if (prop_name.indexOf(" ") != -1){
                quote_char = '"';
                if (prop_name.indexOf('"') != -1) { prop_name = replace_substrings(prop_name, '"',  '\\"'); }
            }
            let trailing_comma = ((prop_index == (prop_names.length - 1)) ? "" : ", ");
            result += prop_indent + quote_char + prop_name + quote_char + ": " + to_source_code$1(prop_args) +
                      trailing_comma + "\n";
        }
        result += indent + "}";
        return result
}

function to_source_code_function(args){
    let fn_name = function_name(args.value);
    if (args.function_names && (fn_name !== null) && (fn_name !== "")) {
        return args.indent + fn_name
    }
    else {
        let src = args.value.toString();
        return replace_substrings(src, "\n", args.indent + "\n")
    }
}

/** Created by Fry on 3/5/16. */


var Instruction$1 = class Instruction {
    init_instruction(){} //shadowed by at least wait_until and loop

    static to_string(instr){
       if(instr instanceof Instruction) { return instr.toString() }
       else if (Instruction.is_oplet_array(instr)) {
           var oplet = instr[Dexter$1.INSTRUCTION_TYPE];
           var fn_name = Dexter$1.instruction_type_to_function_name(oplet);
           var args = instr.slice(Instruction.INSTRUCTION_ARG0);
           return fn_name + " " + args
       }
       else if (Array.isArray(instr)) { return "Array of " + instr.length + " instructions" }
       else if (typeof(instr) == "function") {
           let name = instr.name;
           if(name && name !== "") { return "function " + name }
           else { return "anonymous function" }
       }
       else { return instr.toString() }
    }
    toString(){
        return "{instanceof: " + stringify_value_aux(this.constructor) + "}"
    }

    //excludes at_sign instructions but includes "a" and "a!
    //if first elt is a 2 char string , the 2nd char must be !
    /*
    static is_short_instruction(obj) {
        if(!Array.isArray(obj))     { return false }
        if (obj.length == 0)        { return false }
        return Instruction.is_short_instruction_name(obj[0])
    }

    //used by Job def to verify at_sign_function
    static is_short_instruction_name(a_string){
        if(this.is_short_instruction_name_no_convert(a_string)) { return true } //the only permissible 2 char string
        if(typeof(a_string) != "string")  { return false }
        if(a_string.length != 1)          { return false }
        if(a_string == "@")               { return false }
        else                              { return true  }
    }

    //called from socket.js
    static is_short_instruction_name_no_convert(a_string){
        if(typeof(a_string) != "string")  { return false }
        else if(a_string.length != 2)     { return false }
        else                              { return a_string[1] == "!" }
    }

    static is_at_sign_instruction(item) {
        return (Array.isArray(item) && (item[0] == "@"))
    }
    */

    //if oplet is null, returns true for any oplet. if its a one char string.
    //only returns true if the oplet in obj is that one char string
    static is_oplet_array(obj, oplet=null){
        //since we're making the instruction arrays by our fn calls, ie Job.move,
        //the user isn't making up the arrays, so we assume all arrays that start
        //with a first elt of a string or length 1 are legitimate. But
        //we COULD check that the first char is legal and
        //the length and types of the rest of the elts matched what that op-let needs.
        if (Array.isArray(obj) && (obj.length > 0)){
            var oplet_maybe = obj[Instruction.INSTRUCTION_TYPE];
            if(typeof(oplet) === "string") {
                return oplet_maybe === oplet
            }
            else {
                return Robot$1.is_oplet(oplet_maybe)//true for any 1 char strings. There's an arg for is_oplet to make it more restrictive=, but Kent likes the flexibility for creating new oplets
            }
        }
        return false
    }

    static is_instructions_array(obj){
        if(!Array.isArray(obj))                                  { return false }
        else if (Instruction.is_oplet_array(obj))                { return false }
        else if (Instruction.is_empty_nested_array(obj))         { return false }
        else {
            for(let elt of obj) {
                if(Instruction.is_non_instructions_array_do_list_item(elt)) ; //ok, might still be an instructions array
                else if(!Instruction.is_instructions_array(elt)) { return false }
            }
            return true
        }
    }

    static is_data_array(obj){
        if(!Array.isArray(obj))                   { return false }
        else if (Instruction.is_oplet_array(obj)) { return false }
        else if (this.is_instructions_array(obj)) { return false }
        else                                      { return true }
    }

    static is_start_object(obj){
        return ((typeof(obj) == "object") &&
                (typeof(obj.start) == "function") &&
                 !(obj instanceof Robot$1))
    }

    //If the instruction *could* insert into the do_list, return true.
    //else return false
    //the following instructions insert as of Mar 6, 2019
    //Instruction.Dexter.read_file
    //Instruction.human_enter_choice
    //Instruction.human_enter_instruction
    //Instruction.human_enter_position
    //Instruction.if_any_errors
    //Instruction.include_job
    //Instruction.loop
    //Instruction.send_to_job
    //Instruction.sent_from_job
    //SOMETIMES:
    //   Instruction.Dexter.move_to_straight
    //   Instruction.wait_for
    static is_inserting_instruction(item, job_instance){
       if(item == undefined)  {return false}
       else if (item == null) {return false}
       else if (typeof(item) === "string") {return false}
       else if (Array.isArray(item) && (item.length == 0)) { return false }
       else if (Instruction.is_data_array(item)){
           if(!job_instance) { return true } //we can't resolve the data_array so be conservative as it *might* return an inserting instruction depending on the job data_array_transformer
           else {
               let fn = job_instance.data_array_transformer;
               if(Robot$1.oplet(fn)) { return false }
               else if (Instruction.is_inserting_instruction(fn)) { return true }
               else { return false } //don't know what it is so be conservative and return false
           }
       }
       else if (typeof(item) === "function")     {return true }
       else if (Array.isArray(item))             { return true }
       else if(Instruction.is_oplet_array(item)) { return false }
       else if (is_iterator(item))               { return true }
       else if (item instanceof Instruction){
           if(item.inserting_instruction)        { return true }
           else { return false }
       }
       else { shouldnt$1("Instruction.is_inserting_instruction passed unhandled instruction: " + item); }
    }

    static array_has_only_non_inserting_instructions(a_do_list, job_instance){
        for(let item of a_do_list){
            if(this.is_inserting_instruction(item, job_instance)) {return false}
        }
        return true
    }

    //used by do_next_item to determine if the return value of
    //calling the data_array_transformer can be directly sent.
    //a data_array is not sendable because it has to be transformed first.
    static is_sendable_instruction(item){
        return (Instruction.is_oplet_array(item) ||
                (typeof(item) == "string"))
    }

    static is_no_op_instruction(item){
       return ((item === undefined) ||
               (item === null)      ||
                Instruction.is_empty_nested_array(item)
       )
    }

    static is_empty_nested_array(array_maybe){
        if(!Array.isArray(array_maybe)) { return false }
        else {
            for(let elt of array_maybe) {
                if(!Instruction.is_empty_nested_array(elt)) {
                    return false
                }

            }
            return true
        }
    }

    static is_non_instructions_array_do_list_item(item){
       return ( Instruction.is_no_op_instruction(item) ||
                (item instanceof Instruction) ||
                Instruction.is_oplet_array(item) ||
                is_iterator(item) ||
                (typeof(item) === "string") ||
                (typeof(item) === "function") ||
                Instruction.is_start_object(item)
                )
    }

    //a valid item to put on a do_list
    //mirrors Job.do_next_item ordering
    static is_do_list_item(item){
        return ( Array.isArray(item) ||   //accept data_arrays too. //Instruction.is_instructions_array(item)
                 Instruction.is_non_instructions_array_do_list_item(item)
               )
    }

    static is_F_instruction_string(str){
        return ((typeof(str) === "string") && str.endsWith(" F;"))
    }

    static extract_job_id(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str= oplet_array_or_string[Instruction.JOB_ID];
        return parseInt(str)
    }

    static extract_instruction_id(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str= oplet_array_or_string[Instruction.INSTRUCTION_ID];
        return parseInt(str)
    }

    static extract_start_time(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str= oplet_array_or_string[Instruction.START_TIME];
        if (str == "undefined") { return undefined } //probably should never happen
        else { return parseInt(str) }
    }

    static extract_stop_time(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str = oplet_array_or_string[Instruction.STOP_TIME];
        if (str == "undefined") { return undefined } //will happen for all string instructions
        else { return parseInt(str) }
    }

    static extract_instruction_type(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") {
            oplet_array_or_string = oplet_array_or_string.substring(0, oplet_array_or_string.length - 1); //cut the ending semicolon
            oplet_array_or_string = oplet_array_or_string.split(" ");
        }
        return oplet_array_or_string[Instruction.INSTRUCTION_TYPE]
    }

    static extract_args(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") {
            oplet_array_or_string = oplet_array_or_string.substring(0, oplet_array_or_string.length - 1); //cut the ending semicolon
            oplet_array_or_string = oplet_array_or_string.split(" ");
            let arg_strings = oplet_array_or_string.slice(Instruction.INSTRUCTION_ARG0);
            let result = [];
            for(let substr of arg_strings) {
                let num_maybe = parseFloat(substr); //on the last arg, it probably ends with semicolon. that's ok
                if(Number.isNaN(num_maybe)) { result.push(substr); } //assume its just a string
                else { result.push(num_maybe); }
            }
            return result
        }
        else {
            return oplet_array_or_string.slice(Instruction.INSTRUCTION_ARG0)
        }
    }

    //return an array of the instruction args
    static args(ins_array){
        return ins_array.slice(Instruction.INSTRUCTION_ARG0)
    }

    static job_of_instruction_array(ins_array){
        var job_id = ins_array[Instruction.JOB_ID];
        return Job$1.job_id_to_job_instance(job_id)
    }

    static instruction_color(ins){
        if(Instruction.is_oplet_array(ins))              { return "#FFFFFF" } //white
        else if(Instruction.is_data_array(ins))          { return "#FFFFFF" } //white
        else if(typeof(ins) == "string")                 { return "#DDEEFF" } //light blue
        else if (ins instanceof Instruction) {
            if(ins.constructor.name.startsWith("human"))  { return "#ffb3d1" }//pink
            else if (ins instanceof Instruction.break)    { return "red" }    //red
            else if (ins instanceof Instruction.debugger) { return "red" }    //red
            else                                          { return "#e6b3ff" }//lavender
        }
        else if (is_generator_function(ins))              { return "#ccffcc" } //green
        else if (is_iterator(ins))                        { return "#aaffaa" } //lighter green
        else if (typeof(ins) == "function")               { return "#b3e6ff" } //blue
        else if (Instruction.is_start_object(ins))        { return "#ffd492"}  //tan
        else if (ins === null)                            { return "#aaaaaa" } //gray
        else if (ins ===undefined)                        { return "#aaaaaa" } //gray

        else if (Array.isArray(ins))                      { return "#aaaaaa" } //gray
        else { shouldnt$1("Instruction.instruction_color got unknown instruction type: " + ins); }
    }
    static text_for_do_list_item(ins){
        if (ins === undefined)            { return 'undefined' }
        else if (ins == null)             { return 'null' }
        else if (typeof(ins) == "string") { return '"' + ins + '"' }
        else if (Instruction.is_data_array(ins)){
            let text = JSON.stringify(ins);
            let title = "data_array instructions use\ntheir Job's data_array_transformer for functionality,\n which is, by default: Dexter.pid_move_all_joints";
            return "<span title='" + title + "'>" + text + "</span>"
        }
        else if(Instruction.is_oplet_array(ins)) {
            let text;
            try { text  = JSON.stringify(ins); } //we want 1 line here, not the multi-lines that stringify_value(ins) puts out
            catch(err) { //happens for instructions like Dexter.dexter0.sleep(2) where the dexeter instance is circular, so just do something cheaper.
                text = ins.toString();
            }
            return "<span title='" + Robot$1.instruction_type_to_function_name(ins[Instruction.INSTRUCTION_TYPE]) + "'>" + text + "</span>"
        }
        else if (ins instanceof Instruction) {
            let name = ins.constructor.name;
            let props = "";
            for(let prop_name of Object.keys(ins)){
                props += "<i>" + prop_name + "</i>: " + ins[prop_name] + "; ";
            }
            return name + " with " + props
        }
        else if (is_generator_function(ins)) {
            return "generator function " + ins.toString().substring(0, 70)
        }
        else if (is_iterator(ins)){
            return "iterator " + ins.toString().substring(0, 70)
        }
        else if (typeof(ins)  == "function")       { return ins.toString().substring(0, 80) }
        else if (Instruction.is_start_object(ins)) {
            if(ins.to_source_code) { return ins.to_source_code() } //hits for Note and Phrase
            else { return ins.toString().substring(0, 80)  }
        }

        else if (Array.isArray(ins))        { return stringify_value(ins) }
        else { shouldnt$1("Instruction.text_for_do_list_item got unknown instruction type: " + ins); }
    }
    static text_for_do_list_item_for_stepper(ins){
        if(Instruction.is_oplet_array(ins)) {
            let text = JSON.stringify(ins.slice(4)); //we want 1 line here, not the multi-lines that stringify_value(ins) puts out
            return "<span title='" + Robot$1.instruction_type_to_function_name(ins[Instruction.INSTRUCTION_TYPE]) + "'>" + text + "</span>"
        }
        else if (ins instanceof Instruction) {
            let name = ins.constructor.name;
            let props = "";
            for(let prop_name of Object.keys(ins)){
                props += "<i>" + prop_name + "</i>: " + ins[prop_name] + "; ";
            }
            return name + " with " + props
        }
        else if (is_generator_function(ins)) {
            return "generator function " + ins.toString().substring(0, 70)
        }
        else if (is_iterator(ins)){
            return "iterator " + ins.toString().substring(0, 70)
        }
        else if (typeof(ins) == "function") { return ins.toString().substring(0, 80) }
        else if (ins == null) { return 'null' }
        else if (Array.isArray(ins)) { return stringify_value(ins) }
        else { shouldnt$1("Instruction.text_for_do_list_item_for_stepper got unknown instruction type: " + ins); }
    }

    //side effects instr (if it can take a robot) and returns it.
    static add_robot_to_instruction(instr, robot){
        if (robot === undefined) ;
        else if (instr instanceof Instruction){
            if(instr.hasOwnProperty("robot")) { instr.robot = robot; }
            return instr
        }
        else if (Instruction.is_oplet_array(instr)) {
            let last_elt = last(instr);
            if (last_elt instanceof Robot$1) { instr[instr.length - 1] = robot; }
            else { instr.push(robot); }
        }
        else if (Array.isArray(instr)) { Instruction.add_robot_to_instructions(instr, robot);}
        return instr
    }

    //instr is an array of any kind of job instruction.
    //side effects each instr in instrs (if it can take a robot) and returns it.
    static add_robot_to_instructions(instrs=[], robot){
        for (let instr of instrs){
            Instruction.add_robot_to_instruction(instr, robot);
        }
        return instrs
    }

    //this helps catch mismatches of instruction robot and job robot quickly with
    //a good error message.
    set_instruction_robot_from_job(job_instance){
        let error_mess_or_true = Instruction.can_instruction_run_on_robot(this, job_instance.robot);
        if (typeof(error_mess_or_true) == "string") {
            error_mess_or_true = "In Job: " + job_instance.name + ",<br/>" + error_mess_or_true;
            dde_error(error_mess_or_true);
        }
        else { this.robot = job_instance.robot; }
    }
    //returns true or a string of an error message
    static can_instruction_run_on_robot(instruction, robot_instance){
        if(!this.is_do_list_item(instruction)) {
           return instruction + " is not a valid instruction.<br/>It can't run on any robot."
        }
        else if((instruction == null) || (instruction == undefined)) { return true }
        else if (instruction instanceof Instruction){
            let job_robot_class_name  = robot_instance.constructor.name;
            let instruction_class_name = Object.getPrototypeOf(instruction).constructor.name;
            if(instruction_class_name == "Instruction") { return true } //can run on any robot
            let instruction_superclass_name = Object.getPrototypeOf(Object.getPrototypeOf(instruction)).constructor.name; //often "Control"
            if(instruction_superclass_name == job_robot_class_name) { //ie "Dexter", "Serial"
                return true
            }
            else {
                return "attempt to run instruction: " + instruction_superclass_name + "." + instruction_class_name + "<br/>" +
                       "on Robot of class: " + job_robot_class_name + "<br/>" +
                       "but that Robot can't handle instructions of class: " + instruction_superclass_name
            }
        }
        else { return true }
    }
};

Instruction$1.labels = [
"JOB_ID",             // 0
"INSTRUCTION_ID",     // 1
"START_TIME",         // 2
"STOP_TIME",          // 3 //END_TIME is better in this context BUT stop_time, stop_reason is used in Jobs and I wanted to be consistent with that.
"INSTRUCTION_TYPE",   // 4 //ie "oplet"
"INSTRUCTION_ARG0",   // 5
"INSTRUCTION_ARG1",   // 6
"INSTRUCTION_ARG2",   // 7
"INSTRUCTION_ARG3",   // 8
"INSTRUCTION_ARG4",   // 9
"INSTRUCTION_ARG5",   // 10
"INSTRUCTION_ARG6",   // 11
"INSTRUCTION_ARG7",   // 12
"INSTRUCTION_ARG8",   // 13
"INSTRUCTION_ARG9",   // 14
"INSTRUCTION_ARG10",  // 15
"INSTRUCTION_ARG11",  // 16
"INSTRUCTION_ARG12"   // 17 //used in Socket.js instruction_array_degrees_to_arcseconds_maybe for "T"
]; // and after those come the args to the instruction.

for (let i = 0; i < Instruction$1.labels.length; i++){
    Instruction$1[Instruction$1.labels[i]] = i;
}

/* correct as of ap 2020 BUT we decidd to allow any non-neg integer
Instruction.valid_w_addresses = [5,
                                20, 21, 26, 27, 28,
                                31, 32, 33, 34, 35, 36, 39,
                                40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                50, 51, 52, 53, 54, 55, 56,
                                61, 62, 64, 66, 67, 68, 69,
                                70, 71, 73, 74, 75, 78, 79,
                                80, 81]
*/

Instruction$1.is_valid_w_address = function(addr) {
  return is_non_neg_integer(addr)
};

Instruction$1.w_address_names = [
    "BASE_POSITION", //"0"
    "END_POSITION", //"1"
    "PIVOT_POSITION", //"2"
    "ANGLE_POSITION", //"3"
    "ROT_POSITION", //"4"
    "ACCELERATION_MAXSPEED", //"5"
    "BASE_SIN_CENTER", //"6"
    "BASE_COS_CENTER", //"7"
    "END_SIN_CENTER", //"8"
    "END_COS_CENTER", //"9"
    "PIVOT_SIN_CENTER", //"10"
    "PIVOT_COS_CENTER", //"11"
    "ANGLE_SIN_CENTER", //"12"
    "ANGLE_COS_CENTER", //"13"
    "ROT_SIN_CENTER", //"14"
    "ROT_COS_CENTER", //"15"
    "PID_DELTATNOT", //"16"
    "PID_DELTAT", //"17"
    "PID_D", //"18"
    "PID_I", //"19"
    "PID_P", //"20"
    "PID_ADDRESS", //"21"
    "BOUNDRY_BASE", //"22"
    "BOUNDRY_END", //"23"
    "BOUNDRY_PIVOT", //"24"
    "BOUNDRY_ANGLE", //"25"
    "BOUNDRY_ROT", //"26"
    "SPEED_FACTORA", //"27"
    "SPEED_FACTORB", //"28"
    "FRICTION_BASE", //"29"
    "FRICTION_END", //"30"
    "FRICTION_PIVOT", //"31"
    "FRICTION_ANGLE", //"32"
    "FRICTION_ROT", //"33"
    "MOVE_TRHESHOLD", //"34"
    "F_FACTOR", //"35"
    "MAX_ERROR", //"36"
    "FORCE_BIAS_BASE", //"37"
    "FORCE_BIAS_END", //"38"
    "FORCE_BIAS_PIVOT", //"39"
    "FORCE_BIAS_ANGLE", //"40"
    "FORCE_BIAS_ROT", //"41"
    "COMMAND_REG", //"42"
    "DMA_CONTROL", //"43"
    "DMA_WRITE_DATA", //"44"
    "DMA_WRITE_PARAMS", //"45"
    "DMA_WRITE_ADDRESS", //"46"
    "DMA_READ_PARAMS", //"47"
    "DMA_READ_ADDRESS", //"48"
    "REC_PLAY_CMD", //"49"
    "REC_PLAY_TIMEBASE", //"50"
    "MAXSPEED_XYZ", //"51"
    "DIFF_FORCE_BETA", //"52"
    "DIFF_FORCE_MOVE_THRESHOLD", //"53"
    "DIFF_FORCE_MAX_SPEED", //"54"
    "DIFF_FORCE_SPEED_FACTOR_ANGLE", //"55"
    "DIFF_FORCE_SPEED_FACTOR_ROT", //"56"
    "DIFF_FORCE_ANGLE_COMPENSATE", //"57"
    "FINE_ADJUST_BASE", //"58"
    "FINE_ADJUST_END", //"59"
    "FINE_ADJUST_PIVOT", //"60"
    "FINE_ADJUST_ANGLE", //"61"
    "FINE_ADJUST_ROT", //"62"
    "RECORD_LENGTH", //"63"
    "END_EFFECTOR_IO", //"64"
    "SERVO_SETPOINT_A", //"65"
    "SERVO_SETPOINT_B", //"66"
    "BASE_FORCE_DECAY", //"67"
    "END_FORCE_DECAY", //"68"
    "PIVOT_FORCE_DECAY", //"69"
    "ANGLE_FORCE_DECAY", //"70"
    "ROTATE_FORCE_DECAY", //"71"
    "PID_SCHEDULE_INDEX", //"72"
    "GRIPPER_MOTOR_CONTROL", //"73"
    "GRIPPER_MOTOR_OFF_WIDTH", //"74"
    "GRIPPER_MOTOR_ON_WIDTH", //"75"
    "START_SPEED", //"76"
    "ANGLE_END_RATIO", //"77"
    "RESET_PID_AND_FLUSH_QUEUE", //"78"
    "XYZ_FORCE_TIMEBASE", //"79"
    "DIFFERENTIAL_FORCE_TIMEBASE", //"80"
    "PID_TIMEBASE" //"81"
];
/*Instruction.w_address_number_to_name = function(num){
    if(!Instruction.is_valid_w_address(num)) { return "unknown" }
    let w_address_names = Series.id_to_series("series_w_oplet_address_id").array
    if (num >= w_address_names.length) { return "unknown" }
    else { return w_address_names[num] }
}*/

//returns undefined for invalid nums
Instruction$1.w_address_number_to_name = function(num){
    return Instruction$1.w_address_names[num]
};

//beware: will return -1 if name is invalid
/*Instruction.w_address_name_to_number = function(name){
    let w_address_names = Series.id_to_series("series_w_oplet_address_id").array
    return w_address_names.indexOf(name)
}*/

//beware: will return -1 if name is invalid
Instruction$1.w_address_name_to_number = function(name){
    return Instruction$1.w_address_names.indexOf(name)
};

//user might call this at top level in a do_list so make it's name short.
//the last arg can be a Dexter robot, but if not, the robot comes from the
//default robot for the job that this instruction is in.
function make_ins$1(instruction_type, ...args){
    /*if(!Dexter.instruction_type_to_function_name_map[instruction_type] &&
       !Serial.instruction_type_to_function_name_map[instruction_type]){
        warning("make_ins called with an invalid instruction_type: " + instruction_type +
                "<br/>make_ins still returning an array using: " + instruction_type)
    }*/
    //let first_arg = args[0]
    /*if((instruction_type == "w") && !Instruction.is_valid_w_address(first_arg)){
        dde_error('make_ins("w" ...) does not support an address of ' + first_arg +
                  '.<br/>Valid addresses are non-negative integers. ' +
                  '.<br/>See <a target="_blank" href="https://github.com/HaddingtonDynamics/Dexter/wiki/oplet-write">oplet_write doc</a>. for details.')
    }*/
    let result = new Array(Instruction$1.INSTRUCTION_TYPE);
    result.push(instruction_type);
    if (args.length === 0) { return result } //avoids generating the garbage that concat with an arg of an empty list would for this common case, ie for "g" ahd "h" instructions
    else                   { return result.concat(args) }
}

//to_source_code_insruction_array(isntr_array) //inplemented in to_source_code.js

//now Instruction.INSTRUCTION_TYPE == 4, and some_ins_array[Instruction.INSTRUCTION_TYPE] will return the oplet
//make_ins("a", 1, 2, 3, 4, 5) works
//make_ins("a", ...[1, 2, 3, 4, 5]) works

Instruction$1.break = class Break extends Instruction$1{ //class name must be upper case because lower case conflicts with js break
    constructor () { super(); }
    do_item (job_instance){
        let loop_pc = Instruction$1.loop.pc_of_enclosing_loop(job_instance);
        if (loop_pc === null) {
            warning("Job " + job_instance.name + ' has a Control.break instruction at pc: ' + job_instance.program_counter +
                "<br/> but there is no Control.loop instruction above it.");
            job_instance.set_up_next_do(1);
        }
        else {
            let loop_ins = job_instance.do_list[loop_pc];
            loop_ins.init_instruction(); //just in case this loop is nested in another loop
            //or we "go_to backwards" to it, we want its next "first_call" to initialize
            //the loop so set this prop to null
            let items_within_loop = job_instance.total_sub_instruction_count(loop_pc); //job_instance.added_items_count[loop_pc]
            job_instance.program_counter = loop_pc + items_within_loop; //now pc is pointing at last inst of loop iteration instrs
            job_instance.set_up_next_do(1); //skip past the last inst in the loop iteration, as we're done with the loop
        }
    }
    toString(){ return "break" }
    to_source_code(args){ return args.indent + "Control.break()" }
};

//like JS continue but in a dde LOOP instruction
//very similar to Instruction.break, but without loop_ins.init_instruction()
Instruction$1.continue = class Continue extends Instruction$1{ //class name must be upper case because lower case conflicts with js continue
    constructor () { super(); }
    do_item (job_instance){
        let loop_pc = Instruction$1.loop.pc_of_enclosing_loop(job_instance);
        if (loop_pc === null) {
            dde_error("Job " + job_instance.name + ' has a Control.Continue instruction at pc: ' + job_instance.program_counter +
                "<br/> but there is no Control.loop instruction above it.");
            job_instance.set_up_next_do(1);
        }
        else {
            job_instance.do_list[loop_pc];
            job_instance.program_counter = loop_pc;
            job_instance.set_up_next_do(0);
        }
    }
    toString(){ return "continue" }
    to_source_code(args){ return args.indent + "Control.continue()" }
};


Instruction$1.debugger = class Debugger extends Instruction$1{ //class name must be upper case because lower case conflicts with js debugger
    constructor () {
        super();
        this.time_dev_tools_was_opened = null;
    }
    do_item (job_instance){
        if(this.time_dev_tools_was_opened === null){
            open_dev_tools();
            this.time_dev_tools_was_opened = Date.now(); //in milliseconds
            job_instance.set_up_next_do(0);
        }
        else if((Date.now() - this.time_dev_tools_was_opened) < 1000) {
            job_instance.set_up_next_do(0); //give open_dev_tools() a chance to ipen up.
                                           //otherwise it won't break when executing debugger
                                           //in do_next_item
        }
        else {
            js_debugger_checkbox_id.checked = true; //this is here and not in the first clause
            //because we really don't want to waste time and pause during execution
            //of the debugger instruction itself while looping in clause 2,
            //we just want to skip ahead to the next instruction and debug from there.
            job_instance.set_up_next_do(1); } //ready to move on and break in do_next_item
    }
    toString(){ return "debugger" }
    to_source_code(args){ return args.indent + "Control.debugger()" }
};

Instruction$1.step_instructions = class step_instructions extends Instruction$1{ //class name must be upper case because lower case conflicts with js debugger
    constructor () { super(); }
    do_item (job_instance){
        Job$1.set_go_button_state(false);
        job_instance.set_up_next_do(1, true);
    }
    toString(){ return "step_instructions" }
    to_source_code(args){ return args.indent + "Control.step_instructions()" }
};

Instruction$1.error = class error extends Instruction$1{
    constructor (reason="Job stopped due to executing a Control.error instruction.", perform_when_stopped=true) {
        super();
        if(typeof(perform_when_stopped) !== "boolean") {
          dde_error("Instruction Control.error passed perform_when_stopped of: " + perform_when_stopped +
                    "<br/>but it should be true or false.");
        }
        this.reason = reason;
        this.perform_when_stopped=perform_when_stopped;
    }
    do_item (job_instance){
        job_instance.when_stopped_conditions = this.perform_when_stopped;
        job_instance.when_do_list_done = "run_when_stopped";
        if(!this.perform_when_stopped) {
            job_instance.when_stopped = "stop";
        }
        job_instance.stop_for_reason("errored",  "Instruction Control.error run with reason: " + this.reason);
        job_instance.set_up_next_do(0);
    }
    toString(){
        return "error: " + this.reason
    }
    to_source_code(args){
        let this_indent = args.indent;
        args        = jQuery.extend({}, arguments[0]);
        args.value  = this.reason;
        args.indent = "";
        return this_indent + "Control.error(" + to_source_code$1(args) + ")"
    }
};

//upper case G to avoid a conflict, but the user instruction is spelled Control.get_page
Instruction$1.Get_page = class Get_page extends Instruction$1{
    constructor (url_or_options, response_variable_name="http_response") {
        super();
        this.url_or_options = url_or_options;
        this.response_variable_name = response_variable_name;
        this.sent = false;
    }
    do_item (job_instance){
        var the_var_name = this.response_variable_name;  //for the closures
        if (this.sent == false){ //hits first time only
            job_instance.user_data[the_var_name] = undefined; //must do in case there was some other
            //http_request for this var name, esp likely if its default is used.
            get_page_async(this.url_or_options, //note I *could* simplify here and use get_page (syncrhonos), but this doesn't freeze up UI while getting the page so a little safer.
                function(err, response, body) {
                    //console.log("gp top of cb with the_var_name: " + the_var_name)
                    //console.log("gp got err: " + err)
                    //console.log("ojb inst: "   + job_instance)
                    //console.log("response: "    + response)
                    if(err) { //bug err is not null when bad url
                        console.log("gp in err: ");
                        job_instance.user_data[the_var_name] = "Error: " + err;
                        console.log("gp after err: ");
                    }
                    else if(response.statusCode !== 200){
                        job_instance.user_data[the_var_name] = "Error: in getting url: " + this.url_or_options + ", received error status code: " + response.statusCode;
                    }
                    else {
                        //console.log("gp in good: ")
                        job_instance.user_data[the_var_name] = body;
                        //console.log("gp after good: ")
                    }
                });
            this.sent = true;
            job_instance.set_up_next_do(0);
        }
        else if (job_instance.user_data[the_var_name] === undefined){ //still waiting for the response
            job_instance.set_up_next_do(0);
        }
        else { job_instance.set_up_next_do(1);} //got the response, move to next instruction
    }
    to_source_code(args){
        return args.indent + "Control.get_page(" +
            to_source_code$1({value: this.url_or_options}) +
            ((this.response_variable_name == "http_response") ? "" : (", " + to_source_code$1({value: this.response_variable_name})))  +
            ")"
    }
};

Instruction$1.go_to = class go_to extends Instruction$1{
    constructor (instruction_location) {
        super();
        if (instruction_location === undefined){
            dde_error("go_to has not been passed an instruction_location.");
        }
        this.instruction_location = instruction_location;
    }
    do_item (job_instance){
        let id = job_instance.instruction_location_to_id(this.instruction_location);
        if (id == job_instance.program_counter){
            job_instance.stop_for_reason("errored", "In job." + job_instance.name +
                        "<br/>with a go_to instruction whose instruction_location: " + this.instruction_location +
                        "<br/>points to id: " + id +
                        "<br/>that is the same as this go_to instruction," +
                        "<br/>which would cause an infinite loop.");
            job_instance.set_up_next_do(0);

        }
        else {
            job_instance.program_counter = id;
            job_instance.set_up_next_do(0);
        }
    }
    toString(){ return "Control.go_to instruction_location: " + this.instruction_location }

    to_source_code(args){
        let this_indent = args.indent;
        args        = jQuery.extend({}, arguments[0]);
        args.value  = this.instruction_location;
        args.indent = "";
        return this_indent + "Control.go_to(" + to_source_code$1(args) + ")"
    }
};

Instruction$1.grab_robot_status = class grab_robot_status extends Instruction$1{
    constructor (user_data_variable = "grabbed_robot_status", //a string
                 start_index = Serial$1.DATA0, //integer, but can also be "all"
                 end_index=null,  //if integer and same as start_index,
                                //makes a vector of the start_index value,
                                //otherwise makes array of the start_index THROUGH
                                //end_index. OR can be the string "end" meaning
                                //grab through the end of the array
                 robot=null)
                 {
        super();
        this.user_data_variable = user_data_variable;
        this.start_index        = start_index;
        this.end_index          = end_index;
        this.robot = robot;
    }
    do_item (job_instance){
        let robot = (this.robot ? this.robot : job_instance.robot);
        let rs = robot.robot_status;
        let val;
        if (this.start_index == "data_array") {
            this.start_index = Serial$1.DATA0;
            this.end_index   = "end";
        }
        //set val
        if (this.start_index == "all") { val = rs; }
        else if (this.end_index) {
            if (this.end_index === "end") { this.end_index = rs.length - 1; }
            else if (this.start_index > this.end_index ) {
                job_instance.stop_for_reason("errored", "instruction: grab_robot_status passed end_index: " + this.end_index +
                          " that is less than start_index: " + this.start_index);
                job_instance.set_up_next_do(0);
                return
            }
            else { val = rs.slice(this.start_index, this.end_index + 1); }
        }
        else { val = rs[this.start_index]; } //the one case that val is not an array
        job_instance.user_data[this.user_data_variable] = val;
        job_instance.set_up_next_do(1);
    }
    toString(){
        return "grab_robot_status: " + this.user_data_variable
    }
    to_source_code(args){
        let this_indent = args.indent;
        args        = jQuery.extend({}, args);
        args.value  = this.user_data_variable;
        args.indent = "";
        let ud_src  = to_source_code$1(args);
        args        = jQuery.extend({}, args);
        args.value  = this.start_index;
        args.indent = "";
        let si_src  = to_source_code$1(args);
        args        = jQuery.extend({}, args);
        args.value  = this.end_index;
        args.indent = "";
        let ei_src  = to_source_code$1(args);
        return this_indent + "IO.grab_robot_status(" +
               ud_src + ", " + si_src + ", " + ei_src + ")"
    }
};

/*
Instruction.human_recognize_speech = class human_recognize_speech extends Instruction{
    constructor (args){
        super()
        this.args = args
    }
    do_item (job_instance){
        let the_instruction = this
        this.args.callback = function(reco) {
            job_instance.user_data[the_instruction.args.user_data_variable_name] = reco
            inspect(reco)
            job_instance.set_up_next_do(1)
        }
        //this.args.job_instance = job_instance
        recognize_speech(this.args)
    }
    static finished(job_instance, reco){
        let the_instruction = job_instance.current_instruction()
        job_instance.user_data[the_instruction.args.user_data_variable_name] = reco
        inspect(reco)
        job_instance.set_up_next_do(1)
    }
    to_source_code(args){
        let this_indent = args.indent
        args        = jQuery.extend({}, arguments[0])
        args.indent = ""
        args.value = this.args
        return this_indent + "Human.recognize_speech(" + to_source_code(args) + ")"
    }
}*/

Instruction$1.human_speak = class human_speak extends Instruction$1{
    constructor (args){
        super();
        this.args = args;
    }
    do_item (job_instance){
       //delete this.args.wait //don't do because in case user has backwards go_to. Probably the extra arg
       //in this.args won't matter
       if (this.args.wait){
           this.args.callback = function (){
                job_instance.set_up_next_do(1);
           };
           speak(this.args);
           return
       }
       else { //don't wait for speak to be done to call the next instruction
           speak(this.args);
           job_instance.set_up_next_do(1);
       }
    }
    to_source_code(args){
        return args.indent + "Human.speak({"  +
            ((this.task == "") ? "" : ("task: " + to_source_code$1({value: this.task}) + ", ")) +
            ((this.title === undefined) ? "" : ("title: " + to_source_code$1({value: this.title})  + ", ")) +
            ((this.add_stop_button == true)         ? "" : ("add_stop_button: "     + this.add_stop_button  + ", ")) +
            ((this.dependent_job_names.length == 0) ? "" : ("dependent_job_names: " + to_source_code$1({value: this.dependent_job_names}) + ", ")) +
            ((this.x      == 200) ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200) ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400) ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400) ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

Instruction$1.human_task = class human_task extends Instruction$1{
    constructor ({task="",
                  title, //don't give this default of "" because we reserve that for when you want NO title.
                         //without passing this, or passing "undefined", you get a smart default including the job name and "Human Task"
                  add_stop_button=true,
                  dependent_job_names=[],
                  x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}) {
        super();
        this.task    = task;
        this.add_stop_button     = add_stop_button;
        this.dependent_job_names = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>";
        var buttons = '<center><input type="submit" value="Continue Job" title="Signify you are done with this task which\ncloses this dialog box and\ncontinues this job"/>&nbsp;';
        if (this.add_stop_button) { buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>'; }
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Task";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.task interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<p/>" + buttons + hidden,
                    callback: human_task_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }
    to_source_code(args){
        return args.indent + "Human.task({"  +
               ((this.task == "") ? "" : ("task: " + to_source_code$1({value: this.task}) + ", ")) +
               ((this.title === undefined) ? "" : ("title: " + to_source_code$1({value: this.title})  + ", ")) +
               ((this.add_stop_button == true)         ? "" : ("add_stop_button: "     + this.add_stop_button  + ", ")) +
               ((this.dependent_job_names.length == 0) ? "" : ("dependent_job_names: " + to_source_code$1({value: this.dependent_job_names}) + ", ")) +
               ((this.x      == 200) ? "" : ("x: " + this.x       + ", "   )) +
               ((this.y      == 200) ? "" : ("y: " + this.y       + ", "   )) +
               ((this.width  == 400) ? "" : ("width: "  + this.width   + ", "   )) +
               ((this.height == 400) ? "" : ("height: " + this.height  + ", "   )) +
               ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
               "})"
    }
};

var human_task_handler = function(vals){
    var job_instance = Job$1[vals.job_name];
    if(vals.clicked_button_value == "Continue Job") ; //the dialog closes automatically
    else if (vals.clicked_button_value == "Stop Job"){
        job_instance.stop_for_reason("interrupted", "In human_task, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
                    //creating the human_job, dep_job_names will now be [] so the below if hits but
                    //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && //if j_inst doesn't exist, just forget about it as it doesn't need to be stopped.
                              //without this check we'd pointlessly error.
                    !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_task, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                }
            }
        }
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
     //this lets the do_next_item handle finishing the job properly
};
module.exports.human_task_handler = human_task_handler;

Instruction$1.human_enter_choice = class human_enter_choice extends Instruction$1{
    constructor ({task="",
                  choices=[["Yes", true], ["No", false]],
                  show_choices_as_buttons=false,
                  one_button_per_line=false,
                  user_data_variable_name="choice",
                  dependent_job_names=[],
                  add_stop_button=true,
                  title, x=200, y=200, width=400, height=400,
                  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task    = task;
        this.user_data_variable_name = user_data_variable_name;
        //this.choices                 = choices
        this.show_choices_as_buttons = show_choices_as_buttons;
        this.one_button_per_line     = one_button_per_line;
        this.add_stop_button         = add_stop_button;
        this.dependent_job_names     = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
        this.choices = [];
        for (let choice of choices){  //put each choice into an array. If already an array. leave it as is.
            if (typeof(choice) == "string") { choice = [choice]; }
            if (Array.isArray(choice)) {  this.choices.push(choice); }
            else {dde_error("Human.enter_choice passed a choice that is not a string and not an array: " + choice);}
        }
        this.inserting_instruction = true;
    }
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>\n" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>\n" +
                      "<input type='hidden' name='choices_string' value='" + JSON.stringify(this.choices)                  + "'/>\n";
        let select = "";
        let buttons;
        if (this.show_choices_as_buttons){
            for (var item of this.choices){
                select += "<input type='submit' style='background-color:#FFACB6;margin:4px;' value='" + item[0] + "'/> ";
                if (this.one_button_per_line) { select += "<br/>"; }
            }
            if(this.add_stop_button) {
                buttons = ' <center> <input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/> </center>';
            }
        }
        else { //show as menu items,the default because we can have more of them.
            select  = "<center><select name='choice'>";
            for (var item of this.choices){ select += "<option>" + item[0] + "</option>"; }
            select += "</select></center>";
            buttons = '<center><input type="submit" value="Continue Job" title="Close dialog box and\ncontinue this job"/>&nbsp;';
            if(this.add_stop_button) {
                buttons += ' <input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
            }
            buttons += "</center>";
        }
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Choice";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.enter_choice interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + select + "<br/>" + buttons  + hidden,
                    callback: human_enter_choice_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }

    to_source_code(args){
        return args.indent + "Human.enter_choice({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.user_data_variable_name == "choice")      ? "" : ("user_data_variable_name: " + to_source_code$1({value: this.user_data_variable_name}) + ", ")) +
            ((this.show_choices_as_buttons == false)         ? "" : ("show_choices_as_buttons: " + this.show_choices_as_buttons                          + ", ")) +
            ((this.one_button_per_line == false)             ? "" : ("one_button_per_line: "     + this.one_button_per_line                              + ", ")) +
            ((this.choices.length == 0)                      ? "" : ("choices: "                 + to_source_code$1({value: this.choices})                 + ", ")) +
            ((this.add_stop_button == true)                  ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code$1({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

var human_enter_choice_handler = function(vals){
    var job_instance = Job$1[vals.job_name];
    if(vals.clicked_button_value == "Continue Job") { //means the choices are in a menu, not individual buttons
        //job_instance.user_data[vals.user_data_variable_name] = vals.choice
        human_enter_choice_set_var(job_instance, vals.choice, vals.choices_string, vals.user_data_variable_name);
    }
    else if (vals.clicked_button_value == "Stop Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_choice, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_choice, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
    }
    else { //individual choices are in buttons and the user clicked on one of them
        //job_instance.user_data[vals.user_data_variable_name] = vals.clicked_button_value
        human_enter_choice_set_var(job_instance, vals.clicked_button_value, vals.choices_string, vals.user_data_variable_name);
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
};
module.exports.human_enter_choice_handler = human_enter_choice_handler;


var human_enter_choice_set_var = function (job_instance, choice_string, choices_string, user_data_variable_name){
    let choices = JSON.parse(choices_string);
    let choice_array;
    for(let a_choice_array of choices) {
        if (a_choice_array[0] == choice_string) {
            choice_array = a_choice_array;
            break;
        }
    }
    if (!choice_array) { shouldnt$1("human_enter_choice got choice_string of: " + choice_string +
        " that isn't in: " + choices);}
    if (choice_array.length == 1) { job_instance.user_data[user_data_variable_name] = choice_array[0]; }
    else {
        let val_src = choice_array[1];
        let val;
        if(typeof(val_src == "string")) {
            let fn = new Function("return (" + val_src + ")"); //create a new fn with no args and body of val_src
            val = fn.call(job_instance);
        }
        else { val = val_src; }
        if (!choice_array[2]) {
            job_instance.user_data[user_data_variable_name] = val;
        }
        else {
            Job$1.insert_instruction(val, {job: job_instance.name, offset:"after_program_counter"});
        }
    }
};

Instruction$1.human_enter_filepath = class human_filepath extends Instruction$1{
    constructor ({task="",
                  user_data_variable_name="a_filepath",
                  initial_value="",
                  add_stop_button = true,
                  dependent_job_names=[],
                  title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task = task;
        this.user_data_variable_name = user_data_variable_name;
        this.initial_value           = initial_value;
        this.add_stop_button         = add_stop_button;
        this.dependent_job_names     = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }

    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";
        var text_html = "<input type='file' name='choice' style='font-size:14px;'/>";

        var buttons = '<center><input type="submit" value="Continue Job" title="Close dialog box and\\ncontinue this job"/>&nbsp;';
        if (this.add_stop_button) buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Filepath";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        job_instance.set_status_code("waiting", "user on Human.enter_filepath interaction." );
        show_window({ job_name: job_instance.name,
                    content: this.task + "<br/>" + text_html + "<br/><br/>" + buttons + hidden,
                    callback: human_enter_filepath_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color}
        );
    }
    to_source_code(args){
        return args.indent + "Human.enter_file_path({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.initial_value == "")                      ? "" : ("initial_value: "           + to_source_code$1({value: this.initial_value})           + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code$1({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

function human_enter_filepath_handler(vals){
    var job_instance = Job$1[vals.job_name];
    if(vals.clicked_button_value == "Continue Job") { //means the choices are in a menu, not individual buttons
        job_instance.user_data[vals.user_data_variable_name] = vals.choice;
    }
    else if (vals.clicked_button_value == "Stop Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_filepath, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_filepath, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
}
module.exports.human_enter_filepath_handler = human_enter_filepath_handler;


Instruction$1.human_enter_instruction = class human_enter_instruction extends Instruction$1{
    constructor ({task = "Enter a next instruction for this Job.",
                  instruction_type = "Dexter.move_all_joints",
                  instruction_args = "0, 0, 0, 0, 0",
                  add_stop_button = true,
                  dependent_job_names = [],
                  title, x=300, y=200, width=420, height=400,  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task = task;
        this.instruction_type    = instruction_type;
        this.instruction_args    = instruction_args;
        this.dependent_job_names = dependent_job_names;
        this.add_stop_button     = add_stop_button;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
        this.inserting_instruction = true;
    }

    make_instruction_options(){
        let result = "";
        let key_value_pairs = []; //Object.keys(Dexter.instruction_type_to_function_name_map).sort()
        for(let oplet of Object.keys(Dexter$1.instruction_type_to_function_name_map)){
           key_value_pairs.push([oplet, Robot$1.instruction_type_to_function_name(oplet)]);
        }
        key_value_pairs.sort(function(a, b){ return ((a[1] < b[1])? -1 : 1 ) });
        for (let pair of key_value_pairs){
            let oplet = pair[0];
            let name  = pair[1];
            let label    = name + " (" + oplet + ")";
            let sel_html = ((name == this.instruction_type) ? "selected" : "");
            let the_html = "<option " + sel_html + ">" + label + "</option>";
            result      += the_html;
        }
        return result
    }

    do_item (job_instance){
        if (!job_instance.enter_instruction_recording) { //don't always init as might have instructions from prev dialog in this set
             job_instance.enter_instruction_recording = [];
        }
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>";

        var type_html = '<span id="instruction_type" class="combo_box" style="display:inline-block;vertical-align:middle;width:235px;">' +
                        this.make_instruction_options() +
                        '</span>';
        let rs = job_instance.robot.robot_status;
        var immediate_do = '<b><i>&nbsp;or</i></b><fieldset style="margin-bottom:10px;margin-top:10px;background-color:#DDDDDD">' +
                           '<div style="margin-bottom:10px;"> <i title="'    +
                           'Find valid oplet letters at end of&#013;'        +
                           'each item in the Instruction type menu.&#013;'   +
                           "Type 'space' to create an 'a' instruction&#013;" +
                           "with joint angles from Dexter's current angles." +
                           '">Immediately do & record typed-in oplet</i>: ' +
                           '<input id="immediate_do_id" autofocus name="immediate_do" data-oninput="true" style="width:30px;"/></div>' +
                           '<span title="' + "Each letter you type into&#013;the above type-in box is recorded." +
                           '"><span style="font-size:12px;">Recorded instructions: ' +
                           '</span><span id="recorded_instructions_count_id">' + job_instance.enter_instruction_recording.length + '</span>' +
                           "</span>&nbsp;&nbsp;" +
                            '<input type="button" value="Save" title="Inserts the recorded instructions&#013;into the editor at the cursor,&#013;wrapped in a Job definition.&#013;Also erases (clears) the recording."/> &nbsp;'  +
                            '<input type="button" value="Clear" title="Erases all the instructions in the recording."/> &nbsp;' +
                            '<input type="button" value="Erase last" title="Erases just the last instruction recorded."/><br/>'   +
                            '<span style="font-size:12px;">' + job_instance.robot.name + " current angles: " +
                            rs[Dexter$1.J1_ANGLE] + ", " +
                            rs[Dexter$1.J2_ANGLE] + ", " +
                            rs[Dexter$1.J3_ANGLE] + ", " +
                            rs[Dexter$1.J4_ANGLE] + ", " +
                            rs[Dexter$1.J5_ANGLE] + "</span>" +
                           '</fieldset>';

        var args_html = "<input name='args' style='width:290px;' value='" + this.instruction_args + "'/>";
        var buttons =   '<input type="submit" value="Run instruction & reprompt"/><p/>' +
                        '<input type="submit" value="Continue this job without reprompting" title="Close dialog box and\ncontinue this job"/><p/>' +
            (this.add_stop_button ? '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>' : "");
        if (this.title === undefined) {
            this.title = "Job: " + job_instance.name + ", Human Enter Instruction";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        if(job_instance.robot instanceof Dexter$1){
            out(Dexter$1.robot_status_to_html(job_instance.robot.robot_status, "on job: " + job_instance.name), "black", true);
        }
        job_instance.set_status_code("waiting", "user on Human.enter_instruction interaction.");
        show_window({job_name: job_instance.name,
                    content: "<div style='margin-bottom:10px;'><i>" + this.task + "</i></div>" +
                              "Instruction type: " + type_html +
                              immediate_do +
                              "<div style='padding-left:95px;font-size:12px'><i>Separate args with a comma.</i></div>"  +
                              "Arguments: " + args_html + "<p/>"  +
                              buttons +
                              hidden ,
                    callback: human_enter_instruction_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color //having larger than 350 does not increase the number of combo box menu items shown.
                    });
        //setTimeout(function(){immediate_do_id.focus()}, 100) //always focus on immediate_do_id id because if user is in a loop using it, we might as well focus on it. No other widgets where focus would matter in this dialog
        //above line can't work because we're in sandbox where immediate_do_id is unbound
        immediate_do_id.focus();
    }

    to_source_code(args){
        return args.indent + "Human.enter_instruction({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.instruction_type == "Dexter.move_all_joints") ? "" : ("instruction_type: "    + to_source_code$1({value: this.instruction_type}) + ", ")) +
            ((this.instruction_args  == "0, 0, 0, 0, 0")     ? "" : ("instruction_args: "        + to_source_code$1({value: this.instruction_args}) + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code$1({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

var human_enter_instruction_handler = function(vals){
    var job_instance = Job$1[vals.job_name];
    var hei_instance = job_instance.do_list[job_instance.program_counter];
    if(vals.clicked_button_value == "Stop Job"){
        job_instance.enter_instruction_recording = [];
        job_instance.stop_for_reason("interrupted", "In human_enter_instruction, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                let j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_instruction, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
        //close_window(vals.window_index) //not needed. this is a submit button
    }
    else if (vals.clicked_button_value == "Continue this job without reprompting") {
        job_instance.enter_instruction_recording = [];
        //close_window(vals.window_index) //not needed. this is a submit button
    }
    else if (vals.clicked_button_value == "Save") {
        let job_source_to_save = human_enter_instruction_job_source_to_save(job_instance);
        Editor.insert(job_source_to_save, "selection_end");
        job_instance.enter_instruction_recording = [];
        recorded_instructions_count_id.innerHTML =  "0";
        out("Human.enter_instruction: recorded instructions saved and cleared.", "purple", true);
        immediate_do_id.focus();
        return
    }
    else if (vals.clicked_button_value == "Clear") {
        job_instance.enter_instruction_recording = [];
        recorded_instructions_count_id.innerHTML =  "0";
        out("Human.enter_instruction cleared all recorded instructions.", "purple");
        immediate_do_id.focus();
        return
    }
    else if (vals.clicked_button_value == "Erase last") {
        let last_ins = job_instance.enter_instruction_recording.pop();
        if (last_ins){
            recorded_instructions_count_id.innerHTML = "" + job_instance.enter_instruction_recording.length;
            out("Human.enter_instruction erased the last previously recorded instruction of:<br/>" + stringify_value(last_ins),
                "purple");
        }
        else {
            out("There are no instructions in the recording to erase.", "red", true);
        }
        immediate_do_id.focus();
        return
    }

    else { //Run ins & reprompt" or "immediate_do
      let oplet, ins_type;
      if (vals.clicked_button_value == "immediate_do"){
          if (vals.immediate_do == "") {
              oplet = "a";
          }
          else {
              oplet = last(vals.immediate_do);
          }
          ins_type = oplet; //probably won't do any good as its hard to init the combo box to something other than one of its already named items.
          SW.close_window(vals.window_index);
          //console.log("in human_enter_instruction_handler after close_window")
      }
      else { //user clicked a submit button so don't need to close the window.
          ins_type = vals.instruction_type.trim();
          if (ins_type.length == 1){ oplet = ins_type; }
          else {
             oplet = ins_type.split("(")[1];
             oplet = oplet[0];
          }
      }
      let args = vals.args;
      let args_array = args.split(/,s*/); //the s* doesn't soak up the whitespace unfortunately
      if ((vals.clicked_button_value == "immediate_do") && (vals.immediate_do == "")){
          let rs = job_instance.robot.robot_status;
          args_array = make_ins$1(oplet, rs[Dexter$1.J1_ANGLE], rs[Dexter$1.J2_ANGLE],
                                rs[Dexter$1.J3_ANGLE], rs[Dexter$1.J4_ANGLE], rs[Dexter$1.J5_ANGLE]);
      }
      else {
          let new_array = make_ins$1(oplet);
          for (let i = 0; i < args_array.length; i++){
              new_array.push(parseFloat(args_array[i]));
          }
          args_array = new_array;
      }
      if (vals.clicked_button_value == "immediate_do"){
          let prefix = "Human.enter_instruction made instruction:";
          if (vals.immediate_do == ""){
              prefix = "Human.enter_instruction captured Dexter's joint angles for instruction:";
          }
          out(prefix + "<br/>" + stringify_value(args_array), "purple");
          job_instance.enter_instruction_recording.push(args_array);
          //don't to the above set_in_ui because the win is now closed, but the new count will show up when the window redisplays
      }
      let ins_name = ins_type.split(" ")[0];
      let new_human_instruction = Human.enter_instruction({task: hei_instance.task, instruction_type: ins_name, instruction_args: args, dependent_job_names: hei_instance.dependent_job_names});
      let new_ins_array = [args_array, new_human_instruction];
      job_instance.insert_instructions(new_ins_array);
      //job_instance.added_items_count[job_instance.program_counter] = 2 //now performed by insert_instructions
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
};
module.exports.human_enter_instruction_handler = human_enter_instruction_handler;


var human_enter_instruction_job_source_to_save = function(job_instance){
    let instructions_src = "";
    let prefix = "";
    for (let ins of job_instance.enter_instruction_recording){
        let ins_src = "make_ins(";
        for (let i = Dexter$1.INSTRUCTION_TYPE; i < ins.length; i++){
            let val = stringify_value_sans_html(ins[i]);
            let arg_prefix = ((i == Dexter$1.INSTRUCTION_TYPE) ? "" : ", ");
            ins_src += arg_prefix + val;

        }
        ins_src += ")";
        instructions_src += prefix + ins_src;
        prefix = ",\n                   ";
    }
    let new_job_name = "recorded_from_" + job_instance.name;
    let result = '\n' +
'new Job({name: "' + new_job_name + '",\n' +
'         robot: Robot.' + job_instance.robot.name + ',\n' +
'         do_list: [' + instructions_src +
'\n                  ]})\n';
    return result + "Job." + new_job_name + ".start()\n"
};

Instruction$1.human_enter_number = class human_enter_number extends Instruction$1{
    constructor (  {task="",
                    user_data_variable_name="a_number",
                    initial_value=0,
                    min=0,
                    max=100,
                    step=1,
                    add_stop_button = true,
                    dependent_job_names=[],
                    title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}){
        if (initial_value < min) {
            dde_error("Human.enter_number passed an initial value: " + initial_value +
                      "<br/> that is less than the min value of: " + min);
        }
        else if (initial_value > max) {
            dde_error("Human.enter_number passed an initial value: " + initial_value +
                      "<br/> that is more than the max value of: " + max);
        }
        else {
            super();
            this.task = task;
            this.user_data_variable_name = user_data_variable_name;
            this.initial_value=initial_value;
            this.min = min;
            this.max = max;
            this.step = step;
            this.add_stop_button = add_stop_button;
            this.dependent_job_names = dependent_job_names;
            this.title   = title;
            this.x       = x;
            this.y       = y;
            this.width   = width;
            this.height  = height;
            this.background_color = background_color;
        }
    }
    
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";

        var number_html  = "<table  style='border:none';border-collapse:collapse;>" +
                           "<tr><td style='border:none;float:right;'>max: </td><td>" + this.max + "</td></tr>" +
                           "<tr><td style='border:none;'>" + this.user_data_variable_name + " = </td><td>" +
                           "<input type='number' name='choice' style='width:100px;font-size:16px;' " +
                           "' value='" + this.initial_value +
                           "' min='"   + this.min +
                           "' max='"   + this.max +
                           "' step='"  + this.step +
                           "'/></td></tr>" +
                           "<tr><td style='border:none;float:right;'>min: </td><td>" + this.min + "</td></tr>" +
                           "</table>";
        var buttons = '<center><input type="submit" value="Continue Job" title="Close dialog box and\ncontinue this job"/>&nbsp;';
        if (this.add_stop_button) { buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>'; }
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Number";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.enter_number interaction." );
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + number_html + "<br/>" + buttons + hidden,
                    callback: human_enter_number_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }
    to_source_code(args){
        return args.indent + "Human.enter_number({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.initial_value == 0)                       ? "" : ("initial_value: "           + to_source_code$1({value: this.initial_value})           + ", ")) +
            ((this.min           == 0)                       ? "" : ("min: "                     + to_source_code$1({value: this.min})                     + ", ")) +
            ((this.max           == 1000)                    ? "" : ("max: "                     + to_source_code$1({value: this.max})                     + ", ")) +
            ((this.step          == 1)                       ? "" : ("step: "                    + to_source_code$1({value: this.step})                    + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code$1({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

var human_enter_number_handler = function(vals){
    var job_instance = Job$1[vals.job_name];
    if (vals.clicked_button_value != "Continue Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_number, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_number, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
        job_instance.set_up_next_do(1); //we're stopping this job as it has a stop_reason so let it stop normally
    }
    else { //Done if the_choice is in range
        let the_choice = parseFloat(vals.choice);
        let instruction_instance = job_instance.current_instruction();
        if(the_choice > instruction_instance.max) {
            alert("Job: " + job_instance.name + "\nhas a Human.enter_number instruction\nwhose entered value: " + the_choice +
                  ",\n is more than the maximum: " + instruction_instance.max + ".\nPlease pick a lower value.");
        job_instance.set_up_next_do(0);
        }
        else if(the_choice < instruction_instance.min) {
            alert("Job: " + job_instance.name + "\nhas a Human.enter_number instruction\nwhose entered value: " + the_choice +
                ",\n is less than the minimum: " + instruction_instance.min + ".\n Please pick a higher value.");
            job_instance.set_up_next_do(0);
        }
        else {
            job_instance.user_data[vals.user_data_variable_name] = the_choice;
            job_instance.set_up_next_do(1);
        }
    }
};
module.exports.human_enter_number_handler = human_enter_number_handler;


//beware: Human.enter_position returns an array of Dexter.follow_me AND an instance of this class.
Instruction$1.human_enter_position = class human_enter_position extends Instruction$1{
    constructor (  {task="Position Dexter&apos;s end effector<br/>to the position that you want to record,<br/>and click <b>Continue Job</b>.",
                    user_data_variable_name="a_position",
                    add_stop_button = true,
                    dependent_job_names=[],
                    title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}){
            super();
            this.task = task;
            this.user_data_variable_name = user_data_variable_name;
            this.add_stop_button = add_stop_button;
            this.dependent_job_names = dependent_job_names;
            this.title   = title;
            this.x       = x;
            this.y       = y;
            this.width   = width;
            this.height  = height;
            this.background_color = background_color;
            this.status = "not started";
            this.inserting_instruction = true;
    }

    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";

        var buttons = '<center><input type="submit" value="Continue Job" title="Capture position,\nclose dialog box and\ncontinue this job"/>&nbsp;';
        if (this.add_stop_button) { buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>'; }
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Position";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.enter_position interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + buttons + hidden,
                    callback: human_enter_position_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }
    to_source_code(args){
        return args.indent + "Human.enter_position({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code$1({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

var human_enter_position_handler = function(vals){
    var job_instance = Job$1[vals.job_name];
    if (vals.clicked_button_value != "Continue Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_position, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_position, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
        job_instance.set_up_next_do(1); //we're stopping this job as it has a stop_reason so let it stop normally
    }
    else {
        let new_ins =
            [Dexter$1.get_robot_status,
             function(){
                 let xyz = job_instance.robot.joint_xyz();
                 job_instance.user_data[vals.user_data_variable_name] = xyz;
             },
             Dexter$1.set_keep_position
             ];
        job_instance.insert_instructions(new_ins);
        job_instance.set_up_next_do(1);
    }
};
module.exports.human_enter_position_handler = human_enter_position_handler;


Instruction$1.human_enter_text = class human_enter_text extends Instruction$1{
    constructor ({task="",
                    user_data_variable_name="a_text",
                    initial_value="",
                    line_count=1, //if 1, makes an input type=text. If > 1 makes a resizeable text area
                    add_stop_button = true,
                    dependent_job_names=[],
                    title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task = task;
        this.user_data_variable_name = user_data_variable_name;
        this.initial_value = initial_value;
        this.line_count = line_count;
        this.add_stop_button = add_stop_button;
        this.dependent_job_names = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }
    
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";
        var text_html;
        if(this.line_count == 1){
            text_html = "<br/><input type='text' name='choice" +
                        "' size='50" +
                        "' value='" + this.initial_value +
                        "'style='font-size:14px;" +
                        "'/>";
        }
        else {
            text_html = "<br/><textarea name='choice" +
                        "' rows='" + this.line_count +
                        "' cols='50' style='font-size:14px;'>" +
                         this.initial_value +
                         "</textarea>";
        }
        var buttons = '<center><input type="submit" value="Continue Job"/>&nbsp;';
        if (this.add_stop_button) buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Text";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        job_instance.set_status_code("waiting", "user on Human.enter_text interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + text_html + "<br/><br/>" + buttons + hidden,
                    callback: human_enter_text_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color}
                    );
    }
    to_source_code(args){
        return args.indent + "Human.enter_text({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.initial_value == "")                      ? "" : ("initial_value: "           + to_source_code$1({value: this.initial_value})           + ", ")) +
            ((this.line_count    == 1)                       ? "" : ("line_count: "              + this.line_count                                       + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code$1({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

var human_enter_text_handler = function(vals){
    var job_instance = Job$1[vals.job_name];
    if (vals.clicked_button_value != "Continue Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_text, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_text, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                }
            }
        }
    }
    else { //Done
        var the_choice = vals.choice;
        job_instance.user_data[vals.user_data_variable_name] = the_choice;
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
};
module.exports.human_enter_text_handler = human_enter_text_handler;


Instruction$1.human_notify = class human_notify extends Instruction$1{
    constructor ({task="",
                  window=true,
                  output_pane=true,
                  beep_count=0,
                  speak=false,
                  add_stop_button=true,
                  dependent_job_names = [],
                  //does not have x and y because those are automatically set to make
                  //multiple notify windows visible.
                  title,
                  close_same_titled_windows = false,
                  width=400, height=400,  background_color="rgb(238, 238, 238)"}={}) {

        super();
        this.task=task,
        this.window=window,
        this.output_pane=output_pane,
        this.beep_count=beep_count,
        this.add_stop_button = add_stop_button;
        this.dependent_job_names = dependent_job_names;
        this.speak=speak;
        this.title   = title;
        this.close_same_titled_windows = close_same_titled_windows;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }
    
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>";
        if (this.title === undefined){
            this.title = job_instance.name + ", Notification";
            if (job_instance.robot instanceof Human){
                this.title += " for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        var prefix = "<div style='font-size:11px;'>Presented at: " + new Date() + "<br/>" +
            "Instruction " + job_instance.program_counter +
            " of " + job_instance.do_list.length + "</div>";
        let buttons = "";
        if(this.add_stop_button) {
            buttons += '<center><input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/></center>';
        }
        if (this.window){
            show_window({job_name: job_instance.name,
                         content: prefix + "<br/>" + this.task + "<p/>" + buttons + hidden,
                         y: human_notify.get_window_y(), //do y first since it might cause reset of positions
                         x: human_notify.get_window_x(),
                         title:  this.title,
                         width:  this.width,
                         height: this.height,
                         background_color: this.background_color,
                         close_same_titled_windows: this.close_same_titled_windows,
                         callback: human_notify_handler
            });
        }
        if (this.output_pane){
            out(this.title + "<br/>" + prefix + this.task, "#951616");
        }
        var the_notifiy = this;
        beeps(this.beep_count,
             function(){if (the_notifiy.speak){
                             speak({speak_data: the_notifiy.title + ", " + the_notifiy.task});
             }});
        job_instance.set_up_next_do(1);
    }
    static get_window_x(){
        human_notify.window_x += 40;
        return window.outerWidth - 370 - human_notify.window_x
    }
    static get_window_y(){
        human_notify.window_y += 40;
        if (human_notify.window_y > (window.outerHeight - 300)){
            human_notify.window_x = 0;
            human_notify.window_y = 40;
        }
        return human_notify.window_y
    }
    to_source_code(args){
        return args.indent + "Human.notify({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code$1({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code$1({value: this.title})                   + ", ")) +
            ((this.window      == true)                      ? "" : ("window: "                  + this.window                                           + ", ")) +
            ((this.output_pane == true)                      ? "" : ("output_pane: "             + this.output_pane                                      + ", ")) +
            ((this.beep_count  == 0)                         ? "" : ("beep_count: "              + this.beep_count                                       + ", ")) +
            ((this.speak       == false)                     ? "" : ("speak: "                   + this.speak                                            + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x              + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y              + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width     + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height    + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code$1({value: this.background_color}))) +
            "})"
    }
};

var human_notify_handler = function(vals){
    let job_instance = Job$1[vals.job_name];
    if ((vals.clicked_button_value === "Stop Job") && job_instance.is_active()){
        job_instance.stop_for_reason("interrupted", "In human_notify, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job$1[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_notify, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                }
            }
        }
    }
};


module.exports.human_notify_handler = human_notify_handler;

Instruction$1.human_notify.window_x = 0;
Instruction$1.human_notify.window_y = 0;

Instruction$1.human_show_window = class human_show_window extends Instruction$1{
    constructor (sw_lit_obj_args = {}) {
        super();
        this.win_index = null;
        this.sw_lit_obj_args = sw_lit_obj_args;
        this.user_data_variable_name = sw_lit_obj_args.user_data_variable_name;
        this.orig_callback = sw_lit_obj_args.callback;
    }

    do_item (job_instance){ //only gets called once, the first time this instr is run
        //this.sw_lit_obj_args.the_instruction_id = job_instance.do_list.indexOf(this)
        this.sw_lit_obj_args.job_name = job_instance.name;
        let hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.sw_lit_obj_args.dependent_job_names) + "'/>";
        job_instance.set_status_code("waiting", "user on Human.show_window interaction.");
        //can't use a closure here bevause if its an anonymous fn, then it gets src code
        //saved in the show-window dom, and that has to get evaled in an env
        //that's not this one so closed over vars won't work.
        let content = this.sw_lit_obj_args.content;
        let buttons = '<center><input type="submit" value="Continue Job"/>&nbsp;';
        if (this.sw_lit_obj_args.add_stop_button) buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
        buttons += '</center>';
        if(!content.includes("Continue Job")) { content += buttons + hidden; } //if I don't check, we'll add the buttons each time the job is restarted
        this.sw_lit_obj_args.content = content;
        this.sw_lit_obj_args.callback = human_show_window_handler;
        this.win_index = show_window(this.sw_lit_obj_args);
    }
    to_source_code(args){
        let extra_indent = ' '.repeat(37);
        return args.indent + "Human.show_window(\n" +
               to_source_code$1({indent: args.indent + extra_indent, value: this.sw_lit_obj_args}) + ")"
    }
};

var human_show_window_handler = function(vals){
    console.log("top of human_show_window_handler with is_submit of: " + vals.is_submit);
    const job_instance  = Job$1[vals.job_name];
    //delete vals.the_job_name
    const hsw_inst = job_instance.current_instruction(); //job_instance.do_list[vals.the_instruction_id]
    const cb = hsw_inst.orig_callback;
    if (cb) { cb.call(job_instance, vals); }
    if(vals.is_submit //|| //useful when running this job in the browser, and user clicks a submit button.
      //!SW.is_window_shown(vals.window_index) //too hard to support right now for browser
      //as requires finding out about browser state. todo  when more support for
      //modifying and discovering browser state is available.
      ){
        if (vals.clicked_button_value === "Stop Job"){
            job_instance.stop_for_reason("interrupted", "In human_show_window, user stopped this job.");
            var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
            //creating the human_job, dep_job_names will now be [] so the below if hits but
            //the for loop has nothing to loop over so nothing will be done.
            if (dep_job_names && Array.isArray(dep_job_names)){
                for (let j_name of dep_job_names){
                    var j_inst = Job$1[j_name];
                    if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                        j_inst.stop_for_reason("interrupted", "In human_show_window, user stopped this job which is dependent on job: " + job_instance.name);
                        j_inst.set_up_next_do(0);
                    }
                }
            }
        }
        else { //continue the job
            //if windows is not shown, that means time to save its values in the job an let the job go to its next instruction
            job_instance.user_data[hsw_inst.sw_lit_obj_args.user_data_variable_name] = vals;
            job_instance.set_status_code("running");
            job_instance.set_up_next_do(1);
        }
    }
};
module.exports.human_show_window_handler = human_show_window_handler;


Instruction$1.if_any_errors = class if_any_errors extends Instruction$1{
    constructor (job_names=[], instruction_if_error=null) {
        super();
        this.job_names = job_names;
        this.instruction_if_error = instruction_if_error;
        this.inserting_instruction = true;
    }
    do_item (job_instance){
        for(let job_name of this.job_names){
            let j_inst = Job$1[job_name];
            if (j_inst){
                if ((j_inst.status_code == "errored") ||
                    (j_inst.status_code == "interrupted")){
                    let the_error_ins = this.instruction_if_error;
                    if (the_error_ins == null){
                        let message = "In job: " + job_instance.name +
                                      ", an instruction of type: Control.if_any_errors, " +
                                      "discovered that job: " + job_name + " has errored.";
                        the_error_ins =  Control.error(message);
                    }
                    job_instance.insert_single_instruction(the_error_ins);
                    break;
                }
            }
            else {
                job_instance.stop_for_reason("errored", "In job: " + job_instance.name +
                             ", an instruction of type: Control.if_any_errors<br/> " +
                             "was passed a job name of:  " + job_name + "<br/> that doesn't exist.");
                job_instance.set_up_next_do(0);
                return
            }
        }
        job_instance.set_up_next_do(1);
    }
    to_source_code(args){
        return args.indent + "Control.if_any_errors(" +
                              to_source_code$1({value: this.job_names}) + ", " +
                              to_source_code$1({value: this.instruction_if_error}) + ")"
    }
};

Instruction$1.include_job = class include_job extends Instruction$1{
    constructor (job_name, start_loc, end_loc) {
        super();
        if(job_name === undefined){
            dde_error("Control.include_job was not passed a <b>job_name</b> which is required.");
        }
        this.job_name = job_name;
        //It *might* be good to permit job_name to be a job obj, but
        //usually better to have it be a string and evaled at instruction executing time
        //to permit order of job defs in file to not matter.
        //MakeInstruction insertion of jobs depends on instruction executing time
        //for resolving of job_name
        this.start_loc = start_loc;
        this.end_loc = end_loc;
        this.inserting_instruction = true;
        }
    do_item (job_instance){
        let first_arg = this.job_name;
        let resolved_first_arg; //could be a job or an array of instructions
        let do_list_array_to_use;
        if(first_arg instanceof Job$1) {
            resolved_first_arg   = first_arg;
            do_list_array_to_use = first_arg.orig_args.do_list;
        }
        else if (Array.isArray(first_arg)) {
            resolved_first_arg   = first_arg;
            do_list_array_to_use = first_arg;
        }
        else if (typeof(first_arg == "string")){  // "Job.job_name"
            if(first_arg.startsWith("Job.")) {
                resolved_first_arg   = value_of_path$1(first_arg);
                if(!(resolved_first_arg instanceof Job$1)){
                    dde_error("Control.include_job's first argument: " + first_arg +
                              "<br/>resolved to: " + resolved_first_arg +
                              "<br/>but was expected to resolve to a Job instance.");
                }
                do_list_array_to_use = resolved_first_arg.orig_args.do_list;
            }
            else if (Job$1[first_arg]) { // "job name"
                resolved_first_arg   = Job$1[first_arg];
                do_list_array_to_use = resolved_first_arg.orig_args.do_list;
            }
            else if (first_arg.includes(".")){ //got a file path with an extension.
                if(file_exists(first_arg)){
                    let job_instances_in_file = Job$1.instances_in_file(first_arg);
                    if(job_instances_in_file.length > 0) {
                        resolved_first_arg   = job_instances_in_file[0];
                        do_list_array_to_use = resolved_first_arg.orig_args.do_list;
                    }
                    else { //maybe file src starts with var foo = an_array_of_instructions
                        let file_src = read_file(first_arg);
                        let result_obj = eval_js_part2(file_src, false); // warning: calling straight eval often doesn't return the value of the last expr in the src, but my eval_js_part2 usually does. //window.eval(file_src)
                        if(result_obj.error_message){
                           dde_error("Control.include_job's first argument: " + first_arg +
                                     "<br/>refers to an existing file but<br/>" +
                                     "that file contains the JavaScript error of:<br/>" +
                                     err.message);
                        }
                        let file_value = result_obj.value;
                        if (Array.isArray(file_value)) {
                            resolved_first_arg   = file_value;
                            do_list_array_to_use = file_value;
                        }
                        else if (file_value === undefined){ // if first expr in file is var foo = arrayof_instructions, use that
                            file_src = trim_comments_from_front(file_src);
                            if(file_src.startsWith("var ")){
                                let equal_sign_pos = file_src.indexOf("=");
                                if(equal_sign_pos == -1){
                                    dde_error("Control.include_job's first argument: " + first_arg +
                                              "<br/>refers to an existing file containing variable: " + var_name + ".<br/>" +
                                             "However, their is no equal sign after 'var'");
                                }
                                let var_name = file_src.substring(4, equal_sign_pos).trim();
                                let var_val = window[var_name];
                                if(Array.isArray(var_val)){
                                    resolved_first_arg   = var_val;
                                    do_list_array_to_use = var_val;
                                }
                                else {
                                    dde_error("Control.include_job's first argument: " + first_arg +
                                            "<br/>refers to an existing file containing variable: " + var_name + ".<br/>" +
                                            "However, the value is not an array of instructions, but rather:<br/>" +
                                            var_val);
                                }
                            }
                        }
                    }
                }
                else {
                    dde_error("Control.include_job's first argument: " + first_arg + " has a dot in it<br/>" +
                               "so it is presumed to be a file path<br/>" +
                               "but no such file exists.");
                }
            }
            else if (window[first_arg]) {
                resolved_first_arg = window[first_arg];
                if(!Array.isArray(resolved_first_arg)) {
                    dde_error("Control.include_job's first argument: " + first_arg + " is a variable<br/>" +
                              "but the value of the variable is not an array:<br/>" +
                               resolved_first_arg);
                }
                else {
                    do_list_array_to_use = resolved_first_arg;
                }
            }
            else {
                dde_error("Control.include_job, got a first argument of: " + first_arg +
                          "<br/>which is invalid because, although it is a string,<br/>" +
                          "it isn't a Job name, file name, nor variable name.");
            }
        } //end of first_arg is a string processing
        else {
            dde_error("Control.include_job, got a first argument of: " + first_arg +
                      "<br/>which is invalid because its not a Job, array, or string.");
        }
        //at this point either the above code errored, or we have
        //resolved_first_arg   set to a Job or a do_list array and
        //do_list_array_to_use set to an array
        if(Instruction$1.is_oplet_array(do_list_array_to_use)){
            dde_error("Control.include_job, got a first argument of: " + first_arg +
                      "<br/>but that resolved to an oplet array: " + do_list_array_to_use +
                      "<br/>which is not a valid array of instruction.<br/>" +
                      "If you wrap this oplet array in an outer array, it will be valid.");
        }
        else {//the base do list instructions to use are ready to go!
            let the_start_loc;
            let the_end_loc;
            if(resolved_first_arg instanceof Job$1){
                the_start_loc = ((this.start_loc === null) ? resolved_first_arg.orig_args.program_counter        : this.start_loc);
                the_end_loc   = ((this.end_loc   === null) ? resolved_first_arg.orig_args.ending_program_counter : this.end_loc);

                the_start_loc = resolved_first_arg.instruction_location_to_id(
                                         the_start_loc, undefined, undefined, true); //use orig do_list
                the_end_loc = resolved_first_arg.instruction_location_to_id(
                                         the_end_loc,   undefined, undefined, true); //use orig do_list
            }
            else {
                if(the_start_loc == null) { the_start_loc = 0; }
                if(the_end_loc   == null) { the_end_loc   = do_list_array_to_use.length; }
            }
            if(!is_non_neg_integer(the_start_loc)){
                dde_error("Control.include_job passed start_loc of: " + this.start_loc +
                          "<br/>but that resolved to: " +  the_start_loc +
                          "<br/>which is not a non-negative integer.");
            }
            else if(!is_non_neg_integer(the_end_loc)){
                dde_error("Control.include_job passed end_loc of: " + this.end_loc +
                          "<br/>but that resolved to: " +  the_end_loc +
                          "<br/>which is not a non-negative integer.");
            }
            else { //finally ready to do the actual work
                let instrs_to_insert = do_list_array_to_use.slice(the_start_loc, the_end_loc); //excludes the_end_loc
                job_instance.insert_instructions(instrs_to_insert);
                job_instance.set_up_next_do(1);
            }
        }
    }

    to_source_code(args){
        return args.indent + "Control.include_job(" +
            to_source_code$1({value: this.job_name}) + ")"
    }
};

Instruction$1.label = class label extends Instruction$1{
    //also job_names may or may not contain the name of the current job. It doesn't matter.
    constructor (name) {
        super();
        if (!name){
            dde_error("Instruction label has not been passed a name.");
        }
        this.name = name;
    }
    do_item (job_instance){
        job_instance.set_up_next_do(1);
    }
    toString(){ return this.name }
    to_source_code(args){
        return args.indent + "Control.label(" +
              to_source_code$1({value: this.name})  + ")"
    }
};

Instruction$1.loop = class loop extends Instruction$1{
    constructor (times_to_loop, body_fn) {
        super();
        this.times_to_loop          = times_to_loop;
        this.body_fn                = body_fn;
        this.iter_index             = -1;
        this.iter_total             = Infinity;
        this.times_to_loop_object   = null; //only used when times_to_loop is an object.
                                           //in that case, we use resolved_times_to_loop to hold
                                           //the array of own property names of the object,
                                           //and thus can use its length for iter_total,
                                           //and index into it to get the cur prop name
                                           //which we then use to llok up in times_to_loop_object
                                           //for the iter_val
        this.inserting_instruction = true;
        this.init_instruction();
    }
    //there is no do_items for loop. But this is similar. It does not call set_up_next_do,
    //which is done only in the Job.prototype.do_next_item section that handles loop
    //Returns an array of instructions to do for one iteration.
    //If on a normal iteration with more to come, the last inst returned will be a
    //go_to to this loop instruction. (and that go_to might be the ONLY instruction in the returned array)
    //else if null is returned, we're done with this loop.
    //the returned instruction array may contain a Control.break instruction that
    //ends this loop. That ending is handled in Job.prototype.do_next_item section that handles loop
    get_instructions_for_one_iteration(job_instance){ //strategy: compute:
        //1. iter_index, 2. iter_total,3. iter_val & iter_key, 4. instructions for this iteration & return them
        let fn_result = null;
        //compute  this.iter_total and this.resolved_time_to_loop
        if(this.resolved_times_to_loop === null){ //first time only
            this.iter_index = -1;
            if      (typeof(this.times_to_loop) == "boolean")  { this.resolved_times_to_loop = this.times_to_loop;} //leave iter_total at Infinity
            else if (is_non_neg_integer(this.times_to_loop))   { this.resolved_times_to_loop = this.times_to_loop; this.iter_total = this.resolved_times_to_loop;}
            else if (Array.isArray(this.times_to_loop))        { this.resolved_times_to_loop = this.times_to_loop; this.iter_total = this.resolved_times_to_loop.length;}
            else if (typeof(this.times_to_loop) == "object")   {
                this.times_to_loop_object = this.times_to_loop;
                this.resolved_times_to_loop = Object.getOwnPropertyNames(this.times_to_loop_object);
                this.iter_total = this.resolved_times_to_loop.length;
            }
            else if (typeof(this.times_to_loop) == "function"){
               fn_result = this.times_to_loop.call(job_instance, this.iter_index, undefined, undefined, undefined);
               if      (typeof(fn_result) == "boolean")        { this.resolved_times_to_loop = this.times_to_loop; } //leave iter_total at Infinity
               else if (typeof(fn_result) == "number"){
                   if(is_non_neg_integer(fn_result))           { this.resolved_times_to_loop = fn_result; this.iter_total = this.resolved_times_to_loop;}
                   else {
                       job_instance.stop_for_reason("errored", "Control.loop passed times_to_loop that returned a number: " +  fn_result +
                                                       "\n but it isn't a non-negative integer.");
                       return null
                   }
               }
               else if (Array.isArray(fn_result))              { this.resolved_times_to_loop = fn_result; this.iter_total = this.resolved_times_to_loop.length;}
               else if (typeof(fn_result) == "object")         {
                   this.times_to_loop_object = fn_result;
                   this.resolved_times_to_loop = Object.getOwnPropertyNames(this.times_to_loop_object);
                   this.iter_total = this.resolved_times_to_loop.length;
               }
               else if (typeof(fn_result) == "function")       { this.resolved_times_to_loop = fn_result;} //rare but possible. //leave iter_total at Infinity
               else { job_instance.stop_for_reason("errored", "Control.loop passed function for boolean_int_array_number but that function" +
                                "\n returned an invalid type: " + fn_result +
                                "\n It must return a boolean, non-negative integer, array, or function");
                      return null
               }
           }
           else { job_instance.stop_for_reason("errored", "Control.loop passed times_to_loop of:\n " +
                  this.times_to_loop +
                "\n but that is not one of the valid types of:\n boolean, non-negative integer, array, or function.");
                return null
           }
        } //end of special processing for first iteration.
          // the below code is run for all iterations including the first iteration.
        this.iter_index++; //First compute iter_index. no changes to iter_index after this.
        //compute iter_val & iter_key.  iter_index is computed at the top of this fn, iter_total computed just above
        let iter_val = undefined;
        let iter_key = this.iter_index; //valid for all times_to_loop types except object.
        if (this.resolved_times_to_loop === false) { //no iterations of this loop will happen
            this.init_instruction(); //ready for next start of this job
            return null
        }
        else if (this.resolved_times_to_loop === true){ iter_val = true; } //loop forever or until body_fn returns Control.break instruction
        else if(is_non_neg_integer(this.resolved_times_to_loop)){
            iter_val = this.iter_index;
        }
        else if (this.times_to_loop_object){ //must be before Array.isArray(this.resolved_times_to_loop)
            iter_key = this.resolved_times_to_loop[this.iter_index];
            iter_val = this.times_to_loop_object[iter_key];
        }
        else if (Array.isArray(this.resolved_times_to_loop)) {
             iter_val = this.resolved_times_to_loop[this.iter_index];
        }
        else if (typeof(this.resolved_times_to_loop) == "function"){
           if      (this.iter_index > 0) { fn_result = this.resolved_times_to_loop.call(job_instance, this.iter_index, this.iter_index, this.iter_total);}
           if      (fn_result === false) { //looping is over, Jim
               this.init_instruction(); //ready for next start of this job
               return null
           }
           else if (fn_result === true)  { iter_val = true; }
           else {
               job_instance.stop_for_reason("errored", "Control.loop passed a function to call to determine if another iteration should occur" +
                         "\n but that function returned: " + fn_result +
                         "\n however, only true and false are valid results.");
               return null
           }
       }
       else { shouldnt$1("Control.loop has an invalid this.resolved_times_to_loop of: " + this.resolved_times_to_loop);}
       if(this.iter_index >= this.iter_total) { //done looping but initialize so if the job is restarted, the loop will restart
            this.init_instruction(); //ready for next time this whole loop might be called.
            return null
       }
       else {//ok, finally compute instructions for this iteration
           let body_fn_result = this.body_fn.call(job_instance, this.iter_index, iter_val, this.iter_total, iter_key);
           if((body_fn_result === undefined) ||  (body_fn_result === null)){ //slight optimization
               body_fn_result = [];
           }
           else if(!Array.isArray(body_fn_result) ||
              Instruction$1.is_oplet_array(body_fn_result) ||
              Instruction$1.is_data_array(body_fn_result)
              ){
               body_fn_result = [body_fn_result]; //we must return a real array of instructions from this fn.
                                                 //below we add the go_to at the end.
           }
           //body_fn_result can legitimately be the empty array at this point.
           //it might also contain a Control.break instruction.
           let go_to_ins = new Instruction$1.go_to(job_instance.program_counter);
           body_fn_result.push(go_to_ins);
           return body_fn_result
       }
    }
    init_instruction(){
        this.resolved_times_to_loop = null;
    }
    //when called, pc of job_instance will (as of apr 2020 ) be to a Control.break instruction
    //Just search backwards for the first loop instruction and return its pc.
    //If job_instance.program_counter happens to be pointing at a loop,
    //its just returned.
    static pc_of_enclosing_loop(job_instance){
        let break_instr_id = job_instance.program_counter;
        for(let a_pc = break_instr_id; a_pc >=0; a_pc--){
            let a_ins = job_instance.do_list[a_pc];
            if(a_ins instanceof Instruction$1.loop) {
                let sub_instructions_under_loop = job_instance.total_sub_instruction_count(a_pc);
                let last_sub_instr_id = a_pc + sub_instructions_under_loop;
                if(break_instr_id <= last_sub_instr_id) { //then the break inst is a sub_ins of the loop at a_pc
                    return a_pc
                }
                //else we keep searching back up for the next loop up the do_list
            }
        }
        return null // not good. we didn't find an enclosing loop. this will become a warning.
    }
    to_source_code(args){
        return args.indent + "Control.loop(" +
            to_source_code$1({value: this.times_to_loop})  + ",\n" +
            to_source_code$1({value: this.body_fn}) +
            ")"
    }
};

Instruction$1.out = class Out extends Instruction$1{
    constructor (val="", color="black", temp=false, print_job_info=false) {
        super();
        this.val   = val;
        this.color = color;
        this.temp  = temp;
        this.print_job_info = print_job_info;
    }
    do_item (job_instance){
        let prefix = (this.print_job_info ? "Job: " + job_instance.name + ", instruction ID: " + job_instance.program_counter + ", Instruction type: IO.out<br/>" : "");
        let message = prefix + this.val;
        out(message, this.color, this.temp);
        job_instance.set_up_next_do(1);
    }
    toString() { return "IO.out of: " + this.val }
    to_source_code(args){
        return args.indent + "IO.out(" +
                to_source_code$1({value: this.val})  +
                ((this.color == "black") ? "" : (", " + to_source_code$1({value: this.color}))) +
                (this.temp ? (", " + to_source_code$1({value: this.temp})) : "") +
                ")"
    }
};

/*Obsoleted by just putting a phrase directly on the do_list
Instruction.play_notes = class play_notes extends Instruction{
    constructor (note_or_phrase) {
        super()
        if (typeof(note_or_phrase) == "string"){
            note_or_phrase = note_or_phrase.trim()
            if(note_or_phrase.includes(" ")){ //phrase
                   note_or_phrase = new Phrase({notes: note_or_phrase})
            }
            else { note_or_phrase = Note.n(note_or_phrase) }
        }
        this.note_or_phrase = note_or_phrase
    }
    do_item(job_instance){ //send all the notes on first call, then do a set_timeout of the overall dur to setup_next
        //works when note_or_phrase is either a note or a phrase
        this.note_or_phrase.play()
        //setTimeout(function(){
              job_instance.set_up_next_do(1, false, this.note_or_phrase.dur_in_seconds())
           // },
           // this.note_or_phrase.dur_in_ms())
    }
}*/

Instruction$1.send_to_job = class send_to_job extends Instruction$1{
    constructor ({//to_job_name     = "required",
                  do_list_item    = null, //can be null, a single instruction, or an array of instructions
                  where_to_insert = "required", //"next_top_level",
                  wait_until_done = false,
                  start           = false,
                  unsuspend       = false,
                  status_variable_name = null} = {}) {
        super();
        this.do_list_item    = do_list_item;
        this.where_to_insert = where_to_insert;
        this.wait_until_done = wait_until_done;
        this.start           = start;
        this.unsuspend       = unsuspend;
        this.status_variable_name = status_variable_name;
        this.already_sent_instruction = false; //used internally
        let params = arguments[0];
        if (!params.where_to_insert || (params.where_to_insert == "required")) { //the defaults listed above don't actually work
            //params.where_to_insert = "next_top_level"
            dde_error("Instruction send_to_job was not supplied with a 'where_to_insert' instruction location.");
        }
        copy_missing_fields(params, this);
        this.inserting_instruction = true;
    }

    do_item (job_instance){ //job_instance is the "from" job
        this.from_job_name       = job_instance.name;
        this.from_instruction_id = job_instance.program_counter;
        if (!this.already_sent_instruction) { //only excute this code once per send_to_job instance
            if (this.status_variable_name){
             job_instance.user_data[this.status_variable_name] = "sent";
            }
            this.destination_do_send_to_job(job_instance); //this COULD be just a json obj of name value pairs. Don't really need the whole instance here.
                                                         //if we need to send to a job on another computer, convert to that json obj.
            this.already_sent_instruction = true;
        }
        if(this.wait_until_done){
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            //don't do the below because the to_job will, when its inserted instr is done,
            //call from_job.send_to_job_receive_done which will call set_up_next_do(1)
           // job_instance.set_up_next_do(0) //a rare place I pass 0 here!
                      //since this is not going through robot_done_with_instruction
        }
        else {
            job_instance.set_up_next_do(1);
        }
    }
    to_source_code(args){
        return args.indent + "Control.send_to_job({" +
            ((this.do_list_item == null)          ? "" :  ("do_list_item: "         + to_source_code$1({value: this.do_list_item})                 + ", ")) +
            ((this.where_to_insert === undefined) ? "" :  ("where_to_insert: "      + to_source_code$1({value: this.where_to_insert})      + ", ")) +
            ((this.wait_until_done === false)     ? "" :  ("wait_until_done: "      + to_source_code$1({value: this.wait_until_done})      + ", ")) +
            ((this.start === false)               ? "" :  ("start: "                + to_source_code$1({value: this.start})                + ", ")) +
            ((this.unsuspend === false)           ? "" :  ("unsuspend: "            + to_source_code$1({value: this.unsuspend})            + ", ")) +
            ((this.status_variable_name == null)  ? "" :  ("status_variable_name: " + to_source_code$1({value: this.status_variable_name}) )) +
            "})"
    }

            //fns prefixed with destination are run on the to_job.
//"this" is the send_to_job instruction instance
//This fn is not a user fn and is not an instruction for a do_list.
    destination_do_send_to_job(from_job_instance){
        let params = this;
        var to_job_instance = Job$1.instruction_location_to_job(params.where_to_insert, false);
        if (!to_job_instance) { to_job_instance = from_job_instance; }
        if (to_job_instance === from_job_instance) { this.wait_until_done = false; } //when a job is inserting code into itself,//we don't want it to hang waiting for itself.

        //first, add destination_send_to_job_is_done to do_items if need be.
        let do_items = params.do_list_item;
        var notify_item = null;
        if (params.wait_until_done){
            //var send_back_obj = {from_job_name:        params.from_job_name,
            //                     from_instruction_id:  params.from_instruction_id,
            //                     status_variable_name: params.status_variable_name
            //                    }
            var notify_item = new Instruction$1.destination_send_to_job_is_done(params);
            //notify_item is appeneded to the end of do_items, and the whole array of instructions
            //stuck into the destination job's do_list
            if (do_items == null){
                do_items = notify_item;
            }
            else if (Instruction$1.is_oplet_array(do_items)){
                if(notify_item){
                    do_items = [do_items,  notify_item];
                }
            }
            else if (Instruction$1.is_instructions_array(do_items)){
                if(notify_item){
                    do_items = do_items.slice(0).push(notify_item);
                }
            }
            else { //typically a function.
                if(notify_item){
                    do_items = [do_items,  notify_item];
                }
            }
        }
        // next, bundle do_items into a sent_from_job instruction and stick it on the to_job
        let sfj_ins = new Instruction$1.sent_from_job({do_list_item: do_items,
                                                     from_job_name: from_job_instance.name,
                                                     from_instruction_id: from_job_instance.program_counter,
                                                     where_to_insert: params.where_to_insert, //just for debugging
                                                     wait_until_done: params.wait_until_done //just for debugging
                                                    });
        Job$1.insert_instruction(sfj_ins, params.where_to_insert); //must do before starting or unsuspending
        if (to_job_instance.status_code == "not_started"){
            if(params.start){
                to_job_instance.start(); //{initial_instruction: sfj_ins} //commented out because its redunant with insert_instruction and would put sfj_ins on to_job twice

            }
        }
        if (to_job_instance.status_code == "suspended"){
            if(params.unsuspend){
                to_job_instance.unsuspend();
                //this.set_up_next_do(1) //don't do this because unsuspend does it.
            }
        }
        //don't do this as to_job should already be running.
        //else{
        //    to_job_instance.set_up_next_do(1)
        //}
    }
};

Instruction$1.send_to_job.param_names = ["do_list_item",    "where_to_insert",
                                               "wait_until_done", "start",
                                               "unsuspend",       "status_variable_name",
                                               "from_job_name",   "from_instruction_id",
                                                "already_sent_instruction"];

//user's never create this directly, but an instance of this is created by destination_do_send_to_job
//and stuck on the to_job do_list.
Instruction$1.destination_send_to_job_is_done = class destination_send_to_job_is_done extends Instruction$1{
    constructor (params){
        super();
        this.params = params;
    }
    do_item(job_instance){ //job_instance is the "to" job
        var from_job_instance = Job$1[this.params.from_job_name];
        for (var user_var of Object.getOwnPropertyNames(this.params)){ //we can have multiple user_data vars that we set. The vars arae set in the sending job
            if(Instruction$1.send_to_job.param_names.indexOf(user_var) == -1){ //if its not one of the regular paranms. that means its the name of a user_data var to set in the from_job_instance
                var fn = this.params[user_var];
                if (typeof(fn) == "function"){
                    var val = fn.call(job_instance);
                    from_job_instance.user_data[user_var] = val;  //this.params is really the to_job_instance.
                }
                else {
                    job_instance.stop_for_reason("errored", "In job: " + job_instance.name +
                        " Instruction.destination_send_to_job_is_done.do_item got user var: " + user_var +
                        " whose value: " + fn + " is not a function.");
                    return
                }
            }
        }
        from_job_instance.send_to_job_receive_done(this.params);
        job_instance.set_up_next_do(1);
    }
};

//an instance of this instr is stuck on the to_job by instr send_to_job
Instruction$1.sent_from_job = class sent_from_job extends Instruction$1{
    constructor ({do_list_item       = null, //can be null, a single instruction, or an array of instructions
                 from_job_name       = "required",
                 from_instruction_id = "required",
                 where_to_insert     = "next_top_level", //just for debugging
                 wait_until_done     = null //just for debugging
                } = {}) {
        super();
        let params = arguments[0];
        if (!params.where_to_insert) { //the defaults listed above don't actually work
            params.where_to_insert = "next_top_level";
        }
        copy_missing_fields(params, this);
        this.inserting_instruction = true;
    }

    do_item (job_instance){
        if (Instruction$1.is_oplet_array(this.do_list_item) ||
            !Array.isArray(this.do_list_item)){
            job_instance.insert_single_instruction(this.do_list_item);
        }
        else { //we've got more than 1 instr to insert.
            job_instance.insert_instructions(this.do_list_item);
        }
        job_instance.set_up_next_do(1);
    }
};

Instruction$1.set_inter_do_item_dur = class set_inter_do_item_dur extends Instruction$1{
    constructor ({dur = null, //can be null, a single instruction, or an array of instructions
                  instructions_array = []
                  } = {}) {
        super();
        if(dur == null) ; //ok
        else if(typeof(dur) == "number"){
            if(dur >= 0) ; //ok
            else if([-1. -2, -3].includes(dur)) ; //ok
            else {
                dde_error("Control,.inter_do_item_dur passed invalid dur of: " + dur +
                    "<br/>Valid values are only: null, non-neg number, -1, -2, -3.");
            }
        }
        this.dur = dur;
        this.instructions_array = instructions_array;
    }

    do_item (job_instance){
        if(this.instructions_array.length == 0){
            if(this.dur != null) {
                job_instance.prev_inter_do_item_dur = job_instance.inter_do_item_dur; //cache for when another instance of this insturcgtion is called with dur == null
                job_instance.inter_do_item_dur = this.dur;
            }
            else { //restores the previous inter_do_item_dur if any
                if(job_instance.hasOwnProperty("prev_inter_do_item_dur")) {
                    job_instance.inter_do_item_dur = job_instance.prev_inter_do_item_dur;
                } //just leave whatever the existing inter_do_item_dur.
                        //if this cause is reached, its probably a programmer mistake.
                        //BUT we don't want to error, as errors in this code that
                        //might be running in an intolerant-to-errors mode, aren't good,
                        //so just let it go.
            }
        }
        //we have an instruction array
        else if (this.dur == null) { //unusual and not much point, but allow
            job_instance.insert_instructions(this.instructions_array);
        }
        else { //normal. We have a dur and an instruction array.
            let prev_inter_do_item_dur = job_instance.inter_do_item_dur;
            job_instance.inter_do_item_dur = this.dur;
            this.instructions_array.push(function(){
                                            job_instance.inter_do_item_dur = prev_inter_do_item_dur;
                                         });
            job_instance.insert_instructions(this.instructions_array);
        }
        job_instance.set_up_next_do(1);
    }
};


Instruction$1.start_job = class start_job extends Instruction$1{
    constructor (job_name, start_options={}, if_started="ignore", wait_until_job_done=false) {
        if(!["ignore", "error", "restart"].includes(if_started)){
            dde_error("Control.start_job has invalid value for if_started of: " +
                       if_started +
                       '<br/>Valid values are: "ignore", "error", "restart"');
        }
        if(![true, false].includes(wait_until_job_done)){
            dde_error("Control.start_job has invalid value for wait_until_job_done of: " +
                if_started +
                '<br/>Valid values are: true and false');
        }
        super();
        if(job_name === undefined){
            dde_error("start_job was not passed a <b>job_name</b> which is required.");
        }
        if((typeof(job_name) != "string") && !(job_name instanceof Job$1)){
            dde_error("start_job was passed an invalid <b>job_name</b> of: " + job_name + "<br/>" +
                      "It must be a Job instance,<br/>the string of a Job name<br/>" +
                      "or the string of a file containing a Job definition.");
        }
        this.job_name      = job_name;
        this.start_options = start_options;
        this.if_started    = if_started;
        this.wait_until_job_done = wait_until_job_done;
        this.job_to_start = null;
        this.on_first_call_to_do_item = true;
    }
    do_item (job_instance){
        if(!this.job_to_start) {
            if (this.job_name instanceof Job$1) { this.job_to_start = this.job_name; }
            else if(typeof(this.job_name) == "string") {
                if (this.job_name.startsWith("Job.")) { this.job_to_start = value_of_path$1(this.job_name); }
                else if (Job$1[this.job_name]) {  this.job_to_start = Job$1[this.job_name]; }
                else if(file_exists(this.job_name)) {
                    let jobs_in_file = Job$1.instances_in_file(this.job_name);
                    if(jobs_in_file.length > 0) { this.job_to_start = jobs_in_file[0]; }
                    else {
                        dde_error("Control.start_job has a job_name that's a path to an existing file: " + this.job_name + "<br/>" +
                                  "but that file doesn't define any jobs.");
                    }
                }
                else {
                    dde_error("Control.start_job has a job_name of: " + this.job_name +
                              "<br/>but it doesn't resolve to a Job or a file containing one.");
                }
            }
            if(!(this.job_to_start instanceof Job$1)){
                job_instance.stop_for_reason("errored", "Control.start_job attempted to start non-existent Job." + this.job_name);
                job_instance.set_up_next_do(0);
            }
        }
        //this.job_to_start has a valid job instance in it
        const stat = this.job_to_start.status_code;
        if (this.wait_until_job_done) {
             if ((stat == "not_started") || ((stat == "completed") && this.on_first_call_to_do_item))   {
                 this.on_first_call_to_do_item = false;
                job_instance.set_status_code("waiting", "This job waiting for " + this.job_to_start.name + " to complete.");
                this.job_to_start.start(this.start_options);
                job_instance.set_up_next_do(0);
                return
             }
             else if (stat == "completed"){ //all done with successful runnning of job_to_start
                 job_instance.wait_reason = null;
                 job_instance.stop_reason = null;
                 this.on_first_call_to_do_item = true; //in case this job is inside a loop, prepare for next iteration
                 job_instance.set_status_code("running");
                 job_instance.set_up_next_do(1);
                 return
             }
             else if(["starting", "running", "stopping", "running_when_stopped"].includes(stat)) {
                let wait_reason = "Control.start_job waiting at instruction " +
                                          job_instance.program_counter + " for " + this.job_to_start.name + " to complete.";
                job_instance.set_status_code("waiting", wait_reason);
                job_instance.set_up_next_do(0);
                return
             }
             else if(stat == "waiting") {
                 let wait_reason = "Control.start_job waiting at instruction " +
                     job_instance.program_counter + " for " + this.job_to_start.name + " to complete,\n" +
                      "but its now waiting for: " + this.job_to_start.wait_reason;
                 job_instance.set_status_code("waiting", wait_reason);
                 job_instance.set_up_next_do(0);
                 return
             }
             else if (stat == "suspended")   {
                    this.job_to_start.unsuspend();
                    let wait_reason = "Control.start_job waiting at instruction " +
                        job_instance.program_counter + " for " + this.job_to_start.name + " to complete.";
                    job_instance.set_status_code("waiting", wait_reason);
                    job_instance.set_up_next_do(0);
                    return
             }
             else if (stat == "errored")   {
                let stop_reason = "This job stopped because the job it is waiting for, " +
                                            this.job_to_start.name + " has errored with: " +
                                            this.job_to_start.stop_reason;
                job_instance.set_status_code("errored", stop_reason);
                job_instance.set_up_next_do(1);
                return
             }
             else if (stat == "interrupted")   {
                let stop_reason = "This job stopped because the job it is waiting for, " +
                                  this.job_to_start.name + " was interrupted with: " +
                                  this.job_to_start.stop_reason;
                job_instance.set_status_code("interrupted", stop_reason);
                job_instance.set_up_next_do(1);
                return
             }
        }
        //below here. we're not waiting until this.job_to_start is done.
        else if (stat == "starting")    { job_instance.set_up_next_do(1); } //just let continue starting
        else if (stat == "suspended")   {
            this.job_to_start.unsuspend();
            job_instance.set_up_next_do(1);
        }
        else if (["running", "waiting", "stopping", "running_when_stopped"].includes(stat)){
           if     (this.if_started == "ignore") {job_instance.set_up_next_do(1);}
           else if(this.if_started == "error") {
               job_instance.stop_for_reason("errored",
                    "Robot_start_job tried to start job: " + this.job_name +
                    " but it was already started.");
               job_instance.set_up_next_do(0);
               return
           }
           else if (this.if_started == "restart"){
               this.job_to_start.stop_for_reason("interrupted",
                  "interrupted by start_job instruction in " + job_instance.name);
               setTimeout(function(){ this.job_to_start.start(this.start_options);   },
                          this.job_to_start.inter_do_item_dur * 2);
               job_instance.set_up_next_do(1);
           }
           else { //if_started is tested for validity in the constructor, but just in case...
               shouldnt$1("Job." + job_instance.name +
                 " has a Control.start_job instruction with an invalid " +
                 "<br/> if_started value of: " + this.if_started);
           }
        }
        else if (["not_started", "completed", "errored", "interrupted"].includes(stat)) {
           this.job_to_start.start(this.start_options);
            job_instance.set_up_next_do(1);
        }
        else {
            shouldnt$1("Control.start_job got a status_code from Job." +
                      this.job_to_start.name + " that it doesn't understand.");
        }
    }
    toString(){
        return "start_job: " + this.job_name
    }
    to_source_code(args){
        return args.indent + "Control.start_job(" +
            to_source_code$1({value: this.job_name})  +
            (similar(this.start_options, {}) ? "" : (", " + to_source_code$1({value: this.start_options}))) +
            ((this.if_started == "ignore")   ? "" : (", " + to_source_code$1({value: this.if_started}))) +
            ")"
    }
};

Instruction$1.stop_job = class stop_job extends Instruction$1{
    constructor (instruction_location="program_counter", //do not make this be able to be a job instance because we want the dynamic lookup of the job to stop by name that's in the instruction_location
                 stop_reason=null,
                 perform_when_stopped=true) {
        super();
        this.instruction_location = instruction_location;
        this.stop_reason = stop_reason;
        this.perform_when_stopped = perform_when_stopped;
    }
    do_item (job_instance){
        //this is not an error or interrupted, its a normal stoppage of the job.
        var job_to_stop = Job$1.instruction_location_to_job(this.instruction_location, false);
        //job_to_stop might or might not be the same as job_instance
        if (!job_to_stop) { job_to_stop = job_instance; }
        //don't set stop_reason here. Its set in do_next_item from the pc being equal to the ending_program_counter
        //let the_stop_reason
        //if(this.stop_reason) { the_stop_reason = this.stop_reason }
        //else { the_stop_reason = "Stopped by Job." + job_instance.name + "the  instruction: Control.stop_job."s when_stopped instruction
        //job_to_stop.stop_for_reason("completed", the_stop_reason) //don't do as we only want it to stop when it gets to location
        let the_stop_msg = this.stop_reason;
        if(!the_stop_msg) {
            the_stop_msg = "A Control.stop_job instruction was run.";
        }
        warning("Stopping Job." + job_to_stop.name + " for reason: " + the_stop_msg);
        job_to_stop.when_stopped_conditions = this.perform_when_stopped; //the stop_job instruction overrules the job def's when_stopped_conditions
        job_to_stop.ending_program_counter = this.instruction_location;
        job_to_stop.when_do_list_done = "run_when_stopped"; //if I don't do this, and its value is "wait", the job will wait forever.
        if(!this.perform_when_stopped) {
            job_to_stop.when_stopped = "stop";
        }
        job_instance.set_up_next_do(); //continue on with the current job.
            //if the current job is the same as the job_to_stop, fine, it will stop
            //else the job_to_stop will stop of its own accord now that it has a status of "completed",
            // and the current job (job_instance) will continue on to its next instruction.
    }
    toString(){
        var job_to_stop = Job$1.instruction_location_to_job(this.instruction_location, false);
        if (!job_to_stop) { job_to_stop = " containing this instruction"; }
        else              { job_to_stop = ": Job." + job_to_stop.name; }
        return "stop_job" + job_to_stop + " because: " + this.stop_reason
    }
    to_source_code(args){
        let indent = ((args && args.indent) ? args.indent : "");
        let props_args = args        = jQuery.extend({}, arguments[0]);
        props_args.indent = "";
        props_args.value = this.instruction_location;
        let loc_src = to_source_code$1(props_args);
        props_args.value = this.stop_reason;
        let sr_src = to_source_code$1(props_args);
        props_args.value = this.perform_when_stopped;
        let pws_src = to_source_code$1(props_args);
        let result = indent +
                     "Control.stop_job(" +
                     loc_src + ", " +
                     sr_src          + ", " +
                     pws_src +
                     ")";
        return result
    }
};

Instruction$1.suspend = class suspend extends Instruction$1{
    constructor (job_name = null, reason = "") {
        super();
        if (job_name instanceof Job$1) { job_name = job_name.name; }
        this.job_name = job_name;
        this.reason   = reason;
    }
    do_item (job_instance){
        let job_to_suspend = this.job_name;
        if (!job_to_suspend) { job_to_suspend = job_instance; }
        else if (typeof(job_to_suspend) == "string") { job_to_suspend = Job$1[job_to_suspend]; }
        if (!job_to_suspend instanceof Job$1) {
           job_instance.stop_for_reason("error", "suspend attempted to suspend job: " + job_to_suspend + " but that isn't a job.");
           job_instance.set_up_next_do(1);
           return
        }
        else {
            job_to_suspend.suspend(this.reason);
            if (job_to_suspend !== job_instance) { job_instance.set_up_next_do(1); }
            //else, it doesn't send a set_up_next_do which causes the job to  be suspended.
        }
    }
    to_source_code(args){
        return args.indent + "Control.suspend(" +
            to_source_code$1({value: this.job_name}) +
            ((this.reason == "") ? "" : (", " + to_source_code$1({value: this.reason})))  +
            ")"
    }
};

Instruction$1.unsuspend = class unsuspend extends Instruction$1{
    constructor (job_name = "required", stop_reason=false) {
        super();
        if(job_name == "required"){
            dde_error("unsuspend not given a job name to unsuspend. A job cannot unsuspend itself.");
        }
        if (job_name instanceof Job$1) { job_name = job_name.name; }
        this.job_name = job_name;
        this.stop_reason = stop_reason;
    }
    do_item (job_instance){
        let job_to_unsuspend = this.job_name;
        if (typeof(job_to_unsuspend) == "string") { job_to_unsuspend = Job$1[job_to_unsuspend]; }
        if (!(job_to_unsuspend instanceof Job$1))      {
            job_instance.stop_for_reason("errored", "unsuspend attempted to unsuspend job: " + this.job_name + " but that isn't a job.");
        }
        else if (job_to_unsuspend == job_instance) { shouldnt$1("unsuspend instruction attempting to unsuspend itself.: " + this.job_name); }
        else if (job_to_unsuspend.status_code == "suspended"){
            job_to_unsuspend.unsuspend(this.stop_reason);
        }
        else ; //if job_to_unsuspend is not suspended, do nothing
        job_instance.set_up_next_do(1);

    }
    to_source_code(args){
        return args.indent + "Control.unsuspend(" +
            to_source_code$1({value: this.job_name}) +
            ")"
    }
};

Instruction$1.sync_point = class sync_point extends Instruction$1{
        //permit an empty array for job_names. We might be getting such an array from some computation
        //that legitimately has no items. Allow it. Then when this instruction's do_item is called,
        //it will always be in_sync and proceed. Empty job_names also useful for send_to_job
        //where_to_insert labels.
        //also job_names may or may not contain the name of the current job. It doesn't matter.
        constructor (name, job_names=[]) {
            super();
            if (!name){
                dde_error("Instruction sync_point has not been passed a name.");
            }
            this.name = name;
            this.job_names = job_names;
            this.inserted_empty_instruction_queue = false;
        }
    do_item (job_instance){
        if ((job_instance.robot instanceof Dexter$1) &&
            (this.inserted_empty_instruction_queue == false) &&
            (this.job_names.length > 0) &&
            ((this.job_names.length > 1)  || //must contain a job other than itself
            (this.job_names[0] != job_instance.name))){ //the one job name its got is not job_instance so we've got to flush the instruction_queue
            let instruction_array = Dexter$1.empty_instruction_queue();
            //   job_instance.do_list.splice(job_instance.program_counter, 0, instruction_array); //before really testing th sync point, first empty the queue. We only need to do this the first time this do_item is called.
            //   job_instance.added_items_count.splice(this.program_counter, 0, 0);
            //job_instance.insert_single_instruction(instruction_array) //don't call because this inserts AFTER PC, not at it.
            //Job.insert_instruction(instruction_array, {job: job_instance, offset: "program_counter"})
            this.send(instruction_array);
            this.inserted_empty_instruction_queue = true;
            job_instance.set_up_next_do(0); //go and do this empty_instruction_queue instruction, and when it finally returns, do the sync_point proper that is the next instruction
        }
        else {
            for(let job_name of this.job_names){
                if (job_name != job_instance.name){ //ignore self
                    var j_inst = Job$1[job_name];
                    if(!j_inst){
                        job_instance.stop_for_reason("errored",
                            "Job." + job_instance.name +
                            " has a sync_point instruction that has a job-to-sync-with named: " + job_name +
                            " which is not defined.");
                        return;
                    }
                    else if(!j_inst.is_active()) { //perhaps not_started, perhaps done (but might be restarted).
                        let wait_reason = "Job." + j_inst.name + " to get to sync_point named: " + this.name +
                                          "\nbut that Job has status: " + j_inst.status_code;
                        job_instance.set_status_code("waiting", wait_reason);
                        job_instance.set_up_next_do(0);
                        return
                    }
                    else {
                        if (j_inst.at_or_past_sync_point(this.name)){ continue; } //good. j_inst is at the sync point.
                        //beware that j_inst *could* be at a sync point of a different name, and if so,
                        //let's hope there's a 3rd job that it will sync with to get it passed that sync point.
                        else { //j_inst didn't get to sync point yet
                            let wait_reason = "Job." + j_inst.name + " to get to sync_point named: " + this.name;
                            job_instance.set_status_code("waiting", wait_reason);
                            job_instance.set_up_next_do(0);
                            return; //we have not acheived sync, so just pause job_instance, in hopes
                                    //that another job will be the last job to reach sync and cause job_instance
                                    //to proceed.
                        }
                    }
                }
            }
            //made it through all job_names, so everybody's in sync, but each job has to unfreeze itself.
            job_instance.set_status_code("running");
            job_instance.set_up_next_do(1);
        }
    }
    to_source_code(args){
        return args.indent + "Control.sync_point("   +
            to_source_code$1({value: this.name})     + ", " +
            to_source_code$1({value: this.job_names}) +
            ")"
    }
};

Instruction$1.wait_until = class wait_until extends Instruction$1{
    constructor (fn_date_dur) {
        super();
        this.fn_date_dur = fn_date_dur;
        if      (typeof(this.fn_date_dur) == "function");
        else if (this.fn_date_dur instanceof Date) ;
        else if (typeof(fn_date_dur) == "number")  ;
        else if (fn_date_dur instanceof Duration)  { this.fn_date_dur = fn_date_dur.to_seconds(); }
        else if (this.fn_date_dur == "new_instruction");
        else if (Array.isArray(this.fn_date_dur) ||
                 (typeof(this.fn_date_dur) == "object")){
                 if(!Job$1.instruction_location_to_job(this.fn_date_dur, false)){
                     warning("Control.wait_until passed an array or literal object<br/>" +
                             "for an instruction location but<br/>" +
                             "it does not contain a job.<br/>" +
                             "That implies this job will wait for itself, and thus forever.<br/>" +
                             "However, unusual circumstances could make this ok.");
                 }
        }
        else if (fn_data_dur instanceof Job$1) ;
        else {
            dde_error("Control.wait_until instruction passed: " + this.fn_date_dur +
                      '<br/> which is not a number, date, function,<br/>' +
                      '"new_instruction" or instruction location array.');
        }
        if((typeof(fn_date_dur) == "number") && (fn_date_dur >= 1)) {
            this.inserting_instruction = true;
        }
        this.init_instruction();
    }
    do_item (job_instance){
        if (typeof(this.fn_date_dur) == "function"){
            if (this.fn_date_dur.call(job_instance)) {
                //console.log("wait_until fn returned true")
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1); //advance the PC
            }
            else {
                job_instance.set_status_code("waiting", "a wait_until function returns true.");
                job_instance.set_up_next_do(0); //loop until its true
            }
        }
        else if (this.fn_date_dur instanceof Date){
            if(Date.now() >= this.fn_date_dur){
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
            else {
                job_instance.set_status_code("waiting", "a wait_until Date of: " +  this.fn_date_dur);
                job_instance.set_up_next_do(0);
            }
        }
        else if (typeof(this.fn_date_dur) == "number"){ //number is seconds
            let the_now_in_ms = Date.now();
            if (this.start_time_in_ms == null) { this.start_time_in_ms = the_now_in_ms; } //hits the first time this do_item is called for an inst
            let dur_from_start_in_ms = the_now_in_ms - this.start_time_in_ms;
            if (dur_from_start_in_ms >= this.fn_date_dur * 1000){ //The wait is over. dur_from_start_in_ms is in ms, fn_date_dur is in seconds
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                this.init_instruction(); //essential for the 2nd thru nth call to start() for this job.
                job_instance.set_up_next_do(1);
            }/* this 'keep alive/ clause should be unnecessary because if the socket times out, the
               //Socket.send method will reconnect the socket when the next send to dexter instruction comes through.
               //We'd need that socket code anyway for other do_lists that have long running sections
               //that don't involve sending instructions to dexter for a long period.
            else if ((job_instance.robot instanceof Dexter) && (dur_from_start_in_ms > 1000)){
                //so that we can keep the tcp connection alive, send a virtual heartbeat
                let new_wait_dur_in_sec = this.fn_date_dur - (dur_from_start_in_ms / 1000)
                let new_instructions = [make_ins("g"), //just a do nothing to get a round trip to Dexter.
                                       Control.wait_until(new_wait_dur_in_sec)] //create new wait_until to wait for the remaining time
                job_instance.insert_instructions(new_instructions)
                this.start_time_in_ms = null //essential for the 2nd thru nth call to start() for this job.
                job_instance.wait_reason = null
                job_instance.set_status_code("running")
                job_instance.set_up_next_do(1)
            }*/
            else {
                job_instance.set_status_code("waiting", "a wait_until duration of: " +  this.fn_date_dur + " seconds");
                job_instance.set_up_next_do(0);
            }
        }
        else if (this.fn_date_dur == "new_instruction"){
            const pc               = job_instance.program_counter;
            const pc_on_last_instr = (pc == (job_instance.do_list.length - 1));
            const next_instruction = (pc_on_last_instr ?
                                       null : job_instance.do_list[pc + 1]);
            if (this.old_instruction === undefined){ //first time through only
                this.old_instruction = next_instruction;
                job_instance.set_status_code("waiting", 'a wait_until gets a "new_instruction"');
                job_instance.set_up_next_do(0);
            }
            else if (this.old_instruction === null){ //started with this instr as the last one
                if (pc_on_last_instr) { job_instance.set_up_next_do(0); }
                else                  {
                   job_instance.set_up_next_do(1);
                } //got a new last instr
            }
            else if (next_instruction == this.old_instruction){//no change so don't advance the pos
                job_instance.set_up_next_do(0);
            }
            else { //got a new instruction since this instruction started running so execute it
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
        }
        else if (this.fn_date_dur instanceof Job$1) {
            let status_code = this.fn_date_dur.status_code;
            if(status_code == "completed") {
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
            else if(status_code == "errored") {
                job_instance.wait_reason = null;
                let stop_reason = "The job that this job was waiting for to complete, " +
                                   this.fn_date_dur.name + ", errored with: " +
                                   "\n " + this.fn_date_dur.stop_reason;
                job_instance.set_status_code("errored", stop_reason);
                job_instance.set_up_next_do(1);
            }
            else if(status_code == "interrupted") {
                job_instance.wait_reason = null;
                let stop_reason = "The job that this job was waiting for to complete, " +
                                                this.fn_date_dur.name + ", was interrupted with: " +
                                                "\n " + this.fn_date_dur.stop_reason;
                job_instance.set_status_code("interrupted", stop_reason);
                job_instance.set_up_next_do(1);
            }
            else {
               job_instance.set_status_code("waiting", "a wait_until for Job " + this.fn_date_dur.name + " completes.");
               job_instance.set_up_next_do(0);
            }
        }
        else if (Array.isArray(this.fn_date_dur) ||
                 (typeof(this.fn_date_dur) == "object")){ //instruction_location, but not integer and string formats
            var loc_job_instance = Job$1.instruction_location_to_job(this.fn_date_dur, false);
            if (!loc_job_instance) {
                loc_job_instance = job_instance;
            }
            var loc_pc = loc_job_instance.instruction_location_to_id(this.fn_date_dur);
            if(loc_pc > loc_job_instance.program_counter){ //wait until loc_job_instance advances
                if(loc_job_instance.stop_reason){
                    warning("Control.wait_until is waiting for job: " + loc_job_instance.name +
                            "<br/>but that job is stopped, so it will probably wait forever.");
                }
                job_instance.set_status_code("waiting", "a wait_until instruction_location is reached.");
                job_instance.set_up_next_do(0);
            }
            else { //done waiting, loc_job_instance already at or passe loc_ps
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
        }
        else { //this is checked in the constructor, but just in case ...
            shouldnt$1("In job: " + job_instance.name +
                      ' in wait_until("new_instruction")<br/>' +
                      " got fn_date_dur of: " + this.fn_date_dur +
                      " which is invalid.<br/>" +
                      ' It should be a function, a date, a number, or "new_instruction".');
        }
    }
    //called by stop_for_reason, in case user terminates job during a wait_until
    init_instruction(){
            this.start_time_in_ms = null; //essential for the 2nd thru nth call to start() for this job.
    }

    to_source_code(args){
        return args.indent + "Control.wait_until("       +
            to_source_code$1({value: this.fn_date_dur, function_names: true})  +
            ")"
    }

};


//______Picture Instructions
Instruction$1.save_picture = class save_picture extends Instruction$1{
    constructor({canvas_id_or_mat="canvas_id",
                 path="my_pic.png"}){
        super();
        this.canvas_id_or_mat = canvas_id_or_mat;
        this.path = path;
        let width;
        let height;
        let canvas_elt;
        if(canvas_id_or_mat instanceof HTMLElement){
            canvas_elt = canvas_id_or_mat;
        }
        else if (typeof(canvas_id_or_mat) == "string"){
            canvas_elt = value_of_path$1(canvas_id_or_mat);
        }
        if(canvas_elt) {
            width = canvas_elt.width;
            height = canvas_elt.height;
        }
        else { //its a mat
           width = canvas_id_or_mat.cols;
           height = canvas_id_or_mat.rows;
        }
        Picture.init({width: width, height: height}); //do at job def time
    }
    do_item (job_instance){
        Picture.save_picture({canvas_id_or_mat: this.canvas_id_or_mat,
                              path: this.path});
        job_instance.set_up_next_do(1);
    }
};

Instruction$1.show_picture = class show_picture extends Instruction$1{
    constructor ({canvas_id="canvas_id", //string of a canvas_id or canvasId dom elt
                  content=null, //mat or file_path
                  title=undefined,
                  x=200, y=40, width=320, height=240,
                  rect_to_draw=null}){
        super();
        this.canvas_id = canvas_id;
        this.content = content;
        this.title = title;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.rect_to_draw = rect_to_draw;
        this.first_time = true;
        Picture.init({width: width, height: height});
    }
    do_item (job_instance){
        if(this.first_time){
            let cont = this.content;
            if((typeof(this.content) == "string") &&
                job_instance.user_data[this.content]){
                cont = job_instance.user_data[this.content]; //should be a mat
            }
            Picture.show_picture({canvas_id: this.canvas_id, //string of a canvas_id or canvasId dom elt
                                    content: cont, //mat or file_path
                                    title: this.title,
                                    x: this.x,
                                    y: this.y,
                                    width: this.width,
                                    height: this.height,
                                    rect_to_draw: this.rect_to_draw});
            this.first_time = false;
            job_instance.set_up_next_do(0);
        }
        else if (is_dom_elt(this.canvas_id)) {
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else if (value_of_path$1(this.canvas_id)) { //canvas_id is a string
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else { job_instance.set_up_next_do(0); } //wait until picture is up
    }
};

Instruction$1.show_video = class show_video extends Instruction$1{
    constructor ({video_id="video_id", //string of a canvas_id or canvasId dom elt
                     content="webcam", //file_path or "webcam"
                     title=undefined,
                     x=200, y=40, width=320, height=240,
                     play=true,
                     visible=true}){
        super();
        this.video_id = video_id;
        this.content = content;
        this.title = title;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.play = play;
        this.visible = visible;
        this.first_time = true;
        Picture.init({width: width, height: height}); //do at job def time
    }
    do_item (job_instance){
        if(this.first_time){
            Picture.show_video({video_id: this.video_id, //string of a canvas_id or canvasId dom elt
                                content: this.content, //mat or file_path
                                title: this.title,
                                x: this.x,
                                y: this.y,
                                width: this.width,
                                height: this.height,
                                play: this.play,
                                visible: this.visible});
            this.first_time = false;
            job_instance.set_up_next_do(0);
        }
        else if (is_dom_elt(this.video_id)) {
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else if (value_of_path$1(this.video_id)) { //video_id is a string
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else { job_instance.set_up_next_do(0); } //wait until video is up
    }
};

/*Instruction.take_picture = class take_picture extends Instruction{
    constructor ({video_id="video_id", //string of a canvas_id or canvasId dom elt
                  callback=Picture.show_picture_of_mat}={}){
        super()
        this.video_id = video_id
        this.callback = callback
        this.first_time = true
        this.clock_start = null
        Picture.init() //do at fn def time, not at run time, else, grabbing the pic fails
    }
    do_item (job_instance){
        if(this.clock_start_ms) { //at least close to done. take_picture called and video is up but has the callback been called and is done?
            if ((Date.now() - this.clock_start_ms) > 150){ //Now assume done. Had to give a pause to make sure  the callback got run before moving on to the next instruction, in case it depends upon it.
                //in case we're in a loop, initialize for next time around
                this.clock_start_ms = null
                this.first_time = true
                job_instance.set_up_next_do(1)
            }
            else { job_instance.set_up_next_do(0) } //not done yet
        }
        else if(this.first_time){
            let cb
            if(typeof(this.callback) == "string"){
              let user_data_var_name = this.callback
              cb = function(mat) {
                   job_instance.user_data[user_data_var_name] = mat
                  }
            }
            else { cb = this.callback }
            Picture.take_picture({video_id: this.video_id, //string of a canvas_id or canvasId dom elt
                                  callback: cb})
            this.first_time = false
            job_instance.set_up_next_do(0)
        }

        else if (is_dom_elt(this.video_id) ||value_of_path(this.video_id)) {
           this.clock_start_ms = Date.now() //start the timer
            job_instance.set_up_next_do(0)
        }
        else { job_instance.set_up_next_do(0) } //take_pciture has been called, but wait until video is up
    }
}*/
Instruction$1.take_picture = class take_picture extends Instruction$1{
    constructor ({video_id="video_id", //string of a canvas_id or canvasId dom elt
                  camera_id=undefined,
                  width=320, height=240,
                  callback=Picture.show_picture_of_mat}={}){
        super();
        this.video_id = video_id;
        this.camera_id = camera_id;
        this.width = width;
        this.height = height;
        this.callback = callback;
        this.first_time = true;
        this.pic_taken = false;
        Picture.init({width: width, height: height}); //do at fn def time, not at run time, else, grabbing the pic fails
    }
    do_item (job_instance){
        if(this.first_time){
            //prepare the callback passed to Picture.take_picture
            let cb;
            let this_instruction = this;
            if(typeof(this.callback) == "string"){
                let user_data_var_name = this.callback;
                cb = function(mat) {
                        job_instance.user_data[user_data_var_name] = mat;
                        this_instruction.pic_taken = true;
                };
            }
            else {
                cb = function(mat) {
                        if (this_instruction.callback) {
                            this_instruction.callback.call(job_instance, mat);
                        }
                        this_instruction.pic_taken = true;
                     };
            }
            Picture.take_picture({video_id: this.video_id, //string of a canvas_id or canvas_id dom elt
                                  camera_id: this.camera_id,
                                  width: this.width, height: this.height,
                                  callback: cb});
            this.first_time = false;
            job_instance.set_up_next_do(0); //loop around.
        }
        else if(this.pic_taken) { //all done
            this.first_time = true; //get ready for next time this instuction may be called in a loop
            this.pic_taken = false;
            job_instance.set_up_next_do(1);
        }
        else { job_instance.set_up_next_do(0); } //take_picture has been called, but its not done yet
    }
};
//______________________________________________________
Instruction$1.Serial = class Serial extends Instruction$1{};

//for Serial.string_instruction when we have a Robot.Serial instance
Instruction$1.Serial.string_instruction = class string_instruction extends Instruction$1.Serial{
    constructor (instruction_string, robot = null //this is a robot instance. spelling of this prop name is important. Used by other methods & classes
    ) {
        super();
        this.inst_array = Serial$1.string_instruction(instruction_string);
        this.robot = robot;
    }
    do_item (job_instance){
        if (!this.robot) { //this.robot = job_instance.robot
            this.set_instruction_robot_from_job(job_instance); //might error which is good
        }
        //job_instance.wait_until_instruction_id_has_run = job_instance.program_counter// dont
        //do this here because in the case that we have a robot, we might still be
        //in the "connecting" state, ie initing the robot, in which case,
        //we don't want to be waiting for this instruction because that
        //will preclude processing of the instruction by the lower part of do_next_item.
        job_instance.send(this.inst_array, this.robot);
        //don't set up next do. That's handled by the wait_until_instruction_id_has_run code
    }
};

function shouldnt$1(message){
    console.log(message);
    if(window.contact_doc_id) {
        open_doc(contact_doc_id);
    }
    dde_error("The function: shouldnt has been called.<br/>" +
                    "This means there is a bug in DDE.<br/>" +
                    "Please send a bug report. See User_Guide/Contact.<br/>" +
                    "Include this whole message.<br/>" +
                     prepend_file_message_maybe(message));
}

function is_non_neg_integer(anything){
    return Number.isInteger(anything) && (anything > -1)
}

function is_NaN_null_or_undefined(arg) {
    return (isNaN(arg) || (arg === null) || (arg === undefined) )
}

//this will count reserved words (ie "break" as an identifier, which
//isn't what JS thinks of as a valid user variable or fn name identifier
function is_string_an_identifier(a_string){
  let the_regex = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
  return the_regex.test(a_string)
}


function is_generator_function(obj){
    if(obj && obj.constructor && (obj.constructor.name == "GeneratorFunction")){
        return true
    }
    else { return false }
}


//Beware: this *might* only catch iterators made by generator functions.
function is_iterator(obj){
    if(obj && obj.constructor && is_generator_function(obj.constructor)){
        return true
    }
    else {
        return false
    }
}


function is_hour_colon_minute(a_string){
    return a_string.match(/^\d\d:\d\d$/)
}


function is_hour_colon_minute_colon_second(a_string){
    return a_string.match(/^\d\d:\d\d:\d\d$/)
}


//date_int is ms from jan 1, 1970 as returned by Date.now()
function date_integer_to_long_string(date_int=Date.now()){
    let date_obj = new Date(date_int);
    let result = date_obj.toString();
    let ms = date_obj.getMilliseconds();
    result +=  " " + ms + "ms";
    return result
}


//integer milliseconds in, output "123:23:59:59:999" ie
// days:hours:minutes:seconds:milliseconds
function milliseconds_to_human_string(total_ms=Date.now(), include_total_days=true){
   let remain_ms   = total_ms % 1000;
   let total_secs  = (total_ms - remain_ms) / 1000;

   let remain_secs = total_secs % 60;
   let total_mins = (total_secs - remain_secs) / 60;

   let remain_mins = total_mins % 60;
   let total_hours = (total_mins - remain_mins) / 60;

   let remain_hours = total_hours % 24;
   let total_days   = (total_hours - remain_hours) / 24;
   return (include_total_days ? total_days + ":" : "") +
          pad_integer(remain_hours, 2) + ":" +
          pad_integer(remain_mins, 2) + ":" +
          pad_integer(remain_secs, 2) + ":" +
          pad_integer(remain_ms, 3)
}



//pad_integer(123, 5, "x") => "xx123"
function pad_integer(int, places=3, pad_char="0"){
    let result = "" + int;
    if (result.length < places) { result = pad_char.repeat(places - result.length) + result;}
    return result
}


//the default for Robot Serial.sim_fun
function return_first_arg(arg){ return arg }

function typed_array_name(item){
    if(Array.isArray(item)) { return "Array" }
    else if (item instanceof Int8Array)         { return "Int8Array" }
    else if (item instanceof Uint8Array)        { return "Uint8Array" }
    else if (item instanceof Uint8ClampedArray) { return "Uint8ClampedArray" }
    else if (item instanceof Int16Array)        { return "Int16Array" }
    else if (item instanceof Uint16Array)       { return "Uint16Array" }
    else if (item instanceof Int32Array)        { return "Int32Array" }
    else if (item instanceof Uint32Array)       { return "Uint32Array" }
    else if (item instanceof Float32Array)      { return "Float32Array" }
    else if (item instanceof Float64Array)      { return "Float64Array" }
    else { return null } //not an array of any type
}

//returns null or the last elt of an array or a string
function last(arg){
    let len = arg.length;
    if (len == 0)                     { return undefined }
    else if (typeof(arg) == "string") { return arg[len - 1 ] }
    else if (Array.isArray(arg))      { return arg[len - 1] }
    else if (arg instanceof NodeList) { return arg[len - 1] }
    else if (arg instanceof HTMLCollection) { return arg[len - 1] }
    else                              { dde_error("last passed unhandled type of arg: " + arg); }
}

//avoids calling eval. If the path isn't defined, this fn returns undefined.
//arg can either be a string with dots or an array of strings that are path elts.
function value_of_path$1(path_string){
    let path = path_string;
    if (typeof(path) == "string"){ path = path.split("."); }
    else if(Array.isArray(path)) ; //ok as is
    else {
        dde_error("value_of_path passed: " + path_string + " which is not a string or an array.");
    }
    let result;
    if(window[path[0]] !== undefined) { result = window; }
    //note window["window"] returns the window obj so the arg can be "window" and we still win
    else if (Object.prototype[path[0]] !== undefined) { result = Object.prototype; }
    else { return undefined }
    for (var path_elt of path){
        result = result[path_elt];
        if (result === undefined) {break}
    }
    return result
}

//returns null if fn_src doesn't look like a fn def.
//returns "" if its an anonymous fn
//else returns the fn name
//beware: js is clever about assigning names to annonymous fns if
//th happen to be bound to a keyword arg to a fn,
//In such cases, some.fn.name might yield the name its bound to,
//not the name its given in its source code.
function function_name(fn_or_src){
    if (typeof(fn_or_src) == "string"){
        if (!fn_or_src.startsWith("function ")) {return null}
        else {
            let parts = fn_or_src.split(" ");
            if (parts.length < 2) { return "" }
            else {
                let name_maybe = parts[1];
                if (name_maybe.startsWith("(")) { return "" }
                else {
                    let paren_pos = name_maybe.indexOf("(");
                    if (paren_pos == -1) { return name_maybe }
                    else { return name_maybe.substring(0, paren_pos) }
                }
            }
        }
    }
    else if (typeof(fn_or_src) == "function"){
        return  fn_or_src.name   //returns "" if anonymous function
    }
    else { return null }
}

//returns a string
function function_params(fn, include_parens=true){
    let src = fn.toString();
    let open_pos = src.indexOf("(");
    let close_pos = Editor.find_matching_delimiter(src, open_pos);
    /*close_pos = src.indexOf("){") //beware, with default args, there can be syntax in params, but this will at least mostly work
    if (close_pos == -1) {close_pos = src.indexOf(") {") //that space is in some system defs like isPrototypeOf
    if (close_pos == -1) {close_pos = src.indexOf(")") //one last try. Not so good since a default value
          // *might* have a paren in it, but not too many fns with such default values so might as well.
    */
    let result = src.substring(open_pos + 1, close_pos);
    if ((result == "") && (fn.length !== 0)) { //the src of the fn does not contain the params as is true for Math fns, and fns whose body source is [native code]
        let prefix = "arg";
        if (Math.hasOwnProperty(fn.name)) { prefix = "num"; } //all fns in Math take only number args. This is not true for the "Number" class fns.
        for (let i = 0; i < fn.length; i++) {
            result += prefix + i;
            if (i != (fn.length - 1)) { result += ", ";}
        }
    }
    if (include_parens){ result = "(" + result + ")"; }
    return result
}

//fn can be a constructor or other method who's src string doesn't have to start with "function".
//we really only care about the text between the first paren and the first ")}", exclusive
//returns an array of strings, the names of the params
//function(a, {b=2, c=3}){ return 99}   returns ["a", "b", "c"]
function function_param_names(fn){
    var params_full_string = function_params(fn, false);
    return params_string_to_param_names(params_full_string)
}


//used only by this file
//params_full_string can either be wrapped in parens or not
function params_string_to_param_names(params_full_string){
    if (params_full_string.startsWith("(")) {params_full_string = params_full_string.substring(1);}
    if (params_full_string.endsWith(")"))   {params_full_string = params_full_string.substring(0, params_full_string.length - 1);}
    params_full_string = remove_comments(params_full_string);
    var params_and_defaults_array = params_full_string.split(",");
    var param_names = [];
    for(var param_and_default of params_and_defaults_array){
        param_and_default = param_and_default.trim();
        if (param_and_default.startsWith("{")){
            var inner_params_and_defaults = param_and_default.substring(1); //cut off {
            if(inner_params_and_defaults.endsWith("}")) {
                 inner_params_and_defaults = param_and_default.substring(0, param_and_default.length -1); //cut off }
            }
            var inner_params_and_defaults_array = inner_params_and_defaults.split(",");
            for(var inner_param_and_default of inner_params_and_defaults_array){
                inner_param_and_default = inner_param_and_default.trim();
                var the_match = inner_param_and_default.match(/^[A-Za-z_-]+/);
                if (!the_match) {return null} //invalid syntax
                var the_param = the_match[0];
                param_names.push(the_param);
            }
        }
        else {
            var equal_pos = param_and_default.indexOf("=");
            var the_param;
            if (equal_pos != -1){
                the_param = param_and_default.substring(0, equal_pos);
                the_param = the_param.trim();
            }
            else {
                the_param =  param_and_default;
            }
            param_names.push(the_param);
        }
    }
    return param_names
}

function remove_comments(a_string) {
    while(true){
        let start_index = a_string.indexOf("/*");
        let end_index;
        if(start_index !== -1) {
            end_index = a_string.indexOf("*/");
            if(end_index !== -1){
                a_string = a_string.substring(0, start_index) + a_string.substring(end_index + 2);
            }
            else {
                a_string = a_string.substring(0, start_index); //nothing left in string so stop
                break;
            } //remove all the way to the end. Not always right, but the string is screwed up anyway.
        }
        else {
            start_index = a_string.indexOf("//");
            if(start_index !== -1) {
                end_index = a_string.indexOf("\n", start_index);
                if(end_index !== -1){
                    a_string = a_string.substring(0, start_index) + a_string.substring(end_index + 1);
                }
                else {
                    a_string = a_string.substring(0, start_index); //nothing left in string so stop
                    break;
                } //remove all the way to the end. Not always right, but the string is screwed up anyway.
            }
            else { break; } //no more comments to remove
        }
    }
    return a_string
}


//not general purpose
function shallow_copy(obj){ //copies only enumerable, own properites. Used in
                            //copying Job's user_data at start
    let result = obj;
    if(result === null) ; //typeof returns "object" for null
    else if(Array.isArray(obj)){
        result = [];
        for (let elt of obj) { result.push(elt); }
    }
    else if (typeof(obj) == "object"){ //typeof returns "object" for null
        result = {};
        for(let name of Object.keys(obj)){
            result[name] = obj[name];
        }
    }
    return result //might be a Date, I hope that's not mungable
}

function shallow_copy_lit_obj(obj){ //copies only enumerable, own properites. Used in
    //copying Job's user_data at start
    let result = {};
    for(let name of Object.keys(obj)){
        result[name] = shallow_copy(obj[name]);
    }
    return result
}

//used to fix broken ES6 not allowing a keyword obj with destructuring.
                             //defaults   keyword_args
function copy_missing_fields(source_arg, target_obj){
    for(var name of Object.getOwnPropertyNames(source_arg)){
        if (!target_obj.hasOwnProperty(name)){
            var new_val = source_arg[name];
            if (new_val == "required"){
                shouldnt$1("copy_missing_fields passed target object: " + target_obj +
                        " that was missing required field of: " + name);
            }
            else { target_obj[name] = new_val; }
        }
    }
}

//returns a string that starts with the first char of src
//by trimming whitespace and comments from the front of src
//used by Control.include_job
function trim_comments_from_front(src){
    src = src.trimLeft();
    if(src.startsWith("//")) {
        let end = src.indexOf("\n");
        if(end == -1){ return "" } //src was a one-liner comment
        else {
            src = src.substring(end + 1);
            return trim_comments_from_front(src)
        }
    }
    else if(src.startsWith("/*")) {
        let end = src.indexOf("*/");
        if(end == -1) { //crap, we've got a faulty multi-line comment.
            return ""
        }
        else {
            src = src.substring(end + 2);
            return trim_comments_from_front(src)
        }
    }
    else { return src }
}

//only used in this file
function regexp_escape_special_chars(str){
    return str.replace(/[-\/\\^$*+?.()|\[\]{}]/g, '\\$&')
}


//the first arg to new RegExp is a regexp pattern that treats
//lots of punctuation chars like parens specially.
//To turn off that special treatment, pass in a 4th arg of false
function replace_substrings(orig_string, substring_to_replace, replacement, substring_to_replace_treated_specially=true){
    if(!substring_to_replace_treated_specially) {
        substring_to_replace = regexp_escape_special_chars(substring_to_replace);
    }
    return orig_string.replace(new RegExp(substring_to_replace, 'g'), replacement);
}


 //uses html to format newlines
//use for printing ANY possible value from JS so that a human (usually a programmer) can make sense of it.
//Use stringify_value_sans_html  for evalable string (but still not perfrect
//returns a string.
//called on the eval result by eval part 2, and by show_output if the input is not already a string
//and by Js_info
function stringify_value$1(value){
    //if (Object.isNewObject(value)) { inspect_new_object(value) }
    //else {
        var result = stringify_value_aux (value);
        //if (typeof(value) != "string"){
        //    result = "<code>" + result + "</code>"
        //}
        return result
    //}
}


function stringify_value_aux(value, job, depth=0){
    if (depth > 2) { return "***" } //stops infinite recustion in circular structures.
    var result;
    if      (value === undefined)       { return "undefined" }
    else if (value === null)            { return "null" } //since typeof(null) == "object", this must be before the typeof(value) == "object" clause
    else if (value === window)          { return "{window object: stores globals}" } //too many weird values in there and too slow so punt.
    else if (typeof(value) == "number") { return value.toString() } //works for NaN too, no need to use (isNaN(value)) { result = "NaN" } //note the check for number before checking isNanN is necessary because JS wasn't designed.
    else if (typeof(value) == "string") { return JSON.stringify(value) }
    else if (value instanceof Date){ result = value.toString(); }
    else if (typeof(value) == "function") {
        result = value.toString();
        var bod_pos = result.indexOf("{");
        if (bod_pos.length <= 12) { //very little to go on. probably an anonymous fn with no args
            if (result.length > 25){ //shorten longer defs
                result = result.substring(0, 22) + "...}";
            }
        }
        else {
            result = result.substring(0, bod_pos) + "{...}"; //just show "function foo(a, b){...}"
        }
    }
    else if (Object.isNewObject(value)) {
        result = value.objectPath(value);
        if (!result) {
            result = "Instance of: " + value.prototype.objectPath(); //todo what if we make an instance of an unnamed instance? we shoud go up the tree to find the first named prototype.
        }
        //from top level, we'll be in sandbox, so value can be browsed without it having to have a path to it.
        //but hopuflly value.prototype WILL have a path (as is likely). For now don't worry about
        //unnamed objs 2 levels down.
        else {
        //inspect_new_object(value) //causes infinite loop in electron dde
        result = inspect_stringify_new_object_clickable_path(value); //causes infinite loop in electron dd
        //just let result be the string of the path.
        }
    }
    else if (depth > 2) { return "***" } //the below clauses call stringify_value_aux meaning
        //they can get into infinite recursion, so cut that off here.
    else if (typed_array_name(value)){ //any type of array
        let len = Math.min(value.length, 100);  //large arrays will cause problems
        result = "[<br/>";
        for (let i = 0; i < len; i++){ //don't use "for ... in here as it gets some wrong stuff
            let sep = ((i == len - 1) ? "<br/>" : ",<br/>");
            var elt_val = value[i];
            var elt_val_string = stringify_value_aux(elt_val, job, depth + 1);
            //if (Array.isArray(elt_val)) sep = sep + "<br/>" //put each sub-array on its own line
            result += " " + elt_val_string + sep;
        }
        result += "]";
        if ((result.length < 100) && (result.indexOf("{") == -1)){ //worked up until I put in indicies above
            result = result.replace(/\[<br\/>\s+/g, "[");
            result = result.replace(/,<br\/>\s+/g, ", ");
            result = result.replace(/<br\/>\]/g, "]");
            result = result.replace(/\[\s+/g, "[");
        }
        result = result.replace(/\],\s+\[/g, "],<br/>&nbsp;[");
    }

    /*else if (value == rootObject) {
        result = "{prototype: undefined<br/>" +
                 '&nbsp;name: "rootObject"<br/>'
        for(let prop in value){
            let prop_val = value[prop]
            let val_str
            if (value.hasOwnProperty(prop) && (prop != "name") && (prop != "prototype")){
               if (Object.isNewObject(prop_val)){
                  val_str = stringify_new_object_clickable_path(prop_val)
               }
               else { val_str = stringify_value_aux(prop_val) }
               result += "&nbsp;" + prop + ": " +  val_str + "<br/>"
            }
        }
        result += "}"
    }
    else if (Object.isNewObject(value)) {
        let prop_val = value["prototype"]
        let val_str = (Object.isNewObject(prop_val)?
                        stringify_new_object_clickable_path(prop_val):
                        stringify_value_aux(prop_val))
        result = "{prototype: "   + val_str + "<br/>" +
                   "&nbsp;name: " + ((value.name == undefined) ? "undefined" : JSON.stringify(value.name)) + "<br/>"
        for(let prop in value){
           if (value.hasOwnProperty(prop) && (prop != "name") && (prop != "prototype")){
               prop_val = value[prop]
               val_str = Object.isNewObject(prop_val)? stringify_new_object_clickable_path(prop_val): stringify_value_aux(prop_val)
               result += "&nbsp;" + prop + ": " +  val_str + "<br/>"
           }
        }
        result += "}"
    }*/

    else if (typeof(value) == "object"){//beware if we didn't catch arrays above this would hit
        if (value.constructor == Job){ //must be under object clause since value might be null
            job = value;
        }
        //I can't figure out how to tell if toString is explicity defined on value. hasOwnProperty doesn't work
        if ((value instanceof Instruction$1) || (value instanceof Duration) || (value instanceof Brain) ||
            (value instanceof Human) || (value instanceof TestSuite)){
            return value.toString()
        }
        var result = "{";
        let constructor_name = value.constructor.name;
        if (constructor_name != "Object") { result += "class: " + constructor_name + ",<br/>";}
        let prop_names = Object.getOwnPropertyNames(value); //long objects like cv cause problems
        for (var prop_index = 0; prop_index < Math.min(prop_names.length, 100); prop_index++) {
            let prop_name = prop_names[prop_index];
            let prop_val = value[prop_name];
            if(prop_name == "devToolsWebContents") ; //causes error so just ignore this rare item. occurs in electron BrowserWindow instances
            else if (prop_name == "robot_status"){
                if (!job && value.job_id) { job = Job.job_id_to_job_instance(value.job_id); }
                let where_from = "";
                if (value instanceof Job)   { where_from = " on job: "   + value.name; }
                if (value instanceof Robot$1) { where_from = " on robot: " + value.name; }
                result += Dexter$1.robot_status_to_html(prop_val, where_from);
            }
            else if ((prop_name == "do_list") && job) { //must check to insure job is defined or this errors as happens when inspecting Job.job_default_params
                result += job.do_list_to_html(); //Job.do_list_to_html(value[prop])
            }
            else if (prop_name == "original_do_list"){
                result += Job.non_hierarchical_do_list_to_html(prop_val); //Job.do_list_to_html(value[prop])
            }
            else if (prop_name == "sent_instructions"){
                result += Dexter$1.sent_instructions_to_html(prop_val);
            }
            else if (prop_name == "rs_history"){ //value is instance of Dexter
                result += prop_name + ": " + Dexter$1.make_show_rs_history_button_html(value.job_id);
            }
            else {
                try{
                  result += prop_name + ": " + stringify_value_aux(prop_val, job, depth + 1) + ",<br/>";
                }
                catch(e) {} //doing window["caches"] errors so just forget about this prop and maybe others.
            }
        }
        result += "}";
        if (result == "{}") {  //as is the case with iterators
            if (is_iterator(value)) {
              result = value.toString(); //not great as might make "[object Generator]" or "[object Array Iterator]" but better than {}
            }
            else {
                 try{
                     var result = value.toString();
                     if (result == "[object Object]"){
                         if (value.constructor == Object) { result = "{}"; }
                         else { result = "{instanceof: " + stringify_value_aux(value.constructor, job, depth + 1) + "}"; }
                     }
                 }
                 catch(e) {return "{}" }
            }
        }
    }
    else {
        result = JSON.stringify(value, null, 2); //beware if a val of a field in a obj is a fn, it prints as null
        if (result == undefined){ //as happens at least for functions
            result = value.toString();
        }
        else {//as for js objects, etc.
            result = result.replace(/\{\n  /g, "{&nbsp;");
            result = result.replace(/\[\n  /g, "[&nbsp;");
            result = result.replace(/\n/g, "<br/>");
            result = result.replace(/\ \ /g, "&nbsp;&nbsp;");
        }
    }
    return result
}

//crude but guarentees fidelity with stringify_value, but that might not be what I really want.
function stringify_value_sans_html(value){
    let result = stringify_value$1(value);
    //result = replace_substrings(result, "<co"  + "de>", "") //screws up inspetion of this fn (while inspecting 'window') having '<co  de>' in it. //
    result = result.replace(/<code>/g,   "");
    //result = replace_substrings(result, "</co" + "de>", "") //
    result = result.replace(/<\/code>/g, "");
    result = result.replace(/<br\/>/g,   "\n");
    result = result.replace(/&nbsp;/g,   " ");
    return result
}
///// End CSV //////

function inspect_new_object(new_object_or_path, add_to_stack=true){ //called from Insert menu item and stringify_value
    // still causes jquery infinite error if the below is commented in.
    //if (typeof(new_object_or_path) == "string")  { return new_object_or_path }
    //else { return value_of_path(new_object_or_path) }

    let new_object = (typeof(new_object_or_path) == "string") ?
                        value_of_path$1(new_object_or_path) :
                        new_object_or_path;
    let prop_val = new_object["prototype"];
    let val_str;
    if (prop_val == undefined)             { val_str = "undefined"; }
    else if (Object.isNewObject(prop_val)) { val_str = inspect_stringify_new_object_clickable_path(prop_val); }
    else                                   { val_str = stringify_value_aux(prop_val); }
    let the_name = new_object.name;
    if ((the_name == undefined) && (new_object == Root)) { the_name = '"Root"'; }
    else if (the_name == undefined) { the_name = "undefined"; }
    else { the_name = '"' + the_name + '"'; }
    result = "{prototype: " + val_str  + "<br/>" +
             "&nbsp;name: " + the_name + "<br/>";
    for(let prop in new_object){
        if (new_object.hasOwnProperty(prop) && (prop != "name") && (prop != "prototype")){
            prop_val = new_object[prop];
            if (prop_val == undefined)             { val_str = "undefined"; }
            else if (Object.isNewObject(prop_val)) { val_str = inspect_stringify_new_object_clickable_path(prop_val); }
            else                                   { val_str = stringify_value_aux(prop_val); }
            result += "&nbsp;" + prop + ": " +  val_str + "<br/>";
        }
    }
    result += "}";
    if(add_to_stack){ //do this before computing opacity
        inspect_stack.push(new_object);
        inspect_stack_pos = inspect_stack.length - 1;
    }
    let prev_opacity = (inspect_stack_pos >= 1) ? 1 : 0.3;
    let next_opacity = (inspect_stack_pos < (inspect_stack.length - 1)) ? 1 : 0.3;
    result = "<div id='inspector_id' style='background-color:#ffd9b4;'>" +
             "&nbsp;<span             id='inspect_previous_value_id' title='Inspect previous value.' style='color:blue;font-weight:900; opacity:" + prev_opacity + ";'>&lt;</span>" +
             "&nbsp;&nbsp;&nbsp;<span id='inspect_next_value_id'     title='Inspect next value.'     style='color:blue;font-weight:900; opacity:" + next_opacity + ";'>&gt;</span>" +
             "<b style='padding-left:100px;'><i>Inspector</i></b><br/>"  +
             result + "</div>";

    setTimeout(function(){out(result, "black", true);}, 200); //give the regular return value
      //a chance to be rendered, so that the temp browser will be rendered AFTER it,
      //because otherewise the temp browser will be erased by the regular result output.
      //but beware, after the browser html is renderend, we need to set the onclicks,
      //which has a timeout too that must be longer than this timeout.
}

var inspect_stack = [];
var inspect_stack_pos = -1;
function inspect_previous_value(){
    if(inspect_stack_pos > 0) {
        inspect_stack_pos -= 1;
        inspect_new_object(inspect_stack[inspect_stack_pos], false);
    }
}

function inspect_next_value(){
        if(inspect_stack_pos < (inspect_stack.length - 1)) {
            inspect_stack_pos += 1;
            inspect_new_object(inspect_stack[inspect_stack_pos], false);
        }
}

function inspect_stringify_new_object_clickable_path(new_obj){
    let path = new_obj.objectPath();
    let id_string = path.replace(/\./g, "_") + "_path_id";
    let result = '<span id="' + id_string + '" style="color:blue; text-decoration:underline;">' + path + '</span/>';
    inspect_set_new_object_onclick(id_string, path);
    return result
}

function inspect_set_new_object_onclick(id_string, path){
    setTimeout(function(){ //we need to wait until the html is actually rendered.
        let fn = function(){ inspect_new_object(path); };
        let elts = window[id_string]; //beware, if there's more than one elt with this id, we get an HTMlCollection of the etls.
        // this is a very broken data struture that I can't even test for except with length
        if (elts == undefined) ;
        else if (elts.length){
            for(let i = 0; i < elts.length; i++) {
                elts[i].onclick = fn;
            }
        }
        else { elts.onclick = fn; } //only one
        if(window.inspect_previous_value_id){
            inspect_previous_value_id.onclick = inspect_previous_value;
        }
        if(window.inspect_next_value_id) {
            inspect_next_value_id.onclick     = inspect_next_value;
        }
    }, 1000);
}

class Duration {
    //DO NOT default minutes to anything as we need null there so that the first arg will be interprested as ms
    constructor(string_or_hours=0, minutes=0, seconds=0, milliseconds=0){ //First arg can be "12:34" for hours:mins,
                                                                         // "12:34:56" for hours:mins:secs,
                                                                         // or 123 for hours
        if (typeof(string_or_hours) == "string") { //presume "12:34"(hours and mins) or "12:34:56" hours, mins, secs
            if (is_hour_colon_minute(string_or_hours) || is_hour_colon_minute_colon_second(string_or_hours)){
                var [h, m, s] = string_or_hours.split(":");
                var secs = parseInt(h) * 60 * 60;
                secs += parseInt(m) * 60;
                if (s) { secs += parseInt(s); }
                this.milliseconds = secs * 1000; //to get milliseconds
                return
            }
        }
        else if (typeof(string_or_hours) == "number"){
                let secs = (string_or_hours * 60 * 60) + (minutes * 60) + seconds;
                this.milliseconds = (secs * 1000) + milliseconds;
                return
        }
        throw new Error("new Duration passed arg: " + string_or_hours + " which is not a number or a string of the format 12:34 or 12:34:56 ")
    }
    toString() { return this.to_source_code }

    to_source_code(){
        let total_ms  = this.milliseconds;
        let ms        = total_ms  % 1000;
        let total_sec = (total_ms - ms)   / 1000;
        let sec       = total_sec % 60;
        let total_min = (total_sec - sec) / 60;
        let min       = total_min % 60;
        let hour      = (total_min - min) / 60;
        return "new Duration(" + hour + ", " + min + ", " + sec + ", " + ms + ")"
    }

    to_seconds(){ return this.milliseconds / 1000 }
}

//Vector Class

var dde_github_issues = "https://github.com/cfry/dde/issues";

class Vector$1{
//The Vector Class contains functions for manipulating the following:
/*

 Name        |    Variable    |    Syntax    |       Example        |     Description
 point               U           [x, y, z]          [1, 2, 3]           Defines a 3D position. Default units are microns.
 vector              Uab         [x, y, z]          [1, 2, 3]           Defines a 3D direction and magnitude. Uab = Ua-Ub.
 unit vector         V           [x, y, z]        [0, .707, .707]       Defines a 3D direction. Magnitude is scaled to be 1.
 plane               P           [x, y, z, d]    [0, .707, .707, 5]     Unit vector perpendicular to plane and distance from the origin.
 
*/

    static size (a){
    	
    	if (a === undefined){
        	dde_error("input to function 'size()' is undefined", "red");
            return
        }
        if (a === null){
        	dde_error("input to function 'size()' is null:");
            return
        }
        
        if (typeof(a) == "number"){
        	return 1
        }
		//debugger
    	let temp_size = a.length;
        
        
        if (temp_size === undefined){
        	return 1
        }else {
        /*
        	let a_temp = a
        	let result = []
        	let i = 0
        	while (a_temp !== undefined){
        		i++
        		result.push(a_temp.length)
            	a_temp = a[i]
        	}*/
        	return temp_size
        }
    }
    
    static max (array){
    	let dim = Vector$1.matrix_dimensions(array);
        let max = -Infinity;
        for(let i = 0; i < dim[0]; i++){
        	for(let j = 0; j < dim[0]; j++){
        		if(array[i][j] > max){
                	max = array[i][j];
                }
        	}
        }
        return max
    }

    static min (array){
    	let dim = Vector$1.matrix_dimensions(array);
        let min = Infinity;
        for(let i = 0; i < dim[0]; i++){
        	for(let j = 0; j < dim[0]; j++){
        		if(array[i][j] < max){
                	min = array[i][j];
                }
        	}
        }
        return min
    }
    
    
    //Vector.size([0, 0, 1])

    //Public
    //Returns the unit vector of the input
    //Works for both 2D and 3D vectors
    static normalize(vector){
    	let magnitude = Vector$1.magnitude(vector);
        return Vector$1.divide(vector, magnitude)
    }
    
    
    //Public
    //Returns the dot product of two arrays
    //Will work for arrays of any equal length
    static dot (vector_A, vector_B){
    	var A_size = Vector$1.size(vector_A);
        var B_size = Vector$1.size(vector_B);
        var point, plane;
        var product = 0;
        if (A_size === B_size){
        	if(A_size == 1){
            	return vector_A*vector_B
            }
        	for(var i = 0; i < Math.min(A_size, B_size); i++){
        		product += vector_A[i] * vector_B[i];
        	}
        	
        }else {
        	if (A_size === 3 && B_size === 4){
            	point = [vector_A[0], vector_A[1], vector_A[2], 1];
                plane = vector_B;
            }else {
            	if (A_size === 4 && B_size === 3){
                	point = [vector_B[0], vector_B[1], vector_B[2], 1];
                	plane = vector_A;
                }else {
                	if (A_size === 3 && B_size === 4){
                		point = [vector_A[0], vector_A[1], vector_A[2], 1];
                		plane = vector_B;
                    }else {
                    	if(vector_A[0].length == vector_B.length){
                        	for(var i = 0; i < vector_A[0].length; i++){
        						product += vector_A[0][i] * vector_B[i];
        					}
                            return product
                        }else {
                        	if(vector_B[0].length == vector_A.length){
                            	for(var i = 0; i < vector_B[0].length; i++){
        							product += vector_A[i] * vector_B[0][i];
        						}
                            }else {
                				dde_error("Reconsider the input size in the function 'Vector.dot()'", "red");
                    			return null
                            }
                        }
                	}
                }
            }
            
        	for(var i = 0; i < 4; i++){
        		product += point[i] * plane[i];
        	}
        }
        return product
    }
    
    //Public
    //Returns the cross product of two vectors
    //Vectors must be equal lengths
    static cross (vector_A, vector_B){
		var A_size = vector_A.length;
    	var B_size = vector_B.length;
    	var mat_size = Math.min(A_size, B_size);
    	var vector_C = new Array(mat_size);
    	for(var i = 0; i < mat_size; i++){
      		vector_C[i] = (vector_A[(i + 1) % mat_size] * vector_B[(i + 2) % mat_size]) - (vector_A[(i + 2) % mat_size] * vector_B[(i + 1) % mat_size]);
    	}
      	return vector_C
	}
    
    //*************************************************
    
    
	//Public
    //This is used to add vectors of equal length
    //Can also add scalars to each element in vector
    //unlimited number of inputs args
    static add(...args){
        let temp_args = Convert.deep_copy(args);
        var sum = temp_args[0];
        
    	for(let i = 1; i < Vector$1.size(args); i++){
        	if (Vector$1.size(args[i]) === Vector$1.size(sum)){
				if (Vector$1.size(sum) === 1){
                	sum += args[i];
                }else {
                	for(let j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i][j];
                	}
                }
            	
            }else {
            	if (Vector$1.size(args[i]) === 1){
                	for(let j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i];
                	}
                }else {
                	if (Vector$1.size(sum) === 1){
                    var temp = sum;
                    sum = args[i];
                		for(var j = 0; j < Vector$1.size(sum); j++){
                			sum[j] += temp;
                        }
                	}else {
                    	let dim_1 = Vector$1.matrix_dimensions(sum);
                        let dim_2 = Vector$1.matrix_dimensions(args[i]);
                        if(dim_1[0] == 1 && dim_1[1] == dim_2[1]){
                        	let shift_vector = sum;
                            sum = args[i];
                            for(let m = 0; m < dim_2[0]; m++){
                            	sum[m] = Vector$1.add(sum[m], shift_vector);
                            }
                        }else if(dim_2[0] == 1 && dim_2[1] == dim_1[1]){
                        	let shift_vector = args[i];
                            for(let m = 0; m < dim_1[0]; m++){
                            	sum[m] = Vector$1.add(sum[m], shift_vector);
                            }
                        }else {
                    		dde_error("Error: inputs to function 'add()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                        }
                    }
                }
            }
        }
        return sum
        
    }
    
    
    
    //Public
    //This is used to subtract vectors of equal length
    //Can also add scalars to each element in vector
    //unlimited number of inputs args
    static subtract (...args){
        let temp_args = Convert.deep_copy(args);
        var sum = temp_args[0];
        
    	for(var i = 1; i < Vector$1.size(temp_args); i++){
        	if (Vector$1.size(temp_args[i]) === Vector$1.size(sum)){
				if (Vector$1.size(sum) === 1){
                	sum -= temp_args[i];
                }else {
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] -= temp_args[i][j];
                	}
                }
            	
            }else {
            	if (Vector$1.size(temp_args[i]) === 1){
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] -= temp_args[i];
                	}
                }else {
                	if (Vector$1.size(sum) === 1){
                    var temp = sum;
                    sum = temp_args[i];
                		for(var j = 0; j < Vector$1.size(sum); j++){
                			sum[j] -= temp;
                        }
                	}else {
                    	dde_error("inputs to function 'subtract()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                    }
                }
            }
        }
        return sum
    }
        
    //Public
    //This should be re-written in a more clever way....
    static multiply(...args){
        if (args === undefined){
        	dde_error("Error: the function 'Vector.multiply' has undefined inputs");
        }
        
        let temp_args = Convert.deep_copy(args);
        var product = temp_args[0];

    	for(var i = 1; i < Vector$1.size(args); i++){
        	let temp_arg = args[i];
            if(temp_arg === undefined) {
                dde_error("Vector.multiply passed an arg that was undefined in: " + args);
			}
        	var temp_arg_size = Vector$1.size(temp_arg);
        	var product_size = Vector$1.size(product);
        	if (product_size === 1 && temp_arg_size === 1){
        		product *= temp_arg;
        	}else {
        		if (temp_arg_size === product_size){
					for(var j = 0; j < temp_arg_size; j++){
            			var arg_element_length = Vector$1.size(temp_arg[j]);
                    	var product_element_length = Vector$1.size(product[j]);
            			if (arg_element_length === 1 && arg_element_length === 1){
							product[j] *= temp_arg[j];
						}else {
                    		if (arg_element_length === product_element_length){
								for(var k = 0; k < arg_element_length; k++){
									product[j][k] *= temp_arg[j][k];
								}
                        	}else {
                        		if (arg_element_length === 1){
                            		for(var k = 0; k < product_element_length; k++){
                                		product[j][k] *= temp_arg[j];
                                	}
                            	}
                            	if (product_element_length === 1){
                            		var product_element_val = product[j];
                            		for(var k = 0; k < arg_element_length; k++){
                                		product[j][k] = temp_arg[j][k] * product_element_val;
                                	}
                            	}
                        	}
            			}
          			}
        		}else {
                	if (Vector$1.size(temp_arg) === 1){
                		for(var j = 0; j < Vector$1.size(product); j++){ 
                        	if (Vector$1.size(product[j]) === 1){
                        		product[j] *= temp_arg;
                        	}else {
                        		for(var k = 0; k < product[j].length; k++){
                            		product[j][k] *= temp_arg;
                            	}
                        	}
                        }
                	}else {
                		if (Vector$1.size(product) === 1){
                    		var temp = product;
                    		product = temp_arg.slice(0);
                			for(var j = 0; j < Vector$1.size(product); j++){
                				if (Vector$1.size(product[j]) === 1){
                        			product[j] *= temp;
                        		}else {
                        			for(var k = 0; k < product[j].length; k++){
                            			product[j][k] *= temp;
                            		}
                        		}
                    		}
                		}else {
                    		dde_error("inputs to function 'multiply()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                    	}
                	}
            	}
        	}
    	}
        return product
    }
    /*
    var pose_1 = [[1, 0, 0, 10], 
			     [0, 1, 0, 20],
			     [0, 0, 1, 30],
			     [0, 0, 0,  1]]
		var pose_2 = [[1, 0, 0, 100], 
			     [0, 1, 0, 200],
			     [0, 0, 1, 300],
			     [0, 0, 0,  1]]
		var result_1 = Vector.matrix_multiply(pose_1, pose_2)
        var result_2 = Vector.matrix_multiply(pose_2, pose_1)
    */
    
    //Public
    static divide (...args){
        if (args === undefined){
        	dde_error("the function 'Vector.divide' has undefined inputs");
        }
        
        let temp_args = Convert.deep_copy(args);
        var quotient = temp_args[0];

    	for(var i = 1; i < Vector$1.size(args); i++){
        	let temp_arg = args[i];
        	var temp_arg_size = Vector$1.size(temp_arg);
        	var quotient_size = Vector$1.size(quotient);
        	if (quotient_size === 1 && temp_arg_size === 1){
        		quotient /= temp_arg;
        	}else {
        		if (temp_arg_size === quotient_size){
					for(var j = 0; j < temp_arg_size; j++){
            			var arg_element_length = Vector$1.size(temp_arg[j]);
                    	var quotient_element_length = Vector$1.size(quotient[j]);
            			if (arg_element_length === 1 && arg_element_length === 1){
							quotient[j] /= temp_arg[j];
						}else {
                    		if (arg_element_length === quotient_element_length){
								for(var k = 0; k < arg_element_length; k++){
									quotient[j][k] /= temp_arg[j][k];
								}
                        	}else {
                        		if (arg_element_length === 1){
                            		for(var k = 0; k < quotient_element_length; k++){
                                		quotient[j][k] /= temp_arg[j];
                                	}
                            	}
                            	if (quotient_element_length === 1){
                            		var quotient_element_val = product[j];
                            		for(var k = 0; k < arg_element_length; k++){
                                		quotient[j][k] = quotient_element_val / temp_arg[j][k];
                                	}
                            	}
                        	}
            			}
          			}
        		}else {
                	if (Vector$1.size(temp_arg) === 1){
                		for(var j = 0; j < Vector$1.size(quotient); j++){ 
                        	if (Vector$1.size(quotient[j]) === 1){
                        		quotient[j] /= temp_arg;
                        	}else {
                        		for(var k = 0; k < quotient[j].length; k++){
                            		quotient[j][k] /= temp_arg;
                            	}
                        	}
                        }
                	}else {
                		if (Vector$1.size(quotient) === 1){
                    		var temp = quotient;
                    		quotient = temp_arg.slice(0);
                			for(var j = 0; j < Vector$1.size(quotient); j++){
                				if (Vector$1.size(quotient[j]) === 1){
                        			quotient[j] = temp / quotient[j];
                        		}else {
                        			for(var k = 0; k < quotient[j].length; k++){
                            			quotient[j][k] = temp / quotient[j][k];
                            		}
                        		}
                    		}
                		}else {
                    		dde_error("inputs to function 'divide()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                    	}
                	}
            	}
        	}
    	}
        return quotient
    }
    /*
    var pose_1 = [[1, 0, 0, 10], 
			     [0, 1, 0, 20],
			     [0, 0, 1, 30],
			     [0, 0, 0,  1]]
		var pose_2 = [[1, 0, 0, 100], 
			     [0, 1, 0, 200],
			     [0, 0, 1, 300],
			     [0, 0, 0,  1]]
		var result_1 = Vector.matrix_divide(pose_1, pose_2)
        var result_2 = Vector.matrix_divide(pose_2, pose_1)
    */
    
    /*
    debugger
    Vector.average([1, 2, 3])
    */


    static average(...args){
    	let temp_args = Convert.deep_copy(args);
        let sum;
        if(temp_args.length == 1){
        	sum = temp_args[0][0];
        	for(let i = 1; i < temp_args[0].length; i++){
            	sum += temp_args[0][i];
            }
            return sum/temp_args[0].length
        }
        
        sum = temp_args[0];
    	for(var i = 1; i < Vector$1.size(args); i++){
        	if (Vector$1.size(args[i]) === Vector$1.size(sum)){
				if (Vector$1.size(sum) === 1){
                	sum += args[i];
                }else {
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i][j];
                	}
                }
            	
            }else {
            	if (Vector$1.size(args[i]) === 1){
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i];
                	}
                }else {
                	if (Vector$1.size(sum) === 1){
                    var temp = sum;
                    sum = args[i];
                		for(var j = 0; j < Vector$1.size(sum); j++){
                			sum[j] += temp;
                        }
                	}
                }
            }
        }
        return Vector$1.divide(sum, args.length)
    }
    //Vector.average([2, 2], [4, 4])
    
   //private fns here
    
	
    
    //Public
	static distance(...args) {
    	/*SYNTAX:
        	Kin.distance(POINT)        -> distance between point and origin / magnitude of VECTOR
            Kin.distance(POINT, POINT) -> distance between points
            Kin.distance(PLANE, POINT) -> distance between plane and point
            Kin.distance(POINT, PLANE) -> distance between point and point
        */
        var temp_args = Convert.deep_copy(args);
        
        
        switch(Vector$1.size(args)){
            
        	case 1:
            	var a = temp_args[0];
            	switch(Vector$1.size(a)){
					case 2:
                    	//magnitude of 2D vector
                    	return Math.hypot(a[0], a[1])
                 	case 3:
						//magnitude of 3D vector
						return Math.hypot(a[0], a[1], a[2])
					case 4:
						//distance between plane and origin
						return a[4]
					default:
						dde_error("single vector input to function 'distance()' must have a size of 2, 3, or 4", "red");
						return null
             	}
                
                
            case 2:
            	var a = args[0].slice(0);
                var b = args[1].slice(0);
            	var aL = Vector$1.size(a);
                var bL = Vector$1.size(b);
                var point;
                var plane;
            	if (aL === 2 && bL === 2){
                	return Math.hypot(a[0] - b[0], a[1] - b[1])
                }
            	if (aL === 3 && bL === 3){
                	return Math.hypot(a[0] - b[0], a[1] - b[1], a[2] - b[2])
                }else {
                	if (aL === 3 && bL === 4){
                    	point = a;
                        plane = b;
                    }else {
                    	if (aL === 4 && bL === 3){
                        	plane = a;
                            point = b;
                        }else {
                        	dde_error("inputs for function 'distance()' must be a point, plane, or vector", "red");
                            return null
                        }
                    }
					return dist_point_to_plane(point, plane)
                }
                
            case 3:
                point = args[0].slice(0);
                var line_point_A = args[1].slice(0);
                var line_point_B = args[2].slice(0);
                if (Vector$1.size(point) === 3 && Vector$1.size(line_point_A) === 3 && Vector$1.size(line_point_B) === 3){
            		return dist_point_to_line(point, line_point_A, line_point_B)
                }
            	break
            
            default:
            	let sum = 0;
            	for(var i = 0; i < temp_args.length; i++){
                	sum += temp_args[i] * temp_args[i];
                }
            	return Math.sqrt(sum)
        }

    }
    
    static magnitude(vector){
    	if(vector.length == undefined){
        	return vector
        }
    	let sum = 0;
        for(var i = 0; i < vector.length; i++){
          sum += vector[i] * vector[i];
        }
      	return Math.sqrt(sum)
    }
    
    //Public
    static complete_plane(plane, point){
    	if (Vector$1.size(plane) === 3){
        	var vector = Vector$1.normalize(plane);
        	var d = Vector$1.dot(vector, point);
            vector.push(d);
            return vector
    	}else {
        	return plane
        }
    }
    
    //Public
    static project_vector_onto_plane(vector, plane){
		var short_plane = [plane[0], plane[1], plane[2]];
		var term1 = Vector$1.dot(vector, short_plane);
    	var term2 = Math.pow(Vector$1.distance(short_plane), 2);
		return Vector$1.subtract(vector, Vector$1.multiply(term1 / term2, short_plane))
	}

    static project_point_onto_line(point, line_point_1, line_point_2){
    	let U1a = line_point_1;
        let U1b = point;
        let U2a = line_point_1;
        let U2b = line_point_2;
        let U1ba = Vector$1.subtract(U1b, U1a);
        let U2ba = Vector$1.subtract(U2b, U2a);
        let proj = Vector$1.add(Vector$1.multiply(Vector$1.dot(U2ba, U1ba) /
                                 Math.pow(Vector$1.magnitude(U2ba), 2),
                                 U2ba), U2a);
        return proj
    }
    
    /*
    debugger
    Vector.sign(0)
    */
    static sign(array){
		let dim = Vector$1.matrix_dimensions(array);
        let sign_array;
        if(dim[1] == 0){
        	if(array >= 0){
            	return 1
            }else {
            	return -1
            }
        }else if(dim[0] == 1){
        	sign_array = Vector$1.make_matrix(dim)[0];
        	for(let i = 0; i < dim[1]; i++){
            	if(array[i] >= 0){
            		sign_array[i] = 1;
            	}else {
            		sign_array[i] = -1;
            	}
            }
        }else {
        	sign_array = Vector$1.make_matrix(dim);
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; i++){
            		if(array[i][j] >= 0){
            			sign_array[i][j] = 1;
            		}else {
            			sign_array[i][j] = -1;
            		}
                }
            }
        }
        return sign_array
	}
    
    //Public
    static points_to_plane(Ua, Ub, Uc){
    	var Uba = Vector$1.subtract(Ub, Ua);
        var Uca = Vector$1.subtract(Uc, Ua);
        Vector$1.round(Vector$1.normalize(Uba),10);
        Vector$1.round(Vector$1.normalize(Uca),10);
        /*if (Vector.is_equal(Uba_norm, Uca_norm, 10) || Vector.is_equal(Vector.multiply(-1, Uba_norm), Uca_norm, 10)){
        	return Kin.base_rotation_to_plane(0, Vector.normalize(Uba))
        }*/
        var vector = Vector$1.normalize(Vector$1.cross(Uba, Uca));
        
        
        return Vector$1.complete_plane(vector, Ua)
    }
	
    
    //Public 
    static round(number_or_array, digits = 1){
    	if(number_or_array == null) {return null}
    	let mulitplier = Math.pow(10, digits);
        if(typeof(number_or_array) == "number"){
        	return Math.round(mulitplier * number_or_array) / mulitplier
        }else {
        	let temp_array = Convert.deep_copy(number_or_array);
            let dim = Vector$1.matrix_dimensions(number_or_array);
            if(dim[0] == 1){
            	for(var i = 0; i < number_or_array.length; i++){
                    let elt = temp_array[i];
                    if(elt != null) {
                		temp_array[i] = Math.round(mulitplier * elt) / mulitplier;
					}
                }
            }else {
        		for(var i = 0; i < dim[0]; i++){
            		for(var j = 0; j < dim[1]; j++){
                        let elt = temp_array[i][j];
                        if(elt != null) {
            				temp_array[i][j] = Math.round(mulitplier * elt) / mulitplier;
						}
            		}
            	}
            }
            return temp_array
        }
    }

    
    
    //Public
    static is_equal(array1, array2, tolerance = 14, tolerance_type = "decimal_places"){
        let result = true;
        if(array1 == null) {
            if(array2 == null) { return true }
            else { return false }
        }
        else if (array2 == null) { return false }
        else if (array1.length !== array2.length){
        	return false
        }else {
        	let array1_temp = Convert.deep_copy(array1);
            let array2_temp = Convert.deep_copy(array2);
        	switch(tolerance_type){
            	case "decimal_places":
        			array1_temp = Vector$1.round(array1_temp, tolerance);
                	array2_temp = Vector$1.round(array2_temp, tolerance);
					if(array1_temp.length == undefined){
						if(array1_temp == array2_temp){
							return true
						}else {
							return false
						}
					}
					for(var i = 0; i < array1_temp.length; i++){
						if (JSON.stringify(array1_temp[i]) != JSON.stringify(array2_temp[i])){
							return false
						}
					}
					break
                case "absolute":
					if (Vector$1.max(Vector$1.abs(Vector$1.subtract(array1_temp, array2_temp))) > tolerance){
						return false
					}
					break
                
                case "percent_difference":
					if(tolerance > 1){

						warning("Percent difference tolerance should be within 0 and 1.</br>Input of "
						+ tolerance + " changed to " + (tolerance/100) + ".");
						tolerance = tolerance/100;
					}

					let avg = Vector$1.average(array1_temp, array2_temp);
					if (Vector$1.max(Vector$1.divide(Vector$1.abs(Vector$1.subtract(array1_temp, array2_temp)), avg)) > tolerance){
						return false
					}
					break
                
                case "magnitude":
					if (Vector$1.max(Vector$1.magnitude(Vector$1.subtract(array1_temp, array2_temp))) > tolerance){
						return false
					}
					break
                
                default:
					dde_error("Vector.is_equal does not support input of \"" + tolerance_type
					+ "\".</br>Supported tolerance types: \"decimal_places\", \"absolute\", \"percent_difference\", and \"magnitude\"");
                
            }
                
        }
        return result
    }
    
    
    
    //Public
    static shorten(matrix){
    	return [matrix[0], matrix[1], matrix[2]]
    }
    
    //Public
    //Returns the smallest angle between two vectors with range 0-180 degrees
    static angle(vector_A, vector_B){
    	//in case one of the vectors is a complete plane
    	var short_A = Vector$1.shorten(vector_A);
        var short_B = Vector$1.shorten(vector_B);
        var result;
    	if (Vector$1.is_equal(short_A, short_B)){
        	result =  0;
        }else {
        	if (Vector$1.distance(Vector$1.add(short_A, short_B)) === 0){
            	result = 180;
            }else {
            	var result = atan2d(Vector$1.distance(Vector$1.cross(short_A, short_B)), Vector$1.dot(short_A, short_B));
        	}
        }
        return result
    }
    
    //Public
    //Returns angle between two vectors with range -180 to 180
    static signed_angle(vector_A, vector_B, plane){
    	let epsilon = 1e-14;
    	//checks if vectors lie in plane
        var cross_product = Vector$1.normalize(Vector$1.cross(Vector$1.shorten(vector_A), Vector$1.shorten(vector_B)));
        var short_plane = Vector$1.shorten(plane);
        
        if (!(Vector$1.is_equal(cross_product, short_plane) ||
             Vector$1.is_equal(
                             Vector$1.multiply(-1, cross_product),
                             short_plane))
			&&
			(cross_product[0] === NaN)){
            dde_error("input vectors do not lie in plane");
        }
    	
    	var guess_angle = Vector$1.angle(vector_A, vector_B);
        var guess_vector = Vector$1.round(Vector$1.rotate(vector_A, plane, guess_angle), 3);
        var test_vector = Vector$1.round([vector_B[0], vector_B[1], vector_B[2]], 3);
        
        if (Vector$1.magnitude(Vector$1.subtract(guess_vector, test_vector)) < epsilon){
        //if (Vector.magnitude(Vector.subtract(guess_vector, test_vector)) < Vector.magnitude(Vector.subtract(guess_vector, Vector.multiply(-1, test_vector)))){
        	return guess_angle
        }else {
        	return -guess_angle
        }
    }
    
   
    
    
    //Public
    //returns intersection of two planes, a plane and a line, and two lines
    static intersection(...args){
    	switch (Vector$1.size(args)){
        	case 2:
        		//Assumes intersection between two planes
                return Vector$1.normalize(Vector$1.cross(args[1], args[2]))
        	case 3:
            	//Assumes intersection between plane and line
            	var line_vector, complete_point, alpha, intersection_point;
            	
            	for(var i = 0; i < 3; i++){
                	if (Vector$1.size(args[i]) === 4){
                    	var plane = args[i].slice(0);
                        var point_A = args[(i + 1) % 3].slice(0);
                        var point_B = args[(i + 2) % 3].slice(0);
                    }
                    
                }
                if (plane === undefined){
                    dde_error("inputs to the function 'Vector.intersection' must be a plane and two points or two planes");
                }
                if (Vector$1.size(point_A) !== 3 || Vector$1.size(point_B) !== 3){
                	dde_error("inputs to the function 'Vector.intersection' must be a plane and two points or two planes");
                }
                
                //Assumes plane is passed in along with a line defined by a point and unit vector
                if (Vector$1.distance(point_A) === 1 && Vector$1.distance(point_B) !== 1){
                	line_vector = point_A;
                    complete_point = [point_B[0], point_B[1], point_B[2], 1];
                    alpha = -Vector$1.dot(plane, complete_point) / (Math.pow(line_vector[0], 2), Math.pow(line_vector[1], 2), Math.pow(line_vector[2], 2));
                    intersection_point = Vector$1.add(Vector$1.multiply(alpha, line_vector), point_B);
                    return intersection_point
                }
                
                //Assumes plane is passed in along with a line defined by a point and unit vector
                if (Vector$1.distance(point_A) !== 1 && Vector$1.distance(point_B) === 1){
                	line_vector = point_B;
                    complete_point = [point_A[0], point_A[1], point_A[2], 1];
                    alpha = -Vector$1.dot(plane, complete_point) / (Math.pow(line_vector[0], 2), Math.pow(line_vector[1], 2), Math.pow(line_vector[2], 2));
                    intersection_point = Vector$1.add(Vector$1.multiply(alpha, line_vector), point_A);
                    return intersection_point
                }
                
                //Assumes plane is passed in along with a line defined by two points
                line_vector = Vector$1.subtract(point_B, point_A);
                complete_point = [point_A[0], point_A[1], point_A[2], 1];
                alpha = -Vector$1.dot(plane, complete_point) / (Math.pow(line_vector[0], 2), Math.pow(line_vector[1], 2), Math.pow(line_vector[2], 2));
                intersection_point = Vector$1.add(Vector$1.multiply(alpha, line_vector), point_A);
                return [intersection_point, alpha]
            
            	
        }
    }

    //Public
    //rotates a vector in 3D space on a plane by angle theta
    //will also rotate a point about a line by substituting the line's vector in plane and its point in point
    static rotate(vector, plane, theta, point = [0, 0, 0]){
    	plane =  Vector$1.normalize(Vector$1.shorten(plane));
        let dim = Vector$1.matrix_dimensions(vector);
        let result, short_vector, term_1, term_2;
        if (dim[1] == 3 && dim[0] != 1){
        	result = Vector$1.make_matrix(dim[0], 1);
            for(var i = 0; i < vector.length; i++){
            	short_vector = Vector$1.subtract(vector[i], point);
                if(Vector$1.is_equal(short_vector, point)){
            		result[i] = short_vector;
            	}else {
                	term_1 = Vector$1.multiply(cosd(theta), short_vector);
            		term_2 = Vector$1.multiply(sind(theta), Vector$1.cross(Vector$1.shorten(plane), short_vector));
                	result[i] = Vector$1.add(Vector$1.multiply(Vector$1.magnitude(short_vector),  Vector$1.normalize(Vector$1.add(term_1, term_2))), point);
                }
            }
        }else {
        	short_vector = Vector$1.subtract(Vector$1.shorten(vector), point);
            if(Vector$1.magnitude(Vector$1.cross(short_vector, plane)) < 1e-10){
            	return short_vector
            }
            term_1 = Vector$1.multiply(cosd(theta), short_vector);
            term_2 = Vector$1.multiply(sind(theta), Vector$1.cross(Vector$1.shorten(plane), short_vector));
            result = Vector$1.add(Vector$1.multiply(Vector$1.magnitude(short_vector),  Vector$1.normalize(Vector$1.add(term_1, term_2))), point);
        }
        return result
    }


    static three_points_to_transformation(point_list, pointA = [0, 0, 0], pointB = [1, 0, 0], pointC = [0, 1, 0], U4){
		
        let points_plane = Vector$1.points_to_plane(pointA, pointB, pointC);
        let dist = Vector$1.distance(U4, points_plane);
        out("input plane and dist:");
        out(points_plane);
        out(dist);
        if(dist < 0){
        	points_plane = Vector$1.multiply(-1, points_plane);
        }
        if(!Vector$1.is_equal(points_plane, [0, 0, 1], 4)){
        	let intersection_axis = Vector$1.cross(points_plane, [0, 0, 1]);
            let phi = Vector$1.signed_angle([1, 0, 0], points_plane, intersection_axis);
            for(var i = 0; i < point_list.length; i++){
				point_list[i] = Vector$1.rotate(point_list[i], [0, 0, 1], phi);
			}
        }
        
    	let rot_plane = Vector$1.cross(points_plane, [0, 0, 1]);
    	let theta = Vector$1.signed_angle([0, 0, 1], points_plane, rot_plane);
        
        let new_point_list = [];

        let sum = [0, 0, 0];
        if (point_list[0].length === 2){
        	for(var i = 0; i < point_list.length; i++){
				new_point_list[i] = Vector$1.rotate([point_list[i][0], point_list[i][1], 0], rot_plane, theta);
        		drawing_centroid = Vector$1.add(sum, new_point_list[i]);
			}
        }
        if (point_list[0].length === 3){
        	for(var i = 0; i < point_list.length; i++){
				point_list[i] = [-point_list[i][0], point_list[i][1], point_list[i][2]]; 
			}
        	for(var i = 0; i < point_list.length; i++){
				new_point_list.push(Vector$1.rotate([point_list[i][0], point_list[i][1], point_list[i][2]], rot_plane, theta));
        		drawing_centroid = Vector$1.add(sum, new_point_list[i]);
			}
        }
        drawing_centroid = Vector$1.multiply(drawing_centroid, 1 / point_list.length);
        let plane_centroid = Vector$1.multiply(Vector$1.add(pointA, pointB, pointC), 1 / 3);
        let distance_vector = Vector$1.subtract(plane_centroid, drawing_centroid);
        for(var i = 0; i < point_list.length; i++){
			new_point_list[i] = Vector$1.add(new_point_list[i], distance_vector);
		}
    
    	return [new_point_list, Vector$1.shorten(points_plane)]
    	//[x*cos(theta)+dx, y*cos(theta)+dy, (Py*y + Pz*x)*sin(theta)+dz]
	}

    static max(vector){
    	let dim = Vector$1.matrix_dimensions(vector);
        let temp_max;
        
        if(dim[0] == 1){
        	if(dim[1] == 0){
            	return vector
            }
        	temp_max = -Infinity;
        	for(let i = 0; i < dim[1]; i++){
            	if(vector[i] > temp_max){
                	temp_max = vector[i];
                }
            }
        }else {
        	temp_max = Vector$1.make_matrix(1, dim[1], -Infinity)[0];
        	for(let j = 0; j < dim[1]; j++){
            	for(let i = 0; i < dim[0]; i++){
            		if(vector[i][j] > temp_max[j]){
                		temp_max[j] = vector[i][j];
                	}
            	}
        	}
    	}
    	return temp_max
    }
    /*
    debugger
    var result = Vector.max([[1, 2, 10], [4, 5, 6]])
    var result = Vector.max([1, 2, 10])
    */

    static min(vector){
    	let dim = Vector$1.matrix_dimensions(vector);
        let temp_min;
        if(dim[0] == 1){
        	if(dim[1] == 0){
            	return vector
            }
        	temp_min = Infinity;
        	for(let i = 0; i < dim[1]; i++){
            	if(vector[i] < temp_min){
                	temp_min = vector[i];
                }
            }
        }else {
        	temp_min = Vector$1.make_matrix(1, dim[1], Infinity)[0];
        	for(let j = 0; j < dim[1]; j++){
            	for(let i = 0; i < dim[0]; i++){
            		if(vector[i][j] < temp_min[j]){
                		temp_min[j] = vector[i][j];
                	}
            	}
        	}
    	}
    	return temp_min
    }
    /*
    var result = Vector.min([[1, 2, 10], [4, 5, 6]])
    var result = Vector.min([1, 2, 10])
    */

    static is_NaN(vector){
    	let dim = Vector$1.matrix_dimensions(vector);
        if(dim[0] == 1 && dim[1] == 0){return isNaN(vector)}
        if(dim[0] == 1){
        	for(let i = 0; i < dim[1]; i++){
        		if(isNaN(vector[i])){return true}
        	}
        }else {
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; j++){
        			if(isNaN(vector[i][j])){return true}
                }
        	}
        }
        return false
    }

    static is_NaN_null_or_undefined(vector){
        let dim = Vector$1.matrix_dimensions(vector);
        if(dim[0] == 1 && dim[1] == 0){return is_NaN_null_or_undefined(vector)}
        if(dim[0] == 1){
            for(let i = 0; i < dim[1]; i++){
                if(is_NaN_null_or_undefined(vector[i])){return true}
            }
        }else {
            for(let i = 0; i < dim[0]; i++){
                for(let j = 0; j < dim[1]; j++){
                    if(is_NaN_null_or_undefined(vector[i][j])){return true}
                }
            }
        }
        return false
    }

    static sum (array){
    	let dim = Vector$1.matrix_dimensions(array);
        let sum = 0;
        if(dim[0] == 1){
        	for(let i = 0; i < dim[1]; i++){
            	sum += array[i];
            }
        }
        return sum
    }
    
    /*
    debugger
    Vector.abs([[-10, 9], [-8, -6],[-1, -5]])
    Vector.abs([[-10, 9], [-8, -6]])
    */
    static abs(array){
    	let dim = Vector$1.matrix_dimensions(array);
        let array_copy = Convert.deep_copy(array);
        
        if(dim[1] == 0){
        	return Math.abs(array)
        }else if(dim[0] == 1){
        	array_copy = Vector$1.make_matrix(dim)[0];
        	for(let i = 0; i < dim[1]; i++){
            	array_copy[i] = Math.abs(array[i]);
            }
        }else {
        	array_copy = Vector$1.make_matrix(dim);
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; j++){
            		array_copy[i][j] = Math.abs(array[i][j]);
                }
            }
        }
        return array_copy
    }
    /*
    var myvec = [1, -4, 5, -4]
    Vector.abs(myvec)
    out(myvec)
    */

    static pow(array, power){
    	let dim = Vector$1.matrix_dimensions(array);
        let array_copy = Convert.deep_copy(array);
        
        if(dim[1] == 0){
        	return Math.pow(array, power)
        }else if(dim[0] == 1){
        	array_copy = Vector$1.make_matrix(dim)[0];
        	for(let i = 0; i < dim[1]; i++){
            	array_copy[i] = Math.pow(array[i], power);
            }
        }else {
        	array_copy = Vector$1.make_matrix(dim);
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; j++){
            		array_copy[i][j] = Math.pow(array[i][j], power);
                }
            }
        }
        return array_copy
    }
    
    
    
    /*
    Vector.is_greater([4, 4, 5], [4, 3, 5])
    */
    static is_greater(vector_1, vector_2){
        let state = false;
        for(let i = 0; i < vector_1.length; i++){
        	if(vector_1[i] > vector_2[i]){
            	state = true;
                break
            }
        }
        return state
    }

    static is_less(vector_1, vector_2){
        let state = false;
        for(let i = 0; i < vector_1.length; i++){
        	if(vector_1[i] < vector_2[i]){
            	state = true;
                break
            }
        }
        return state
    }

    static quadratic_formula(a, b, c){
    	let det = Math.sqrt(Math.pow(b, 2) -4*a*c);
        if(isNaN(det)){
        	dde_error("Vector.quadratic_formula does not support imaginery roots yet");
        }
        return [(-b+det)/(2*a), (-b-det)/(2*a)]
    }

    static root_mean_square(vector){
    	if(vector.length){
        	let sum = 0;
        	for(let i = 0; i < vector.length; i++){
            	sum += vector[i] * vector[i];
        	}
            return Math.sqrt(sum / vector.length)
        }else {
        	return vector
        }
    }
    
    
    
	//Cubic Formula by Alexander Shtuchkin
	//https://stackoverflow.com/questions/27176423/function-to-solve-cubic-equation-analytically
    static cuberoot(x){
    	let y = Math.pow(Math.abs(x), 1/3);
    	return x < 0 ? -y : y;
	}

    static solveCubic(a, b, c, d) {
    	if (Math.abs(a) < 1e-8) { // Quadratic case, ax^2+bx+c=0
        	a = b; b = c; c = d;
        	if (Math.abs(a) < 1e-8) { // Linear case, ax+b=0
            	a = b; b = c;
            	if (Math.abs(a) < 1e-8) // Degenerate case
                	return [];
            	return [-b/a];
        	}

        	var D = b*b - 4*a*c;
        	if (Math.abs(D) < 1e-8)
            	return [-b/(2*a)];
        	else if (D > 0)
            	return [(-b+Math.sqrt(D))/(2*a), (-b-Math.sqrt(D))/(2*a)];
        	return [];
    	}

    	// Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)
    	var p = (3*a*c - b*b)/(3*a*a);
    	var q = (2*b*b*b - 9*a*b*c + 27*a*a*d)/(27*a*a*a);
    	var roots;

    	if (Math.abs(p) < 1e-8) { // p = 0 -> t^3 = -q -> t = -q^1/3
        	roots = [cuberoot(-q)];
    	} else if (Math.abs(q) < 1e-8) { // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0
        	roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);
    	} else {
        	var D = q*q/4 + p*p*p/27;
        	if (Math.abs(D) < 1e-8) {       // D = 0 -> two roots
            	roots = [-1.5*q/p, 3*q/p];
        	} else if (D > 0) {             // Only one real root
            	var u = cuberoot(-q/2 - Math.sqrt(D));
            	roots = [u - p/(3*u)];
        	} else {                        // D < 0, three roots, but needs to use complex numbers/trigonometric solution
            	var u = 2*Math.sqrt(-p/3);
            	var t = Math.acos(3*q/p/u)/3;  // D < 0 implies p < 0 and acos argument in [-1..1]
            	var k = 2*Math.PI/3;
            	roots = [u*Math.cos(t), u*Math.cos(t-k), u*Math.cos(t-2*k)];
        	}
    	}

    	// Convert back from depressed cubic
    	for (var i = 0; i < roots.length; i++)
        	roots[i] -= b/(3*a);

    	return roots;
	}

    static linspace(start, end, n){
		let result = Vector$1.make_matrix(1, n);
    	let step = (end-start)/(n-1);
    	for(let i = 0; i < n; i++){
    		result[i] = start+i*step;
    	}
    	return result
	}
    
    

	//Private
    //This is used to prevent functions from altering outside arrays
    static deep_copy(arg){
        return JSON.parse(JSON.stringify(arg))
    	/*if (typeof(arg) == "number"){
        	return arg
        }else{
        	let result = []
        	for(var i = 0; i < arg.length; i++){
            	let elt = arg[i]
                if (typeof(elt) !== "number"){
                    elt = elt.slice(0)
                }
                result.push(elt)
            }
            return result
        }*/
    }


    //*******************************************
    //Orientation representation conversions:

    static euler_angles_to_DCM(euler_angles = [0, 0, 0], euler_sequence = "ZYX"){
    	//default could be ZX'Z'
        let dim = Vector$1.matrix_dimensions(euler_angles);
        if(dim[0] == 2 && dim[1] == 3){
        	euler_sequence = euler_angles[1];
            euler_angles = euler_angles[0];
        }
        
        var result = [];
        let elt = "";
        for(let char of euler_sequence){
        	if(elt.length == 1){
            	if(char == "'"){
                	elt += char;
                    result.push(elt);
                    elt = "";
                }else {
                	result.push(elt);
                    elt = char;
                }
            }else {
            	elt = char;
            } 
        }
        if((elt != "'") && (elt.length == 1)){
        	result.push(elt);
        }
          
        
    	let DCM = Vector$1.identity_matrix(3);
        if(result.length == 3){
        	for(var i = 0; i < 3; i++){
        		DCM = Vector$1.rotate_DCM(DCM, result[i], euler_angles[i]); 
            }
        }
        //return Vector.transpose(DCM)
        return DCM
    }
    //Convert.angles_to_DCM([Convert.degrees_to_arcseconds(45), Convert.degrees_to_arcseconds(45), 0])
    /* 
    debugger
    Vector.DCM_to_euler_angles(Vector.transpose(Vector.euler_angles_to_DCM([30, 0, 0])))
    */

    static DCM_to_euler_angles(DCM, euler_sequence = "ZYX"){
    	let euler_angles = [0, 0, 0];
        switch(euler_sequence){
        	
        	case "ZYZ":
            	//euler_angles[0] = atan2d(DCM[0][1], DCM[0][0])
                //euler_angles[1] = asind(DCM[0][2])
                //euler_angles[2] = atan2d(DCM[1][2], DCM[2][2])
            	if(DCM[2][2] == 0){
                	dde_error("Singularity in DCM_to_Euler_Angles for euler_sequence: " + euler_sequence + " and DCM:");
                    out(Vector$1.round(DCM,3));
                }
            	euler_angles[0] = atan2d(DCM[2][0], DCM[2][1]);
                euler_angles[1] = acosd(DCM[2][2]);
                euler_angles[2] = atan2d(DCM[0][2], DCM[1][2]);
            
            case "XYZ":
            	let x_prime, y_prime;
                
            	let DCM_0 = DCM.slice();
                out("DCM_0:");
                out(Vector$1.round(DCM_0, 3));
                x_prime = Vector$1.transpose(Vector$1.pull(DCM_0, [0, 2], [0, 0]));
                let x_prime_proj = Vector$1.project_vector_onto_plane(x_prime, [0, 0, 1]);
                euler_angles[2] = Vector$1.signed_angle(x_prime_proj, [1, 0, 0], [0, 0, 1]);
                
                let DCM_1 = Vector$1.rotate_DCM(DCM_0, [0, 0, 1], -euler_angles[2]);
                out("DCM_1:");
                out(Vector$1.round(DCM_1, 3));
                x_prime = Vector$1.transpose(Vector$1.pull(DCM_1, [0, 2], [0, 0]));
                euler_angles[1] = Vector$1.signed_angle(x_prime, [1, 0, 0], [0, 1, 0]);
                
                //debugger
                let DCM_2 = Vector$1.rotate_DCM(DCM_1, [0, 1, 0], -euler_angles[1]);
                out("DCM_2:");
                out(Vector$1.round(DCM_2, 3));
                x_prime = Vector$1.transpose(Vector$1.pull(DCM_2, [0, 2], [0, 0]));
                Vector$1.transpose(Vector$1.pull(DCM_2, [0, 2], [2, 2]));
                y_prime = Vector$1.transpose(Vector$1.pull(DCM_2, [0, 2], [1, 1]));
                euler_angles[0] = Vector$1.signed_angle(y_prime, [0, 1, 0], [1, 0, 0]);
                
            break
            
            
            default:
           		dde_error("The euler sequence of " + euler_sequence + " is not supported.</br>If you wish to have this specific sequence implimented post an Issue on the DDE Github:</br>" + dde_github_issues);
        }
        
        return euler_angles
    }

    static quaternion_to_DCM(quaternion = [1, 0, 0, 0]){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/
    	let w = quaternion[0];
        let x = quaternion[1];
        let y = quaternion[2];
        let z = quaternion[3];
        
        let DCM = Vector$1.make_matrix(3,3);
        DCM[0][0] = 1-2*y*y-2*z*z;
        DCM[1][0] = 2*x*y+2*z*w;
        DCM[2][0] = 2*x*z-2*y*w;
        DCM[0][1] = 2*x*y-2*z*w;
        DCM[1][1] = 1-2*x*x-2*z*z;
        DCM[2][1] = 2*y*z+2*x*w;
        DCM[0][2] = 2*x*z+2*y*w;
        DCM[1][2] = 2*y*z-2*x*w;
        DCM[2][2] = 1-2*x*x-2*y*y;
        return DCM
    }


    static DCM_to_quaternion(DCM = Vector$1.make_DCM()){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/
    	let trace = DCM[0][0] + DCM[1][1] + DCM[2][2];
        let S, w, x, y, z, quaternion;
        if(trace > 0){
        	S = Math.sqrt(1.0 + trace) * 2;
			w = .25 * S;
            x = (DCM[2][1] - DCM[1][2]) / S;
            y = (DCM[2][1] - DCM[1][2]) / S;
            z = (DCM[2][1] - DCM[1][2]) / S;
        }else if(DCM[0][0] > DCM[1][1] && DCM[0][0] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[0][0] - DCM[1][1] - DCM[2][2]);
            w = (DCM[2][1] - DCM[1][2]) / S;
            x = .25 * S;
            y = (DCM[0][1] + DCM[1][0]) / S;
            z = (DCM[0][2] + DCM[2][0]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[1][1] - DCM[0][0] - DCM[2][2]);
            w = (DCM[0][2] - DCM[2][0]) / S;
            x = (DCM[0][1] + DCM[1][0]) / S;
            y = .25 * S;
            z = (DCM[1][2] + DCM[2][1]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[2][2] - DCM[0][0] - DCM[1][1]);
            w = (DCM[1][0] - DCM[0][1]) / S;
            x = (DCM[0][2] + DCM[2][0]) / S;
            y = (DCM[1][2] + DCM[2][1]) / S;
            z = .25 * S;
        }
    	quaternion = [w, x, y, z];
        return quaternion
    }

    static euler_angles_to_quaternion(euler_angles = [0, 0, 0], euler_sequence = "XYZ"){
        return Vector$1.DCM_to_quaternion(Vector$1.euler_angles_to_DCM(euler_angles, euler_sequence))
    }

    static quaternion_to_euler_angles(quaternion = [1, 0, 0, 0], euler_sequence = "XYZ"){
        return Vector$1.DCM_to_euler_angles(Vector$1.quaternion_to_DCM(quaternion), euler_sequence)
    }

    static get_orientation_format(orientation){
    	let result;
        let dim = Vector$1.matrix_dimensions(orientation);
        if(dim[0] == 1 && dim[1] == 3){
            result = "euler_angles";
        }else if(dim[0] == 2 && dim[1] == 3){
            result = "euler_angles";
        }else if(dim[0] == 1 && dim[1] == 4){
            result = "quaternion";
        }else if(dim[0] == 3 && dim[1] == 3){
        	result = "DCM";
        }else {
        	dde_error("orientation is improperly formatted");
        }
        return result
    }
    
    //Euler_angles Utilities:
    static make_euler_angles(orientation = [0, 0, 0], euler_sequence = "XYZ"){
    	let format = Vector$1.get_orientation_format(orientation);
        let angles;
        switch(format){
        	case "euler_angles":
            	angles = [orientation, euler_sequence];
            break
            case "quaternion":
            	angles = Vector$1.quaternion_to_euler_angles(orientation, euler_sequence);
            break
            case "DCM":
            	angles = Vector$1.DCM_to_euler_angles(orientation, euler_sequence);
            break
        }
        return angles
    }

    static make_quaternion(orientation = [1, 0, 0, 0]){
    	let format = Vector$1.get_orientation_format(orientation);
        let quat;
        switch(format){
        	case "euler_angles":
            	quat = Vector$1.euler_angles_to_quaternion(orientation);
            break
            case "quaternion":
            	quat = orientation;
            break
            case "DCM":
            	quat = Vector$1.DCM_to_quaternion(orientation);
            break
        }
        return quat
    }
    
    //DCM Utilities:
    static make_DCM (orientation = [0, 0, 0]){
    	let type = Vector$1.get_orientation_format(orientation);
        let DCM;
        switch(type){
        	case "euler_angles":
            	DCM = Vector$1.euler_angles_to_DCM(orientation);
            break
            case "quaternion":
            	DCM = Vector$1.quaternion_to_DCM(orientation);
            break
            case "DCM":
            	DCM = orientation;
            break
        }
        return DCM
    }
    
    static get_x_vector_from_DCM(DCM = Vector$1.make_DCM()){
    	return Vector$1.transpose(Vector$1.pull(DCM, [0, 2], [0, 0]))
    }

    static get_y_vector_from_DCM(DCM = Vector$1.make_DCM()){
    	return Vector$1.transpose(Vector$1.pull(DCM, [0, 2], [1, 1]))
    }

    static get_z_vector_from_DCM(DCM = Vector$1.make_DCM()){
    	return Vector$1.transpose(Vector$1.pull(DCM, [0, 2], [2, 2]))
    }
    
    //Pose Utilities:
    static get_x_vector_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [0, 0]))
    }

    static get_y_vector_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [1, 1]))
    }

    static get_z_vector_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [2, 2]))
    }

    static get_xyz_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [3, 3]))
    }

    static get_DCM_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [0, 2]))
    }
    
    /**********************************************************
    //Matrix Math
    ***********************************************************/
    /*
    Vector.make_matrix(3,"tilt")
    debugger
    Vector.make_matrix(1,0)
    */

    static make_matrix(nRows, nColumns, value = 0){
    	let result = [];
        if(nColumns === undefined){
        	if(Vector$1.matrix_dimensions(nRows)[1] == 2){
            	nColumns = nRows[1];
                nRows = nRows[0];
            }else {
        		nColumns = nRows;
            }
        }
        if(nColumns === "tilt"){
        	result = Vector$1.make_matrix(nRows);
            for(let i = 0; i < nRows; i++){
            	for(let j = 0; j < nRows; j++){
            		result[i][j] = 2*nRows-i-j-2;
            	}
            }
            return result
        }
        if(nRows < 1 || nColumns < 1){
        	dde_error("matrix dimensions must be greater than 1");
        }
        
    	for(var i = 0; i < nRows; i++){
    		result.push([]);
    		for(var j = 0; j < nColumns; j++){
    			result[i].push(value);
    		}
    	}
    	return result
	}
    //Vector.make_matrix(10, 7)
    //Vector.make_matrix(3)
    //Vector.make_matrix(3, 2, 1)
    //Vector.make_matrix([2,3])
    


	static transpose(matrix){
    	let height = matrix.length;
        let width  = matrix[0].length;
        if(width == undefined){
        	width = height;
        	height = 1;
            matrix = [matrix];
        }
        let result = Vector$1.make_matrix(width, height);
        for(var i = 0; i < width; i++){
        	for(var j = 0; j < height; j++){
        		result[i][j] = matrix[j][i];
        	}
        }
        if(result.length == 1){
        	return result[0]
        }else {
        	return result
        }
    }
    /*
    var v = [1, 2, 3]
    v = Vector.transpose(v)
    var v2 = Vector.transpose(v)
    */
    
    static matrix_multiply(...args){
    	if (args === undefined){
        	dde_error("the function 'Vector.matrix_multiply' has undefined inputs");
        }
        let temp_args = Convert.deep_copy(args);
        let matrix_A = temp_args[0];
        for(let i = 1; i < temp_args.length; i++){
            let matrix_B = temp_args[i];
            matrix_A = multiply_two_matrices(matrix_A, matrix_B);
    	}
        return matrix_A
    }
    
    static matrix_divide(...args){
    	if (args === undefined){
        	dde_error("the function 'Vector.matrix_multiply' has undefined inputs");
        }
        let temp_args = Convert.deep_copy(args);
        let matrix_A = temp_args[0];
        for(var i = 1; i < temp_args.length; i++){
            let matrix_B = temp_args[i];
            matrix_A = divide_two_matrices(matrix_A, matrix_B);
    	}
        return matrix_A
    }
    
    
    static determinant(matrix){
    	let result;
    	let dim = Vector$1.matrix_dimensions(matrix);
        if (dim[0] == 2 && dim[1] == 2){
        	result = matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0];
        }else if(dim[0] == 3 && dim[1] == 3){
        	//Source: https://en.wikipedia.org/wiki/Determinant#n_.C3.97_n_matrices
        	let a, b, c, d, e, f, g, h, i;
            a = matrix[0][0];
            b = matrix[0][1];
            c = matrix[0][2];
            d = matrix[1][0];
            e = matrix[1][1];
            f = matrix[1][2];
            g = matrix[2][0];
            h = matrix[2][1];
            i = matrix[2][2];
        	result = a*(e*i-f*h)-b*(d*i-f*g)+c*(d*h-e*g);
        }else if(dim[0] == 4 && dim[1] == 4){
        	// Source: http://www.cg.info.hiroshima-cu.ac.jp/~miyazaki/knowledge/teche23.html
            let a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44;
            a11 = matrix[0][0];
            a12 = matrix[0][1];
            a13 = matrix[0][2];
            a14 = matrix[0][3];
            a21 = matrix[1][0];
            a22 = matrix[1][1];
            a23 = matrix[1][2];
            a24 = matrix[1][3];
            a31 = matrix[2][0];
            a32 = matrix[2][1];
            a33 = matrix[2][2];
            a34 = matrix[2][3];
            a41 = matrix[3][0];
            a42 = matrix[3][1];
            a43 = matrix[3][2];
            a44 = matrix[3][3];
            
            result = a11*a22*a33*a44 + a11*a23*a34*a42 + a11*a24*a32*a43
            		+a12*a21*a34*a43 + a12*a23*a31*a44 + a12*a24*a33*a41
                    +a13*a21*a32*a44 + a13*a22*a34*a41 + a13*a24*a31*a42
                    +a14*a21*a33*a42 + a14*a22*a31*a43 + a14*a23*a32*a41
                    -a11*a22*a34*a43 - a11*a23*a32*a44 - a11*a24*a33*a42
                    -a12*a21*a33*a44 - a12*a23*a34*a41 - a12*a24*a31*a43
                    -a13*a21*a34*a42 - a13*a22*a31*a44 - a13*a24*a32*a41
                    -a14*a21*a32*a43 - a14*a22*a33*a41 - a14*a23*a31*a42;
        }else {
        	dde_error("determinants of matricies with these dimensions are not supported yet");
        }
        return result
    }
    /*
    var my_matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    Vector.determinant(my_matrix)
    
    var mat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    var det = Vector.determinant(mat)
    
    var mat = [[3, 2, 1.7, 1.5],[4.5, 5, 4.1, 1.9], [1.1, 8.5, 9, 8], [3, 9, 9, 10]]
    var det = Vector.determinant(mat)
    */
    
    /////////////////////////////////////////////////////////////////////////////////////

    
    static inverse(matrix){
    	let result;
    	let dim = Vector$1.matrix_dimensions(matrix);
        if (dim[0] == 2 && dim[1] == 2){
        	result = [[matrix[1][1], -matrix[1][0]], [-matrix[0][1], matrix[0][0]]];
            result = Vector$1.multiply(1/Vector$1.determinant(matrix), result);
        }else if(dim[0] == 3 && dim[1] == 3){
        	//Source: University of Massachusetts Lowell - MECH 5960 Mechanics of Composite Materials
        	let a, b, c, d, e, f, g, h, i, A, B, C, D, E, F, G, H, I;
            a = matrix[0][0];
            b = matrix[0][1];
            c = matrix[0][2];
            d = matrix[1][0];
            e = matrix[1][1];
            f = matrix[1][2];
            g = matrix[2][0];
            h = matrix[2][1];
            i = matrix[2][2];
            
            A =  Vector$1.determinant([[e, f], [h, i]]);
            B = -Vector$1.determinant([[d, f], [g, i]]);
            C =  Vector$1.determinant([[d, e], [g, h]]);
            D = -Vector$1.determinant([[b, c], [h, i]]);
            E =  Vector$1.determinant([[a, c], [g, i]]);
            F = -Vector$1.determinant([[a, b], [g, h]]);
            G =  Vector$1.determinant([[b, c], [e, f]]);
            H = -Vector$1.determinant([[a, c], [d, f]]);
            I =  Vector$1.determinant([[a, b], [d, e]]);
            
            result = [[A, B, C], [D, E, F], [G, H, I]];
            result = Vector$1.multiply(1/Vector$1.determinant(matrix), result);
        }else if(dim[0] == 4 && dim[1] == 4){
        	// Source: http://www.cg.info.hiroshima-cu.ac.jp/~miyazaki/knowledge/teche23.html
            let a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44;
            let b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34, b41, b42, b43, b44;
            a11 = matrix[0][0];
            a12 = matrix[0][1];
            a13 = matrix[0][2];
            a14 = matrix[0][3];
            a21 = matrix[1][0];
            a22 = matrix[1][1];
            a23 = matrix[1][2];
            a24 = matrix[1][3];
            a31 = matrix[2][0];
            a32 = matrix[2][1];
            a33 = matrix[2][2];
            a34 = matrix[2][3];
            a41 = matrix[3][0];
            a42 = matrix[3][1];
            a43 = matrix[3][2];
            a44 = matrix[3][3];
        	
            b11 = a22*a33*a44 + a23*a34*a42 + a24*a32*a43 - a22*a34*a43 - a23*a32*a44 - a24*a33*a42;
            b12 = a12*a34*a43 + a13*a32*a44 + a14*a33*a42 - a12*a33*a44 - a13*a34*a42 - a14*a32*a43;
            b13 = a12*a23*a44 + a13*a24*a42 + a14*a22*a43 - a12*a24*a43 - a13*a22*a44 - a14*a23*a42;
            b14 = a12*a24*a33 + a13*a22*a34 + a14*a23*a32 - a12*a23*a34 - a13*a24*a32 - a14*a22*a33;
            
            b21 = a21*a34*a43 + a23*a31*a44 + a24*a33*a41 - a21*a33*a44 - a23*a34*a41 - a24*a31*a43;
            b22 = a11*a33*a44 + a13*a34*a41 + a14*a31*a43 - a11*a34*a43 - a13*a31*a44 - a14*a33*a41;
            b23 = a11*a24*a43 + a13*a21*a44 + a14*a23*a41 - a11*a23*a44 - a13*a24*a41 - a14*a21*a43;
            b24 = a11*a23*a34 + a13*a24*a31 + a14*a21*a33 - a11*a24*a33 - a13*a21*a34 - a14*a23*a31;
            
            b31 = a21*a32*a44 + a22*a34*a41 + a24*a31*a42 - a21*a34*a42 - a22*a31*a44 - a24*a32*a41;
            b32 = a11*a34*a42 + a12*a31*a44 + a14*a32*a41 - a11*a32*a44 - a12*a34*a41 - a14*a31*a42;
            b33 = a11*a22*a44 + a12*a24*a41 + a14*a21*a42 - a11*a24*a42 - a12*a21*a44 - a14*a22*a41;
            b34 = a11*a24*a32 + a12*a21*a34 + a14*a22*a31 - a11*a22*a34 - a12*a24*a31 - a14*a21*a32;
            
            b41 = a21*a33*a42 + a22*a31*a43 + a23*a32*a41 - a21*a32*a43 - a22*a33*a41 - a23*a31*a42;
            b42 = a11*a32*a43 + a12*a33*a41 + a13*a31*a42 - a11*a33*a42 - a12*a31*a43 - a13*a32*a41;
            b43 = a11*a23*a42 + a12*a21*a43 + a13*a22*a41 - a11*a22*a43 - a12*a23*a41 - a13*a21*a42;
            b44 = a11*a22*a33 + a12*a23*a31 + a13*a21*a32 - a11*a23*a32 - a12*a21*a33 - a13*a22*a31;
            
            result = [[b11, b12, b13, b14], [b21, b22, b23, b24], [b31, b32, b33, b34], [b41, b42, b43, b44]];
            result = Vector$1.multiply(1/Vector$1.determinant(matrix),result);
        }else {
        	result = matrix_invert(matrix);
        }
        return result
   }
   
   /*
   var mat = Vector.identity_matrix(3)
   var mat = [[3, 2, 1.7, 1.5],[4.5, 5, 4.1, 1.9], [1.1, 8.5, 9, 8], [3, 9, 9, 10]]
   var det = Vector.determinant(mat)
   var imat = Vector.inverse(mat)
   
   var my_DCM = 
   
   var det = Vector.determinant(imat)
   var mat2 = Vector.inverse(imat)
   */
    
    /*
    var mat = []
    Vector.matrix_dimensions(mat)
    debugger
    Vector.matrix_dimensions(3)
    */
    
    static matrix_dimensions(matrix){
        let width;
        let height;
        if(matrix != null) {
            height = matrix.length;
        }
        if(height == undefined){
        	return [1, 0]
        }
        if(height == 0){
        	width = 0;
        	height = 0;
            return [height, width]
        }
        let mat0 = matrix[0];
        if(mat0 != null) {
        	width  = mat0.length;
		}
		if(width == undefined){
			width = height;
			height = 1;
		}
        return [height, width]
    }
    //Vector.matrix_dimensions([10, 20, 30])
    //Vector.matrix_dimensions([[10], [20], [30]])
    
    static properly_define_point(points){
    	//a proper point takes the following form: [[x], [y], [z], [1]]
        //for points: [[x1, x2, ..., xn], [y1, y2, ..., yn], [z1, z2, ..., zm=n] [1, 1, ..., 1]]
    	let dim = Vector$1.matrix_dimensions(points);
        let proper_points = Convert.deep_copy(points);
        if(dim[0] == 1){
        	proper_points = Vector$1.transpose(proper_points);
            proper_points.push([1]);
            return proper_points
        }else {
        	if(dim[1] == 3){
            	for(var i = 0; i < dim[0]; i++){
                	proper_points[i].push(1);
                }
                proper_points = Vector$1.transpose(proper_points);
            	return proper_points
            }else {
            	if(dim[0] == 3){
                	//let ones = Vector.add(Vector.make_matrix(1, dim[0])[0], 1)
                    proper_points.push([1]);
                    return proper_points
                }
            }
        }
    }
    /*
    Vector.properly_define_point([10, 20, 30])
    Vector.properly_define_point([[10], [20], [30]])
    debugger
    Vector.properly_define_point([[10, 20, 30], [10, 20, 30], [10, 20, 30]])
    */
	
    static properly_define_vector(vectors){
    	//a proper point takes the following form: [[x], [y], [z], [1]]
        //for points: [[x1, x2, ..., xn], [y1, y2, ..., yn], [z1, z2, ..., zm=n] [1, 1, ..., 1]]
    	let dim = Vector$1.matrix_dimensions(vectors);
        let proper_vectors = Convert.deep_copy(vectors);
        if(dim[0] == 1){
        	proper_vectors = Vector$1.transpose(proper_vectors);
            if(dim[1] == 3){
            	proper_vectors.push([0]);
            }
            return proper_vectors
        }else {
        	if(dim[1] == 3){
            	for(var i = 0; i < dim[0]; i++){
                	proper_vectors[i].push(0);
                }
                proper_vectors = Vector$1.transpose(proper_vectors);
            	return proper_vectors
            }else {
            	if(dim[0] == 3){
                	//let ones = Vector.add(Vector.make_matrix(1, dim[0])[0], 1)
                    proper_vectors.push([0]);
                    return proper_vectors
                }
            }
        }
    }
    
    static make_dcm(x_vector, y_vector, z_vector){
    	warning("This function is being depricated.</br>Please replace with Vector.make_dcm_from_3_vectors, Vector.euler_angles_to_DCM, or Vector.quaternion_to_DCM");
        let dcm = Vector$1.identity_matrix(3);
        
        if(x_vector == undefined && y_vector == undefined && z_vector == undefined){
        	return dcm
        }else if(x_vector == undefined && y_vector != undefined && z_vector != undefined){
        	x_vector = Vector$1.cross(y_vector, z_vector);
        }else if(x_vector != undefined && y_vector == undefined && z_vector != undefined){
        	y_vector = Vector$1.cross(z_vector, x_vector);
        }else if(x_vector != undefined && y_vector != undefined && z_vector == undefined){
        	z_vector = Vector$1.cross(x_vector, y_vector);
        }
        
        x_vector = Vector$1.normalize(x_vector);
        y_vector = Vector$1.normalize(y_vector);
        z_vector = Vector$1.normalize(z_vector);
        
        dcm = Vector$1.insert(dcm, Vector$1.transpose(x_vector), [0, 0]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(y_vector), [0, 1]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(z_vector), [0, 2]);
        
        return dcm
    }
    
    
    static make_DCM_from_3_vectors(x_vector, y_vector, z_vector){
        let dcm = Vector$1.identity_matrix(3);
        
        if(x_vector == undefined && y_vector == undefined && z_vector == undefined){
        	return dcm
        }else if(x_vector == undefined && y_vector != undefined && z_vector != undefined){
        	x_vector = Vector$1.cross(y_vector, z_vector);
        }else if(x_vector != undefined && y_vector == undefined && z_vector != undefined){
        	y_vector = Vector$1.cross(z_vector, x_vector);
        }else if(x_vector != undefined && y_vector != undefined && z_vector == undefined){
        	z_vector = Vector$1.cross(x_vector, y_vector);
        }
        
        x_vector = Vector$1.normalize(x_vector);
        y_vector = Vector$1.normalize(y_vector);
        z_vector = Vector$1.normalize(z_vector);
        
        dcm = Vector$1.insert(dcm, Vector$1.transpose(x_vector), [0, 0]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(y_vector), [0, 1]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(z_vector), [0, 2]);
        
        return dcm
    }

    /* obsolete because it uses Convert.
	static make_pose(position = [0, 0, 0], orientation = [0, 0, 0], scale_factor = 1, sequence = "ZYX"){
		let dim = Vector.matrix_dimensions(orientation)
        let DCM
        let s = scale_factor
        if(dim[0] == 1 && dim[1] == 3){
        	//Euler Angle
            DCM = Convert.angles_to_DCM(orientation, sequence)
        }else if(dim[0] == 1 && dim[1] == 4){
            //Quaternion
            DCM = Convert.quat_to_DCM(orientation)
        }else if(dim[0] == 3 && dim[1] == 3){
        	//DCM
            DCM = orientation
        }else{
        	dde_error("orientation is improperly formatted")
        }
        
        //Please tell me there's a better way to do this:
        let pose = [[s*DCM[0][0], s*DCM[0][1], s*DCM[0][2], position[0]],
        			[s*DCM[1][0], s*DCM[1][1], s*DCM[1][2], position[1]],
                    [s*DCM[2][0], s*DCM[2][1], s*DCM[2][2], position[2]],
                    [0, 0, 0, 1]]
        return pose
	}*/

    static make_pose(position = [0, 0, 0], orientation = [0, 0, 0], scale_factor = 1, sequence = "ZYX"){
        let dim = Vector$1.matrix_dimensions(orientation);
        let DCM;
        let s = scale_factor;
        if(dim[0] == 1 && dim[1] == 3){
            //Euler Angle
            DCM = Vector$1.euler_angles_to_DCM(orientation, sequence);
        }else if(dim[0] == 1 && dim[1] == 4){
            //Quaternion
            DCM = Vector$1.quaternion_to_DCM(orientation);
        }else if(dim[0] == 3 && dim[1] == 3){
            //DCM
            DCM = orientation;
        }else {
            dde_error("orientation is improperly formatted");
        }

        //Please tell me there's a better way to do this:
        let pose = [[s*DCM[0][0], s*DCM[0][1], s*DCM[0][2], position[0]],
            [s*DCM[1][0], s*DCM[1][1], s*DCM[1][2], position[1]],
            [s*DCM[2][0], s*DCM[2][1], s*DCM[2][2], position[2]],
            [0, 0, 0, 1]];
        return pose
    }

    
    static identity_matrix(size){
    	let result = Vector$1.make_matrix(size, size);
        for(var i = 0; i < size; i++){
        	result[i][i] = 1;
        }
        return result
    }
    //var im = Vector.identity_matrix(4)
    //var det = Vector.determinant(im)
    
    static rotate_DCM(DCM = [[1, 0, 0],[0, 1, 0],[0, 0, 1]], axis_of_rotation, angle){
    	let trans_matrix = Vector$1.identity_matrix(3);
        let x_vector, y_vector, z_vector;
    	switch(axis_of_rotation){
        	case "X":
            	trans_matrix[1][1] = cosd(angle);
                trans_matrix[2][2] = cosd(angle);
                trans_matrix[2][1] = sind(angle);
                trans_matrix[1][2] = -sind(angle);
                break
            case "Y":
            	trans_matrix[0][0] = cosd(angle);
                trans_matrix[2][2] = cosd(angle);
                trans_matrix[0][2] = sind(angle);
                trans_matrix[2][0] = -sind(angle);
            	break
            case "Z":
            	trans_matrix[0][0] = cosd(angle);
                trans_matrix[1][1] = cosd(angle);
                trans_matrix[1][0] = sind(angle);
                trans_matrix[0][1] = -sind(angle);
            	break
            case "X'":
            	x_vector = [DCM[0][0], DCM[1][0], DCM[2][0]];
            	DCM = Vector$1.rotate_DCM(DCM, x_vector, angle);
            	break
           	case "Y'":
            	y_vector = [DCM[0][1], DCM[1][1], DCM[2][1]];
            	DCM = Vector$1.rotate_DCM(DCM, y_vector, angle);
            	break
            case "Z'":
            	z_vector = [DCM[0][2], DCM[1][2], DCM[2][2]];
            	DCM = Vector$1.rotate_DCM(DCM, z_vector, angle);
            	break
            default:
            	x_vector = [DCM[0][0], DCM[1][0], DCM[2][0]];
                y_vector = [DCM[0][1], DCM[1][1], DCM[2][1]];
                z_vector = [DCM[0][2], DCM[1][2], DCM[2][2]];
                x_vector = Vector$1.rotate(x_vector, axis_of_rotation, angle);
                y_vector = Vector$1.rotate(y_vector, axis_of_rotation, angle);
                z_vector = Vector$1.rotate(z_vector, axis_of_rotation, angle);
                DCM = Vector$1.transpose([x_vector, y_vector, z_vector]);
                return DCM
        }
        return Vector$1.matrix_multiply(DCM, trans_matrix)
    }
    /*
    var mat = Vector.rotate_DCM(Vector.identity_matrix(3), [1, 0, 0], Convert.degrees_to_arcseconds(90))
    var det = Vector.determinant(mat)
    */
    static rotate_pose(pose, axis_of_rotation, angle, point_of_rotation = [0, 0, 0]){
    	if(Vector$1.is_pose(pose) == false){
        	dde_error("pose is not properly formatted");
        }
    	let DCM = Vector$1.pull(pose, [0, 2], [0, 2]);
        DCM = Vector$1.rotate_DCM(DCM, axis_of_rotation, angle);
        let axis;
        switch(axis_of_rotation){
        	case "X":
            	axis = [1, 0, 0];
                break
            case "Y":
            	axis = [0, 1, 0];
            	break
            case "Z":
            	axis = [0, 0, 1];
            	break
            case "X'":
            	axis = [DCM[0][0], DCM[1][0], DCM[2][0]];
            	break
           	case "Y'":
            	axis = [DCM[0][1], DCM[1][1], DCM[2][1]];
            	break
            case "Z'":
            	axis = [DCM[0][2], DCM[1][2], DCM[2][2]];
            	break
            default:
            	axis = axis_of_rotation;
            }
        let position = Vector$1.transpose(Vector$1.pull(pose, [0, 2], 3));
        position = Vector$1.rotate(position, axis, angle, point_of_rotation);
        return Vector$1.make_pose(position, DCM)
    }

	/*
	static quaternion_interpolation(quaternion){
    	THREE.QuaternionLinearInterpolant()
        THREE.Quaternion
    }
    */

    static is_pose(pose){
    	let dim = Vector$1.matrix_dimensions(pose);
        if (!(dim[0] == 4 && dim[1] == 4)){
        	return false
        }
        
        let short, short_mag;
        short = [pose[0][0], pose[1][0], pose[2][0]];
        short_mag = Vector$1.magnitude(short);
        if (Vector$1.round(short_mag, 10) != 1){
        	return false
        }
        short = [pose[0][1], pose[1][1], pose[2][1]];
        short_mag = Vector$1.magnitude(short);
        if (Vector$1.round(short_mag, 10) != 1){
        	return false
        }
        short = [pose[0][2], pose[1][2], pose[2][2]];
        short_mag = Vector$1.magnitude(short);
        if (Vector$1.round(short_mag, 10) != 1){
        	return false
        }
        
        let DCM = Vector$1.pull(pose, [0, 2], [0, 2]);
        if (!Vector$1.is_equal(Vector$1.determinant(DCM), 1, 10)){
        	return false
        }
        
        if (pose[3][3] != 1){
        	return false
        }
        
        if (!((pose[3][0] == 0) && (pose[3][1] == 0) && (pose[3][2] == 0))){
        	return false
        }
        
        return true
    }
    /*
    var my_pose = Vector.make_pose()
    var state = Vector.is_pose(my_pose)
    
    var my_pose = Vector.make_pose([10, 20, 30], [Convert.degrees_to_arcseconds(45), 0, 0], "ZX'Z'")
    var state = Vector.is_pose(my_pose)
    */
    
    
    /*
    static place(matrix, row, column){
    	let dim = Vector.matrix_dimensions(matrix)
        let row_lower, row_upper, col_lower, col_upper
        if (Vector.size(row) == 1){
        	row_lower = row
            row_upper = row
        }else if (Vector.size(row) == 2){
        	row_lower = row[0]
            row_upper = row[1]
        }else{
        	dde_error("row has invalid dimensions")
        }
        if (Vector.size(column) == 1){
        	col_lower = column
            col_upper = column
        }else if (Vector.size(column) == 2){
        	col_lower = column[0]
            col_upper = column[1]
        }else{
        	dde_error("column has invalid dimensions")
        }
        if ((row_lower < 0) || (row_upper > dim[0]) || (col_lower < 0) || (col_upper > dim[1])){
        	dde_error("indeces exceed matrix dimensions")
        }
        
        let result = Vector.make_matrix(row_upper-row_lower+1, col_upper-col_lower+1)
        for(var i = row_lower; i < row_upper+1; i++){
        	for(var j = col_lower; j < col_upper+1; j++){
        		result[i-row_lower][j-col_lower] = matrix[i][j]
        	}
        }
        return result
    }
    */
    
    
    static pull(matrix, row, column){
    	let dim = Vector$1.matrix_dimensions(matrix);
        if(dim[0] == 1){
        	matrix = [matrix];
        }
        let row_lower, row_upper, col_lower, col_upper;
        if (Vector$1.size(row) == 1){
        	row_lower = row;
            row_upper = row;
        }else if (Vector$1.size(row) == 2){
        	row_lower = row[0];
            row_upper = row[1];
        }else {
        	dde_error("row has invalid dimensions");
        }
        if (Vector$1.size(column) == 1){
        	col_lower = column;
            col_upper = column;
        }else if (Vector$1.size(column) == 2){
        	col_lower = column[0];
            col_upper = column[1];
        }else {
        	dde_error("column has invalid dimensions");
        }
        if ((row_lower < 0) || (row_upper > dim[0]) || (col_lower < 0) || (col_upper > dim[1])){
        	dde_error("indeces exceed matrix dimensions");
        }
        
        let result = Vector$1.make_matrix(row_upper-row_lower+1, col_upper-col_lower+1);
        for(var i = row_lower; i < row_upper+1; i++){
        	for(var j = col_lower; j < col_upper+1; j++){
        		result[i-row_lower][j-col_lower] = matrix[i][j];
        	}
        }
        if(Vector$1.matrix_dimensions(result)[0] == 1){
        	return result[0]
        }
        return result
    }
    //Vector.pull([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2], [1, 2])
    
    
    static insert(big_matrix, small_matrix, location = [0, 0]){
    	let big_dim = Vector$1.matrix_dimensions(big_matrix);
        let small_dim = Vector$1.matrix_dimensions(small_matrix);
        let result = big_matrix;
        let small_i, small_j;
        
        for(let i = location[0]; (i < location[0]+small_dim[0]) && (i < big_dim[0]); i++){
        	for(let j = location[1]; (j < location[1]+small_dim[1]) && (j < big_dim[1]); j++){
        		small_i = i-location[0];
                small_j = j-location[1];
                result[i][j] = small_matrix[small_i][small_j];
        	}
        }
        return result
    }
    /*
    var my_big = Vector.make_matrix(10)
    var my_small = Vector.make_matrix(3, 2, 6)
    debugger
    var result = Vector.insert(my_big, my_small, [3, 4])
    */
    
    static concatinate(direction = 0, matrix_1, matrix_2, ...args){

        let result, dim_1, dim_2;
        if(matrix_1.length == 0){
        	return matrix_2
        }
        if(matrix_2.length == 0){
        	return matrix_1
        }
        
    	switch(direction){
        	//Vertical concatination
            case 0:
            dim_1 = Vector$1.matrix_dimensions(matrix_1);
            dim_2 = Vector$1.matrix_dimensions(matrix_2);
            if(dim_1[1] != dim_2[1]){
            	dde_error("Vector.concatinate, matrix widths must match");
            }
            if(dim_1[0] == 1){
            	result = [matrix_1];
            }else {
            	result = matrix_1;
            }
            if(dim_2[0] == 1){
            	for(let i = 0; i < dim_2[0]; i++){
            		result.push(matrix_2);
            	}
            }else {
            	for(let i = 0; i < dim_2[0]; i++){
            		result.push(matrix_2[i]);
            	}
            }
            break
            
            //Horizontal concatination
            case 1:
            dim_1 = Vector$1.matrix_dimensions(matrix_1);
            dim_2 = Vector$1.matrix_dimensions(matrix_2);
            if(dim_1[0] != dim_2[0]){
            	dde_error("Vector.concatinate: matrix heights must match");
            }
            if(dim_1[0] == 1){
            	result = Vector$1.make_matrix(dim_1[0], dim_1[1]+dim_2[1])[0];
                for(let j = 0; j < dim_1[1]; j++){
                	result[j] = matrix_1[j];
                }
                for(let j = 0; j < dim_2[1]; j++){
                	result[j+dim_1[1]] = matrix_2[j];
                }
            }else {
            	result = Vector$1.make_matrix(dim_1[0], dim_1[1]+dim_2[1]);
                for(let i = 0; i < dim_1[0]; i++){
            		for(let j = 0; j < dim_1[1]; j++){
                		result[i][j] = matrix_1[i][j];
                	}
                	for(let j = 0; j < dim_2[1]; j++){
                		result[i][j+dim_1[1]] = matrix_2[i][j];
                	}
            	}
           	}
            
            break
            default:
            dde_error("In Vector.concatinate, direction must 0 or 1");
        }
        
        let n_matrices = args.length + 2;
        if(n_matrices > 2){
        	for(let i = 0; i < n_matrices-2; i++){
            	result = Vector$1.concatinate(direction, result, args[i]);
            }
        }
        
        return result
    }
    /*
    var matrix_1 = [1, 2, 3]
    var matrix_2 = [4, 5, 6]
    //debugger
    var ans = Vector.concatinate(0, matrix_1, matrix_2)
	Vector.concatinate(0, [1, 2, 3], [4, 5, 6])  
    Vector.concatinate(1, [1, 2, 3], [4, 5, 6])
    Vector.concatinate(1, [[1, 1], [2, 2], [3, 2]], [[4], [5], [6]])

    var matrix_1 = [1, 2, 3]
    var matrix_2 = [4, 5, 6]
    debugger
    var ans = Vector.concatinate(1, matrix_1, matrix_2)
    
    var matrix_1 = [[1, 1], [2, 2], [3, 2]]
    var matrix_2 = [[4], [5], [6]]
    //debugger
    var ans = Vector.concatinate(1, matrix_1, matrix_2)
    */
    
    static data_to_file(...args){
    //debugger
    
    	let temp_args = Convert.deep_copy(args);
        let file_name, elt, file_string, data_array, table_titles;
        let data = [];
        for(let i = 0; i < temp_args.length; i++){
        	elt = temp_args[i];
            if($.type(elt) === "string"){
            	//if contains 
            	if (elt.indexOf(" ") > -1){
                	table_titles = elt;
                }else if(file_name == undefined){
                	file_name = elt;
                }else {
                	dde_error("Vector.data_to_file can only take in one string");
                }
            }else {
            	data.push(elt);
            }
        }
        if(file_name == undefined){
        	dde_error("Vector.data_to_file needs a filename input arg");
        }
        
        let dim = Vector$1.matrix_dimensions(data[0]);
        dim[1];
        data_array = [];
        for(var i = 0; i < data.length; i++){
        	elt = data[i];
            dim = Vector$1.matrix_dimensions(elt);
            if(dim[0] == 1){
            	elt = Vector$1.transpose(elt);
            }
            data_array = Vector$1.concatinate(1, data_array, elt);
        }
        
        dim = Vector$1.matrix_dimensions(data_array);
        if(table_titles == undefined){
        	file_string = "";
        }else {
        	file_string = table_titles + "\r\n";
        }
        for(let i = 0; i < dim[0]; i++){
        	file_string += data_array[i][0];
        	for(let j = 1; j < dim[1]; j++){
        		file_string += " " + data_array[i][j];
            }
            file_string += "\r\n";
        }
        write_file(file_name, file_string);
        return file_string
    }
    /*
    var data_1 = [1, 2, 3, 4]
    var data_2 = [100, 200, 300, 400]
    var filename = "2017/Main_Work_Version_Control/_Test_Files/torque_data.txt"
    var table_titles = "x y"
    //debugger
    var sol = Vector.data_to_file(table_titles, filename, Vector.transpose(data_1), Vector.transpose(data_2))
    
    //write_file("2017/Main_Work_Version_Control/_Test_Files/torque_data.txt", "lol")
    
    var my_string = "hello"
    _.isString(my_string)
    $.type(my_string) === "string"
    
    */
    /*
    var x_data = [361.1, 433.95, 474.3, 534.61, 966.06]
	var y_data = [0, 63500.24892, 158750.6223, 317501.2446, 1587506.223]
	
	var solution = Vector.poly_fit(x_data, y_data, 1)
    //debugger
	var solution = Vector.poly_fit(x_data, y_data, 4)
*/
    
    static poly_fit(x_data, y_data, order = 1){
		let dim_x = Vector$1.matrix_dimensions(x_data);
    	let dim_y = Vector$1.matrix_dimensions(y_data);
    	if((dim_x[0]!=1) || (dim_y[0]!=1) || (dim_x[1]!=dim_y[1])){
    		dde_error(" Input data has incorrect dimensions for function Vector.poly_fit()");
    	}
        
		let sol = Vector$1.make_matrix(1, order)[0];
    	let A, B, B1=0, B2=0, A11=0, A12=0, A21=0, A22=0, xi, yi;
    	switch(order){
    		case 0:
        		result = [Vector$1.average(y_data)];
        		break
        	case 1:
        		for(let i = 0; i < dim_x[1]; i++){
            		xi = x_data[i];
                	yi = y_data[i];
                
            		B1  += 2*xi*yi;
                	B2  += 2*yi;
                	A11 += 2*xi*xi;
                	A12 += 2*xi;
                	A21 += 2*xi;
                	A22 += 2;
            	}
            	A = [[A11, A12], [A21, A22]];
            	B = [[B1], [B2]];
            	sol = Vector$1.matrix_multiply(Vector$1.inverse(A), B);
        		break
        	default:
            	let size = order+1;
                A = Vector$1.make_matrix(size);
                B = Vector$1.make_matrix(size,1);
                let powers = Vector$1.make_matrix(size, "tilt");
                for(let i = 0; i < dim_x[1]; i++){
            		xi = x_data[i];
                	yi = y_data[i];
                	for(let i = 0; i < size; i++){
                    	for(let j = 0; j < size; j++){
            				A[i][j] += 2*Math.pow(xi, powers[i][j]);
                        }
                        B[i][0] += 2*Math.pow(xi, size-i-1)*yi;
                    }
            	}
                sol = Vector$1.matrix_multiply(Vector$1.inverse(A), B);
    	}
    	return sol
	}
    /*
    var data_x = [2,1.80901699437495,1.30901699437495,0.690983005625053,0.190983005625053,0,0.190983005625053,0.690983005625053,1.30901699437495,1.80901699437495,2]
    var data_y = [0,0.293892626146237,0.475528258147577,0.475528258147577,0.293892626146237,0,-0.293892626146237,-0.475528258147577,-0.475528258147577,-0.293892626146237,0]
    debugger
                  0  1  2  3  4  5
    var data_x = [0, 1, 2, 3, 2, 1]
    var data_y = [0, 1.5, 2.5, 3, 1.5, 0.5]
  
    var e = Vector.ellipse_fit(data_x, data_y)
    */
    
    static ellipse_fit(x, y){
		//Code adapted from Nikolai Chernov
    	//https://www.mathworks.com/matlabcentral/fileexchange/22684-ellipse-fit-direct-method
    	if(x.length < 5 || y.length < 5){
        	dde_error("A minumum of 5 datapoints are required to fit an ellipse.<br>Only " + x.length + " were supplied to Vector.ellipse_fit().");
        }
        
    	let results = {};
    	let x_dim = Vector$1.matrix_dimensions(x);
    	let y_dim = Vector$1.matrix_dimensions(y);
        if(1 == x_dim[0]){
        	x = Vector$1.transpose(x);
        }
        if(1 == y_dim[0]){
        	y = Vector$1.transpose(y);
        }
    
    	let n_points = Math.max(x_dim[0], x_dim[1]);
    
    	let orientation_tolerance = 1e-3;

    	let sum_x = 0;
        let sum_y = 0;
        for(let i = 0; i < n_points; i++){
        	sum_x += x[i][0];
            sum_y += y[i][0];
        }
        let mean_x = sum_x / n_points;
        let mean_y = sum_y / n_points;
        
		x = Vector$1.subtract(x, mean_x);
		y = Vector$1.subtract(y, mean_y);

		//X = [x.^2, x.*y, y.^2, x, y ]; //look how elegant this is in MATLAB
    	//solution = sum(X)/(X'*X);      //it's two lines!
    	
        let X_prime = Vector$1.concatinate(0, Vector$1.pow(x, 2), Vector$1.multiply(x, y), Vector$1.pow(y, 2), x, y);
		let X = Vector$1.transpose(X_prime);
        let row_sum = [0, 0, 0, 0, 0];
    	for(let i = 0; i < n_points; i++){
    		row_sum = Vector$1.add(row_sum, X[i]);
    	}
        
    	let coeffs = Vector$1.matrix_multiply(row_sum, Vector$1.inverse(Vector$1.matrix_multiply(X_prime, X)))[0];
		results.coeffs = coeffs;
        let a = coeffs[0];
        let b = coeffs[1];
        let c = coeffs[2];
        let d = coeffs[3];
        let e = coeffs[4];
        coeffs[5];
        
        //debugger
        
        let cos_phi, sin_phi;
        let orientation_rad;
        if(Math.min(Math.abs(b/a), Math.abs(b/c)) > orientation_tolerance ){
    		orientation_rad = 1/2 * Math.atan(b/(c-a));
    		cos_phi = Math.cos( orientation_rad );
    		sin_phi = Math.sin( orientation_rad );
        	a = a*cos_phi*cos_phi - b*cos_phi*sin_phi + c*sin_phi*sin_phi;
        	b = 0;
        	c = a*sin_phi*sin_phi + b*cos_phi*sin_phi + c*cos_phi*cos_phi;
        	d = d*cos_phi - e*sin_phi;
        	e = d*sin_phi + e*cos_phi;
        	mean_x = cos_phi*mean_x - sin_phi*mean_y;
        	mean_y = sin_phi*mean_x + cos_phi*mean_y;
		}else {
    		orientation_rad = 0;
    		cos_phi = Math.cos( orientation_rad );
    		sin_phi = Math.sin( orientation_rad );
		}
		
        
        let test = a*c;
        /*
        switch(test){
        	case (test > 0):
            	results.shape = "Ellipse"	
            break
            case (test == 0):
            	results.shape = "Paraboloa"	
            break
            case (test < 0):
            	results.shape = "Hyperbola"
            break
        }
        */
        if(test > 0){
        	results.shape = "Ellipse";	
        }else if(test == 0){
        	results.shape = "Paraboloa";	
        }else if(test < 0){
        	results.shape = "Hyperbola";
        }else {
        	out("x_data:", "red");
            out(x_data, "red");
            out("y_data:", "red");
            out(y_data, "red");
        	dde_error("Vector.ellipse_fit() received bad data. ^ Data printed above ^");
        }
        
        


		if (test>0){
    		if(a<0){
    			a = -a;
        		c = -c;
        		d = -d;
        		e = -e;
            }
    	}

    	let x_center = mean_x - d/2/a;
    	let y_center = mean_y - e/2/c;
    	let F = 1 + Math.pow(d, 2)/(4*a) + Math.pow(e, 2)/(4*c);
    	let radius_a = Math.sqrt( F/a );
    	let radius_b = Math.sqrt( F/c );
    	results.major_radius = Math.max(radius_a, radius_b);
    	results.minor_radius = Math.min(radius_a, radius_b);
		
        let R = [
        	[cos_phi, sin_phi], 
            [-sin_phi, cos_phi]
        ];
		let P_in = Vector$1.matrix_multiply(R, [[x_center], [y_center]]);
    	P_in[0];
    	P_in[1];
    	
    	//results.x0_in_center = X0_in[0]
        //results.y0_in_center = Y0_in[0]
        results.coeffs = coeffs;
        results.eccentricity = results.minor_radius / results.major_radius;
 		results.rotation_angle = orientation_rad * 180 / Math.PI;
    	results.center_point = [x_center, y_center];
        let phi = orientation_rad;
        results.quad_points_major = [
        	[x_center + results.major_radius*Math.cos(phi), y_center + results.major_radius*Math.sin(phi)],
            [x_center + results.major_radius*Math.cos(phi + Math.PI), y_center + results.major_radius*Math.sin(phi + Math.PI)]
        ];
        results.quad_points_minor = [
        	[x_center + results.minor_radius*Math.cos(phi + Math.PI/2), y_center + results.minor_radius*Math.sin(phi + Math.PI/2)],
            [x_center + results.minor_radius*Math.cos(phi - Math.PI/2), y_center + results.minor_radius*Math.sin(phi - Math.PI/2)]
        ];
        
    	return results
	}
} //end class


//Private
function dist_point_to_plane(point, plane){
    if (Vector$1.size(plane) !== 4){
        dde_error("Complete the plane by using the function 'Vector.complete_plane(vector, point)'");
        return null
    }
    return -Vector$1.dot(point, plane)
}

//Private
function dist_point_to_line(point, line_point_A, line_point_B){
    var term1 = Vector$1.subtract(point, line_point_A);
    var term2 = Vector$1.subtract(point, line_point_B);
    var term3 = Vector$1.subtract(line_point_B, line_point_A);
    var d = Vector$1.distance(Vector$1.cross(term1, term2)) / Vector$1.distance(term3);
    return d
}

function multiply_two_matrices(matrix_A, matrix_B){
    let A_height, B_height, A_width, B_width, A_dim, B_dim;
    A_dim = Vector$1.matrix_dimensions(matrix_A);
    B_dim = Vector$1.matrix_dimensions(matrix_B);
    A_height = A_dim[0];
    A_width = A_dim[1];
    B_height = B_dim[0];
    B_width = B_dim[1];

    /*
    let A_height = matrix_A.length
    let B_height = matrix_B.length
    let A_width  = matrix_A[0].length
    let B_width  = matrix_B[0].length
    */
    if(A_width == undefined){
        A_width = A_height;
        A_height = 1;
    }
    if(B_width == undefined){
        B_width = B_height;
        B_height = 1;
    }
    if(A_width != B_height){
        dde_error("Inner matrix dimension must match");
    }
    let result = Vector$1.make_matrix(A_height, B_width);
    for(var i = 0; i < A_height; i++){
        for(var j = 0; j < B_width; j++){
            let verticle = Vector$1.make_matrix(1, B_height)[0];
            if(B_height == 1){
                verticle = matrix_B[j];
            }else {
                for(var k = 0; k < B_height; k++){
                    verticle[k] = matrix_B[k][j];
                }
            }
            if(A_height == 1){
                result[i][j] = Vector$1.dot(matrix_A, verticle);
            }else {
                result[i][j] = Vector$1.dot(matrix_A[i], verticle);
            }
        }
    }
    return result
}

function divide_two_matrices(matrix_numerator, matrix_denominator){
    let dim_num = Vector$1.matrix_dimensions(matrix_numerator);
    let dim_den = Vector$1.matrix_dimensions(matrix_denominator);
    if (!((dim_num[0] == dim_den[0]) && (dim_num[1] == dim_den[1]))){
        dde_error("matrix dimensions must match in Vector.matrix_divide");
    }
    return Vector$1.matrix_multiply(matrix_numerator, Vector$1.inverse(matrix_denominator))
}

//16 Nov 2013 by Andrew Ippoliti
//http://blog.acipo.com/matrix-inversion-in-javascript/
// Returns the inverse of matrix `M`.
function matrix_invert(M){
    // I use Guassian Elimination to calculate the inverse:
    // (1) 'augment' the matrix (left) by the identity (on the right)
    // (2) Turn the matrix on the left into the identity by elemetry row ops
    // (3) The matrix on the right is the inverse (was the identity matrix)
    // There are 3 elemtary row ops: (I combine b and c in my code)
    // (a) Swap 2 rows
    // (b) Multiply a row by a scalar
    // (c) Add 2 rows

    //if the matrix isn't square: exit (error)
    if(M.length !== M[0].length){return;}

    //create the identity matrix (I), and a copy (C) of the original
    var ii=0, j=0, dim=M.length, e=0;
    var I = [], C = [];
    for(let i=0; i<dim; i+=1){
        // Create the row
        I[I.length]=[];
        C[C.length]=[];
        for(j=0; j<dim; j+=1){
            //if we're on the diagonal, put a 1 (for identity)
            if(i==j){ I[i][j] = 1; }
            else { I[i][j] = 0; }
            // Also, make the copy of the original
            C[i][j] = M[i][j];
        }
    }

    // Perform elementary row operations
    for(let i=0; i<dim; i+=1){
        // get the element e on the diagonal
        e = C[i][i];

        // if we have a 0 on the diagonal (we'll need to swap with a lower row)
        if(e==0){
            //look through every row below the i'th row
            for(ii=i+1; ii<dim; ii+=1){
                //if the ii'th row has a non-0 in the i'th col
                if(C[ii][i] != 0){
                    //it would make the diagonal have a non-0 so swap it
                    for(j=0; j<dim; j++){
                        e = C[i][j];       //temp store i'th row
                        C[i][j] = C[ii][j];//replace i'th row by ii'th
                        C[ii][j] = e;      //repace ii'th by temp
                        e = I[i][j];       //temp store i'th row
                        I[i][j] = I[ii][j];//replace i'th row by ii'th
                        I[ii][j] = e;      //repace ii'th by temp
                    }
                    //don't bother checking other rows since we've swapped
                    break;
                }
            }
            //get the new diagonal
            e = C[i][i];
            //if it's still 0, not invertable (error)
            if(e==0){return}
        }

        // Scale this row down by e (so we have a 1 on the diagonal)
        for(j=0; j<dim; j++){
            C[i][j] = C[i][j]/e; //apply to original matrix
            I[i][j] = I[i][j]/e; //apply to identity
        }

        // Subtract this row (scaled appropriately for each row) from ALL of
        // the other rows so that there will be 0's in this column in the
        // rows above and below this one
        for(ii=0; ii<dim; ii++){
            // Only apply to other rows (we want a 1 on the diagonal)
            if(ii==i){continue;}

            // We want to change this element to 0
            e = C[ii][i];

            // Subtract (the row above(or below) scaled by e) from (the
            // current row) but start at the i'th column and assume all the
            // stuff left of diagonal is 0 (which it should be if we made this
            // algorithm correctly)
            for(j=0; j<dim; j++){
                C[ii][j] -= e*C[i][j]; //apply to original matrix
                I[ii][j] -= e*I[i][j]; //apply to identity
            }
        }
    }

    //we've done all operations, C should be the identity
    //matrix I should be the inverse:
    return I;
}

//Coordinate System 

var Coor$1 = newObject({prototype: Root$1, name: "Coor"}); //, pose: Vector.make_pose()})


Coor$1.init = function(){
    Coor$1.pose = Vector$1.make_pose();
    var Table = Coor$1.create_child(Vector$1.make_pose(), "Table");
    var L0 = Table.create_child(Vector$1.make_pose(), "L0");
    var L1 = L0.create_child(Vector$1.make_pose(), "L1");
    var L2 = L1.create_child(Vector$1.make_pose(), "L2");
    var L3 = L2.create_child(Vector$1.make_pose(), "L3");
    var L4 = L3.create_child(Vector$1.make_pose(), "L4");
    L4.create_child(Vector$1.make_pose(), "L5");
};

Coor$1.create_child = function(pose, name){
	if(pose === undefined){
    	pose = Vector$1.make_pose();
    }
    if (!Vector$1.is_pose(pose)){
    		dde_error("pose is not constructed properly");
    	}
	var old_child = this[name];
	if(Object.isNewObject(old_child)){
    	old_child.set_pose(pose);
        return old_child
    }else if(name){
		return newObject({prototype: this, pose: pose, name: name})
    }else {
		return newObject({prototype: this, pose: pose})
    }
	
};


Coor$1.get_pose = function(reference_coordinate_system){
	let obj_elt, base_idx, ref_idx;
    let base = this;
    let ref = reference_coordinate_system;
	if (ref === undefined || this === ref){
    	return base.pose
    }else {
        let base_path = base.ancestors();
        base_path.push(base);
        let ref_path = ref.ancestors();
        ref_path.push(ref);
        let common = Object.lowestCommonAncestor(base, ref);
        
        for(let i = 1; i < base_path.length; i++){
        	if (common === base_path[i]){
            	base_idx = i;
                break
            }
        }
        let common_to_base = Vector$1.make_pose();
        for(let i = base_idx; i < base_path.length; i++){
        	obj_elt = base_path[i];
        	common_to_base = Vector$1.matrix_multiply(common_to_base, obj_elt.pose);
        }
        //common_to_base = Vector.matrix_multiply(common_to_base, base.pose)
        
        for(let i = 1; i < ref_path.length; i++){
        	if (common === ref_path[i]){
            	ref_idx = i;
                break
            }
        }
        let common_to_ref = Vector$1.make_pose();
        for(let i = ref_idx; i < ref_path.length; i++){
        	obj_elt = ref_path[i];
        	common_to_ref = Vector$1.matrix_multiply(common_to_ref, obj_elt.pose);
        }
        //common_to_ref = Vector.matrix_multiply(common_to_ref, ref.pose)
        
        return Vector$1.matrix_divide(common_to_base, common_to_ref)
    }
};

Coor$1.get_position = function(reference_coordinate_system){
	let result;
    if(reference_coordinate_system === undefined){
    	result = Vector$1.pull(this.pose, [0, 2], 3);
    }else {
    	let pose = this.get_pose(reference_coordinate_system);
        result = Vector$1.pull(pose, [0, 2], 3);
    }
    return Vector$1.transpose(result)
};

Coor$1.get_orientation = function(reference_coordinate_system){
    let result;
    if(reference_coordinate_system === undefined){
    	result = Vector$1.pull(this.pose, [0, 2], [0, 2]);
    }else {
    	let pose = this.get_pose(reference_coordinate_system);
        result = Vector$1.pull(pose, [0, 2], [0, 2]);
    }
    return result
};

Coor$1.get_xy_plane_direction = function(reference_coordinate_system){
	let pose = this.get_pose(reference_coordinate_system);
	return Vector$1.multiply(-1, Vector$1.pull(pose, [0, 2], 2))
};

Coor$1.get_xz_plane_direction = function(reference_coordinate_system){
	let pose = this.get_pose(reference_coordinate_system);
	return Vector$1.multiply(-1, Vector$1.pull(pose, [0, 2], 1))
};

Coor$1.get_yz_plane_direction = function(reference_coordinate_system){
	let pose = this.get_pose(reference_coordinate_system);
	return Vector$1.multiply(-1, Vector$1.pull(pose, [0, 2], 0))
};

Coor$1.set_pose = function(pose, reference_coordinate_system){
	let result;
    let ref = reference_coordinate_system;
    if(reference_coordinate_system === undefined){
    	this.pose = pose;
        result = pose;
    }else {
    	let base_ancestors = this.ancestors();
        let parent = base_ancestors[base_ancestors.length-1];
        result = Vector$1.matrix_multiply(pose, ref.get_pose(parent));
    	this.pose = result;
    }
    return result
};


Coor$1.set_position = function(position, reference_coordinate_system){
	let result, current_pose;
    let ref = reference_coordinate_system;
    if(reference_coordinate_system === undefined){
    	current_pose = this.pose; 
        current_pose[0][3] = position[0];
        current_pose[1][3] = position[1];
        current_pose[2][3] = position[2];
    	this.pose = current_pose;
        result = current_pose;
    }else {
    	let base_ancestors = this.ancestors();
        let parent = base_ancestors[base_ancestors.length-1];
        let temp_position = Vector$1.transpose(Vector$1.matrix_multiply(ref.get_pose(parent), Vector$1.properly_define_point(position)));
        temp_position.pop();
        this.pose = Vector$1.make_pose(temp_position, this.get_orientation());
    	result = this.pose;
    }
    return result
};


Coor$1.set_orientation = function(orientation, reference_coordinate_system){
	let result;
    let ref = reference_coordinate_system;
    if(reference_coordinate_system === undefined){
    	this.pose = Vector$1.make_pose(this.get_position(), orientation);
        result = this.pose;
    }else {
    	let base_ancestors = this.ancestors();
        let parent = base_ancestors[base_ancestors.length-1];
        let temp_orientation = Vector$1.matrix_multiply(ref.get_orientation(parent), orientation);
        this.pose = Vector$1.make_pose(this.get_position(), temp_orientation);
    	result = this.pose;
    }
    return result
};
Coor$1.move_points_to_coor = function(points, destination_coordinate_system, reference_coordinate_system){
	let dest = destination_coordinate_system;
    let ref = reference_coordinate_system;
    
    if(ref === undefined){
    	ref = Coor$1.Table;
    }else if(dest === undefined){
    	dest = Coor$1.Table;
    }
    let trans = dest.get_pose(ref);
    let result = points.slice();
    let dim = Vector$1.matrix_dimensions(points);
    if(dim[0] == 1){
    	result = Vector$1.transpose(Vector$1.matrix_multiply(trans, Vector$1.properly_define_point(points)));
        result = result.slice(0, 3);
    }else if(dim[1] == 3){
    	for(let i = 0; i < dim[0]; i++){
    		result[i] = Vector$1.transpose(Vector$1.matrix_multiply(trans, Vector$1.properly_define_point(points[i])));
    	}
        result = Vector$1.pull(result, [0, dim[0] - 1], [0, 2]);
    }
    
    return result
};

Coor$1.move_vectors_to_coor = function(vectors, destination_coordinate_system, reference_coordinate_system){
	let dest = destination_coordinate_system;
    let ref = reference_coordinate_system;
    
    if(ref === undefined){
    	ref = Coor$1.Table;
    }else if(dest === undefined){
    	dest = Coor$1.Table;
    }
    let trans = dest.get_pose(ref);
    let result = vectors.slice();
    let dim = Vector$1.matrix_dimensions(vectors);
    if(dim[0] == 1){
    	result = Vector$1.transpose(Vector$1.matrix_multiply(trans, Vector$1.properly_define_vector(vectors)));
        result = result.slice(0, 3);
    }else if(dim[1] == 3){
    	for(let i = 0; i < dim[0]; i++){
    		result[i] = Vector$1.transpose(Vector$1.matrix_multiply(trans, Vector$1.properly_define_vector(vectors[i])));
    	}
        result = Vector$1.pull(result, [0, dim[0] - 1], [0, 2]);
    }
    
    return result
};



/*
var board = Coor.Table.create_child(Vector.make_pose([0, 0, 1000], [0, 0, 324000]), "board")
var points = [[1, 2, 3], [4, 5, 6]]
debugger
var result = Coor.move_points_to_coor(points, board)
*/

Coor$1.rotate = function(axis_of_rotation, angle, point_of_rotation, reference_coordinate_system){
	let pose, result;
    let ref = reference_coordinate_system;
    if(ref === undefined){
    	pose = this.get_pose();
        if(point_of_rotation == undefined){
        	point_of_rotation = this.get_position();
        }
        pose = Vector$1.rotate_pose(pose, axis_of_rotation, angle, point_of_rotation);
        this.set_pose(pose);
        result = this.pose;
    }else {
    	pose = this.get_pose(ref);
        if(point_of_rotation == undefined){
        	point_of_rotation = [0, 0, 0];
        }
        pose = Vector$1.rotate_pose(pose, axis_of_rotation, angle, point_of_rotation);
        this.set_pose(pose, ref);
        result = this.pose;
    }
    return result
};




/*
Table = Coor.create_child(Vector.make_pose(), "Table")
J0 = table.create_child(Vector.make_pose(), "J0")
J1 = J0.create_child(Vector.make_pose([10, 0, 0]), "J1")
J2 = J1.create_child(Vector.make_pose([0, 0, 20]), "J2")
J3 = J2.create_child(Vector.make_pose([0, 0, 20]), "J3")
cube = table.create_child(Vector.make_pose([15, 10, 5], [0, 0, Convert.degrees_to_arcseconds(0)]), "cube")
debugger
J3.set_pose([[ 0.707, 0.707, 0, 15], [-0.707, 0.707, 0, 10],[0, 0, 1, 5],[0, 0, 0, 1]])
J3.set_pose([[1, 0, 0, 10], [0, 1, 0, 10],[0, 0, 1, 10],[0, 0, 0, 1]])
J3.set_pose([[1, 0, 0, 10], [0, 1, 0, 10],[0, 0, 1, 10],[0, 0, 0, 1]], table)
J3.set_position([10, 10, 10])
J3.set_position([10, 10, 10], table)
debugger
J3.set_orientation(Convert.angles_to_DCM([0, 0, Convert.degrees_to_arcseconds(90)]))
J3.set_orientation([[-1, 0, 0], [0, 0, 1], [0, 0, 1]])
J3.set_orientation([[-1, 0, 0], [0, 0, 1], [0, 0, 1]], cube)
J3.get_pose()
J3.get_pose(table)
cube.get_pose()
J3.get_pose(cube)
cube.get_pose(J3)
cube = table.create_child(Vector.make_pose([15, 10, 5], [0, 0, Convert.degrees_to_arcseconds(45)]), "cube")
J3.get_pose(cube)
cube.get_pose(J3)
J3.get_position()
J3.get_position(cube)
J3.get_orientation()
J3.get_orientation(cube)
*/

debugger;
console.log("top of ready.js");
//import DXF        from "../job_engine/math/DXF.js"
/* stream bug above here
import calibrate_build_tables from "../job_engine/low_level_dexter/calibrate_build_tables.js"
//stream bug above here
import {convert_backslashes_to_slashes} from "../job_engine/core/storage.js"
import {get_output} from "../job_engine/core/out.js"
import Job          from "../job_engine/core/job.js"
import Gcode        from "../job_engine/core/gcode.js"
import {date_to_human_string, date_to_mmm_dd_yyyy, is_digit} from "../job_engine/core/utils.js"
import {FPGA}       from "../job_engine/core/fpga.js"

import {Simqueue}   from "../job_engine/core/simqueue.js"
import {Dexter}     from "../job_engine/core/robot.js"
//stream bug above here.
//in the general folder, as is ready.js
import {Editor}     from "./editor.js"
import {DDE_NPM}    from "./DDE_NPM.js"
//import {SSH}        from "./ssh.js" //todo
import {Series}     from "./series.js"
import {open_doc}   from "./doc_code.js"
import {PatchDDE}   from "./patch_dde.js"
*/

//todo const {google} = require('googleapis');


var dde_version      = "not inited";
var dde_release_date = "not inited";
var myCodeMirror; //inited inside of ready

var js_cmds_array = [];
var js_cmds_index = -1;

var operating_system$1 = "not inited"; //"mac", "win" or "linux"(for Ubuntu)  bound in both ui and sandbox by ready

function open_dev_tools$1(){
    let dde_ipc;    //todo  = require('electron').ipcRenderer
    dde_ipc.sendSync('open_dev_tools');
}

function close_dev_tools(){
    let dde_ipc;    //todo  = require('electron').ipcRenderer
    dde_ipc.sendSync('close_dev_tools');
}

function set_menu_string(elt, label, key){
    let modifier;
    let max_spaces;
    if(operating_system$1 === "mac") {
        modifier = "&#8984"; //the command (cloverleaf)
        max_spaces = 18; //more because we don't need the "Ctrl " of WinOS, just one char
    }
    else { //"win" and "linux"
        modifier = "Ctrl ";
        max_spaces = 14;
    }
    let needed_spaces = Math.max(max_spaces - label.length, 1);
    elt.innerHTML = label + "&nbsp;".repeat(needed_spaces) + modifier + key;
}
//called by both the eval button and the step button
function eval_button_action(step=false){ //used by both clicking on the eval button and Cmd-e
    if(step) { Metrics.increment_state("Step button clicks"); }
    else     { Metrics.increment_state("Eval button clicks"); }
    if(step instanceof CodeMirror) { step = false; } //means Cmd E was typed in the editor and we don't want to step in this case
    if((Editor.current_file_path != "new buffer") && persistent_get("save_on_eval")) {
        if (window.HCA && (Editor.view === "HCA")){
            HCA.save_current_file();
            eval_button_action_aux(step);
            return
        }
        else {
            Editor.save_current_file(function(err) {
                if(err) {
                    dde_error("In eval_button_action, got error while auto-saving file of: " + err.message);
                }
                else {
                    eval_button_action_aux(step);
                }
            });
        }
    }
    else { eval_button_action_aux(step); }
}
function eval_button_action_aux(step){
    eval_js_part1(step);
    //if (Editor.view == "Blocks") {
    eval_id.blur();
    //} //to get rid of the Eval button being "selected" when we're evaling in blocks view
}

function play_simulation_demo(){
    sim.enable_rendering = true;
    render_demo();
    //out("Demo just moves Dexter randomly.")
}

//call this on startup after peristent loaded AND after user clicks the menu item checkbox
function adjust_animation(){
    let animate_dur = (persistent_get("animate_ui") ? 300 : 0);
    $('#js_menubar_id').jqxMenu({ animationShowDuration: animate_dur });
    $('#js_menubar_id').jqxMenu({ animationHideDuration: animate_dur });
}

// document.body.addEventListener('onload', on_ready)

function on_ready() {
        debugger;
        //open_dev_tools() //FAILS! dev_tools opens but too late. so that break points in on_ready calls will actually break
        //const os = require('os');
        console.log("top of on_ready");
        console.log("__dirname:"  + __dirname);

        operating_system$1 = os.platform().toLowerCase(); //for Ubuntu, ths returns "linux"

        if      (operating_system$1 == "darwin")       { operating_system$1 = "mac"; }
        else if (operating_system$1.startsWith("win")) { operating_system$1 = "win"; }
        console.log("In renderer dde_apps_folder: " + window.dde_apps_folder);
        console.log("In renderer appPath: "      + remote.app.getAppPath());
        console.log("In renderer __dirname: "    + __dirname);
        //require('fs-lock')({
         //   'file_accessdir': [__dirname, dde_apps_folder], //for readFile, etc. but must include __dirname since Electron needs it.
        //    'open_basedir':   [__dirname ] //__direname is the folder this app is installed in. //valid folders to get require's from. /usr/local/share/node_modules',
         //}) //restrict file access
        //window.fs = require('fs')
        //dde_version = remote.getGlobal("get_app_version")

        //todo var pckg         = require('./package.json');
        //todo dde_version      = pckg.version
        //todo dde_release_date = pckg.release_date
        platform         = "dde"; //"node" is the other possibility, which happens when we're in the job_engine
        //serial_port_init() //now does nothing, No longer necessary to use serial port.
        //window.Root      = Root //should work but doesn't jan 13, 2019


        Coor$1.init();
        //see also ./core/index.js that has this same code
        Dexter.calibrate_build_tables = calibrate_build_tables;
        window.calibrate_build_tables = undefined;
        Dexter.prototype.calibrate_build_tables = function() {
            let result = Dexter.calibrate_build_tables();
            for(let oplet_array of result){
                if(Array.isArray(oplet_array)){
                    oplet_array.push(this);
                }
            }
            return result
        };

        Job.class_init();
        Dexter.class_init();
        setTimeout(function(){
            window.document.title = "Dexter Development Environment " + dde_version;
            //dde_version_id.innerHTML      = dde_version //do this by hand because these matic values are NOT getting display in this doc's version on hdrobotic.com/software
            //dde_release_date_id.innerHTML = dde_release_date
        }, 1000);
   // window.$ = require('jquery'); //Now done in index.html   after doing npm install --save jquery, we still need this
    //onload_fn()
    Dexter.draw_dxf = DXF.dxf_to_instructions; //see Robot.js
    Dexter.prototype.draw_dxf = function({robot = null}={}) {
            let obj_args;
            if (arguments.length == 0) { obj_args = {}; } //when no args are passed, I must do this
            else { obj_args = arguments[0]; }
            obj_args.robot = this;
            return Dexter.draw_dxf(obj_args)
    };

    $('#outer_splitter_id').jqxSplitter({
        width: '98%', height: '97%', //was 93%
        orientation: 'vertical',
        panels: [ { size: "70%", collapsible: false}, //, min: "0%"}, //collapsible: false }, //collapsible: false fails in DDE v 3, so see below for setTimeout on a fn to do this
                  { size: '30%', collapsible: true}] //, min: "0%"}] //, collapsible: true}]
    });

    $('#outer_splitter_id').on('resize',
        function (event) {
            let new_size = event.args.panels[0].size;
            persistent_set("left_panel_width", new_size);
            event.stopPropagation();
        });

    init_outer_splitter_expand_event();

    $('#left_splitter_id').jqxSplitter({orientation: 'horizontal', width: "100%", height: "100%",
        panels: [{ size: "60%", min: "5%", collapsible: false },
                 { size: '40%', min: "5%", collapsible: true}]
    });

    $('#left_splitter_id').on('resize',
        function (event) {
            let new_size = event.args.panels[0].size;
            persistent_set("top_left_panel_height", new_size);
            event.stopPropagation(); //must have or outer_splitter_id on resize is called
        });


    $('#right_splitter_id').jqxSplitter({ orientation: 'horizontal', width: "100%", height: "100%",
        panels: [{ size: "50%"}, { size: "50%"}]
    });

    $('#right_splitter_id').on('resize',
        function (event) {
            let new_size = event.args.panels[0].size;
            persistent_set("top_right_panel_height", new_size);
            event.stopPropagation(); //must have or outer_splitter_id on resize is called
        });

    setTimeout(function(){
                $('#outer_splitter_id').jqxSplitter('panels')[0].collapsible = false;
                $('#left_splitter_id').jqxSplitter('panels')[0].collapsible = false;
                $('#right_splitter_id').jqxSplitter('panels')[0].collapsible = false;
            }, 100);
        //TestSuite.make_suites_menu_items() //doesn't work

        //see near bottom for animation.
    $("#js_menubar_id").jqxMenu({autoOpen: false, clickToOpen: false, height: '25px' }); //autoOpen: false, clickToOpen: true,

        //to open a menu, click. Once it is open, if you slide to another menu, it DOESN'T open it. oh well.
    //$("#js_edit_menu").jqxMenu(    { width: '50px', height: '25px' });
    //$("#js_learn_js_menu").jqxMenu({ width: '90px', height: '25px' });
    //$("#js_insert_menu").jqxMenu(  { width: '65px', height: '25px' });
    //$("#js_jobs_menu").jqxMenu(    { width: '55px', height: '25px' });

   // $("#ros_menu_id").jqxMenu({ width: '50px', height: '25px', animationHideDelay: 1000, animationShowDelay: 1000, autoCloseInterval: 1000  });
   $("#cmd_menu_id").jqxMenu({ width: '50px', height: '25px', animationHideDelay: 1000, animationShowDelay: 1000, autoCloseInterval: 1000  });

        //$("#jqxwindow").jqxWindow({ height:400, width:400, showCloseButton: true});
    //$('#jqxwindow').jqxWindow('hide');
    $("#cmd_input_id").keyup(function(event){ //output pane  type in
        if(event.keyCode == 13){ //ENTER key
            let src = Editor.get_cmd_selection(); //will return "" if no selection
            if(src.length == 0) { src = cmd_input_id.value;} //get full src if no selection
            src = src.trim();
            if (src.length == 0) { warning("no code to eval.");}
            else if(cmd_lang_id.value == "JS"){
                js_cmds_array.push(src);
                js_cmds_index = js_cmds_array.length - 1;
                eval_js_part2(src);
            }
            else if(cmd_lang_id.value == "Python"){
                Py.eval(src);
            }
            else if (cmd_lang_id.value == "SSH"){
                cmd_input_id.placeholder = "Type in a shell 'bash' command & hit the Enter key to run.";
                //but the above probably never get's seen because the src of the actual default cmd gets shown instead
                SSH.run_command({command: src});  //use defaults which makes formatted dir listing
               //call_cmd_service_custom(src) /ROS selected
            }
            //else if (cmd_lang_id.value == "ROS"){
            //    /call_cmd_service_custom(src) /ROS selected
            //}
        }
        else if(event.keyCode == 38){ //up arrow
           if      (js_cmds_index == -1 ) { out("No JavaScript commands in history"); }
           else if (js_cmds_index == 0 )  { out("No more JavaScript command history."); }
           else {
               js_cmds_index = js_cmds_index - 1;
               var new_src = js_cmds_array[js_cmds_index];
               cmd_input_id.value = new_src;
           }

        }
        else if(event.keyCode == 40){ //down arrow
            if      (js_cmds_index == -1 ) { out("No JavaScript commands in history"); }
            else if (js_cmds_index == js_cmds_array.length - 1) {
                if(cmd_input_id.value == "") {
                    out("No more JavaScript command history.");
                }
                else { cmd_input_id.value = ""; }
            }
            else {
                js_cmds_index = js_cmds_index + 1;
                var new_src = js_cmds_array[js_cmds_index];
                cmd_input_id.value = new_src;
            }
        }
        cmd_input_id.focus();
    });
    //cmd_input_id.onblur = function(){
    //        window.getSelection().collapse(cmd_input_id)
    //}

    //cmd_input_clicked_on_last = false //global var. Also set below and by Editor.init_editor

    cmd_input_id.onclick = function(event) {
        var full_src = event.target.value;
        if (full_src) {
            if(full_src.length > 0){
                let pos = event.target.selectionStart;
                if(pos < (full_src.length - 1)){
                    if(cmd_lang_id.value == "JS"){
                        onclick_for_click_help(event);
                    }
                    else if(cmd_lang_id.value == "SSH"){
                        let space_pos = full_src.indexOf(" ");
                        if((space_pos == -1) || (pos < space_pos)){
                            onclick_for_click_help(event);
                        }
                        //else don't do click help because clicking on the args of a bash cmd
                        //doesn't yield meaningful man help
                    }
                    else if (cmd_lang_id.value == "Python"){
                        out(`<a href='#' onclick='browse_page("https://docs.python.org/3/reference/index.html")' >Python doc</a>`,
                            undefined, true);
                    }
                    else {
                        shouldnt("cmd_input_id got menu item: " + cmd_lang_id.value +
                                 " that has no help.");
                    }
                }
                //else don't give help if clicking at very end.
                //because often that is to edit the cmd and if
                //we're in SSH, printout out a long man page is
                //disruptive
            }
        }
    };

    //js_radio_button_id.onclick  = function() { ros_menu_id.style.display = "none"}
    //ros_radio_button_id.onclick = function() { ros_menu_id.style.display = "inline-block"}

    cmd_lang_id.onchange = function(){
            if(cmd_lang_id.value === "JS"){
                SSH.close_connection();  //if no connection. that's ok
                cmd_menu_id.style.display = "none";
                cmd_input_id.placeholder = "Type in JS & hit the Enter key to eval";
                open_doc(JavaScript_guide_id);
            }
            else if(cmd_lang_id.value === "Python"){
                open_doc(python_doc_id);
                cmd_input_id.placeholder = "Type in Python3 & hit the Enter key to eval";
            }
            else if(cmd_lang_id.value === "SSH"){
                open_doc(ssh_doc_id);
                cmd_input_id.placeholder = "Type in Bash & hit the Enter key to eval";
                SSH.show_config_dialog();
                //cmd_menu_id.style.display = "inline-block"
                //cmd_input_id.value = SSH.show_dir_cmd
                //SSH.init_maybe_and_write("cd /srv/samba/share;" + SSH.show_dir_cmd, false)
            }
    };

    //init_simulation() now in video.js show_in_misc_pane

    init_doc();

    dde_version_id.innerHTML      = dde_version;
    dde_release_date_id.innerHTML = dde_release_date;

    Series.init_series();
    FPGA.init(); //does not depend on Series.
    Gcode.init(); //must be after init_series which calls init_units()

    $('#js_textarea_id').focus(); //same as myCodeMirror.focus()  but  myCodeMerror not inited yet

    doc_prev_id.onclick        = open_doc_prev;
    doc_next_id.onclick        = open_doc_next;
    find_doc_button_id.onmousedown = function() {
        Editor.get_any_selection();
    };
    find_doc_button_id.onclick = function(event) {
            find_doc();
            event.target.blur();
    };
    find_doc_input_id.onclick = onclick_for_click_help;
    find_doc_input_id.onchange = find_doc;
    $("#find_doc_input_id").jqxComboBox({ source: [], width: '150px', height: '25px',}); //create


        //eval_doc_button_id.onclick = function(){
    //      let sel = window.getSelection().toString().trim()
    //      if (sel.length == 0) {out("There is no selection in the Doc pane to eval.", "orange", true) }
    //      else { eval_js_part2(sel) }
    //      } obsolete now that Out pane Eval button evals selection in any pane.

    //doc_pane_content_id.onclick = //doesn't get called when I click in doc pane, so do the below.
    //click help for all text inside the code tag (white).
    $('code').click(function(event) {
                         const full_src = window.getSelection().focusNode.data;
                         const pos      = window.getSelection().focusOffset;
                         Editor.show_identifier_info(full_src, pos);
                    });
        //for results of code examples.
    $('samp').click(function(event) {
                        const full_src = window.getSelection().focusNode.data;
                        const pos      = window.getSelection().focusOffset;
                        Editor.show_identifier_info(full_src, pos);
    });

    /*catches all clicks,  but then if you click on an input elt it defocuses it so
     //you can't type in it.
      document.addEventListener("click",
                               function(event){
                                    out(document.activeElement.id)
                                    clearSelection()
                                    onclick_for_click_help(event)
                                    setTimeout(function(){ out(document.activeElement.id), event.target.focus(), out(document.activeElement.id)}, 1000)
                                }
    )*/
    /* does not get called when user clicks on an input when those inputs are dynamically
       generated AFTER onready is called.
       $('input').click(function(event) {
        const full_src = window.getSelection().focusNode.data
        const pos      = window.getSelection().focusOffset
        Editor.show_identifier_info(full_src, pos)
    }) */
    /* does not get called when user clicks on an input
        $('textarea').click(function(event) {
            const full_src = window.getSelection().focusNode.data
            const pos      = window.getSelection().focusOffset
            Editor.show_identifier_info(full_src, pos)
        })
    */
        output_div_id.onclick = onclick_for_click_help;

        //handles the button clicks and menu selects that chrome Apps prevent in HTML where they belong

        eval_id.onmousedown = function() {
                Editor.get_any_selection();
         };

        eval_id.onclick = function(event){
                            event.stopPropagation();
                            eval_button_action();
                          };

        step_button_id.onclick = function(event){
                                    event.stopPropagation();
                                    open_dev_tools$1();
                                    setTimeout(function(){
                                                   eval_button_action(true); //cause stepping
                                               }, 500);
                                    step_button_id.blur();
                                 };

        step_button_id.onmousedown = function() {
            Editor.get_any_selection();
        };

    js_debugger_checkbox_id.onclick = function(event) {
        event.stopPropagation();
        if(event.target.checked) {
            open_dev_tools$1();
        }
        else {
            close_dev_tools();
        }
    };

    easter_egg_joke_id.onclick = Metrics.easter_egg_joke;

    misc_pane_expand_checkbox_id.onclick=toggle_misc_pane_size;

    email_bug_report_id.onclick=email_bug_report;

    //File Menu

    new_id.onclick = function() {
        if (window.HCA && (Editor.view === "HCA")){
            HCA.clear();
            Editor.add_path_to_files_menu("new buffer");
        }
        else {
            Editor.edit_new_file();
        }
    };
    set_menu_string(new_id, "New", "n");

    file_name_id.onchange = function(e){ //similar to open
        let orig_path = Editor.current_file_path;
        const inner_path = e.target.value; //could be "new buffer" or an actual file
        const path = Editor.files_menu_path_to_path(inner_path);
        if (window.HCA && (Editor.view === "HCA")){
            try{
                HCA.edit_file(path);
            }
            catch(err){
                Editor.add_path_to_files_menu(orig_path);
                dde_error(path + " doesn't contain vaild HCA object(s).<br/>" + err.message);
            }
        }
        else { //presume JS
            Editor.edit_file(path);
        }
    };

    open_id.onclick = function(){
        if (window.HCA && (Editor.view === "HCA")){
            const path = choose_file({title: "Choose a file to edit", properties: ['openFile']});
            if (path){
                try{
                    HCA.edit_file(path);
                }
                catch(err){
                    dde_error(path + " doesn't contain vaild HCA object(s).<br/>" + err.message);
                }
                //Editor.add_path_to_files_menu(path) //now down in edit_file because edit_file is called
                //from more places than ready.
            }
        }
        else {
            Editor.open_on_dde_computer(); //Editor.open
        }
    };
    set_menu_string(open_id, "Open...", "o");

    open_from_dexter_id.onclick = Editor.open_from_dexter_computer;

    open_system_file_id.onclick = Editor.open_system_file;

    load_file_id.onclick=function(e) {
        if (window.HCA && (Editor.view === "HCA")){
            HCA.load_node_definition();
        }
        else { //presume JS
            const path = choose_file({title: "Choose a file to load"});
            if (path){
                if(path.endsWith(".py")){
                   Py.load_file_ask_for_as_name(path);
                }
                else {
                    out(load_files(path));
                }
            }
        }
    };

    load_and_start_job_id.onclick = function(){
        const path = choose_file({title: "Choose a file to load"});
        if (path){
            Job.define_and_start_job(path);
        }
    };

    DDE_NPM.init();
    install_npm_pkg_id.onclick = DDE_NPM.show_ui;

    insert_file_content_id.onclick=function(e) {
        const path = choose_file({title: "Choose a file to insert into DDE's editor"});
        if (path){
            const content = read_file(path);
            Editor.insert(content);
        }
    };
    insert_file_path_into_editor_id.onclick=function(e){
        const path = choose_file({title: "Choose a file to insert into DDE's editor"});
        if (path){
            Editor.insert('"' + path + '"');
        }
    };
    insert_file_path_into_cmd_input_id.onclick=function(e){
    const path = choose_file({title: "Choose a file to insert into DDE's editor"});
    if (path){
        Editor.insert_into_cmd_input('"' + path + '"');
    }
};

    save_id.onclick = function() {
        if (window.HCA && (Editor.view === "HCA")){
            if (Editor.current_file_path == "new buffer"){
                HCA.save_as();
            }
            else {
                HCA.save_current_file();
            }
        }
        else {
            Editor.save();
        }
    };
    set_menu_string(save_id, "Save", "s");

    save_as_id.onclick = function(){
        if (window.HCA && (Editor.view === "HCA")){
            HCA.save_as();
        }
        else {
            Editor.save_as();
        }
    }; //was: Editor.save_on_dde_computer //only for saving on dde computer

    save_to_dexter_as_id.onclick = Editor.save_to_dexter_as;

    remove_id.onclick = function(){ Editor.remove(); }; //don't simply use Editor.remove as ther value  for onclick because we want to default its arg as the Editor.remove method does
    update_id.onclick = function(){ check_for_latest_release(); };

    //Edit menu  (see editor.js for the Edit menu items
    Editor.init_editor();

    //Insert menu
  /*  js_example_1_id.onclick=function(){Editor.insert(
`//Click the Eval button to define and call the function 'foo'.
function foo(a, b){ //define function foo with 2 args
    out("foo called with a=" + a) //print 1st arg to Output pane.
    for(var item of b){ //loop over items in array b
        if (item > 9.9){
            out("got a big one: " + item)
        }
    }
    return b.length //foo returns the length of its 2nd arg.
                    //After calling, observe '4' in the Output pane.
}

foo("hello", [7, 10, 20, -3.2]) //call function foo with 2 args
                                //a string and an array of numbers.
`)}*/

   alert_id.onclick   = function(){Editor.wrap_around_selection(  "alert(", ')', '"Hi."');};
   confirm_id.onclick = function(){Editor.wrap_around_selection("confirm(", ')', '"Do it?"');};
   prompt_id.onclick  = function(){Editor.wrap_around_selection( "prompt(", ')', '"Price?"');};

    out_black_id.onclick =function(){Editor.wrap_around_selection("out(", ')', '"Hello"');};
    out_purple_id.onclick=function(){Editor.wrap_around_selection("out(", ', "blue")', '"Hello"');};
    out_brown_id.onclick =function(){Editor.wrap_around_selection("out(", ', "rgb(255, 100, 0)")', '"Hello"');};

    editor_insert_id.onclick = function(){Editor.insert(
`Editor.insert(
    "text to insert",
    "replace_selection", //insertion_pos.   "replace_selection" is the default. Other options: "start", "end", "selection_start", "selection_end", "whole", an integer
    false)               //select_new_text. false is the default.
`);};


   show_window_help_id.onclick = function(){open_doc(show_window_doc_id);};

    window_simple_message_id.onclick=function(){Editor.insert(
`//show_window simple message
//Pop up a window with content of the given HTML.
show_window("hi <i style='font-size:100px;'>wizard</i>")
`
);};
    insert_color_id.onclick = insert_color;
window_options_id.onclick=function(){Editor.insert('//show_window  Window Options\n' +
                                                     'show_window({\n' +
                                                              '    content: "hi",      // Any HTML OK here.\n' +
                                                              '    title: "Greetings", // Appears above the content. Any HTML OK.\n' +
                                                              '    width: 180, // 100 to window.outerWidth\n' +
                                                              '    height: 70, //  50 to window.outerHeight\n' +
                                                              "    x: 0,       // Distance from left of DDE window to this window's left\n" +
                                                              "    y: 100,     // Distance from top  of DDE window to this window's top\n" +
                                                              '    is_modal: false, // If true, prevents you from interacting with other windows. Default false.\n' +
                                                              '    show_close_button: true,    // Default true.\n' +
                                                              '    show_collapse_button: true, // Allow quick shrink of window. Default true.\n' +
                                                              '    resizable: true,            // Drag lower right corner to change dialog size.\n' +
                                                              '    draggable: true,            // Mouse down and drag on title bar to move dialog.\n' +
                                                              '    trim_strings: true,         // Remove whitespace from beginning and end of values from inputs of type text and texareas. Default true.\n' +
                                                              '    background_color: "ivory"   // Default is "rgb(238, 238, 238)" (light gray). White is "rgb(255, 255, 255)"\n' +
                                                              '})\n');};
    window_buttons_id.onclick=function(){Editor.insert(
`//show_window  Buttons  Example
//The below function is called when a button is clicked in the shown window.
function count_up(vals){ //vals contains name-value pairs for each
                         //html elt in show_window's content with a name.
    if(vals.clicked_button_value == "Count"){ // Clicked button value holds the name of the clicked button.
        if(window.demo_counter == undefined) { 
            window.demo_counter = 10           // Initialize the demo_counter global variable.
        }
        window.demo_counter = window.demo_counter + 1 // Increment demo_counter upon each button click.
        count_id.innerHTML = window.demo_counter
        count_id.style["font-size"] = demo_counter + "px"
    }
    else if (vals.clicked_button_value == "Done"){   // When a 'submit' button is clicked, its 'value' can be used as its name.
        out("outta here at: " + window.demo_counter) // Last thing printed to the Output pane.
    }
}\n` +
'show_window({\n' +
'    content:\n' +
'`<input type="button" value="Count"/> <!-- Regular button. Does not close window.-->\n' +
' <span  name="count_display" id="count_id">10</span><br/><br/>\n' +
' <input type="submit" value="Done"/>`, // submit button closes window\n' +
'    callback: count_up})      // This function called when either button is clicked.\n'
);}; //done with window buttons

window_sliders_id.onclick=function(){Editor.insert(
`function handle_cb(vals){
    if(vals.clicked_button_value === "submit_slow") {
        out("slide_slow: " + vals.slide_slow)
    }
    else if(vals.clicked_button_value === "slide_fast"){
        out("slide_fast: " + vals.slide_fast, "green", true)
    }
}

show_window({title: "show_window sliders demo",
    content: "Fast: 0<input name='slide_fast' type='range' min='0', max='100' data-oninput='true'/>100<br/>" +
    "Slow: 0<input id='slide_slow' type='range' min='0', max='10' step='0.1' />10<br/>" +
    "<input type='button' value='submit_slow'> </input>",
    height: 130,
    callback: handle_cb})`
);};


let show_window_menu_body =
`Choose:
<div class="menu" style="display:inline-block;">
   <ul>
      <li>TopMenu&#9660;
        <ul>
          <li title="this is a tooltip">item1</li>
          <li data-name="ITEM two">item2</li> <!-- if there's a data-name, use it, otherwise use the innerHTML-->
          <li>SubMenu
            <ul>
              <li>sub1</li>
              <li>sub2</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
</div>
<span  name="menu_choice">pick menu item</span><br/><br/>
<input type="submit" value="Done"/>`;

    window_menu_id.onclick=function(){Editor.insert(
`//show_winow   Menu example
//Called whenever user chooses a menu item or clicks a button.
function menu_choice_cb(vals){
        if (vals.clicked_button_value != "Done"){ // True when menu item chosen.
            var clicked_item = vals.clicked_button_value
            out("You picked: " + clicked_item)
        }
}

show_window({content: ` + "`" + show_window_menu_body + "`," +
` // submit closes window
        callback: menu_choice_cb // Called when menu item or button is clicked
        })
`);};

    window_many_inputs_id.onclick=function(){Editor.insert(
`//show_window   Many Inputs Example.
//show_vals called only when a button is clicked.
function show_vals(vals){ inspect(vals) }

show_window(
    {content:\n` +
"`" +
`text: <input type="text" name="my_text" value="Dexter"><br/><br/>
textarea: <textarea name="my_textarea">Hi Rez</textarea><br/><br/>
checkbox: <input name="my_checkbox" type="checkbox" checked="checked"/>heated bed?<br/><br/>
<!-- you can add the checked="checked" attribute to make it initially checked. -->
radio:
<input type="radio" name="my_radio_group" value="abs" />ABS
<input type="radio" name="my_radio_group" value="carbon"/>Carbon Fiber
<input type="radio" name="my_radio_group" value="pla" checked="checked"/>PLA<br/><br/>
    <!-- At most, only 1 radio button can be checked. If none are checked,
         the return value for the group will be undefined . -->
number: <input type="number" name="my_number" value="0.4" min="0" max="1" step="0.2"/><br/>
range:  <input type="range"  name="my_range"  value="33"  min="0" max="100"/><br/>
color:  <input type="color"  name="my_color"  value="#00FF88"/><br/>
date:   <input type="date"   name="my_date"   value="2017-01-20"/><br/>
select: <select name="size">
    <option>Gihugeic</option>
    <option selected="selected">Ginormace</option> <!--the inital value-->
    <option>Gilossal</option>
</select><br/>
combo_box: <div id="my_combo_box" class="combo_box" style="display:inline-block;vertical-align:middle;"> <!-- Can't use 'name' attribute. Must use 'id'. -->
        <option>one</option>
        <option selected="selected">two</option>
</div><br/>
file:   <input type="file" name="my_file"/><br/><br/>
button: <input type="button" value="Show settings"/><br/><br/>
submit: <input type="submit" value="OK"/>` + "`" +
',\n     width:380, height:450, title:"Printer Config", x:100, y:100,\n     callback: show_vals})\n');};

//______window_onchange_____________________
    var window_onchange_top_comments =
`/* show_window   onchange calls
    In most uses of show_window, its callback is called only
    when an input of type 'submit' or 'button' is clicked. 
    But you CAN have the callback called whenever the value
    of an input element changes. 
   
    An HTML property of data-onchange='true' will cause the 
    callback method to be called for an element when
    you change its value and select another elememt.
   
    An HTML property of data-oninput='true' causes the
    callback to be called as soon as a new value is entered.
    For input type="text" this is upon each character entered.
    For input type="radio" this is when any radio button in
    the group is clicked on.
    For select menus, this is when the value is changed.
    For input type="range" (sliders) this is upon every
    little move of the slider.
   
    The value of the "clicked_button_value" property of the
    object passed to the callback will be the 'name' of the
    changed input element, even though "clicked_button_value" 
    implies the 'value' of a 'button'.
   
    To see all this behavior, click the Eval button and play 
    with the controls in the window that pops up.
    Carefully observe the values printed in the output pane.
*/
`;
     var window_onchange_content =
`Text input with <samp>data-onchange='true'</samp> calls the callback<br/>
    when user clicks on another input.<br/>
    <input type="text"  name="my_onchange_text"  value="33"  min="0" max="100"
    data-onchange='true'/>
        <hr/>
        Text input with <samp>data-oninput='true'</samp> calls the callback<br/>
        after each keystroke entering text.<br/>
    <input type="text" name="my_oninput_text" value="33"  min="0" max="100"
    data-oninput='true'/>
        <hr/>

        Range "slider" with <samp>data-onchange='true'</samp> calls the callback<br/>
        after user stops moving the slider.<br/>
    <input type="range"  name="my_onchange_range"  value="33"  min="0" max="100"
    data-onchange='true'/><br/>
        <hr/>
        Range "slider" with <samp>data-oninput='true'</samp> calls the callback<br/>
        often as user moves the slider.<br/>
    <input type="range"  name="my_oninput_range"  value="33"  min="0" max="100"
    data-oninput='true'/>
        <hr/>      
        Radio button group input with each input having<br/>
        <samp>data-onchange='true'</samp> calls the callback<br/>
        whenever a radio button is clicked.<br/>
    <input type="radio" name="my_radio_group" value="abs"    data-onchange="true"/>ABS
        <input type="radio" name="my_radio_group" value="carbon" data-onchange="true"/>Carbon Fiber
    <input type="radio" name="my_radio_group" value="pla"    data-onchange="true" checked="checked"/>PLA
`;
    window_onchange_id.onclick = function(){Editor.insert(
        window_onchange_top_comments +
`function the_cb(vals){ //vals contains name-value pairs for each input
     out(vals.clicked_button_value + " = " +
         vals[vals.clicked_button_value])
}
show_window({content:
`       + "`" +
        window_onchange_content + "`" +
`,           title: "show_window onchange & oninput",
             width: 440, height: 440, x: 500, y: 100, 
             callback: the_cb})
` );};
    window_svg_id.onclick=function(){Editor.insert(
`//SVG Example 1: lots of shapes
function handle1(arg) { 
    if((arg.clicked_button_value === "background_id") ||
       (arg.clicked_button_value === "svg_id")) {
        append_in_ui("svg_id", svg_circle({cx: arg.offsetX, cy: arg.offsetY, r: 7}))    
    }
    else if (arg.clicked_button_value === "circ_id") {
        out("clicked on circ_id")
    }
    else if (arg.clicked_button_value === "ellip_id") {
        out("The user clicked on ellip_id")
    }
}

show_window({
    title: "SVG Example 1: Lots of shapes. Click to interact",
    content: svg_svg({id: "svg_id", height: 300, width: 500, html_class: "clickable", child_elements: 
       [//svg_rect({id: "background_id", html_class: "clickable", style:"position: relative; top: 0; right: 0; x: 0, y: 0, width: 500, height: 500, color: "white", border_width: 3, border_color: "yellow"}),
        svg_circle({id: "circ_id", html_class: "clickable", cx: 20, cy: 20, r: 30, color: "purple"}),  
        svg_ellipse({id: "ellip_id", html_class: "clickable", cx: 270, cy: 50, rx: 60, ry: 30, color: "orange"}),
        svg_line({x1: 30, y1: 30, x2: 100, y2: 200, color: "blue", width: 5}),
        svg_rect({x: 50, y: 50, width: 40, height: 100, color: "green", border_width: 3, border_color: "yellow", rx: 20, ry: 5}),
        svg_polygon({points: [[400, 10], [500, 10], [450, 100]], color: "lime", border_width: 3, border_color: "yellow"}),
        svg_polyline({points: [[400, 100], [480, 100], [450, 200], [480, 250]], color: "brown", width: 10}),
        svg_text({text: "this is a really long string", x: 50, y: 50, size: 30, color: "red", border_width: 2, border_color: "black", style: 'font-weight:bold;'}),
        svg_html({html: "<i style='font-size:30px;'>yikes</i>", x: 60, y: 100})
                      ]}),
    width: 610,  // window width
    height: 200, // window height
    x: 0,        // Distance from left of DDE window to this window's left
    y: 100,      // Distance from top  of DDE window to this window's top
    callback: handle1
})

//SVG Example 2: draw circle then move it to clicked position.
function handle2 (vals){ 
    if(window.c_id) {
        set_in_ui("c_id.cx", vals.offsetX)
        set_in_ui("c_id.cy", vals.offsetY)
    }
    else {
        append_in_ui(
            "s2_id", 
            svg_circle({id: "c_id", cx: vals.offsetX, cy: vals.offsetY, 
                        r: 15, color: "blue"}))
  }
}

show_window({
    title: "SVG Example 2: Click to draw and move circle",
    content: svg_svg({id: "s2_id", width: 600, height: 200, html_class: "clickable"}),
    x: 0,
    y: 330,
    width: 600,
    height: 200,
    callback: handle2
})

//SVG Example 3: draw line segments
var linex = null
var liney = null
function handle3 (vals){ 
    if(linex) {
        append_in_ui(
            "s3_id", 
            svg_line({x1: linex, y1: liney, x2: vals.offsetX, y2: vals.offsetY}))
    }
   else {
       append_in_ui(
           "s3_id", 
           svg_circle({cx: vals.offsetX, cy: vals.offsetY, 
                       r: 5, color: "blue"})) 
   }
   linex = vals.offsetX
   liney = vals.offsetY
}

show_window({
    title: "SVG Example 3: Click to draw lines",
    content: svg_svg({id: "s3_id", width: 400, height: 350, html_class: "clickable",
                      child_elements: [
                          svg_rect({x: 100, y: 100, width: 200, height: 50, color: "yellow"})
           ]}),
    width: 470, x: 620, y: 100,
    callback: handle3
})
`);};

    window_modify_id.onclick=function(){Editor.insert(
`function modify_window_cb(vals){
   let color = "rgb(" + Math.round(Math.random() * 255) + "," +
                        Math.round(Math.random() * 255) + "," +
                        Math.round(Math.random() * 255) + ")"
   selector_set_in_ui("#" + vals.show_window_elt_id + " [name=the_in] [style] [background]",
                      color
                      )
   selector_set_in_ui("#" + vals.show_window_elt_id + " [name=the_in] [afterend]",
                      "<br/>" + color)
}

show_window({title: "Modify Window",
             x:300, y:20, width:300, height:200, 
             callback: modify_window_cb,
             content: '<input type="button" name="the_in" value="click to colorize"/>'
  })
`
    );};

    build_window_id.onclick=ab.launch;

    opencv_gray_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_gray.js");
        Editor.insert(code);
    };
    opencv_blur_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_blur.js");
        Editor.insert(code);
    };

    opencv_in_range_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_in_range.js");
        Editor.insert(code);
    };

    opencv_blob_detector_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_blob_detector.js");
        Editor.insert(code);
        open_doc("Picture.detect_blobs_doc_id");
    };

    opencv_process_webcam_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_process_webcam.js");
        Editor.insert(code);
    };

    opencv_face_reco_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_face_reco.js");
        Editor.insert(code);
    };

    opencv_locate_object_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_locate_object.js");
        Editor.insert(code);
        open_doc("Picture.locate_object_doc_id");
    };

    opencv_picture_similarity_id.onclick=function(){
        const code = read_file(__dirname + "/examples/opencv_picture_similarity.js");
        Editor.insert(code);
        open_doc("Picture.mats_similarity_by_color_doc_id");
    };

    window_close_all_id.onclick=function(){ SW.close_all_show_windows(); };

    machine_vision_help_id.onclick = function(){open_doc(machine_vision_doc_id);};

    show_page_id.onclick=function(){
        Editor.wrap_around_selection('show_page(', ')\n', '"hdrobotic.com"');
        open_doc(show_page_doc_id);};

    get_page_id.onclick=function(){
             open_doc(get_page_doc_id);
             Editor.insert('get_page("http://www.ibm.com")');
    };

    beep_id.onclick = function(){
          Editor.insert("beep()\n");
          open_doc(beep_doc_id);};
    beep_options_id.onclick = function(){Editor.insert(
`beep({
    dur: 0.5,  //the default,, 
    frequency: 440, //the default, in Hertz. This is A above middle C.    
    volume: 1,      //the default, 0 to 1
    waveform: "triangle", //the default, other choices: "sine", "square", "sawtooth"
    callback: function(){beep({frequency: 493.88})} //default=null, run at end of the beep
    })
`
    );};
    beeps_id.onclick = function(){
        open_doc(beeps_doc_id);
       Editor.insert(
`beeps(3, //default=1. number of times to beep using the default beep.
      function(){speak({speak_data: "Third Floor, home robots"})}) //default=null. callback when done
`);};
    speak_id.onclick=function(){
        open_doc(speak_doc_id);
        Editor.wrap_around_selection(
        "speak({speak_data: ", "})\n", '"Hello Dexter"');};

    speak_options_id.onclick=function(){Editor.wrap_around_selection(
`speak({
    speak_data: ` , //default="hello"  can be a string, number, boolean, date, array, etc.
`,\n    volume: 1.0,   //default=1.0   0 to 1.0,
    rate: 1.0,     //default=1.0   0.1 to 10,
    pitch: 1.0,    //default=1.0   0 to 2,
    lang: "en-US", //default="en-US"
    voice: 0,      //default=0     0, 1, 2, or 3
    callback: function(event) {out('Dur in nsecs: ' + event.elapsedTime)}  //default=null  called when speech is done.
})\n`, '[true, "It is", new Date()]'
        );
        open_doc(speak_doc_id);};
    /*recognize_speech_id.onclick = function(){Editor.insert(
`recognize_speech(
    {prompt: "Say something funny.", //Instructions shown to the speaker. Default "".
     click_to_talk: false,           //If false, speech recognition starts immediately. Default true.
     only_once: false,               //If false, more than one phrase (after pauses) can be recognized. Default true.
     phrase_callback: undefined,     //Passed text and confidence score when user pauses. Default (undefined) prints text and confidence. If only_once=true, only this callback is called.
     finish_phrase: "finish",        //Say this to end speech reco when only_once=false.
     finish_callback: out})          //Passed array of arrays of text and confidence when user says "finish". Default null.
`)}*/

    music_help_id.onclick=function(){ open_doc(music_with_midi_doc_id); };
    phrase_examples_id.onclick=function(){
        const code = read_file(__dirname + "/music/phrase_examples.js");
        Editor.insert(code);
    };
    midi_init_id.onclick = Midi.init;

   //eval_and_start_button_id.onclick = eval_and_start

    make_dictionary_id.onclick=function(){
        const code = read_file(__dirname + "/examples/make_dictionary.js");
        Editor.insert(code);
    };
    nat_lang_reasoning_id.onclick=function(){
        const code = read_file(__dirname + "/examples/nat_lang_reasoning.js");
        Editor.insert(code);
    };


    ez_teach_id.onclick=function(){
        Editor.edit_new_file();
        Editor.insert(read_file(__dirname + "/user_tools/ezTeach_template.js"));
        open_doc(ez_teach_doc_id);
    };

    jobs_help_id.onclick          = function(){ open_doc(Job_doc_id); };
    //start_job_id.onclick        = Job.start_job_menu_item_action
    //start_job_help_id.onclick = function(){ open_doc(start_job_help_doc_id) } //nw help is simply under theh Output pane help, and users see it by clicking on the "Output" pane title.

    test_suites_help_id.onclick = function(){ open_doc(TestSuite_doc_id); };

    insert_all_test_suites_id.onclick  = function(){TestSuite.insert_all();};

     run_all_test_suites_id.onclick     = function(){TestSuite.run_all();};
    // show_all_test_suites_id.onclick  = function(){TestSuite.show_all()}  //functionality obtained with Find and no selection
     run_test_suite_file_id.onclick     =  TestSuite.run_ts_in_file_ui;

    //obsoleted by increased functionality in doc pane Find button. find_test_suites_id.onclick        = function(){TestSuite.find_test_suites(Editor.get_any_selection())}
    selection_to_test_id.onclick=function(){
       TestSuite.selection_to_test(Editor.get_javascript(true), Editor.get_javascript(), Editor.selection_start());
       };
    show_suite_statistics_id.onclick=TestSuite.statistics;
    insert_test_suite_example_id.onclick=function(){
                    Editor.insert( //below the same as the first test suite in the main test suites except that
                                   //its name is different so that the "summary" doesn't subtract the
                                   //usual 2 unknown failures and thus the summary of runnign this
                                   //will be consistent with the errors it shows.
`new TestSuite(
    "example_test_suite",
    ["2 + 3", "5", "1st elt (source) evals to same as 2nd elt (expected) and the test passes."],
    ['similar(2.05, 2, 0.1)', "true", "tolerance of 0.1 permits 2.05 and 2 to be similar"],
    ["var foo = 4 + 1"],
    ["foo", "5", "The side effect of the above 'set up' test, sets foo. Foo's value is tested here."],
    ['"hi" + " dexter"', '"hi dex"', "known failures are declared with this description string starting with 'known'."],
    ['foo961', '123', "This is an 'unknown failure' for demo purposes"],
    ['foo723', 'TestSuite.error', 'Tests with expected of TestSuite.error pass if the source errors.'],
    ['out(TestSuite.run("similarX"))', 'TestSuite.dont_care', "Run another test suite. This one errors because its not defined."]
)
`, null, true);};
    //TestSuite.make_suites_menu_items() //because the ones that are defined from TestSuite.js can't make their menu items until dom is ready

    //Learn Javascript menu
    learn_js_help_id.onclick = function (){open_doc(learning_js_doc_id);};
      // Debugging menu
    dev_tools_id.onclick      = function(){show_window({content:
         "To see the output of <code>console.log</code> calls,<br/>" +
         "and for using the <code>debugger</code> breakpoint,<br/>" +
         "you must first open <i>Chrome Dev Tools</i> by:<br/>" +
         "clicking right anywhere and choosing <b>Inspect</b>.<p/>" +
         "Note: The <b>out</b> call is more useful in most cases than <code>console.log</code>. " +
         "It doesn't require <i>Chrome Dev Tools</i>.<br/>See <button>Insert&#9660;</button> <i>Print to output</i>.<br/><br/>" +
         "There's more help in the Documentation pane under <b>Debugging</b>.",
         title: "Debugging Help", width:430, height:270});
         open_doc(debugging_id);
          //WORKS! 800 is milliseconds for the animation to take.
         //$('#doc_contents_id').animate({scrollTop: $('#d ebugging_id').offset().top}, 800); //jquery solution that fails.
         //d ebugging_id.scrollIntoView(true) //does so instantaneously but it at least works.
         //However, it causes the DDE header to scroll off the top of the window
         //and a user can't get it back. If the user has not expanded any triangles
         //in the doc pane, then NOT calling scrollIntoView is fine, but if they have.
         //they likely won't see the Debugging content. Probably an interaction between
         //this new HTML5 stuff and jqwidgets
        // the below fail.
                                      //poitions the top of the elt at the top of the pane, which is good.
        //d ebugging_id.scrollIntoView({behavior:"smooth"});//doesn't  smooth scroll in chrome
        //$("#d ebugging_id").parent().animate({scrollTop: $("#debugging_id").offset().top}, 1000) //doesn't work
         }; //fails: window.open("chrome://inspect/#apps")
    console_log_id.onclick     = function(){Editor.wrap_around_selection("console.log(", ")", '"Hello"');};

    step_instructions_id.onclick = function(){
        open_doc("Control.step_instructions_doc_id");
        let cursor_pos = Editor.selection_start();
        let src = Editor.get_javascript();
        let prev_char = ((cursor_pos == 0) ? null : src[cursor_pos - 1]);
        let prefix;
        if (Editor.selection_start() == 0)     {prefix = "";}
        else if ("[, \n]".includes(prev_char)) {prefix = "";}
        else                                   {prefix = ",";}
        Editor.insert(prefix + 'Control.step_instructions(),nnll'); //ok if have comma after last list item in new JS.
    };

    debugger_id.onclick        = function(){Editor.insert("debugger;nnll");}; ////LEAVE THIS IN RELEASED CODE

    debugger_instruction_id.onclick = function(){
         open_doc("Control.debugger_doc_id");
         let cursor_pos = Editor.selection_start();
         let src = Editor.get_javascript();
         let prev_char = ((cursor_pos == 0) ? null : src[cursor_pos - 1]);
         let prefix;
         if (Editor.selection_start() == 0)     {prefix = "";}
         else if ("[, \n]".includes(prev_char)) {prefix = "";}
         else                                   {prefix = ",";}
         Editor.insert(prefix + 'Control.debugger(),nnll'); //ok if have comma after last list item in new JS.
    };

    comment_out_id.onclick     = function(){Editor.wrap_around_selection("/*", "*/");};
    comment_eol_id.onclick     = function(){Editor.insert("//");};
      //true & false menu
    true_id.onclick          = function(){Editor.insert(" true ");};
    false_id.onclick         = function(){Editor.insert(" false ");};
    and_id.onclick           = function(){Editor.insert(" && ");};
    or_id.onclick            = function(){Editor.insert(" || ");};
    not_id.onclick           = function(){Editor.insert("!");};

      //Math menu
    math_example_id.onclick = function(){Editor.insert("(-1.75 + 3) * 2\n");};
    plus_id.onclick         = function(){Editor.insert("+");};
    minus_id.onclick        = function(){Editor.insert("-");};
    times_id.onclick        = function(){Editor.insert("*");};
    divide_id.onclick       = function(){Editor.insert("/");};
    pi_id.onclick           = function(){Editor.insert("Math.PI");};
    parens_id.onclick       = function(){Editor.wrap_around_selection("(", ")");};

       //Compare Numbers menu
    compare_example_id.onclick = function(){Editor.insert("Math.PI >= 3\n");};
    less_id.onclick            = function(){Editor.insert("<");};
    less_or_equal_id.onclick   = function(){Editor.insert("<=");};
    equal_id.onclick           = function(){Editor.insert("==");};
    more_or_equal_id.onclick   = function(){Editor.insert(">=");};
    more_id.onclick            = function(){Editor.insert(">");};
    not_equal_id.onclick       = function(){Editor.insert("!=");};

       //Strings menu
    double_quote_id.onclick   = function(){Editor.wrap_around_selection('"', '"');};
    single_quote_id.onclick   = function(){Editor.wrap_around_selection("'", "'");};
    back_quote_id.onclick     = function(){Editor.wrap_around_selection('`', '`');};
    add_strings_id.onclick    = function(){Editor.insert("+");};

    string_length_id.onclick  = function(){Editor.insert(".length");};
    get_char_id.onclick       = function(){Editor.insert("[0]");};
    slice_id.onclick          = function(){Editor.insert(".slice(0, 3)");};
    split_id.onclick          = function(){Editor.insert('.split(" ")');};
    string_equal_id.onclick   = function(){Editor.insert('==');};
    starts_with_id.onclick    = function(){Editor.insert('.startsWith("ab")');};
    ends_with_id.onclick      = function(){Editor.insert('.endsWith("yz")');};
    replace_string_id.onclick = function(){Editor.insert('.replace(/ab/g, "AB")');};

       //Arrays menu
    make_array_id.onclick         = function(){Editor.insert('[5, "ab", 2 + 2]');};
    array_length_id.onclick       = function(){Editor.insert('.length');};
    get_array_element_id.onclick  = function(){Editor.insert('[0]');};
    set_array_element_id.onclick  = function(){Editor.insert('[0] = 42');};
    push_array_element_id.onclick = function(){Editor.insert('.push(9)');};

    //DATE
    new_date_day_id.onclick       = function(){Editor.insert('new Date("' + new Date().toString().slice(4, 15) + '")');};
    new_date_time_id.onclick      = function(){Editor.insert('new Date("' + new Date().toString().slice(4, 24) + '")');};
    new_date_ms_id.onclick        = function(){Editor.insert('new Date(3000)');};
    date_now_id.onclick           = function(){Editor.insert('Date.now()');};
    date_valueOf_id.onclick       = function(){Editor.insert('new Date().valueOf()');};
    date_toString_id.onclick      = function(){Editor.insert('new Date().toString()');};
    duration_hms_id.onclick       = function(){Editor.insert('new Duration("01:14:05")');};
    duration_hmsms_id.onclick     = function(){Editor.insert('new Duration(1, 2, 5, 10)');};
    duration_get_ms_id.onclick    = function(){Editor.insert('new Duration(0, 0, 1, 500).milliseconds');};
      //Variables menu
    variable_examples_id.onclick = function(){Editor.insert('var foo = 5 //initialize variable\nfoo //evals to 5\nfoo = "2nd" + " " + "val" ///set existing variable to new value\nfoo //now evals to "2nd val"\n');};
    init_variable_id.onclick     = function(){Editor.insert('var foo = ');};
    set_variable_id.onclick      = function(){Editor.insert('=');};

     //JS Objects menu
    js_object_example_id.onclick = function(){Editor.insert(
`var foo = {sam: 2, joe: 5 + 1} //make a JS object
foo      //evals to the new object
foo.sam  //evals to 2
foo.joe  //evals to 6
foo.joe = 99 //within foo, sets the value of joe to 99
foo.joe  //now evals to 99
foo["jo" + "e"] //compute the name to lookup. evals to 99
foo["jo" + "e"] = "jones" //set computed name to new value
foo.joe  //NOW evals to "jones"
foo.ted = 3 / 2  //adds a new name:value pair to foo.
foo //eval to see the latest values\n`);};
        js_object_cheat_sheet_id.onclick = function(){show_window({content:
`<pre>var foo = {sam: 2, joe: 5 + 1} //make a JS object
foo      //evals to the new object
foo.sam  //evals to 2
foo.joe  //evals to 6
foo.joe = 99    //within foo, sets the value of joe to 99
foo.joe  //now evals to 99
foo["jo" + "e"] //compute the name to lookup. evals to 99
foo["jo" + "e"] = "jones" //set computed name to new value
foo.joe         //NOW evals to "jones"
foo.ted = 3 / 2 //adds a new name:value pair to foo.
foo      //eval to see the latest values</pre>`,
            title: "JavaScript Object Cheat Sheet",
            width:  550,
            height: 280,
            x:      440,
            y:      370});};

    // Control Flow menu
    if_single_armed_id.onclick = function(){Editor.wrap_around_selection('if (1 + 1 == 2) {\n    ', '\n}');};
    if_multi_armed_id.onclick  = function(){Editor.wrap_around_selection('if (1 + 1 == 2) {\n    ', '\n}\nelse if (2 + 2 == 4){\n    \n}\nelse {\n    \n}\n');};
    for_number_of_times_id.onclick    = function(){Editor.wrap_around_selection('for(let i = 0; i < 10; i++){\n', '\n}\n');};
    for_through_array_elts_id.onclick = function(){Editor.wrap_around_selection('for(let x of [7, 4, 6]){\n', '\n}\n');};
    try_id.onclick             = function(){Editor.wrap_around_selection('try{\n', '\n} catch(err){handle errors here}');};
    dde_error_id.onclick       = function(){Editor.wrap_around_selection('dde_error(', ')', '"busted!"');};
    setTimeout_id.onclick=function(){Editor.insert('setTimeout(function(){console.log("waited 3 seconds")}, 3000)nnll');};

    // Function menu
    function_example_id.onclick   = function(){Editor.insert("function my_add(a, b){ // define the function 'my_add'\n    var sum = a + b\n    return sum\n}\nmy_add(2, 3) // run my_add's code with a=2 and b=3\n");};
    named_function_id.onclick     = function(){Editor.wrap_around_selection('function foo(x, y) {\n', '\n}\n');};
    anonymous_function_id.onclick = function(){Editor.wrap_around_selection('function(x, y) {\n', '\n}\n');};
    return_id.onclick             = function(){Editor.insert("return ");};
    //End of Learn JS menu

    //series Menu
     units_system_help_id.onclick = function(){ open_doc(units_system_help_doc_id); };

     //jobs menu
    show_robot_status_id.onclick   = RobotStatusDialog.show;
    jobs_report_id.onclick         = function(){Job.report(); };
    stop_all_jobs_id.onclick       = function(){
                                         Job.stop_all_jobs();
                                         if(!TestSuite.status) {
                                             TestSuite.immediate_stop = true;
                                         }
                                     };
    undefine_jobs_id.onclick       = function(event){
        Job.clear_stopped_jobs();
        event.target.blur();
    }; //use individual X (close) marks instead

    /*$("#real_time_sim_checkbox_id").jqxCheckBox({ checked: true })
    real_time_sim_checkbox_id.onclick = function(event) {
        if ($("#real_time_sim_checkbox_id").val()){
            $("#real_time_sim_checkbox_id").jqxCheckBox({ checked: true })
        }
        else {
            $("#real_time_sim_checkbox_id").jqxCheckBox({ checked: false })
        }
        event.stopPropagation() //causes menu to not shrink up, so you can see the effect of your click
                            //AND causes the onclick for simulate_id to NOT be run.
    }*/
    insert_new_job_id.onclick = Editor.insert_new_job;
    set_menu_string(insert_new_job_id, "New Job", "j");

    eval_and_start_job_id.onclick = function(){
           open_doc(eval_and_start_job_doc_id);
           Job.start_job_menu_item_action();
    };


    insert_job_example0_id.onclick = function(){Editor.insert(job_examples[0]);};
    insert_job_example1_id.onclick = function(){Editor.insert(job_examples[1]);};
    insert_job_example2_id.onclick = function(){Editor.insert(job_examples[2]);};
    insert_job_example3_id.onclick = function(){Editor.insert(job_examples[3]);};
    insert_job_example4_id.onclick = function(){Editor.insert(job_examples[4]);};
    insert_job_example5_id.onclick = function(){Editor.insert(job_examples[5]);};
    insert_job_example6_id.onclick = function(){Editor.insert(job_examples[6]);};
    insert_job_example7_id.onclick = function(){Editor.insert(job_examples[7]);};
    insert_job_example8_id.onclick = function(){Editor.insert(job_examples[8]);};
    insert_job_example9_id.onclick = function(){Editor.insert(job_examples[9]);};
    insert_job_example10_id.onclick = function(){Editor.insert(job_examples[10]);};
    insert_job_example11_id.onclick = function(){Editor.insert(job_examples[11]);};
    insert_job_example12_id.onclick = function(){Editor.insert(job_examples[12]);};
    insert_job_example13_id.onclick = function(){Editor.insert(job_examples[13]);
                                                 open_doc("Control.loop_doc_id");};
    insert_job_example14_id.onclick = function(){Editor.insert(job_examples[14]);};

        //RUN INSTRUCTION
    move_to_home_id.onclick    = function(){ Robot.dexter0.move_all_joints_fn(); };
    move_to_neutral_id.onclick = function(){ Robot.dexter0.move_all_joints_fn(Dexter.NEUTRAL_ANGLES); };
    //move_to_parked_id.onclick  = function(){ Robot.dexter0.move_all_joints_fn(Dexter.PARKED_ANGLES) }  //not useful, sometimes Dexter runs into itself
    move_to_selection_id.onclick = Editor.move_to_instruction;
    /*function(){
         var sel = Editor.get_any_selection().trim()
         if (sel === "") {
            warning("There is no selection for a dexter0 instruction.")
            return
         }
         //selection could be [asdf] or 123 or 123,456 or foo or bar()
         //if it looks like numbers, wrap [] around them
         if (sel[0] !== "[") {
             if (is_digit(sel[0])) {
                sel = "[" + sel
                if (sel[sel.length - 1] !== "]") { sel = sel + "]" }
             }
         }
         try{  sel = eval(sel) }
         catch (err) { warning("The selection did not evaluate to an array.") }
         if (Array.isArray(sel)){
             if (sel.length == 0){
                warning("The selection is an empty array meaning it would have no effect.")
             }
             else if ((sel.length <= 3) && (typeof(sel[0]) == "number")){
                 Robot.dexter0.move_to_fn(sel)
             }
             else if ((sel.length <= 5) && (typeof(sel[0]) == "number")){
                 Robot.dexter0.move_all_joints_fn(sel)
             }
             else { Robot.dexter0.run_instruction_fn(sel) }
         }
         else if ((sel === undefined) ||
                  (sel === null) ||
                  (typeof(sel) == "boolean")){
             warning("The selection evals to undefined, null, or a boolean,<br/>" +
                     "neither of which are valid Job instructions.")
         }
         else { Robot.dexter0.run_instruction_fn(sel) }
    }*/
    set_menu_string(move_to_selection_id, "selection", "r");

    run_instruction_dialog_id.onclick = run_instruction;

    init_dxf_drawing_id.onclick = function(){
        var content =
`DXF.init_drawing({
    dxf_filepath: "choose_file",    //image to draw
    three_points: 
        [[0,  .55, 0.05],  //Point1 locates the drawing plane
         [0,   .4, 0.05],  //Point2
         [.15, .4, 0.05]], //Point3
    plane_normal_guess: [0, 0, 1],
    calc_plane_normal: false,
    tool_height: 5.08 * _cm,
    tool_length: 8.255 * _cm,
    DXF_units: undefined, //0.001 means each DXF distance unit is worth 1mm
                          //undefined means scale drawing to fit the three_points
    draw_speed:  1 * _cm/_s,
    draw_res:  0.5 * _mm, //Max step size of straight line
    lift_height: 1 * _cm, //distance above surface when pen is not drawing
    tool_action: false,
    tool_action_on_function: 
        function(){
		    return [make_ins("w", 64, 2),
					Dexter.dummy_move()]
		},
        tool_action_off_function: 
            function(){
                return [make_ins("w", 64, 0),
                        Dexter.dummy_move()]
        }})
`;
        Editor.insert(content);
        open_doc("DXF.init_drawing_doc_id");
    };

    //Jobs/Dexter Tools menu.
    browse_dexter_id.onclick     = function() {
        let url = "http://" + Dexter.default.ip_address;
        browse_page(url);
    };
    calibrate_id.onclick         = function() { init_calibrate(); };//defines 2 jobs and brings up calibrate dialog box

    dui2_id.onclick              = function() {
        Job.define_and_start_job(__dirname + "/user_tools/dexter_user_interface2.js");
    };
    ping_dexter_id.onclick       = function() { ping_a_dexter(); open_doc(ping_doc_id); };

    reboot_joints_id.onclick  = function(){
        open_doc("Dexter.reboot_joints_doc_id");
        Dexter.default.reboot_joints_fn(); //not an instruction, a function that creates a job and starts it
    };

    show_errors_log_id.onclick = function(){
        let path = "Dexter." + Dexter.default.name + ":/srv/samba/share/errors.log";
        read_file_async(path, undefined, function(err, data){
            if(err){
                dde_error("While attempting to get the content of " + path + "<br>" + err.message);
            }
            else {
                let content = data.toString();
                out("The content of " + path + " is:<pre>" + content + "</pre>");
            }
        });
    };
    dexter_start_options_id.onclick = show_dexter_start_options;

    update_firmware_id.onclick = FileTransfer.show_dialog;

    run_job_on_dexter_id.onclick = function() {
        let job_src = Editor.get_any_selection(); //we want to be able to select a Job def in
            //the doc pane and send it to Dexter.
        if(job_src == "") {
            job_src = Editor.get_javascript("auto"); //the normal case, get the whole editor buffer
        }
        Job.start_and_monitor_dexter_job(job_src);
    };

    show_messaging_dialog_id.onclick = function(){
        Messaging.show_dialog();
        open_doc("Messaging_id");
    };

    //cmd menu
    cd_up_id.onclick = function(){
        cmd_input_id.value = "cd ..";
        SSH.run_command({command:"cd ..;echo 'The new current directory is: ';pwd"});
    };
    date_id.onclick = function(){
        cmd_input_id.value = "date";
        SSH.run_command({command:"date"});
    };
    ssh_find_id.onclick = function(){
        out("<i>SSH <b>find</b> from / takes about 10 seconds.<br/>" +
            "The <b>-iname</b> option makes <b>find</b> case-insensitive,<br/>" +
            "whereas <b>-name</b> makes it case-sensitive.</i>");
        cmd_input_id.value = 'find / -iname "*partial_file_name_here*" -print';
        cmd_input_id.focus();
    };
    make_directory_id.onclick = function(){
        cmd_input_id.value = "mkdir " + SSH.dir_for_ls + "/[new dir name]";
        cmd_input_id.focus();
    };
    make_file_id.onclick = function(){
            cmd_input_id.value = "touch " + SSH.dir_for_ls + "/[new file name]";
        cmd_input_id.focus();
    };
    man_id.onclick = function(){
        cmd_input_id.value = "man -P cat [cmd name]";
        cmd_input_id.focus();
    };
    pwd_id.onclick = function(){
        cmd_input_id.value = "pwd";
        SSH.run_command({command:"pwd"});
    };
    show_directory_id.onclick = function(){
        cmd_input_id.value = SSH.show_dir_cmd;
        SSH.run_command({command:SSH.show_dir_cmd});
    };
    reboot_id.onclick = function() {
        cmd_input_id.value = "shutdown -r now";
        cmd_input_id.focus();
    };
    run_selected_cmd_id.onclick = function(){
        let cmds = Editor.get_javascript("auto").trim();
        if(cmds == ""){
            warning("There are no commands selected.");
        }
        else {
            let end_pos = cmds.indexOf(";");
            if (end_pos == -1) { end_pos = cmds.indexOf("\n"); }
            else { end_pos = cmds.length; }
            let cmd_to_show = cmds.substring(0, end_pos);
            cmd_input_id.value = cmd_to_show;
            SSH.run_command({command:cmds});
        }
    };
    whoami_id.onclick = function(){
        cmd_input_id.value = "whoami";
        SSH.run_command({command:"whoami"});
    };

    /*ping_id.onclick          = function(){ rde.ping()}
    cat_etc_hosts_id.onclick = function(){ rde.shell('cat /etc/hosts')}
    rosversion_id.onclick    = function(){ rde.shell('rosversion -d')}
    roswtf_id.onclick        = function(){ rde.shell('roswtf')}
    printenv_id.onclick      = function(){ rde.shell('printenv | grep ROS')}
    rqt_graph_id.onclick     = function(){ rde.shell('rqt_graph')}

    rosmsg_id.onclick        = function(){rde.shell('rosmsg list')}
    rosnode_id.onclick       = function(){rde.shell('rosnode list')}
    rospack_id.onclick       = function(){rde.shell('rospack list')}
    rosparam_id.onclick      = function(){rde.shell('rosparam list')}
    rosservice_is.onclick    = function(){rde.shell('rosservice list')}
    rostopic_id.onclick      = function(){rde.shell('rostopic list')}
    */
    clear_output_id.onclick  = function(){clear_output(); myCodeMirror.focus();};

    javascript_pane_help_id.onclick    = function(){ open_doc(javascript_pane_doc_id);  };
    output_pane_help_id.onclick        = function(){ open_doc(output_pane_doc_id);  };
    documentation_pane_help_id.onclick = function(){ open_doc(documentation_pane_doc_id);  };
    misc_pane_help_id.onclick          = function(){ open_doc(misc_pane_doc_id);  };

    //simulate pane
    demo_id.onclick          = function() {
                                    if (demo_id.innerHTML == "Demo") {
                                        demo_id.innerHTML = "Stop";
                                        show_in_misc_pane("Simulate Dexter");
                                        play_simulation_demo();
                                    }
                                    else {
                                          sim.enable_rendering = false;
                                          demo_id.innerHTML = "Demo";
                                    }
                               };
    inspect_dexter_details_id.onclick = function() { inspect(Dexter.default); };

    pause_id.onclick         = function (){
                                    if (pause_id.checked) { //it just got checked
                                           Job.go_button_state = false;
                                    }
                                    else { Job.go_button_state = true; }
                                 };
    go_id.onclick                 = Job.go;
    show_queue_id.onclick = Simqueue.show_queue_for_default_dexter;

    //misc_pane_menu_id.oninput            = show_in_misc_pane
    let misc_items = ['Simulate Dexter',
                      'Make Instruction',
                      'Dexter Photo',
                      'Haddington Website',
                      'Dexter Architecture',
                      'Reference Manual',
                      'Choose File',
                      'Reward Board'];
    $("#misc_pane_menu_id").jqxComboBox({ source: misc_items, width: '85%', height: '20px', dropDownHeight: '235px'});
    $('#misc_pane_menu_id').on('keypress', function (event) {
        if(event.code == "Enter"){
            var val = event.target.value;
            show_in_misc_pane(val);
        }
    });
    $('#misc_pane_menu_id').on('select', function (event) { //fired when user types a char, or chooses a menu item
        let args = event.args;
        if(args) {
            let item = $('#misc_pane_menu_id').jqxComboBox('getItem', args.index);
            if(item) {
                let val = item.value;
                if(val && (val !== misc_pane_menu_selection)) {
                    setTimeout(function() {
                        show_in_misc_pane(val);
                    }, 100);
                }
            }
        }
    });
   /* $('#misc_pane_menu_id').on('change', function (event) { //fired when programmatically the comb box value is set
        let args = event.args;
        if(args) {
            let item = $('#misc_pane_menu_id').jqxComboBox('getItem', args.index)
            if(item) {
                let val = item.value
                if(val) {
                    show_in_misc_pane(val)
                }
            }
        }
    })*/

    font_size_id.onclick = function(){
                             $(".CodeMirror").css("font-size", this.value + "px");
                             persistent_set("editor_font_size", this.value);
                           };
    $("#font_size_id").keyup(function(event){
            if(event.keyCode == 13){
                $(".CodeMirror").css("font-size", this.value + "px");
                persistent_set("editor_font_size", this.value);
            }
    });

    persistent_initialize(); //called before loading dde_init.js by design.
    Metrics.init();
    //set_dde_window_size_to_persistent_values() //obsolete now that main.js does this

    let val = persistent_get("save_on_eval");
    $("#save_on_eval_id").jqxCheckBox({ checked: val});

    //if(val) { //have to do this because, unlike the DOM doc, chrome/electron checks the box if you set it to false.
    //    save_on_eval_id.setAttribute("checked", val)
    //}
    //similar to animate ui
    save_on_eval_id.onclick = function(event){
        let val = $("#save_on_eval_id").val();
        persistent_set("save_on_eval", val);
        event.stopPropagation(); //causes menu to not shrink up, so you can see the effect of your click
    };

    save_on_eval_wrapper_id.onclick = function(event){
        let old_val = $("#save_on_eval_id").val();
        let new_val = !old_val;
        $("#save_on_eval_id").val(new_val);
        persistent_set("save_on_eval", new_val);
        event.stopPropagation();
    };

    val = persistent_get("default_out_code");
    if(val) { //have to do this because, unlike the DOM doc, chrome/electron checks the box if you set it to false.
        format_as_code_id.setAttribute("checked", val);
    }
    format_as_code_id.onclick = function(event) {
                                    let val = format_as_code_id.checked;
                                    persistent_set("default_out_code", val);
    };

    //this must be before dde_init_dot_js_initialize() so that when a robot is defined, it can go on the menu
    default_robot_name_menu_container_id.innerHTML = make_dexter_default_menu_html();

    PatchDDE.init();

    dde_init_dot_js_initialize();//must occcur after persistent_initialize
    copy_file_async(__dirname + "/core/main_eval.py", "main_eval.py"); //because using __dirname + "/core/main_eval.py"
        // in 2nd arg to spawn fails because spawn can't get a file out of the asar "folder".
        //So I need to call spawn with a normal path when the Python process is launched.
        //do this here so it will be ready by the time Py.init needs it.
    Dexter.default = (Dexter.dexter0 ?  Dexter.dexter0 : null );
    //initialize the checkbox state
    $("#animate_ui_checkbox_id").jqxCheckBox({ checked: persistent_get("animate_ui")});

    animate_ui_checkbox_id.onclick = function(event) {
        let val = $("#animate_ui_checkbox_id").val();
        persistent_set("animate_ui", val);
        event.stopPropagation(); //causes menu to not shrink up, so you can see the effect of your click
        //AND causes the onclick for simulate_id to NOT be run.
        adjust_animation();
    };
    //so that you don't have to hit the checkbox, just anywhere in the menu item to check/uncheck it
    animate_ui_checkbox_wrapper_id.onclick = function(event){
        let old_val = $("#animate_ui_checkbox_id").val();
        let new_val = !old_val;
        $("#animate_ui_checkbox_id").val(new_val);
        persistent_set("animate_ui", new_val);

        event.stopPropagation(); //causes menu to not shrink up, so you can see the effect of your click
        //AND causes the onclick for simulate_id to NOT be run.
        adjust_animation();
    };
    adjust_animation(); //to the peristent flag


    const editor_font_size = persistent_get("editor_font_size");
    $(".CodeMirror").css("font-size", editor_font_size + "px");
    font_size_id.value = editor_font_size;


    //init_ros_id.onclick = function(){
    //         init_ros_service_if_url_changed()
    //} //must occur after dde_init_doc_js_initialize  init_ros_service($("#dexter_url").val())
    // rde.ping() //rde.shell("date") //will show an error message
    Editor.restore_files_menu_paths_and_last_file();
     //simulate_help_id.onclick=function(){ open_doc(simulate_doc_id) }



    simulate_radio_true_id.onclick  = function(){
          persistent_set("default_dexter_simulate", true);   event.stopPropagation();
     };
     simulate_radio_false_id.onclick = function(){ persistent_set("default_dexter_simulate", false);  event.stopPropagation();};
     simulate_radio_both_id.onclick  = function(){ persistent_set("default_dexter_simulate", "both"); event.stopPropagation();};

     const sim_val = persistent_get("default_dexter_simulate");
     if      (sim_val === true)   { simulate_radio_true_id.checked  = true; }
     else if (sim_val === false)  { simulate_radio_false_id.checked = true; }
     else if (sim_val === "both") { simulate_radio_both_id.checked  = true; }

     set_left_panel_width(persistent_get("left_panel_width"));
     set_top_left_panel_height(persistent_get("top_left_panel_height"));
     set_top_right_panel_height(persistent_get("top_right_panel_height"));



     help_system_id.onclick = function(){
        //open_doc(help_system_doc_id)
         SplashScreen.show();
     };
     setTimeout(check_for_latest_release, 200);
     //setTimeout(function(){ out("For help on using DDE, click <b style='color:blue;font-size:20px;'>?</b> in the upper right <b style='font-size:24px;'>&#x279A;</b> .") }, 400)

     setTimeout(function() { SplashScreen.show_maybe(); }, 400);
     close_all_details(); //doc pane just show top level items.
     setTimeout(function(){
         show_in_misc_pane(persistent_get("misc_pane_content"));
     }, 200);
} //end of on_ready

function set_left_panel_width(width=700){
    $('#outer_splitter_id').jqxSplitter({ panels: [{ size: width }], splitBarSize: 8 }); //default splitbarsize is 5
}

function set_top_left_panel_height(height=600){
    $('#left_splitter_id').jqxSplitter({ panels: [{ size: height }], splitBarSize: 8 });
}

function set_top_right_panel_height(height=600){
    //out("set top right:" + height)
    $('#right_splitter_id').jqxSplitter({ panels: [{ size: height }], splitBarSize: 8  });
}

function check_for_latest_release(){
    let dde_version_html = "<a href='#' title='Click to scroll the doc pane to the release notes.' onclick='open_doc(release_notes_doc_id)'>" +
                            dde_version +
                            "</a>";
    latest_release_version_and_date(function(err, response, body){
        if(err){
            out("You're running DDE version: " + dde_version_html +
                " released: " + dde_release_date +
                "<br/>DDE can't reach the web to check for the latest release.");
        }
        else {
            const the_obj = JSON.parse(body);
            let ver       = the_obj.name;
            if (ver.startsWith("v")) { ver = ver.substring(1); }
            var ver_date  = the_obj.published_at;
            if (ver != dde_version){
                ver_date       = date_to_mmm_dd_yyyy(ver_date); //ver_date.substring(0, ver_date.indexOf("T"))
                out("The latest public beta version of DDE is: " + ver +
                        " released: " + ver_date +
                        "<div style='margin-left:135px;'>You're running version: " + dde_version_html +
                        " released: " + dde_release_date +
                        "</div><a href='#' onclick='open_doc(update_doc_id)'>How to update.</a>",
                        "#900dff");
                //open_doc(update_doc_id) //no real need to do this. user can already get to it
                //by clicking on the a tag in the above printout.
            }
            else { out("DDE is up to date with version: " + dde_version_html +
                        " released: " + dde_release_date);
            }
        }
    });
}

function make_dde_status_report(){
    let top = "Please describe your issue with DDE here:\n\n\n" +
              "__________________________________________________\n" +
              "Below are the contents of your Editor and Output panes\n"+
              "to help us with the context of your comment.\n" +
              "We won't use any software you send us without your permission,\n" +
              "but delete below whatever you want to protect or\n" +
              "what you think is not relevant to the issue.";
    let jobs_report = Job.active_jobs_report(); //ends with blank line
    let latest_eval_src = latest_eval_button_click_source;
    if(!latest_eval_src) { latest_eval_src = "The Eval button hasn't been clicked since DDE was launched."; }

    let editor_pane_content = Editor.get_javascript();

    let output = get_output();
    output = output.replace(/<br>/g, "\n");
    output = output.replace(/<p>/g,  "\n\n");
    output = output.replace(/<hr>/g, "_____________________________________\n");


    let result =
        "Dexter Development Environment Status Report\n" +
        "Date: " + date_to_human_string() + "\n" +
        "DDE Version: " + dde_version + "\n" +
        top +
        "\n\n________Active Jobs______________________________\n" +
        jobs_report +
        "\n\n________Latest Eval Button Click Source______________\n" +
        latest_eval_src +
        "\n\n________Editor Pane______________________________\n" +
        editor_pane_content +
        "\n\n________Output Pane_______________________________\n" +
        output;
    return result
}

/* never called
function quit_dde(){
    require('electron').remote.getCurrentWindow().close()
} */

//misc fns called in ready.js
function email_bug_report(){
    subj = "DDE Suggestion " + date_to_human_string();
    bod = encodeURIComponent(make_dde_status_report());
    window.open("mailto:cfry@hdrobotic.com?subject=" + subj + "&body=" + bod);
}
console.log("bottom of ready.js");
on_ready();

/*
var {get_output} = require("./core/out.js")
//var {Root} = require("./core/object_system.js") //should work but doesn't jan 13, 2019
var {convert_backslashes_to_slashes} = require("./core/storage.js")
var Coor  = require("./math/Coor.js")
var calibrate_build_tables = require("./low_level_dexter/calibrate_build_tables.js")
var Job   = require("./core/job.js")
var Gcode = require("./core/gcode.js")
var DXF   = require("./math/DXF.js")
var {date_to_human_string, date_to_mmm_dd_yyyy, is_digit} = require("./core/utils.js")
var {FPGA} = require("./core/fpga.js")
var {Simqueue} = require("./core/simqueue.js")
*/

//packages for package sake.
//pkg names that contain hyphens or dots have those chars converted to underscore

//var fs = require("fs_path")  //already declared
//the below boosts DDE memory usage on startup from 88MB to 237MB
//mac activity monitor with this installed:
// electron         49 +
// electron helper  36 +
// electron helper 315
/*
var fs_path = require("fs-path")
var is_base64 = require("is-base64")
var js_beautify = require("js-beautify")
var mathjs = require("mathjs")
var modbus_serial = require("modbus-serial")
var multicast_dns = require("multicast-dns")
var nano_time = require("nano-time")
var opencv_js = require("opencv.js")
// var ping = require("ping")  //already declared
var plotly_js_dist = require("plotly.js-dist")
//var pump = require("pump")  //already declared
//var request = require("request")  //already declared
var scp2 = require("scp2")
var semver = require("semver")
var serialport = require("serialport")
var simple_get = require("simple-get")
var ssh2_promise = require("ssh2-promise")
*/
//var three = require("three") doesn't increase mem usable, is UI

export { on_ready };
//# sourceMappingURL=bundle.js.map
