import grpc$1 from '@grpc/grpc-js';
import protoLoader$1 from '@grpc/proto-loader';
import StripsManager$1 from 'strips';
import fs$1 from 'fs';
import PEG from 'pegjs';
import WebSocket$1, { WebSocketServer } from 'ws';
import child_process from 'child_process';
import { LongBits } from 'longbits';
import * as Espree$1 from 'espree';
import js_beautify from 'js-beautify';
import { create, all } from 'mathjs';
import compareVersions from 'compare-versions';
import require$$0 from 'domain';
import path$1 from 'path';

var name = "dde4";
var version = "4.1.4";
var release_date = "Sep 19, 2023";
var description = "test rollup";
var author = "Fry";
var license = "GPL-3.0";
var type = "module";
var scripts = {
	test: "echo \"Error: no test specified\" && exit 1",
	watch: "npm run build -- --watch",
	buildje: "rollup --config rollupje.config.js",
	build: "npm run copy_then_transform_rotating_calipers && rollup --config rollup.config.js",
	build_server: "rollup --config rollup_server.config.js",
	help: "rollup --help",
	dde_server: "node httpd.mjs",
	bundle_server: "node dde/build/bundle_server.mjs",
	copy_then_transform_rotating_calipers: "copyfiles --flat node_modules/rotating-calipers/rotating-calipers.js src/third_party && node replace-in-file.js"
};
var devDependencies = {
	"@rollup/plugin-commonjs": "^17.0.0",
	"@rollup/plugin-node-resolve": "^11.0.1",
	"@rollup/plugin-replace": "^2.3.4",
	copyfiles: "^2.4.1",
	"replace-in-file": "^6.3.2",
	rollup: "^2.35.1",
	"rollup-plugin-copy": "^3.4.0",
	"rollup-plugin-polyfill-node": "^0.8.0",
	"rollup-plugin-styles": "^3.14.1"
};
var dependencies = {
	"@grpc/grpc-js": "^1.6.7",
	"@grpc/proto-loader": "^0.6.12",
	"@rollup/plugin-json": "^4.1.0",
	"@speechly/browser-client": "^2.6.5",
	acorn: "^8.4.1",
	"adm-zip": "^0.5.5",
	asap: "^2.0.6",
	codemirror: "^5.63.1",
	"compare-versions": "^4.1.1",
	compromise: "^14.8.2",
	crypto: "^1.0.1",
	dayjs: "^1.10.5",
	eslint: "^7.32.0",
	"eslint-linter-browserify": "^8.43.0",
	espree: "^9.4.0",
	formidable: "^2.0.1",
	https: "^1.0.0",
	i: "^0.3.7",
	"jqwidgets-scripts": "^12.2.1",
	"js-beautify": "^1.14.0",
	"litegraph.js": "^0.7.10",
	longbits: "^1.1.0",
	"mark.js": "^8.11.1",
	mathjs: "^11.7.0",
	minimist: "^1.2.6",
	"modbus-serial": "^8.0.5",
	nouislider: "^15.5.0",
	npm: "^8.1.0",
	"npm-programmatic": "^0.0.12",
	openai: "^3.2.1",
	"opencv.js": "^1.2.1",
	os: "^0.1.2",
	path: "^0.12.7",
	pegjs: "^0.10.0",
	"pegjs-backtrace": "^0.2.1",
	ping: "^0.4.1",
	"plotly.js-dist": "^2.5.1",
	process: "^0.11.10",
	pump: "^3.0.0",
	querystring: "^0.2.1",
	"read-chunk": "^4.0.2",
	readline: "^1.3.0",
	"rotating-calipers": "^0.0.0",
	semver: "^7.3.5",
	"shepherd.js": "^8.3.1",
	"simple-get": "^3.1.0",
	stream: "^0.0.2",
	strips: "^0.0.10",
	three: "^0.157.0",
	"three-fbx-loader": "^1.0.3",
	"three-stl-loader": "^1.0.6",
	"three-text2d": "^0.6.0",
	webmidi: "^2.5.3",
	ws: "^8.8.0"
};
var package_json = {
	name: name,
	version: version,
	release_date: release_date,
	description: description,
	author: author,
	license: license,
	type: type,
	scripts: scripts,
	devDependencies: devDependencies,
	dependencies: dependencies
};

//import "../../../node_modules/semver/index.js" //error using rollup,  Cannot destructure property 'ANY' of 'require$$26' as it is undefined
const compare_semversions = compareVersions.compare;

//see https://stackoverflow.com/questions/65547827/how-to-import-npm-semver-on-an-ionic-project-with-angular
//which lies.
//import * as semver from "semver";

//import * as process from "../../../node_modules/process/index.js" //todo module is not defined
//import {Instruction} from "./instruction.js" //now global
//import {Robot, Brain, Dexter, Human, Serial} from './robot.js' //now global
//import * as espree from "espree"; //replaces esprima //now done in load_job_engine.js

//import {isBase64} from "../../../node_modules/is-base64/is-base64.js"
//importing from is_base64 npm module doesn't work, so code inlined below

class Utils$1 {

//_______base64_______
static isBase64(v, opts) {
    if (v instanceof Boolean || typeof v === 'boolean') {
        return false
    }

    if (!(opts instanceof Object)) {
        opts = {};
    }

    if (opts.allowEmpty === false && v === '') {
        return false
    }

    var regex = '(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\/]{3}=)?';
    var mimeRegex = '(data:\\w+\\/[a-zA-Z\\+\\-\\.]+;base64,)';

    if (opts.mimeRequired === true) {
        regex =  mimeRegex + regex;
    } else if (opts.allowMime === true) {
        regex = mimeRegex + '?' + regex;
    }

    if (opts.paddingRequired === false) {
        regex = '(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}(==)?|[A-Za-z0-9+\\/]{3}=?)?';
    }

    return (new RegExp('^' + regex + '$', 'gi')).test(v)
}

//note that the JS fns atob and btoa are defined in DDE proper
//but are not in node.js so they don't work on the Job Engine.
//So these are defined and will work on both DDE and Job Engine under node.
static base64_to_binary_string(str) {
    return Buffer.from(str, 'base64').toString('binary')
}


static binary_to_base64_string(str) {
    return Buffer.from(str, 'binary').toString('base64')
}

//normal base64 chars are only letters, digits, plus_sign and slash
//but *some* base64 has \n every 76 chars, and sometimes there's a
//trailing newline.
static is_string_base64(a_string, permit_trailing_newline=false) {
    if(typeof(a_string) === "string") {
        if(this.isBase64(a_string)) { return true }
        else if(permit_trailing_newline  &&
            (last(a_string) == "\n") &&
            (this.is_integer(a_string.length - 1) / 4)) {
            //normal base64 length is a multiple of 4. since these strings can be long,
            //I don't want to unnecessarily make a long string
            a_string = a_string.substr(0, (a_string.length - 1));
            return this.isBase64(a_string)
        }
        else { return false }
    }
    else { return false } //this.isBase64(null) => true which is bad, but
    // that's in the pkg I'm using, so I do the extra check to ensure non-strings return false
}
//end base64

//Convert the string into a Uint8Array. from James N. Used in write_file
static string_to_unit8array(str){
    let buf8 = new Uint8Array(str.length);
    for (let i = 0; i < str.length; i++) {
        buf8[i] = str.charCodeAt(i);
    }
    return buf8
}

static prepend_file_message_maybe(message){
    if (message.startsWith("while loading file:")) { return message }
    else if (globalThis.loading_file) {
        return "while loading file: " + globalThis.loading_file + "<br/>" + message
    }
    else { return message }
}

static dde_error(message){
    let out_string = Utils$1.prepend_file_message_maybe(message);
    console.log("dde_error: " + out_string);
    var err = new Error();
    var stack_trace = err.stack;
    out_string = "<details><summary><span class='dde_error_css_class'>Error: " + out_string +
        "</span></summary>" + stack_trace + "</details>";
    if(globalThis.out) { //when in DDE
        out(out_string);
    }
    else { //when in browser and Job Engine
        SW.append_to_output(out_string);
    }
    throw new Error(message)
}  //global


static warning(message, temp=false){
    if(message){
        let out_string;
        let stack_trace = "Sorry, a stack trace is not available.";
        try{  //if I don't do this, apparently the new error is actually throw, but
            //it really shouldn't be according to:
            // https://stackoverflow.com/questions/41586293/how-can-i-get-a-js-stack-trace-without-halting-the-script
            let err = new Error();
            stack_trace = Utils$1.replace_substrings(err.stack, "\n", "<br/>"); //don't use "this", use "Utils." because warning can be called without a subject
            //get rid of the "Error " at the beginning
            stack_trace = stack_trace.substring(stack_trace.indexOf(" "));
        }
        catch(an_err) {}
        out_string = "<details><summary><span class='warning_css_class'>Warning: " + Utils$1.prepend_file_message_maybe(message) +
            "</span></summary>" + stack_trace + "</details>";
        out(out_string, undefined, temp);
    }
} //global (used a lot)

static warning_or_error(message, error=false){
    if(error) { dde_error(message); }
    else      { warning(message); }
}

static shouldnt(message){
    console.log(message);
    if(globalThis.contact_doc_id) {
        DocCode.open_doc(contact_doc_id);
    }
    dde_error("The function: shouldnt has been called.<br/>" +
                    "This means there is a bug in DDE.<br/>" +
                    "Please send a bug report. See User_Guide/Contact.<br/>" +
                    "Include this whole message.<br/>" +
                     Utils$1.prepend_file_message_maybe(message));
} //global (used a lot)

static version_equal(version_string1, version_string2=dde_version){
    //return semver.eq(version_string1, version_string2)
    return compare_semversions(version_string1, version_string2, "=")
}


static version_less_than(version_string1, version_string2=dde_version){
    //return semver.lt(version_string1, version_string2)
    return compare_semversions(version_string1, version_string2, "<")
}

static version_more_than(version_string1, version_string2=dde_version){
    //return semver.gt(version_string1, version_string2)
    return compare_semversions(version_string1, version_string2, ">")
}


static dde_version_between(min=null, max=null, action="error"){ //"error", "warn", "boolean"
    if (!["error", "warn", "boolean"].includes(action)) {
        dde_error("Utils.dde_version_between passed an invalid value for 'action' of: " + action +
                  ' It must be "error", "warn", or "boolean", with the default of "error". ');
    }
    if (min == null){
        if (max == null) {
            dde_error("Utils.dde_version_between given a null min and max." +
                      "<br/>You must supply at least one on these.");
        }
        //only max
        else if(this.version_more_than(max) || this.version_equal(max)) { return true }
        else if (action == "warn"){
            warning("You are running DDE version: " + dde_version +
                     "<br/>but this code requires version: " + max + " or less.");
            return false
        }
        else if (action == "error"){
            dde_error("You are running DDE version: " + dde_version +
                      "<br/>but this code requires version: " + max + " or less.");
        }
        else { return false }
    }
    //min is present
    else if (max == null) {
        //only min
        if (this.version_less_than(min) || this.version_equal(min)) { return true }
        else if (action == "warn"){
            warning("You are running DDE version: " + dde_version +
                    "<br/>but this code requires version: " + min + " or more.");
            return false
        }
        else if (action == "error") {
            dde_error("You are running DDE version: " + dde_version +
                      "<br/>but this code requires version: " + min + " or more.");
        }
        else { return false }
    }
    //both min and max are present
    else if (this.version_equal(min) || this.version_equal(max) ||
             (this.version_less_than(min) && this.version_more_than(max))) { return true }
    else if (action == "warn"){
        warning("You are running DDE version: " + dde_version +
                "<br/>but this code requires a version between " + min + " and " + max + " inclusive.");
        return false
    }
    else if (action == "error") {
        dde_error("You are running DDE version: " + dde_version +
                  "<br/>but this code requires a version between " + min + " and " + max + " inclusive.");
    }
    else { return false }
}


static primitive_types = ["undefined", "boolean", "string", "number"] //beware; leave out null because
  //for some strange reason, null is of type "object"

static is_primitive(data){
    if (data === null) { return true }
    return this.primitive_types.includes(typeof(data))
}


//only checks first char
static is_digit(char){
    if(char.match(/^[0-9]/)) {  return true; }
    else { return false; } 
}


static is_alphanumeric(char) {
    var letterNumber = /^[0-9a-zA-Z]+$/;
    if(char.match(letterNumber)) {  return true; }
    else { return false; }
}


static is_letter(char) {
    var letter = /^[a-zA-Z]+$/;
    if(char.match(letter)) {  return true; }
    else { return false; }
}

static is_upper_case(char) {
    return /[A-Z]/.test(char)
}

static is_lower_case(char) {
    return /[a-z]/.test(char)
}

static is_letter_or_underscore(char) {
    var letter = /^[a-zA-Z_]+$/;
    if(char.match(letter)) {  return true; }
    else { return false; }
}


static is_integer(num) {
    return (typeof num === 'number') && (num % 1 === 0);
}

static is_non_neg_integer(anything){
    return Number.isInteger(anything) && (anything > -1)
}

static is_NaN_null_or_undefined(arg) {
    return (isNaN(arg) || (arg === null) || (arg === undefined) )
}

static is_string_a_integer(a_string){
    if(typeof(a_string) == "string") {
        let pat = /^-?[0-9]+$/;
        if(a_string.match(pat)) {  return true; }
        else { return false; }
    }
    else { return false; }
}

static is_string_a_float(a_string){
    if(typeof(a_string) == "string") {
        let pat = /^-?[0-9]+\.[0-9]+$/;
        if(a_string.match(pat)) {  return true; }
        else { return false; }
    }
    else { return false }
}

static is_string_a_number(a_string){
    return this.is_string_a_integer(a_string) || this.is_string_a_float(a_string)
}

//returns true for strings of the format "rgb(0, 100, 255)" ie the css color specifier
static is_string_a_color_rgb(a_string){
    return a_string.startsWith("rgb(") && a_string.endsWith(")") && a_string.includes(",") //not perfect but quick and pretty good
}

//this will count reserved words (ie "break" as an identifier, which
//isn't what JS thinks of as a valid user variable or fn name identifier
static is_string_an_identifier(a_string){
  let the_regex = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
  return the_regex.test(a_string)
}

//not perfect as could be escape sequences, internal quotes, but pretty good
static is_string_a_literal_string(a_string){
    if (a_string.length < 2) { return false }
    else if (a_string.startsWith('"') && a_string.endsWith('"')) { return true }
    else if (a_string.startsWith("'") && a_string.endsWith("'")) { return true }
    else if (a_string.startsWith("`") && a_string.endsWith("`")) { return true }
    else { return false }
}

static is_string_a_path(path_string_maybe){
   if(typeof(path_string_maybe) !== "string") { return false }
   else {
       let arr = path_string_maybe.split(".");
       for(let ident of arr) {
           if (!this.is_string_an_identifier(ident)) { return false}
       }
       return true
   }
}

//not perfect as could be escape sequences, internal quotes, but pretty good
static is_string_a_literal_array(a_string){
    if (a_string.startsWith('[') && a_string.endsWith(']')) { return true }
    else { return false }
}



static is_whitespace(a_string){
    return a_string.trim().length == 0
}


//the empty string is considered a comment as is all whitespace strings
//and strings of prefix whitespace followed by // follwoed by no newline
//and whitespace /* some text */ whitespace
static is_comment(a_string){
    a_string = a_string.trim();
    if(a_string.length == 0) { return true }
    else if (a_string.startsWith("//") &&
        (a_string.indexOf("\n") === -1)) {
        return true
    }
    else if (a_string.startsWith("/*") &&
             a_string.endsWith("*/")) {
        return true
    }
    else { return false }
}


static is_literal_object(value){
    if(value === null) { return false } // because typeof(null) == "object")
    else if(typeof(value) == "object") {
        return (Object.getPrototypeOf(value) === Object.getPrototypeOf({}))
    }
    else { return false }
}


//see https://davidwalsh.name/javascript-detect-async-function
static is_async_function(obj){
    if(obj && obj.constructor && (obj.constructor.name == "AsyncFunction")){
        return true
    }
    else { return false }
}

static is_generator_function(obj){
    if(obj && obj.constructor && (obj.constructor.name == "GeneratorFunction")){
        return true
    }
    else { return false }
}



//Beware: this *might* only catch iterators made by generator functions.
static is_iterator(obj){
    if(obj && obj.constructor && Utils$1.is_generator_function(obj.constructor)){
        return true
    }
    else {
        return false
    }
}

//very kludgey but apparently no good way to tell.
// you can also do obj.next and if its not undefined
//that's a good sign but not definitive because a user
//could define the next method to do pretty much anything.
/*function is_iterator(obj){
 if((typeof(obj) == "object") &&
 !Array.isArray(obj) ) {        //because typeof([]) => "object" in JS's non-designed type system
 //because obj.toString errors on certain empty objects, protect against that error
 try {
 var str = obj.toString()
 if (obj.toString().includes("Iterator") ||
 obj.toString().includes("Generator")) {
 return true
 }
 else { return false }
 }
 catch (e) { return false }
 }
 else { return false}
 }*/

//see http://stackoverflow.com/questions/30758961/how-to-check-if-a-variable-is-an-es6-class-declaration
//so in other words, ES6 doesn't have classes!
static is_class(obj){
    return ((typeof(obj) == "function") && obj.toString().startsWith("class "))
}


//returns string or null if no class name
static get_class_name(a_class){
    if (typeof(a_class) == "function"){
        const src = a_class.toString();
        if (src.startsWith("class ")){
            const end_of_class_name_pos = src.indexOf("{");
            let result = src.substring(6, end_of_class_name_pos);
            if (result.includes(" extends ")) {
                let name_split = result.split(" ");
                result = name_split[2] + "." + name_split[0];
            }
            return result.trim()
        }
    }
    return null
}

static get_class_of_instance(instance){
    return instance.constructor
}



//______color_______
static rgb(r, g, b){return "rgb("+r+", "+g+", "+b+")"} //global this string used in css

// "rgb(2, 3, 123)" => [2, 3, 123]
static rgb_string_to_integer_array(str){
    str = str.substring(4, str.length - 1);
    let result = str.split(",");
    result[0] = parseInt(result[0]);
    result[1] = parseInt(result[1]);
    result[2] = parseInt(result[2]);
    return result
}

//result is arr of 3 ints, each 0 to 255
static hex_to_rgb_integer_array(hex) {
    // Remove the # character if present
    hex = hex.replace("#", "");

    // Convert the hex value to RGB values
    var r = parseInt(hex.substring(0, 2), 16);
    var g = parseInt(hex.substring(2, 4), 16);
    var b = parseInt(hex.substring(4, 6), 16);

    // Return the RGB values as an object
    return [r, g, b ]
}

//arr3 expected to have elts that are integers, 0 thru 255
static rgb_integer_array_to_hex(arr3){
    let result = "#";
    let str =  arr3[0].toString(16);
    if(str.length === 1) {str = "0" + str;}
    else if(str.length > 2) { str = "ff"; }
    result += str;

    str =  arr3[1].toString(16);
    if(str.length === 1) {str = "0" + str;}
    if(str.length > 2) { str = "ff"; }
    result += str;

    str =  arr3[2].toString(16);
    if(str.length === 1) {str = "0" + str;}
    if(str.length > 2) { str = "ff"; }
    result += str;
    return result
}

//not called oct 23, 2921
static integer_array_to_rgb_string(arr3){
    return "rgb(" + arr3[0] + ", " + arr3[1] + ", " + arr3[2] + ")"
}

//Utils.pad_integer(123, 5, "x") => "xx123"
static pad_integer(int, places=3, pad_char="0"){
    let result = "" + int;
    if (result.length < places) { result = pad_char.repeat(places - result.length) + result;}
    return result
}

//used in computing numbers to display in the robot_status dialog
static to_fixed_smart(num, digits=0){
    if(typeof(num) === "number") {
        try{ return num.toFixed(digits)}
        catch(err){
            warning("Utils.to_fixed_smart called with non_number: " + num);
            return "" + num
        }
    }
    else { return num } //presume its a string like "N/A" and leave it alone.
}


static starts_with_one_of(a_string, possible_starting_strings){
    for (let str of possible_starting_strings){
        if (a_string.startsWith(str)) { return true }
    }
    return false
}

//returns array of one of the strs in possible_matching_strings
// and its starting index within a_string
// if no matches, returns [null, -1]
static index_of_first_one_of(a_string, possible_matching_strings, starting_pos=0){
    let a_string_length_limit = 100000000; //100 million. we're not expecting a_string to be longerr than that!
    if(a_string >= a_string_length_limit){
        dde_error("Utils.index_of_first_one_of passed string of length >= " +
                   a_string_length_limit +
                   " which is too long to handle.");
    }
    let matching_string = null;
    let matching_index  = a_string_length_limit;
    for(let possible_maching_string of possible_matching_strings){
        let index = a_string.indexOf(possible_maching_string, starting_pos);
        if((index !== -1) && (index < matching_index)){
            matching_string = possible_maching_string;
            matching_index = index;
        }
    }
    if (matching_index === a_string_length_limit) { matching_index = -1; }
    return [matching_string, matching_index]
}

static ends_with_one_of(a_string, possible_ending_strings){
    for (let str of possible_ending_strings){
        if (a_string.endsWith(str)) return true
    }
    return false
}


//the default for Robot Serial.sim_fun
static return_first_arg(arg){ return arg }

static typed_array_name(item){
    if(Array.isArray(item)) { return "Array" }
    else if (item instanceof Int8Array)         { return "Int8Array" }
    else if (item instanceof Uint8Array)        { return "Uint8Array" }
    else if (item instanceof Uint8ClampedArray) { return "Uint8ClampedArray" }
    else if (item instanceof Int16Array)        { return "Int16Array" }
    else if (item instanceof Uint16Array)       { return "Uint16Array" }
    else if (item instanceof Int32Array)        { return "Int32Array" }
    else if (item instanceof Uint32Array)       { return "Uint32Array" }
    else if (item instanceof Float32Array)      { return "Float32Array" }
    else if (item instanceof Float64Array)      { return "Float64Array" }
    else { return null } //not an array of any type
}

//returns null or the last elt of an array or a string
static last(arg){
    let len = arg.length;
    if (len == 0)                     { return undefined }
    else if (typeof(arg) == "string") { return arg[len - 1 ] }
    else if (Array.isArray(arg))      { return arg[len - 1] }
    else if (arg instanceof NodeList) { return arg[len - 1] }
    else if (arg instanceof HTMLCollection) { return arg[len - 1] }
    else                              { dde_error("last passed unhandled type of arg: " + arg); }
} //global


static flatten(arr, result=[]){
    if (Array.isArray(arr)){
        for (let elt of arr){
            this.flatten(elt, result);
        }
    }
    else { result.push(arr); }
    return result
}

//if length is null, a_array can be any length.
// but if it is an integer, the array must
//be of that length to return true
static is_array_of_numbers(a_array, length=null, min=null, max=null){
    if(!Array.isArray(a_array)) { return false }
    if((typeof(length) === "number") &&
       (a_array.length !== length)) { return false }
    for(let num of a_array){
        if((typeof(num) !== "number") ||
            Number.isNaN(num)){
            return false
        }
        else if ((typeof(min) === "number") &&
                 (num < min)){
                return false
        }
        else if ((typeof(min) === "number") &&
            (num > max)){
            return false
        }
    }
    return true
}

static is_2D_array_of_numbers(a_array){
    if(!Array.isArray(a_array)) { return false }
    else {
        for(let inner_array of a_array){
            if(!Utils$1.is_array_of_numbers(inner_array)) {
                return false
            }
        }
        return true
    }
}

//used by inspector for printing 2D arrays
static is_array_of_same_lengthed_arrays(array){
  if (array.length < 2) { return false }
  let len = null;
  for(let arr of array) {
    if (!Array.isArray(arr))     { return false }
    else if (len === null)       { len = arr.length; }
    else if (arr.length !== len) { return false }
  }
  return true
}

//written because JS built in slice doesn't work
//with just the first arg, returns a shallow copy of the first arg
//otherwise returns an array with the elements starting with start_index
//and up through but not including end_index.
//end_index defaults to the length of the array
//if end index is longer than array it will be set to the length of the array.
//if end index is the length of the array, subarray will copy arr elts from
//start_index through end of arr.
static subarray(arr, start_index=0, end_index){
    if(end_index === undefined) { end_index = arr.length;}
    end_index = Math.min(end_index, arr.length); //permit passed in end_index to be longer than arr, and don't error, just copy over to end of array
    let result = [];
    for(let index = start_index; index < end_index; index++){
        result.push(arr[index]);
    }
    return result
}

// for [1, 2] and [2, 1] will return true
static arrays_have_same_elements(arr1, arr2){
    if(arr1.length === arr2.length){
        for(let elt of arr1){
            if(!(arr2.includes(elt))) {
                return false
            }
        }
        return true
    }
    else { return false }
}

//_____ set operations______
static intersection(arr1, arr2){
    let result = [];
    for(let elt of arr1) {
        if (arr2.includes(elt)) { result.push(elt); }
    }
    return result
}

// elements from arr1 that are not in arr2
static difference(arr1, arr2){
    let result = [];
    for(let elt of arr1) {
        if (!arr2.includes(elt)) { result.push(elt); }
    }
    return result
}

// elements that are in arr1 and not in arr2 AND
// elements that are in arr2 and not in arr1
static symmetric_difference(arr1, arr2){
    let result = this.difference(arr1, arr2);
    let more = this.difference(arr2, arr1);
    return result.concat(more)
}

//result does not contain duplicates
static union(arr1, arr2){
      return [...new Set([...arr1, ...arr2])]
}

//result does not contain duplicates
static de_duplicate(arr1){
    return [...new Set(arr1)]
}

//_____ end set operations______

static similar(arg1, arg2, tolerance=0, tolerance_is_percent=false, arg1_already_seen=[], arg2_already_seen=[]){
    //I started to do a infinite circularity test but its trick to do quickly and maybe unnecessary because
    //if say 2 arrays both have themselves as the 3rd elt, and the 2 arrays are eq to begin with, that
    //will get caught in the very first === so no infinite recursion.
    //now if we had 2 arrays that were both different and had themselves as only element,
    //we should be able to conclude that the 2 arrays are similar.
    //All very tricky!
    if(arg1 === arg2) {return true} //handles null case
    else if (Number.isNaN(arg1) && Number.isNaN(arg2)) { return true } //because undesigned JS has NaN != NaN
    let arg1_type = typeof(arg1);
    if (arg1_type !== typeof(arg2)) { return false }
    //ok now we know their js "types" are the same but beware, null is of type "object"
    else if (arg1 === null) { return false } //because if both were null, it would have been caught by === above
    else if (arg2 === null) { return false }
    //else if (arg1_type === "boolean") { return false } //because if both were true or both were false, it would have been caught by === above
    else if(arg1_type == "number") { //because of same type test above, we know arg2 is also a number
        if (tolerance === 0) { return false } //if they were === would have been caught by the above.
        else {
            let tol = Math.abs(arg1 - arg2);
            if (tolerance_is_percent){
                let max = Math.max(Math.abs(arg1), Math.abs(arg2));
                let percent = (tol / max) * 100;
                return percent <= tolerance
            }
            else { return (tol <= (tolerance + Number.EPSILON)) } //adding epslion gets rid of the normal floating point "bugs"
                    //for instance similar(2.1, 2, 0.1) =>  "true" with the addition of EPSILON but doesn't without it.
        }
    }
    else if(Utils$1.is_primitive(arg1)) { return false } //if one of the args is primitive, then if it was similar to th other,
        // that other arg must have been primitve and same value.
        // but arg1 !== arg2 at this point so  arg1 must not be similar to arg2
    else if (Array.isArray(arg1)){
        if      (!Array.isArray(arg2))        { return false }
        else if (arg1.length !== arg2.length) { return false }
        else { //we've got 2 arrays of the same length
            let arg1_already_seen_index = arg1_already_seen.indexOf(arg1);
            let arg2_already_seen_index = arg2_already_seen.indexOf(arg2);
            if ((arg1_already_seen_index >= 0) && (arg1_already_seen_index === arg2_already_seen_index)){
                return true //this doesn't mean the WHOLE outer data structure is similar, just this part of it
            }
            else { //each unique array only gets on its already-seen list 0 or once.
                arg1_already_seen.push(arg1);
                arg2_already_seen.push(arg2);
                for (let i = 0; i < arg1.length; i++) {
                    if (!Utils$1.similar(arg1[i], arg2[i], tolerance, tolerance_is_percent, arg1_already_seen, arg2_already_seen)){
                         return false
                    }
                }
                return true
            }
        }
    }
    else if (Array.isArray(arg2)) { return false } //because we know at this point that arg1 is NOT an array
    else if (Object.getPrototypeOf(arg1) !== Object.getPrototypeOf(arg2)) { return false }
    else if (typeof(arg1) == "function"){ return arg1.toString() == arg2.toString() } //warning: fns could differ only in whitspace and this returns false, but if they have THE SAME src, its true.
    else { //arg1 and arg2 should be of type "object" but neither is null (due to primitive checks above)
        var props1 = Object.getOwnPropertyNames(arg1);
        var props2 = Object.getOwnPropertyNames(arg2);
        //if (!Utils.similar(props1, props2)) { return false } //not good since same elts but different order will return false
        if (!Utils$1.arrays_have_same_elements(props1, props2)){ return false } //needed because the props *might* be in a different order, which is ok
        for (let prop of props1){
            if (!Utils$1.similar(arg1[prop], arg2[prop], tolerance, tolerance_is_percent)) { return false}
        }
        return true
    }
} //global used in test suites a lot


//return 0 if very dissimilar, 1 if the same (or very similar)
//now working only for num1 and num2, min, max being non neg
static number_similarity(num1, num2, min=null, max=null){
    if (num1 == num2) { return 1 }
    if (num1 > num2) {  //swap: ensure that num1 is less than num2.
        let temp = num1;
        num1 = num2;
        num2 = temp;
    }
    if(num1 >= 0){ //means num2 will be > 0
        if(min === null)  { min = 0; }
        if(max === null)  { max = num2; }
    }
    else if (num2 <= 0) { //means num1 is also less than 0 }
        if (max === null) { max = 0; }
        if (min === null) { min = num1; }
        //now we've defaulted min and max. so now shift all 4 numbers to positive
        num1 = Math.abs(num1);
        num2 = Math.abs(num2);
        let temp = num1;
        num1 = num2;
        num2 = temp;
        let orig_min = min;
        min = Math.abs(max);
        max = Math.abs(orig_min);
    }
    else { //num1 is < 0 and num2 is >= 0
        let inc_by = num1 * -1;
        num1 += inc_by; //num1 is now 0
        num2 += inc_by;
        if (min === null) { min = num1; }
        else { min += inc_by; }
        if (max === null) { max = num2; }
        else { max += inc_by; }
    }
    let range = max - min;
    let new_max = range; //so now min is effectively 0
    num1 -= min;
    num2 -= min;
    let num1_ratio = num1 / new_max;  //0 to 1
    let num2_ratio = num2 / new_max;  //0 to 1
    let raw_score = Math.abs(num1_ratio - num2_ratio);
    return 1 - raw_score
}


//arrays can be arrays, or can be a random objects.
//all must be of the same type and have elts of the same names with the same values
//compared with ===
static same_elts(...arrays){
    if(arrays.length < 2) {return true}
    var first = arrays[0];
    if (Array.isArray(first)) {
        for(let arr of arrays.slice(1)){
            if (!Array.isArray(arr)) { return false }
            else if(first.length !== arr.length) {return false}
            else {
                for (let i = 0; i < arr.length; i++){
                    if (first[i] !== arr[i]) { return false}
                }
            }
        }
        return true
    }
    else {
        var first_props = Object.getOwnPropertyNames(first);
        for(let obj of arrays.slice(1)){
            if (Array.isArray(obj)) { return false }
            var obj_props = Object.getOwnPropertyNames(obj);
            if (obj_props.length !== first_props.length) { return false }
            else {
                for (let prop of first_props){
                    if (first[prop] !== arr[prop]) { return false}
                }
            }
        }
    }
}

static line_starting_with(text, starting_with, include_starting_with){
    var lines = text.split("\n");
    for (var line of lines){
        if (line.startsWith(starting_with)){
            if (include_starting_with){
                return line
            }
            else {
                return line.substring(starting_with.length)
            }
        }
    }
    return null //didn't find a line.
}

static encode_quotes(text){
    text = text.split("'").join("ssqq");
    text = text.split('"').join("ddqq");
    text = text.split('\n').join("nnll");
    return text
}

static decode_quotes(text){
    text = text.split("ssqq").join("'");
    text = text.split('ddqq').join('"');
    text = text.split('nnll').join('\n');
    return text
}

static constant_spaces = "                                                                              "
static spaces(number_of_spaces_desired){
    return this.constant_spaces.substring(0, number_of_spaces_desired)
}

//from http://eddmann.com/posts/ten-ways-to-reverse-a-string-in-javascript/ which tests this to be fastest
static reverse_string(s) {
    var o = '';
    for (var i = s.length - 1; i >= 0; i--)
        o += s[i];
    return o;
}

static insert_string(base_string, insert_string, position=0){
    if(position > base_string.length) {
        position = base_string.length;
    }
    return base_string.substring(0, position) +
        insert_string +
        base_string.substring(position)
}
/*
insert_string("abc", "def")
insert_string("abc", "def", 100)
insert_string("abc", "def", 1)
*/
    //used by OpenAI text_to_data for "code"
static insert_outs_after_logs(base_string){
    let result = base_string;
    let log_end_pos = 0;
    for(let i = 0; i < 1000; i++){
        let log_start_pos = result.indexOf("console.log(", log_end_pos);
        if(log_start_pos === -1) { return result } //no more calls to console.log
        let open_paren_pos  = log_start_pos + 11;
        let close_paren_pos = Editor.find_matching_close(result, open_paren_pos);
        if(close_paren_pos === null) {  //couldn't find the end of this console.log so pretend the code is just bad and return the result we've got so far. No more insertions.
            return result
        }
        if((close_paren_pos < result.length) &&
            (result[close_paren_pos + 1] === ";")){
            log_end_pos = close_paren_pos + 1;
        }
        else {
            log_end_pos = close_paren_pos;
        }
        let args = result.substring(open_paren_pos + 1, close_paren_pos);
        let out_str = "\nout(Utils.args_to_string(" + args + "))\n";
        result = Utils$1.insert_string(result, out_str, log_end_pos + 1);
    }
    dde_error("insert_outs_after_logs passed base_string with over 1 Million 'console.logs(' in it.");
}
/*
insert_outs_after_logs("")
insert_outs_after_logs("abc")
insert_outs_after_logs("console.log(222)")
insert_outs_after_logs("console.log(222);")
insert_outs_after_logs("abc console.log(222); def")
insert_outs_after_logs("abc console.log(junk(4, 5)); def")

insert_outs_after_logs("abc console.log(222); def console.log(333)")
*/

//returns an array of width an height of a_string with the given font_size
//font size is either a number or a string with a px suffix
static compute_string_size(a_string, font_size=12, extra_width = 0){
    if(typeof(font_size) == "number") { font_size = font_size + "px";}
    //at this point, font_size is a string with a px suffix
    compute_string_size_id.style["font-size"] = font_size;
    compute_string_size_id.innerText = a_string;
    return [compute_string_size_id.clientWidth + extra_width, compute_string_size_id.clientHeight]
}

//avoids calling eval. If the path isn't defined, this fn returns undefined.
//arg can either be a string with dots or an array of strings that are path elts.
static value_of_path(path_string){
    let path = path_string;
    if (typeof(path) == "string"){ path = path.split("."); }
    else if(Array.isArray(path)) ; //ok as is
    else {
        dde_error("value_of_path passed: " + path_string + " which is not a string or an array.");
    }
    let result;
    if(globalThis[path[0]] !== undefined) { result = globalThis;} //window } //window errors in job engine
    //note globalThis["window"] returns the window obj so the arg can be "window" and we still win
    else if (Object.prototype[path[0]] !== undefined) { result = Object.prototype; }
    else { return undefined }
    for (var path_elt of path){
        result = result[path_elt];
        if (result === undefined) {break}
    }
    return result
} //global (used a lot)

//returns null if fn_src doesn't look like a fn def.
//returns "" if its an anonymous fn
//else returns the fn name
//beware: js is clever about assigning names to annonymous fns if
//th happen to be bound to a keyword arg to a fn,
//In such cases, some.fn.name might yield the name its bound to,
//not the name its given in its source code.
static function_name(fn_or_src){
    if (typeof(fn_or_src) == "string"){
        if (!fn_or_src.startsWith("function ")) {return null}
        else {
            let parts = fn_or_src.split(" ");
            if (parts.length < 2) { return "" }
            else {
                let name_maybe = parts[1];
                if (name_maybe.startsWith("(")) { return "" }
                else {
                    let paren_pos = name_maybe.indexOf("(");
                    if (paren_pos == -1) { return name_maybe }
                    else { return name_maybe.substring(0, paren_pos) }
                }
            }
        }
    }
    else if (typeof(fn_or_src) == "function"){
        return  fn_or_src.name   //returns "" if anonymous function
    }
    else { return null }
}

//returns a string
static function_params(fn, include_parens=true){
    let src = fn.toString(); //dde4, when fn is the class obj for Job, returns src with "Job$1" in it.
    src = src.replaceAll("Job$1", "Job");
    let open_pos = src.indexOf("(");
    let close_pos = Editor.find_matching_delimiter(src, open_pos);
    /*close_pos = src.indexOf("){") //beware, with default args, there can be syntax in params, but this will at least mostly work
    if (close_pos == -1) {close_pos = src.indexOf(") {") //that space is in some system defs like isPrototypeOf
    if (close_pos == -1) {close_pos = src.indexOf(")") //one last try. Not so good since a default value
          // *might* have a paren in it, but not too many fns with such default values so might as well.
    */
    let result = src.substring(open_pos + 1, close_pos);
    if ((result == "") && (fn.length !== 0)) { //the src of the fn does not contain the params as is true for Math fns, and fns whose body source is [native code]
        let prefix = "arg";
        if (Math.hasOwnProperty(fn.name)) { prefix = "num"; } //all fns in Math take only number args. This is not true for the "Number" class fns.
        for (let i = 0; i < fn.length; i++) {
            result += prefix + i;
            if (i != (fn.length - 1)) { result += ", ";}
        }
    }
    if (include_parens){ result = "(" + result + ")"; }
    return result
}

//keyword calls & fns have just one block of {} in the params
//with no space between the ( and the {.
//ie foo({a:2})
static call_src_is_keyword_call(a_string){
  let open_pos = a_string.indexOf("(");
  if (open_pos == -1) { return false }
  let brace_pos = a_string.indexOf("{");
  return (open_pos + 1) == brace_pos
}

//if fn is a class, look at the args of its constructor. If no constructor, return false
static fn_is_keyword_fn(fn){
    let a_string = fn.toString();
    if(a_string.startsWith("class ")){
        let constructor_pos = a_string.indexOf("constructor");
        if(constructor_pos == -1) { return false }
        a_string = a_string.substring(constructor_pos); //this *could* fail if there is no class constructor (you have to explicitly make one) and the "constructor" word is somewhere in the class body.
    }
    let open_pos = a_string.indexOf("(");
    if (open_pos == -1) { return false }
    let brace_pos = a_string.indexOf("{");
    return (open_pos + 1) == brace_pos
}

//returns a string
static function_params_for_keyword_call(fn, include_parens=true){
    let result = this.function_params(fn, include_parens);
    if (result.endsWith("={})")) {
        result = result.substring(0, result.length - 4);
        if(include_parens) { result += ")"; }
    }
    else if (result.endsWith("= {})")) {
        result = result.substring(0, result.length - 5);
        if(include_parens) { result += ")"; }
    }
    result = this.replace_substrings(result, "=", ":");
    return result
}

//fn can be a constructor or other method who's src string doesn't have to start with "function".
//we really only care about the text between the first paren and the first ")}", exclusive
//returns an array of strings, the names of the params
//function(a, {b=2, c=3}){ return 99}   returns ["a", "b", "c"]
static function_param_names(fn){
    var params_full_string = this.function_params(fn, false);
    return this.params_string_to_param_names(params_full_string)
}


//used only by this file
//params_full_string can either be wrapped in parens or not
static params_string_to_param_names(params_full_string){
    if (params_full_string.startsWith("(")) {params_full_string = params_full_string.substring(1);}
    if (params_full_string.endsWith(")"))   {params_full_string = params_full_string.substring(0, params_full_string.length - 1);}
    params_full_string = this.remove_comments(params_full_string);
    var params_and_defaults_array = params_full_string.split(",");
    var param_names = [];
    for(var param_and_default of params_and_defaults_array){
        param_and_default = param_and_default.trim();
        if (param_and_default.startsWith("{")){
            var inner_params_and_defaults = param_and_default.substring(1); //cut off {
            if(inner_params_and_defaults.endsWith("}")) {
                 inner_params_and_defaults = param_and_default.substring(0, param_and_default.length -1); //cut off }
            }
            var inner_params_and_defaults_array = inner_params_and_defaults.split(",");
            for(var inner_param_and_default of inner_params_and_defaults_array){
                inner_param_and_default = inner_param_and_default.trim();
                var the_match = inner_param_and_default.match(/^[A-Za-z_-]+/);
                if (!the_match) {return null} //invalid syntax
                var the_param = the_match[0];
                param_names.push(the_param);
            }
        }
        else {
            var equal_pos = param_and_default.indexOf("=");
            var the_param;
            if (equal_pos != -1){
                the_param = param_and_default.substring(0, equal_pos);
                the_param = the_param.trim();
            }
            else {
                the_param =  param_and_default;
            }
            param_names.push(the_param);
        }
    }
    return param_names
}

//for function foo({a:1}={}){} => {a:1},
//other cases returns an array of inner arrays of param_name, param_default_val
static function_param_names_and_defaults(fn){
    let params_full_string = this.function_params(fn, false);
    let params_string = params_full_string;
    if (params_full_string.startsWith("{")){
        if (params_full_string.endsWith("= {}") ||
            params_full_string.endsWith("={}")){
            let closing_equal = params_full_string.lastIndexOf("=");
            params_string = params_full_string.substring(0, closing_equal).trim();
        }
        params_string = this.replace_substrings(params_string, "\\n", " ");
        var inner_params_and_defaults = params_string.substring(1, params_string.length -1); //cut off { and }
        var inner_params_and_defaults_array = inner_params_and_defaults.split(",");
        var param_names = [];
        for(let inner_param_and_default of inner_params_and_defaults_array){
            inner_param_and_default = inner_param_and_default.trim();
            let the_param_default_array = inner_param_and_default.split("=");
            the_param_default_array[0] = the_param_default_array[0].trim();
            the_param_default_array[1] = the_param_default_array[1].trim();
            param_names.push(the_param_default_array);
            //obj[the_param_default_array[0]] = the_param_default_array[1]
        }
        return [param_names, "{}"]
    }
    else { return this.params_string_to_param_names_and_defaults(params_full_string) }
}


//returns an array of arrays. Each param is represented as an a array of
//1 or 2 elements. The first elt is the param name (string) and
// the 2nd elt is the default value src (which might be the symbol undefined or its a string of src
//if you have a fn of function foo(a, b=2 {c=3, d=4}, {e=5, f=6}={}) {} then this function returns
//the param names and the SOURCE CODE of the default values.
//[["a", "undefined"], ["b","2"], ["", {c="3", d="4"}], ["", {e:"5", f:"6"}] }
//if grab_key_vals is false, the keyword name will be "" and
// the arg will be a string, ie "{a=3, b=4}"
//but if its true we have an arg for each of the actual keywords and
//the values will be the defaults for that keyword
static function_param_names_and_defaults_array(fn, grab_key_vals=false){
    if(typeof(fn) == "string") {
        if(["function", "function*"].includes(fn)){
            return [["name", ""], ["...params", ""], ["body", ""]]
        }
        else if(fn == "new Array") { return [["...elts", ""]] }
        else if(fn.startsWith("new ")) {
            let class_name = fn.substring(4); //warning, could be "Job$1"
            if(class_name.endsWith("$1")) {  //happens when called from MiRecord, clicking the Record button
               class_name = class_name.substring(0, class_name.length - 2); //cut off the "$1". Kludge from dde4 rollup, etc.
            }
            let fn_val = value_of_path(class_name);
            if (typeof(fn_val) != "function") {
                dde_error("Utils.function_param_names_and_defaults_array called with non function: " + fn);
            }
            else { fn = fn_val; }
        }
        else {
            let fn_val = value_of_path(fn);
            if (typeof(fn_val) != "function") {
                dde_error("Utils.function_param_names_and_defaults_array called with non function: " + fn);
            }
            else { fn = fn_val; }
        }
    }
    if(fn.name == "Array") { return [["...elts", ""]]}
    let param_string = "function foo(" + this.function_params(fn, false) + "){}";
    //espree doc at https://github.com/eslint/espree
    let ast = Espree.parse(param_string, {range: true, ecmaVersion: "latest"}); //, raw: true})
    let params_ast = ast.body[0].params;
    let result = [];
    for (let param_ast of params_ast){
        let name;
        let val_src;
        switch(param_ast.type){
            case "Identifier":
                result.push([param_ast.name, undefined]);
                break;
            case "AssignmentPattern": //ie has an equal sign
                if (param_ast.left.type == "Identifier"){ //ie a = 2
                    name = param_ast.left.name;
                    val_src = Utils$1.param_names_get_default_val_src(param_string, param_ast.right);
                    result.push([name, val_src]);
                }
                else if (param_ast.left.type == "ObjectPattern"){  //ie {a:2} = {}
                    if(grab_key_vals){
                        for(let prop of param_ast.left.properties){
                            let ass_pat_ast = prop.value;
                            if(ass_pat_ast.type == "Identifier"){ //there's no default value
                                name = ass_pat_ast.name;
                                val_src = "undefined";
                            }
                            else { //should be ass_pat_ast.type == "AssignmentPattern"
                                name = ass_pat_ast.left.name;
                                val_src = this.param_names_get_default_val_src(param_string,
                                    ass_pat_ast.right);
                            }
                            result.push([name, val_src]);
                        }
                    }
                    else {
                        name = ""; //no real param name
                        val_src = this.param_names_get_default_val_src(param_string, param_ast.left);
                        result.push([name, val_src]);
                    }
                }
                break;
            case "ObjectPattern": //ie {a:2, b:3}
                if(grab_key_vals){
                    for(let prop of param_ast.properties){
                    	let ass_pat_ast = prop.value;
                    	if(ass_pat_ast.type == "Identifier"){ //there's no default value
                            name = ass_pat_ast.name;
                            val_src = this.param_names_get_default_val_src(param_string, ass_pat_ast);
                        }
                        else { //should be ass_pat_ast.type == "AssignmentPattern"
                            name = ass_pat_ast.left.name;
                            val_src = this.param_names_get_default_val_src(param_string,
                                                                          ass_pat_ast.right);
                        }
                        result.push([name, val_src]);
                    }
                }
                else {
                    name = ""; //no real param name
                    val_src = this.param_names_get_default_val_src(param_string,
                                                              param_ast);
                    result.push([name, val_src]);
                }
                break;
            case "RestElement": //rest elts can't take a default value
                result.push(["..." + param_ast.argument.name, undefined]);
                break;
            default:
                shouldnt("in param_names_and_defaults_array for fn: " + fn);
        }//end switch
    }//end for
    return result
}


//only called in this file.
static param_names_get_default_val_src(full_string, ast){
    return full_string.substring(ast.range[0], ast.range[1])
}

static remove_comments(a_string) {
    while(true){
        let start_index = a_string.indexOf("/*");
        let end_index;
        if(start_index !== -1) {
            end_index = a_string.indexOf("*/");
            if(end_index !== -1){
                a_string = a_string.substring(0, start_index) + a_string.substring(end_index + 2);
            }
            else {
                a_string = a_string.substring(0, start_index); //nothing left in string so stop
                break;
            } //remove all the way to the end. Not always right, but the string is screwed up anyway.
        }
        else {
            start_index = a_string.indexOf("//");
            if(start_index !== -1) {
                end_index = a_string.indexOf("\n", start_index);
                if(end_index !== -1){
                    a_string = a_string.substring(0, start_index) + a_string.substring(end_index + 1);
                }
                else {
                    a_string = a_string.substring(0, start_index); //nothing left in string so stop
                    break;
                } //remove all the way to the end. Not always right, but the string is screwed up anyway.
            }
            else { break; } //no more comments to remove
        }
    }
    return a_string
}
//only called in this file.
//params_full_string can either be wrapped in parens or not
//returns an array of 2 elt arrays, name and default val.
static params_string_to_param_names_and_defaults(params_full_string){
    if (params_full_string.startsWith("(")) {params_full_string = params_full_string.substring(1);}
    if (params_full_string.endsWith(")"))   {params_full_string = params_full_string.substring(0, params_full_string.length - 1);}
    params_full_string = this.remove_comments(params_full_string).trim();
    if (params_full_string.startsWith("{")) {params_full_string = params_full_string.substring(1);}
    if (params_full_string.endsWith("}"))   {params_full_string = params_full_string.substring(0, params_full_string.length - 1);}

    var params_and_defaults_array = params_full_string.split(",");
    var param_names = [];
    for(var param_and_default of params_and_defaults_array){
        param_and_default = param_and_default.trim();
        if (param_and_default.startsWith("{")){
            var inner_params_and_defaults = param_and_default.substring(1, param_and_default.length -1); //cut off { and }
            var inner_params_and_defaults_array = inner_params_and_defaults.split(",");
            for(var inner_param_and_default of inner_params_and_defaults_array){
                inner_param_and_default = inner_param_and_default.trim();
                let the_param_default_array = inner_param_and_default.split("=");
                the_param_default_array[0] = the_param_default_array[0].trim();
                the_param_default_array[1] = the_param_default_array[1].trim();
                param_names.push(the_param_default_array);
            }
        }
        else {
            let equal_pos = param_and_default.indexOf("=");
            let the_param_default_array;
            if (equal_pos != -1){
                let the_param = param_and_default.substring(0, equal_pos).trim();
                let the_default = param_and_default.substring(equal_pos + 1).trim();
                the_param_default_array = [the_param, the_default];
            }
            else {
                the_param_default_array = [param_and_default.trim(), undefined];
            }
            param_names.push(the_param_default_array);
        }
    }
    return param_names
}

//fn can be either function foo({a:2}={}) style or function foo(a, b=3) style params
//returns {param_name: "default_val", ...} ie the values are src, not actual js vals
//with the returned value, you can call Object.keys(returned_lit_obj)
//and get back the names of the args in their proper order.
static function_param_names_and_defaults_lit_obj(fn){
    let params_full_string = this.function_params(fn, false);
    //let params_string = params_full_string
    if (params_full_string.startsWith("{")){
        if (params_full_string.endsWith("= {}") ||
            params_full_string.endsWith("={}")){
            let closing_equal = params_full_string.lastIndexOf("=");
            params_full_string = params_full_string.substring(0, closing_equal).trim();
        }
        //cut off both open and close brace
        if(params_full_string.endsWith("}")) { params_full_string = params_full_string.substring(0, params_full_string.length - 1); }
        params_full_string = params_full_string.substring(1);
    }
    /*    params_string = this.replace_substrings(params_string, "\\n", " ")
        var inner_params_and_defaults = params_string.substring(1, params_string.length -1) //cut off { and }
        var inner_params_and_defaults_array = inner_params_and_defaults.split(",")
        var param_names = []
        for(let inner_param_and_default of inner_params_and_defaults_array){
            inner_param_and_default = inner_param_and_default.trim()
            let the_param_default_array = inner_param_and_default.split("=")
            the_param_default_array[0] = the_param_default_array[0].trim()
            if(typeof(the_param_default_array[1]) == "string") { //ie there is a default
                the_param_default_array[1] = the_param_default_array[1].trim()
            }
            param_names.push(the_param_default_array)
            //obj[the_param_default_array[0]] = the_param_default_array[1]
        }
        return [param_names, "{}"]
    }
    else {*/
        let array_of_arrays = this.params_string_to_param_names_and_defaults(params_full_string);
        let result = {};
        for (let name_val of array_of_arrays) {
            result[name_val[0]] = name_val[1];
        }
        return result
    //}
}


//not general purpose
static shallow_copy(obj){ //copies only enumerable, own properites. Used in
                            //copying Job's user_data at start
    let result = obj;
    if(result === null) ; //typeof returns "object" for null
    else if(Array.isArray(obj)){
        result = [];
        for (let elt of obj) { result.push(elt); }
    }
    else if (typeof(obj) == "object"){ //typeof returns "object" for null
        result = {};
        for(let name of Object.keys(obj)){
            result[name] = obj[name];
        }
    }
    return result //might be a Date, I hope that's not mungable
}

static shallow_copy_lit_obj(obj){ //copies only enumerable, own properites. Used in
    //copying Job's user_data at start
    let result = {};
    for(let name of Object.keys(obj)){
        result[name] = this.shallow_copy(obj[name]);
    }
    return result
}

//used to fix broken ES6 not allowing a keyword obj with destructuring.
                             //defaults   keyword_args
static copy_missing_fields(source_arg, target_obj){
    for(var name of Object.getOwnPropertyNames(source_arg)){
        if (!target_obj.hasOwnProperty(name)){
            var new_val = source_arg[name];
            if (new_val == "required"){
                shouldnt("Utils.copy_missing_fields passed target object: " + target_obj +
                        " that was missing required field of: " + name);
            }
            else { target_obj[name] = new_val; }
        }
    }
}

/* not called as of apr 17, 2016. unfortunately won't work for class constructors that use the ES6 keyword default params
function process_constructor_keyword_args(defaults, args, the_this){
    //verify that keyword_args doesn't have any illegal arg in it.
    for(let name in args){
        if (!defaults.hasOwnProperty(name)){
            throw new Error(name + " is not a valid arg name. The valid arg names are: " + Object.keys(defaults))
        }
    }
    for(let name in defaults){
        if (!args.hasOwnProperty(name)){
            var new_val = defaults[name]
            if (new_val == "required"){
                throw new Error(args + " should have contained required arg: " + name + " but didn't.")
            }
            else { args[name] = new_val }
        }
    }
    for(let name in args){
        the_this[name] = args[name]
    }
}
*/
/*
 function pp_json(obj){
 var str = JSON.stringify(obj, null, 4)
 str = str.replace(/\{\n/g, "{")
 str = str.replace(/\n/g, "<br/>")
 str = str.replace(/\ \ \ \ /g, "&nbsp;&nbsp;&nbsp;&nbsp;")
 return str
 }
 */


//does not trim the beginning of the string. Used by trim_string_for_eval
//note regex "s" matches spaces, newlines, tab at least, ie all whitespace
static trim_end(str){
    return str.replace(/\s+$/g, "")
}

//removes prefix, & suffix whitespace AND replaces multiple
//redundant interior whitespace with a single space.
static trim_all(str){
    str = str.trim();
    return str.replace(/\s+/g,' ')
}

static trim_string_quotes(a_string){
    if(a_string.length < 2) {return a_string}
    const first_char = a_string[0];
    if (["'", '"', "`"].includes(first_char)){
        if (last(a_string) == first_char){
            return a_string.substring(1, a_string.length - 1)
        }
    }
    return a_string
}

//returns a string that starts with the first char of src
//by trimming whitespace and comments from the front of src
//used by Control.include_job
static trim_comments_from_front(src){
    src = src.trimLeft();
    if(src.startsWith("//")) {
        let end = src.indexOf("\n");
        if(end == -1){ return "" } //src was a one-liner comment
        else {
            src = src.substring(end + 1);
            return this.trim_comments_from_front(src)
        }
    }
    else if(src.startsWith("/*")) {
        let end = src.indexOf("*/");
        if(end == -1) { //crap, we've got a faulty multi-line comment.
            return ""
        }
        else {
            src = src.substring(end + 2);
            return this.trim_comments_from_front(src)
        }
    }
    else { return src }
}

static show_string_char_codes(a_string){
    console.log(a_string + " has " + a_string.length + " chars of:");
    for(let char of a_string){
        console.log(char + "=>" + char.charCodeAt());
    }
}

//only used in this file
static regexp_escape_special_chars(str){
    return str.replace(/[-\/\\^$*+?.()|\[\]{}]/g, '\\$&')
}


//the first arg to new RegExp is a regexp pattern that treats
//lots of punctuation chars like parens specially.
//To turn off that special treatment, pass in a 4th arg of false
static replace_substrings(orig_string, substring_to_replace, replacement, substring_to_replace_treated_specially=true){
    if(!substring_to_replace_treated_specially) {
        substring_to_replace = Utils$1.regexp_escape_special_chars(substring_to_replace);
    }
    return orig_string.replace(new RegExp(substring_to_replace, 'g'), replacement);
} //global (used a lot)


//not used Jan 2019 except in testsuite
//the use of this fn is to left pad a number with spaces so that the
//decimal point comes at the same char position in a set of
//numbers passed to this fn with the same non-first args.
//After the decimal point is padded with zeros if
//there aren't enough regular post decimal point numbers.
// the end is padded with zeros.
//if digits are cut on the end, the last digit in the result is rounded
//to reflect the cut digits.
//returns a string whose length is digits_before_point + digits_after_point
// + 1 (for the decinmat point, plus 1 if allow_for_negative is true.
//returned string will be longer than that if num is bigger than can fit in digits_before_point,
//but it won't be shorter. So calls should have the largest digits_before_point expected,
//and should only set allow_for_negative to false when they know the num args in
// a displayed result set will never have a neg number.
static format_number(num, digits_before_point=6, digits_after_point=3, allow_for_negative=true){
    let result = num.toFixed(digits_after_point);
    let min_chars_before_point = digits_before_point + (allow_for_negative ? 1 : 0);
    let point_pos = result.indexOf(".");
    if (point_pos == -1) { point_pos = result.length; }
    let needed_spaces_count = min_chars_before_point - point_pos;
    if (needed_spaces_count > 0) {
        let needed_spaces = " ".repeat(needed_spaces_count);
        result = needed_spaces + result;
    }
    return result
}

static array_to_html_table(values_array, labels_array=null, header_array=null, zeropad=3){
    if(labels_array == null) {
        labels_array = Array.from(Array(values_array.length).keys());
    }
    let result = "<table>";
    if(header_array){
        result += "<tr><th>" + header_array[0] + "</th><th>" + header_array[1] + "</th></tr>";
    }
    for(let i = 0; i < values_array.length; i++){
        let numstr = this.format_number(values_array[i]);
        numstr = this.replace_substrings(numstr, " ", "&nbsp;");
        result += "<tr><td>" + labels_array[i] + "</td><td style='font-family:monospace;'>" + numstr + "</td></tr>";
    }
    result += "</table>";
    return result
}

// Utils.ordinal_string(0) => "0th"   Utils.ordinal_string(1) => "1st"
// Utils.ordinal_string(11) => "11th" Utils.ordinal_string(21) => "21st"
static ordinal_string(n){
    let suffix = ["st","nd","rd"][((n+90)%100-10)%10-1]||"th";
    return n + suffix
}

//used by users in calling  DXF.init_drawing for its dxf_filepath arg
static text_to_lines(text) { return txt.text_to_lines(text) }

//fry's get a js string into literal source code. Used in printout out a TestSuite test
static string_to_literal(a_string){
    if      (a_string.includes("\n")) {return '`' + a_string + '`'} //let's hope any backquotes in a_string are escaped!
    else if (!a_string.includes('"')) { return '"' + a_string + '"'}
    else if (!a_string.includes("'")) { return "'" + a_string + "'"}
    else if (!a_string.includes("`")) { return "`" + a_string + "`"}
    else {
        a_string = a_string.replace(/\"/g, '\\"');
        return '"' + a_string + '"'
    }
}

//not used jan 2019
static is_first_letter_upper_case(a_string){
    return ((a_string.length > 0) && (a_string[0] == a_string[0].toUpperCase()))
}

//not used jan 2019
static is_first_letter_lower_case(a_string){
    return ((a_string.length > 0) && (a_string[0] == a_string[0].toLowerCase()))
}

//not used jan 2019
static  make_first_char_upper_case(a_string){
    if(a_string.length == 0) { return "" }
    if (this.is_first_letter_upper_case(a_string)) { return a_string }
    else {
        let first_char = a_string[0].toUpperCase();
        return first_char + a_string.substring(1)
    }
}

//retuns "a" or "an" depending on first letter of str
static a_or_an(str="", capitalize=false){
  if(str.length == 0) {
       if(capitalize ) { return "A" }
       else { return "a" }
  }
  else if ("aeiouAEIOU".includes(str[0])) {
      if(capitalize ) { return "An" }
      else { return "an" }
  }
  else {
        if(capitalize ) { return "A" }
        else { return "a" }}
}


 //uses html to format newlines
//use for printing ANY possible value from JS so that a human (usually a programmer) can make sense of it.
//Use this,stringify_value_sans_html  for evalable string (but still not perfrect
//returns a string.
//called on the eval result by eval part 2, and by show_output if the input is not already a string
//and by Js_info
static stringify_value(value){
        var result = this.stringify_value_aux (value);
        //if (typeof(value) != "string"){
        //    result = "<code>" + result + "</code>"
        //}
        return result
}


static stringify_value_aux(value, job, depth=0){
    if (depth > 2) { return "***" } //stops infinite recustion in circular structures.
    var result;
    if      (value === undefined)       { return "undefined" }
    else if (value === null)            { return "null" } //since typeof(null) == "object", this must be before the typeof(value) == "object" clause
    else if (value === globalThis)      { return "{globalThis object: stores globals}" } //too many weird values in there and too slow so punt.
    else if (typeof(value) == "number") { return value.toString() } //works for NaN too, no need to use (isNaN(value)) { result = "NaN" } //note the check for number before checking isNanN is necessary because JS wasn't designed.
    else if (typeof(value) == "string") { return JSON.stringify(value) }
    else if (value instanceof Date){ result = value.toString(); }
    else if (typeof(value) == "function") {
        result = value.toString();
        var bod_pos = result.indexOf("{");
        if (bod_pos.length <= 12) { //very little to go on. probably an anonymous fn with no args
            if (result.length > 25){ //shorten longer defs
                result = result.substring(0, 22) + "...}";
            }
        }
        else {
            result = result.substring(0, bod_pos) + "{...}"; //just show "function foo(a, b){...}"
        }
    }
    else if (Object.isNewObject(value)) {
        result = value.objectPath(value);
        if (!result) {
            result = "Instance of: " + value.prototype.objectPath(); //todo what if we make an instance of an unnamed instance? we shoud go up the tree to find the first named prototype.
        }
        //from top level, we'll be in sandbox, so value can be browsed without it having to have a path to it.
        //but hopuflly value.prototype WILL have a path (as is likely). For now don't worry about
        //unnamed objs 2 levels down.
        else {
        //Inspect.inspect_new_object(value) //causes infinite loop in electron dde
        result = Inspect.inspect_stringify_new_object_clickable_path(value); //causes infinite loop in electron dd
        //just let result be the string of the path.
        }
    }
    else if (depth > 2) { return "***" } //the below clauses call this.stringify_value_aux meaning
        //they can get into infinite recursion, so cut that off here.
    else if (this.typed_array_name(value)){ //any type of array
        let len = Math.min(value.length, 100);  //large arrays will cause problems
        result = "[<br/>";
        for (let i = 0; i < len; i++){ //don't use "for ... in here as it gets some wrong stuff
            let sep = ((i == len - 1) ? "<br/>" : ",<br/>");
            var elt_val = value[i];
            var elt_val_string = this.stringify_value_aux(elt_val, job, depth + 1);
            //if (Array.isArray(elt_val)) sep = sep + "<br/>" //put each sub-array on its own line
            result += " " + elt_val_string + sep;
        }
        result += "]";
        if ((result.length < 100) && (result.indexOf("{") == -1)){ //worked up until I put in indicies above
            result = result.replace(/\[<br\/>\s+/g, "[");
            result = result.replace(/,<br\/>\s+/g, ", ");
            result = result.replace(/<br\/>\]/g, "]");
            result = result.replace(/\[\s+/g, "[");
        }
        result = result.replace(/\],\s+\[/g, "],<br/>&nbsp;[");
    }

    /*else if (value == rootObject) {
        result = "{prototype: undefined<br/>" +
                 '&nbsp;name: "rootObject"<br/>'
        for(let prop in value){
            let prop_val = value[prop]
            let val_str
            if (value.hasOwnProperty(prop) && (prop != "name") && (prop != "prototype")){
               if (Object.isNewObject(prop_val)){
                  val_str = stringify_new_object_clickable_path(prop_val)
               }
               else { val_str = this.stringify_value_aux(prop_val) }
               result += "&nbsp;" + prop + ": " +  val_str + "<br/>"
            }
        }
        result += "}"
    }
    else if (Object.isNewObject(value)) {
        let prop_val = value["prototype"]
        let val_str = (Object.isNewObject(prop_val)?
                        stringify_new_object_clickable_path(prop_val):
                        this.stringify_value_aux(prop_val))
        result = "{prototype: "   + val_str + "<br/>" +
                   "&nbsp;name: " + ((value.name == undefined) ? "undefined" : JSON.stringify(value.name)) + "<br/>"
        for(let prop in value){
           if (value.hasOwnProperty(prop) && (prop != "name") && (prop != "prototype")){
               prop_val = value[prop]
               val_str = Object.isNewObject(prop_val)? stringify_new_object_clickable_path(prop_val): this.stringify_value_aux(prop_val)
               result += "&nbsp;" + prop + ": " +  val_str + "<br/>"
           }
        }
        result += "}"
    }*/

    else if (typeof(value) == "object"){//beware if we didn't catch arrays above this would hit
        if (value.constructor == Job){ //must be under object clause since value might be null
            job = value;
        }
        //I can't figure out how to tell if toString is explicity defined on value. hasOwnProperty doesn't work
        if ((value instanceof Instruction) || (value instanceof Duration) || (value instanceof Brain) ||
            (value instanceof Human) || (value instanceof TestSuite)){
            return value.toString()
        }
        var result = "{";
        if (value.constructor && value.constructor.name && (value.constructor.name != "Object")) { result += "class: " + value.constructor.name + ",<br/>";}
        let prop_names = Object.getOwnPropertyNames(value); //long objects like cv cause problems
        for (var prop_index = 0; prop_index < Math.min(prop_names.length, 100); prop_index++) {
            let prop_name = prop_names[prop_index];
            let prop_val = value[prop_name];
            if(prop_name == "devToolsWebContents") ; //causes error so just ignore this rare item. occurs in electron BrowserWindow instances
            else if (prop_name == "robot_status"){
                if (!job && value.job_id) { job = Job.job_id_to_job_instance(value.job_id); }
                let where_from = "";
                if (value instanceof Job)   { where_from = " on job: "   + value.name; }
                if (value instanceof Robot) { where_from = " on robot: " + value.name; }
                result += Dexter.robot_status_to_html(prop_val, where_from);
            }
            else if ((prop_name == "do_list") && job) { //must check to insure job is defined or this errors as happens when inspecting Job.job_default_params
                result += job.do_list_to_html(); //Job.do_list_to_html(value[prop])
            }
            else if (prop_name == "original_do_list"){
                result += Job.non_hierarchical_do_list_to_html(prop_val); //Job.do_list_to_html(value[prop])
            }
            else if (prop_name == "sent_instructions"){
                result += Dexter.sent_instructions_to_html(prop_val);
            }
            else if (prop_name == "rs_history"){ //value is instance of Dexter
                result += prop_name + ": " + Dexter.make_show_rs_history_button_html(value.job_id);
            }
            else {
                try{
                  result += prop_name + ": " + this.stringify_value_aux(prop_val, job, depth + 1) + ",<br/>";
                }
                catch(e) {} //doing globalThis["caches"] errors so just forget about this prop and maybe others.
            }
        }
        result += "}";
        if (result == "{}") {  //as is the case with iterators
            if (Utils$1.is_iterator(value)) {
              result = value.toString(); //not great as might make "[object Generator]" or "[object Array Iterator]" but better than {}
            }
            else {
                 try{
                     var result = value.toString();
                     if (result == "[object Object]"){
                         if (value.constructor == Object) { result = "{}"; }
                         else { result = "{instanceof: " + this.stringify_value_aux(value.constructor, job, depth + 1) + "}"; }
                     }
                 }
                 catch(e) {return "{}" }
            }
        }
    }
    else {
        result = JSON.stringify(value, null, 2); //beware if a val of a field in a obj is a fn, it prints as null
        if (result == undefined){ //as happens at least for functions
            result = value.toString();
        }
        else {//as for js objects, etc.
            result = result.replace(/\{\n  /g, "{&nbsp;");
            result = result.replace(/\[\n  /g, "[&nbsp;");
            result = result.replace(/\n/g, "<br/>");
            result = result.replace(/\ \ /g, "&nbsp;&nbsp;");
        }
    }
    return result
}

//crude but guarentees fidelity with Utils.stringify_value, but that might not be what I really want.
static stringify_value_sans_html(value){
    let result = this.stringify_value(value);
    //result = this.replace_substrings(result, "<co"  + "de>", "") //screws up inspetion of this fn (while inspecting 'window') having '<co  de>' in it. //
    result = result.replace(/<code>/g,   "");
    //result = this.replace_substrings(result, "</co" + "de>", "") //
    result = result.replace(/<\/code>/g, "");
    result = result.replace(/<br\/>/g,   "\n");
    result = result.replace(/&nbsp;/g,   " ");
    return result
}

static stringify_value_cheap(val){
    if(val === undefined) { return "undefined"}
    else if(typeof(value) == "string") { return val }
    //else if (Utils.is_class(val)) { return "Class:" + Utils.get_class_name}
    //else if(typeof(value) === "function"){
    //    return val.toString()
    //}
    try { val = JSON.stringify(val);
        return val
    }
    catch(err) {
        return "" + val
    }
}

//makes a string for the args similar to console.log in that
//the args output are separated by a space,
//and there's a good attempt to have objects, funtions, classes,
//to have a meaningful presention but not too long.
//doesn't attempt to make source code, but
//will often do what JSON.stringify does.
//but outputs strings as its chars, without wrapping in double quotes.
// used by Utils.insert_outs_after_logs
static args_to_string(...args){
    let result = "";
    for(let index = 0; index < args.length; index++) {
        let arg = args[index];
        let str = ((typeof(arg) === "string") ? arg : Utils$1.stringify_value(arg));
        result += (index === 0 ? "" : " ") + str;  //console.log adds a space between args in printout
    }
    return result
}

//________CSV ________
//documented but not called jan 2019
static array_to_csv(an_array){
    let result = "";
    for(let i = 0; i < an_array.length; i++){
        let row = an_array[i];
        for (let j = 0; j < row.length; j++) {
            let cell = row[j];
            result += "" + cell;
            if (j < (row.length - 1)) { result += ","; }
        }
        if (i < (an_array.length - 1)) { result += "\n"; } //don't print a final newline
    }
    return result
}

//documented but not called jan 2019
static csv_to_array(a_string){
    let result = [];
    let row_strings = a_string.split("\n");
    for (let row_string of row_strings){
        let row_array = [];
        let cell_strings = row_string.split(",");
        for (let cell_string of cell_strings){
            if (this.is_string_a_number(cell_string)) {
                cell_string = parseFloat(cell_string);
            }
            row_array.push(cell_string);
        }
        result.push(row_array);
    }
    return result
}
//______End CSV ______

//not called jan 2019
static scale_to_micron_factor(scale){
    if (typeof(scale) == "number") { return scale }
    else {
        let num =  {"microns":     1,
                    "millimeters": 1000,
                    "centimeters": 10000,
                    "meters":      1000000,
                    "inches":      25400,
                    "feet":        304800}[scale];
        if (num) { return num }
        else { dde_error("scale_to_factor passed invalid scale: " + scale +
            ' use a number or "microns", "millimeters", "centimeters", "meters", "inches", "feet".');
        }
    }
}

static limit_to_range(value, min=null, max=null){
    let result = value;
    if (min){ result = Math.max(result, min); }
    if (max){ result = Math.min(result, max); }
    return result
}

//dxf uses objects but dde standardizes on arrays
static point_object_to_array(xyz_obj){
    return [xyz_obj.x, xyz_obj.y, xyz_obj.z]
}

static scale_point(xyz, scale) {
    return [Math.round(xyz[0] * scale),
            Math.round(xyz[1] * scale),
            Math.round(xyz[2] * scale)]
}

//not called jan 2019
static point_equal(a, b) { return (a[0] == b[0]) && (a[1] == b[1]) && (a[2] == b[2]) }

//user fn but not called in dde, jan 2019
static make_ins_arrays(default_oplet, instruction_arrays=[]){
    let result = [];
    for(let instr of instruction_arrays) {
        if((instr.length > 0) && (Robot.is_oplet(instr[0], false))) {//instr ok as is
            result.push(make_ins(...instr));
        }
        else if(default_oplet) {
            let new_array = instr.slice();
            new_array.unshift(default_oplet);
            result.push(make_ins(...new_array));
        }
        else {
            dde_error("Utils.make_ins_arrays called with no default oplet and an instruction args array without an oplet: " + instr);
        }
    }
    return result
}

   static permissions_integer_string_to_letter_string(integer_string, is_dir=false){
      if(integer_string === undefined) { return "---" }
      let result = (is_dir? "d" : "-");
            //in the binary rep,  leftmost  means r
            //                    middle    means w
            //                    rightmost means x
                           //000,  001,   010,   011    100    101    110   111
                           // 0,    1,     2,     3,     4,     5,     6,    7
      let int_to_let_map = ["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"];
      for(let i = 0; i <  integer_string.length; i++){
          let char = integer_string[i];
          let int  = parseInt(char);
          let letters = int_to_let_map[int];
          result += letters;
      }
      return result
   }

//________Date________
    static is_valid_new_date_arg(string_or_int){
        const timestamp = Date.parse(string_or_int);
        if (Number.isNaN(timestamp)) { return false }
        else { return true }
    }


    static is_hour_colon_minute(a_string){
        return a_string.match(/^\d\d:\d\d$/)
    }


    static is_hour_colon_minute_colon_second(a_string){
        return a_string.match(/^\d\d:\d\d:\d\d$/)
    }


//date_int is ms from jan 1, 1970 as returned by Date.now()
    static date_integer_to_long_string(date_int=Date.now()){
        let date_obj = new Date(date_int);
        let result = date_obj.toString();
        let ms = date_obj.getMilliseconds();
        result +=  " " + ms + "ms";
        return result
    }

    //like date_integer_to_long_string but removes ms and "(Eastern Standard Time)"
    static date_number_to_medium_string(date_int=Date.now()){
        let date_obj = new Date(date_int);
        let result = date_obj.toString();
        let paren_pos = result.indexOf("(");
        if(paren_pos !== -1) {
            result = result.substring(0, paren_pos);
        }
        return result
    }

    //returns 2021/1/31 23:11:5
    static date_or_number_to_ymdhms(date_or_number){
        let date;
        if(typeof(date_or_number) === "number"){
            date = new Date(date_or_number);
        }
        else if (!date_or_number) {
            date = new Date(0);
        }
        else { date = date_or_number;}
        return date.getFullYear() + "/" +
               (date.getMonth() + 1) + "/" +
               date.getDate() + " " +
               date.getHours() + ":" +
               date.getMinutes() + ":" +
               date.getSeconds()
    }

//integer milliseconds in, output "123:23:59:59:999" ie
// days:hours:minutes:seconds:milliseconds
    static milliseconds_to_human_string(total_ms=Date.now(), include_total_days=true){
        let remain_ms   = total_ms % 1000;
        let total_secs  = (total_ms - remain_ms) / 1000;

        let remain_secs = total_secs % 60;
        let total_mins = (total_secs - remain_secs) / 60;

        let remain_mins = total_mins % 60;
        let total_hours = (total_mins - remain_mins) / 60;

        let remain_hours = total_hours % 24;
        let total_days   = (total_hours - remain_hours) / 24;
        return (include_total_days ? total_days + ":" : "") +
            Utils$1.pad_integer(remain_hours, 2) + ":" +
            Utils$1.pad_integer(remain_mins, 2) + ":" +
            Utils$1.pad_integer(remain_secs, 2) + ":" +
            Utils$1.pad_integer(remain_ms, 3)
    }

//lots of inputs, returns "Mar 23, 2017" format
    static date_to_mmm_dd_yyyy(date){ //can't give the default value here because on DDE launch,
//this method is called and for some weird reason, that call errors, but doesn't
//if I set an empty date below.
        if(!(date instanceof Date)) { date = new Date(date); }
        const d_string = date.toString();
        const mmm = d_string.substring(4, 8);
        return mmm + " " + date.getDate() + ", " + date.getFullYear()
    }

    static date_to_human_string(date=new Date()){
        let result = this.date_to_mmm_dd_yyyy(date);
        return result +  " " + Utils$1.milliseconds_to_human_string(undefined, false)
    }

//________TIME related functions below here_______
//import {microseconds}              from "../../../node_modules/nano-time/index.js"
//importing microseconds from this module just doesn't work, so
//I'm inlining the code from the nano-time npm module here:
static nanoseconds() {
    let loadNs = process.hrtime();
    let loadMs = new Date().getTime();
    let diffNs = process.hrtime(loadNs);
    return BigInt(loadMs).times(1e6).add(BigInt(diffNs[0]).times(1e9).plus(diffNs[1])).toString();
}

static microseconds() {
    return BigInt(this.nanoseconds()).divide(1e3).toString();
}
//_____done with defining microseconds, called below
static month_names = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'November', 'December']

    /*
    nn = performance.now(); parseInt(microseconds()); performance.now() - nn;
    and
    nn = performance.now(); Utils.time_in_us(); performance.now() - nn;
    take very close to the same time, ie very clsoe to 0.1 ms normally,
    or very close to  0.2 ms. (its bi-modal)
    Note: nn = performance.now(); performance.now() - nn;
    usually measures as 0 ms but occassionally 0.1ms
    https://stackoverflow.com/questions/313893/how-to-measure-time-taken-by-a-function-to-execute/15641427
    Number.MAX_SAFE_INTEGER is
    9007199254740991
    whereas, this.time_in_us() returns (as of may3, 2020)
    1588518775923001
    so our JS integers are in good shape to handle this capacity.
    Conclusion: this.time_in_us gives us 0.1ms  or 0.2ms res, not consistently.
    */

static time_in_us() { return parseInt(microseconds()) }

//input -> output
// 12       12
// 12.3     12.3
// "1:34"     94
// "1:34.5"   94.5
// "1:2:3"    1 hour, 2 minutes, 3 seconds ie 3600 + 120 + 3
// else error
static string_to_seconds(dur){
    if(typeof(dur) === "number") { return dur }
    else if(typeof(dur) == "string"){
        let num_strings = dur.split(":");
        if(num_strings.length == 0)  { dde_error("Utils.string_to_seconds passed empty string for dur of: " + dur); }
        else if (num_strings.length == 1) {
            if(this.is_string_a_number(num_strings[0])) {
                return parseFloat(num_strings[0])
            }
            else { dde_error("Utils.string_to_seconds passed string that is not a number: " + dur); }
        }
        else if(num_strings.length == 2) {
            if(!this.is_string_a_integer(num_strings[0]) ||
                !this.is_string_a_number(num_strings[1])) {
                dde_error("Utils.string_to_seconds passed string that does not contain valid numbers: " + dur);
            }
            else {
                let result = parseInt(num_strings[0]) * 60;
                result +=  parseFloat(num_strings[1]);
                return result
            }
        }
        else if(num_strings.length == 3) {
            if(!this.is_string_a_integer(num_strings[0]) ||
                !this.is_string_a_number(num_strings[2])) {
                dde_error("Utils.string_to_seconds passed string that does not contain valid numbers: " + dur);
            }
            else {
                let result = parseInt(num_strings[0]) * 60 * 60;
                result    += parseInt(num_strings[0]) * 60;
                result    += parseFloat(num_strings[2]);
                return result
            }
        }
        else {
            dde_error("Utils.string_to_seconds passed string that does not 1 to 3 numbers: " + dur);
        }
    }
    else {
        dde_error("Utils.string_to_seconds passed non number, non string: " + dur);
    }
    /* unused jan 2019
   static is_json_date(a_string){
       if((a_string.length > 19) && (a_string.length < 30)) {//impresise
           return (is_string_a_integer(a_string.substring(0, 4)) &&
           (a_string[4] == "-") &&
           (a_string[7] == "-") &&
           (a_string[10] == "T") &&
           (a_string[13] == ":"))
       }
       else return false
   }
   */
}
   //see https://gomakethings.com/how-to-get-all-parent-elements-with-vanilla-javascript/
   //fry modified, but same core algorithm
   //used in DocCode.open_doc
   static get_dom_elt_ancestors(dom_elt) {
        let result = [];
        for ( ; dom_elt && dom_elt !== document; dom_elt = dom_elt.parentNode ) {
            result.push(dom_elt);
        }
        return result
    }

   static available_memory(){
       if (Utils$1.value_of_path("window")) {
           //the below works in DDE but fails in node,
           return performance.memory.jsHeapSizeLimit -
                  performance.memory.usedJSHeapSize
       } else {
           //works in node, but not in DDE4.
           let info = process.memoryUsage();
           return info.heapTotal - info.heapUsed
       }
   }
} //end class Utils

globalThis.Utils = Utils$1;

globalThis.dde_error = Utils$1.dde_error; //not documented, but just used so many places in DDE.
                                 //we should probably encourage advances dde users to use it.
globalThis.warning       = Utils$1.warning;
globalThis.shouldnt      = Utils$1.shouldnt;
globalThis.rgb           = Utils$1.rgb; //documented for users, as in Plot example
globalThis.last          = Utils$1.last; //used a bunch of places that are hard to declare
globalThis.replace_substrings = Utils$1.replace_substrings;
globalThis.similar       = Utils$1.similar;
globalThis.value_of_path = Utils$1.value_of_path;

//This file is loaded both in the Job Engine and in the Jobs Browser
//copied from utils.js so that we don't have to have any requires in this file

function out$1(val="", color="black", temp=false, code=null){

    let text = val;
    if (typeof(text) != "string"){ //if its not a string, its some data structure so make it fixed width to demonstrate code. Plus the json pretty printing doesn't work unless if its not fixed width.
        //if(globalThis["stringify_value"]) { text = Utils.stringify_value(text) }
        //else { text = Utils.stringify_value_cheap(val) } //hits in browser
        text = Utils.stringify_value(val);
    }
    if(text.includes("class='gpt'") || text.includes('class="gpt"')){
        globalThis.prev_out_val   = val;
        globalThis.prev_out_color = color;
    }
    if(globalThis.platform == "node") { //console.log(val)
        let out_obj = {kind: "out_call", val: text, color: color, temp: temp, code: code}; //code isn't actually used in the browser
        //globalThis.write_to_stdout("<for_server>" + JSON.stringify(out_obj) + "</for_server>\n")
        process.send(out_obj);
        return val
    }

    if(globalThis["format_text_for_code"]) { //doesn't hit in browser
        text = format_text_for_code(text, code);
    }
    if ((color != "black") && (color != "#000000")){
        text = "<span style='color:" + color + ";'>" + text + "</span>";
    }
    let temp_str_id = ((typeof(temp) == "string") ? temp : "temp");
    let existing_temp_elts = [];
    if(globalThis["document"]){
         try{
            existing_temp_elts = document.querySelectorAll("#" + temp_str_id);
         }
         catch(err) {} //ignore it. This happens when a Job name starts with a digit, and we call start on the job, near the bottom of the start fn.
    }
    if (temp){
        if (existing_temp_elts.length == 0){
            text = '<div id="' + temp_str_id + '" style="border-style:solid;border-width:1px;border-color:#0000FF;margin:5px 5px 5px 15px;padding:4px;">' + text + '</div>';
            SW$1.append_to_output(text);
            //don't blink output pane splitter even if output pane is hidden because
            //its just "temp" output so presumed not so important.
        }
        else {
            //existing_temp_elts.html(text)
            for(let temp_elt of existing_temp_elts){ temp_elt.innerHTML = text;}
        }
        return "dont_print"
    }
    else {
        if ((existing_temp_elts.length > 0) && (temp_str_id == "temp")) { //don't remove if temp is another string. This is used in Job.show_progress
            //existing_temp_elts.remove()
            for (let temp_elt of existing_temp_elts) {
                temp_elt.remove();
            }
        }
        //var out_item_id = "out_" + out_item_index
        //out_item_index += 1
        text = '<div id="' + //out_item_id +
            '" style="border-style:solid;border-width:1px;border-color:#AA00AA;margin:5px 5px 5px 15px;padding:4px;">' + text + '</div>';
        SW$1.append_to_output(text);
        if (globalThis.DocCode) {
            DocCode.blink_if_output_pane_hidden(); //let user know there's new output that they can't see.
        }
    }
    if(globalThis["document"]){
        let orig_focus_elt = document.activeElement;
        orig_focus_elt.focus();
    }
    if (temp){
        return "dont_print"
    }
    else {
        return val //so value can be used by the caller of show_output
    }
}

globalThis.out = out$1;


class SW$1 { //stands for Show Window. These are the aux fns that the top level show_window fn uses
           //show_window itself is not called from the browser

    //good test: get_index_of_window(get_window_of_index(0))
    static get_index_of_window(show_window_elt){
        let index_str = show_window_elt.getAttribute('data-window_index');
        return parseInt(index_str)
    }

    //index is an int. result is a win or null if none
    static get_window_of_index(index){
        if (index === undefined){ //risky to just get the latest created, but a good trick when I need to call some init  for a window as in combo box for app builder from ab.fill_in_action_names
            index = this.window_index;
        }
        let win = document.querySelector('[data-window_index="' + index + '"]');
        return win
    }

    //returns true or false
    static is_window_shown(index){
        let the_elt = this.get_window_of_index(index);
        if(the_elt) { return true }
        else        { return false }
    }

    //works for both DDE and Browser. needed by submit_window
    static get_window_content_of_elt(elt){
        let result =  elt.closest(".show_window_content");
        if(result) { return result }
        else if(elt.classList.contains("jqx-menu-item")){
            let win_index = elt.dataset.window_index;
            let sw_elt = SW$1.get_window_of_index(win_index);
            result = sw_elt.querySelector(".show_window_content");
            if(result) {return result}
            else {
                dde_error('get_window_content_of_elt for :' + elt +
                    ' could not find ".show_window_content" dom elt.');
            }
        }
        else { //maybe elt is the close_button or the collapse_button, not inside the content
            let sw_elt = elt.closest(".show_window");
            result = sw_elt.querySelector(".show_window_content");
            if(result) {return result}
            else {
                dde_error('get_window_content_of_elt for :' + elt +
                          ' could not find ".show_window_content" dom elt.');
            }
        }
    }

    static get_show_window_elt(elt) {
        return elt.closest(".show_window")
    }
    //return sw_elt or null if none.
    static get_window_index_containing_elt(elt){
        let sw_elt = this.get_show_window_elt(elt);
        if(sw_elt) {
            return this.get_index_of_window(sw_elt)
        }
        else { return null }
    }

    static all_show_windows(){
        let nodelist = document.querySelectorAll(".show_window");
        let arr = Array.prototype.slice.call(nodelist);
        return arr
    }

    //esp good for a zillion human_notify show windows
    static close_all_show_windows(){
        for(let win of SW$1.all_show_windows()){
            SW$1.sw_close(win);
        }
    }

    //if you change, this, also change sw_make_title_html
    static get_show_window_title(sw_elt){
        let title_elt = sw_elt.firstElementChild;
        let title = title_elt.firstChild.textContent; //don't use firstElementChild here.
        return title
    }

    //might return an empty array, or one containing show_window dom elements.
    static windows_of_title(title){
        //return document.querySelectorAll('[data-show_window_title="' + title + '"]') //fails if there's HTML in the title
        let result = [];
        for(let sw_elt of this.all_show_windows()){
            let a_title = this.get_show_window_title(sw_elt);
            if(a_title == title) { result.push(sw_elt); }
        }
        return result
    }

    static close_windows_of_title(title){
        let sw_win_elts = this.windows_of_title(title);
        for(let win_elt of sw_win_elts){
            this.sw_close(win_elt);
        }
    }

    //returns latest show_window having title, or null if none.
    //called from show_window fn
    static latest_window_of_title(title){
        let win_elts = this.windows_of_title(title);
        let max_index = -1;
        let max_elt = null;
        for(let win_elt of win_elts){
            let index = this.get_index_of_window(win_elt);
            if(index > max_index) {
                max_index = max_index;
                max_elt = win_elt;
            }
        }
        return max_elt
    }


    //same for dde and browser
    static render_show_window(properties){
        //onsole.log("top of render_show_window")
        //kludge but that's dom reality
        let holder_div = document.createElement("div"); // a throw away elt
        holder_div.innerHTML = properties.html;
        let show_window_elt = holder_div.firstChild;
        body_id.appendChild(show_window_elt); //this is automatically done when I call jqxw_jq.jqxWindow({width:width below
       // body_id.insertAdjacentHTML("beforeend", properties.html)  //more elegant EXCEPT I need show_window_elt below
        if(properties.is_modal) {
            show_window_elt.showModal();
        }
        else {
            show_window_elt.show();
        }

        //see https://stackoverflow.com/questions/26283661/drag-drop-with-handle
        //and the code solution at https://jsfiddle.net/a6tgy9so/1/
        //BUT: THIS EXAMPLE DOESN'T HAVE HOW TO POSITION THE DRAGGED DIALOG AFTER YOU DROP IT.
        // on dragging title to move whole window, without drag on content doing anything
        //the title is called the drag "handle", whereas the whole window is called the "draggable"
        show_window_elt.focus();
        //let title_id = "sw_title_" + properties.window_index + "_id"
        let title_elt = show_window_elt.querySelector(".show_window_title"); //globalThis[title_id]
        //onsole.log("render_show_window got title_elt: " + title_elt)
        if(title_elt) { // won't hit if title === "" because that means no title
            let draggable_value = (properties.draggable? "true": "false");
            //onsole.log("render_show_window got draggable_value: " + draggable_value)
            title_elt.onmousedown = function(event) {
                event.target.parentNode.setAttribute('draggable', draggable_value); //set the whole sw window to now be draggable.
            };
            title_elt.onmouseup = function(event) {
                event.target.parentNode.setAttribute('draggable', 'false'); //set the whole sw window to now be draggable.
            };
        }
        show_window_elt.ondragstart = function(event) {
            let show_win_elt = event.target;
            var style = globalThis.getComputedStyle(show_win_elt, null);
            let left = parseInt(style.getPropertyValue("left"), 10) - event.clientX;
            let top  = parseInt(style.getPropertyValue("top"),  10) - event.clientY;
            //event.dataTransfer.setData("text/plain", (parseInt(style.getPropertyValue("left"), 10) - event.clientX) + ',' + (parseInt(style.getPropertyValue("top"), 10) - event.clientY) + ',' + event.target.getAttribute('data-item'));
            let data = show_window_elt.id + "," + left + "," + top;
            event.dataTransfer.setData("sw_id", data); //title_id) //don't use "text or "text/plain" here
            //as that will cause the data to ALSO be inserted into the DDE editor.
        };
        show_window_elt.ondragend = function(event) {
            event.target.setAttribute('draggable', 'false');
        };

        //show_window_elt.onresize = function(event){}

        body_id.ondragenter = this.sw_ondragenter;
        body_id.ondragover = this.sw_allow_drop;
        body_id.ondrop = this.sw_drop;
        this.init_draggable_elements(show_window_elt); //not for dragging the whole win, just elts WITHIN the win

        setTimeout(SW$1.install_onclick_via_data_fns, 10); //don't need this at all for show_window in browser.
        setTimeout(function(){SW$1.install_submit_window_fns(show_window_elt);}, 10);
        if (properties.init_elt_id){
            setTimeout(function(){globalThis[properties.init_elt_id].click();} , 100);
        }
    }

    static init_draggable_elements(show_window_elt){
        var ins = show_window_elt.querySelectorAll(".draggable"); //"[draggable='true']")
        if(ins.length > 0) {
            let first_ins = ins[0];
            let par = first_ins.parentElement;
            this.makeDraggable(par);
        }
    }
    //for(var index = 0; index < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
    //    var inp = ins[index]
    //    if (inp.class !== "show_window") {
    //        inp.draggable = "true" //doesn't work in triggering ondragstart
            //inp.onmousedown = function(e) {
            //    e.target.setAttribute('draggable', 'true') //set the whole sw window to now be draggable.
            //}
            //inp.onmouseup = function(e) {
            //    e.target.setAttribute('draggable', 'false') //set the whole sw window to now be draggable.
            //}
           /* inp.ondragstart = function(event) {
                event.preventDefault();
                event.stopPropagation()
                let inp = event.target
                var style = globalThis.getComputedStyle(inp, null)
                let left = parseInt(style.getPropertyValue("left"), 10) - event.clientX
                let top  = parseInt(style.getPropertyValue("top"),  10) - event.clientY
                //event.dataTransfer.setData("text/plain", (parseInt(style.getPropertyValue("left"), 10) - event.clientX) + ',' + (parseInt(style.getPropertyValue("top"), 10) - event.clientY) + ',' + event.target.getAttribute('data-item'));
                let data = inp.id + "," + left + "," + top
                event.dataTransfer.setData("sw_id", data) //title_id) //don't use "text or "text/plain" here
            }
            let inp_parent = inp.parentElement
            inp_parent.ondragenter = this.sw_ondragenter
            inp_parent.ondragover = this.sw_allow_drop
            inp_parent.ondrop = this.sw_drop*/
//}}}

//http://www.petercollingridge.co.uk/tutorials/svg/interactive/dragging/
//svg_elt is the PARENT of the elt to drag, ie an "SVG" tag elt.
    static makeDraggable(svg_elt){
        //var svg_elt = evt.target;  //was named "svg"
        svg_elt.addEventListener('mousedown', startDrag, false);
        svg_elt.addEventListener('mousemove', drag, false);
        svg_elt.addEventListener('mouseup', endDrag, false);

        function getMousePosition(evt){
            let CTM = svg_elt.getScreenCTM();
            return {
                x: (evt.clientX - CTM.e) / CTM.a,
                y: (evt.clientY - CTM.f) / CTM.d
            };
        }
        var selectedElement, offset, transform;

        function startDrag(evt) {
            if (evt.target.classList.contains('draggable')) {
                selectedElement = evt.target;
                if(selectedElement.tagName == "circle") { //no need to transform this. mouse coords are the coord of the containing SVG elt, with 0,0 in upper left.
                    return
                }
                offset = getMousePosition(evt);
                out$1("in startDrag offset: " + offset);
                // Make sure the first transform on the element is a translate transform
                var transforms = selectedElement.transform.baseVal;

                if (transforms.length === 0 || transforms.getItem(0).type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {
                    // Create an transform that translates by (0, 0)
                    var translate = svg_elt.createSVGTransform();
                    translate.setTranslate(0, 0);
                    selectedElement.transform.baseVal.insertItemBefore(translate, 0);
                }
                // Get initial translation
                transform = transforms.getItem(0);
                offset.x -= transform.matrix.e;
                offset.y -= transform.matrix.f;
            }
        }
        function drag(evt) {
            if (selectedElement) {
                let coord = getMousePosition(evt);
                //out("in drag x: " + coord.x + " y: " + coord.y)
                if(selectedElement.tagName == "circle"){
                    selectedElement.setAttribute("cx", coord.x);
                    selectedElement.setAttribute("cy", coord.y);
                }
                else {
                    transform.setTranslate(coord.x - offset.x, coord.y - offset.y);
                }
                let elt_being_dragged = evt.target;
                if(elt_being_dragged.dataset.oninput == "true"){
                    SW$1.submit_window.call(elt_being_dragged, evt);
                }
            }
        }
        function endDrag(evt) {
            selectedElement = null;
        }
    }

    //called with elt of the close button, a sw_window_content_elt, or a a sw_window_elt
    static sw_close(elt){
        let sw_window_elt = elt.closest(".show_window");
        sw_window_elt.close();
        sw_window_elt.remove(); //remove from body_id
    }

    //collapse/expand
    static sw_toggle(elt){
        let dia_elt = elt.closest(".show_window");
        let content_elt = dia_elt.querySelector(".show_window_content"); // dia_elt.children[1]
        if(content_elt.style.display == "none") { //expand the window
            content_elt.style.display = "block";
            dia_elt.style.height = dia_elt["data-full-height"];
            elt.innerHTML = "&#8679;"; //"^"
        }
        else { //shrink the window
            dia_elt["data-full-height"] = dia_elt.style.height;
            content_elt.style.display = "none";
            dia_elt.style.height = "35px";
            elt.innerHTML = "&#8681;"; //"v"
        }
    }

    static sw_allow_drop(event) {
        event.preventDefault();
    }
    static sw_ondragenter(event) {
        event.preventDefault();
    }

    //"this" is body_id
    static sw_drop(event){
        //onsole.log("got drop")
        event.preventDefault();
        event.stopPropagation();
        let data = event.dataTransfer.getData("sw_id");
        //onsole.log("sw_drop got data: " + data)
        let [sw_elt_id, left, top] = data.split(",");
        event.dataTransfer.clearData("sw_id"); //doesn't prevent inserting of the data into the editor
        let show_window_elt_being_dragged = body_id.querySelector("#" + sw_elt_id); //globalThis[sw_elt_id]
        //event.target //in browser, this is the sw dialog. In DDE this is some codemirror nested elt
        //show_window_elt_being_dragged = show_window_elt_being_dragged.closest("DIALOG") ////in browser, this is the sw dialog. In DDE this is null
        let new_x = (event.clientX + parseInt(left, 10)) + 'px';
        let new_y = (event.clientY + parseInt(top,  10)) + 'px';
        //onsole.log("clientX: " + event.clientX + " clientY: " + event.clientY +
         //           " new_x: " + new_x + " new_y: " + new_y)
        //let new_x = event.clientX + "px" //event.offsetX + "px"
        //show_window_elt_being_dragged.getBoundingClientRect().left + "px"
        //let new_y = event.clientY + "px" //event.offsetY + "px"
        //show_window_elt_being_dragged.getBoundingClientRect().top + "px"
        show_window_elt_being_dragged.style.left = new_x;
        show_window_elt_being_dragged.style.top = new_y;

    }

    static install_onclick_via_data_fns(){
        var elts = document.getElementsByClassName("onclick_via_data");
        for (var index = 0; index < elts.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
            var elt = elts[index];
            elt.onclick = this.onclick_via_data_fn; //in ROS code but this is bad. Not used in browser code
        }
    }

    static sw_combobox_select_oninput(event){
        let the_select_elt = event.target;
        let val = the_select_elt.value;
        let combobox_div = the_select_elt.closest(".combo_box");
        let input_elt = combobox_div.firstElementChild;
        input_elt.value = val;
    }

    static install_submit_window_fns(show_window_elt){
        let close_elt = show_window_elt.querySelector("button[name='close_button']");
        close_elt.onclick = function(event){
                                    SW$1.submit_window.call(close_elt, event);
                                    SW$1.sw_close(show_window_elt);
        };
        //let collapse_elt = show_window_elt.querySelector("button[name='collapse_button']")
        //collapse_elt.onclick = SW.sw_toggle
                               //I tried hard to get this to work and failed jul 17, 2020
                               //it calls the show_window callback ok but
                               //never calls sw_toggle.
                              //function(event){
                              //      SW.submit_window.call(collapse_elt, event)
                              //      SW.sw_toggle(show_window_elt)
                              // }//SW.submit_window
        let ins = show_window_elt.querySelectorAll(".clickable");
        for (var index = 0; index < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
            var inp = ins[index];
            inp.onclick = this.submit_window;
            if(!inp.name){ //something screwy is removing the "name" property. looks like electron or below bug
                let outer_html = inp.outerHTML;
                let name_pos = outer_html.indexOf(" name=");
                if(name_pos != -1) {
                    let end_space_pos = outer_html.indexOf(" ", name_pos + 2);
                    if(end_space_pos != -1){ //add the property
                        let name_string = outer_html.substring(name_pos + 7, end_space_pos -1);
                        inp.name = name_string;
                    }
                }
            }
        }
        ins = show_window_elt.querySelectorAll("[data-onchange='true']");
        for (var index = 0; index < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
            var inp = ins[index];
            inp.onchange = this.submit_window;
        }
        ins = show_window_elt.querySelectorAll("[data-oninput='true']");
        for (var index = 0; index < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
            var inp = ins[index];
            inp.oninput = this.submit_window;
        }

        //var ins = info_win_div.find("input")
         ins = show_window_elt.querySelectorAll("input");
        for (var index = 0; index < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
            var inp = ins[index];
            if ((inp.type == "submit") || (inp.type == "button")){
                inp.onclick = this.submit_window;
            }
            //else{
            //    if (inp.dataset.onchange == "true") { inp.onchange = this.submit_window }
            //    if (inp.dataset.oninput  == "true") { inp.oninput  = this.submit_window }
            //}
        }
        //var ins = info_win_div.find("select")

        // ins = show_window_elt.querySelectorAll("select")
        //for (var index = 0; index < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
        //    var inp = ins[index]
        //    if (inp.dataset.onchange == "true") { inp.onchange = this.submit_window }
        //    if (inp.dataset.oninput  == "true") { inp.oninput  = this.submit_window }
        //}
        //var ins = info_win_div.find("a")
         ins = show_window_elt.querySelectorAll("a");
        for (var index = 0; index  < ins.length; index++){ //bug in js chrome: for (var elt in elts) doesn't work here.
            var inp = ins[index];
            inp.onclick = this.submit_window;
        }
        var combo_boxes = show_window_elt.querySelectorAll(".combo_box");  //should be a div tag a la <div class="combo_box><option>one</option><option>two</option></div>
        for (var i = 0; i < combo_boxes.length; i++){
            let cb = combo_boxes[i]; //$(combo_boxes[i])
            //make an ARRAY, not a collection, of kids. becaluse the n2 for loop below really needs an array
            var kids = [];
            for(let kid of cb.children){ //was: cb.children()
                kids.push(kid);
            }
            let input_elt = document.createElement("INPUT");
            input_elt.id = cb.id;
            cb.id = "";
            let select_elt = document.createElement("SELECT");
            select_elt.oninput=this.sw_combobox_select_oninput;
            select_elt.style["margin-left"] = "5px";
            select_elt.style.width = "20px";
            //select_elt.children = kids
            for (let kid of kids){
                //let kid = kids[j] //could be nearly any html elt but option is a good choice.
                //kid.remove() //is this necessary?
                select_elt.appendChild(kid);
                if (kid.selected) {input_elt.value = kid.innerText;}
            }
            cb.appendChild(input_elt);
            cb.appendChild(select_elt);
            //if (cb[0].style && cb[0].style.width) {
            //    var cb_width = cb[0].style.width
            //    cb.jqxComboBox({height: '16px', source: choices, selectedIndex: sel_index, width: cb_width})
            //}
            //else{
            //    cb.jqxComboBox({height: '16px', source: choices, selectedIndex: sel_index})
            //}
        }
        //don't do this. Just give the canvas tag (or any tag  you want to be clickable,  prop:
        // class="clickable"
        //let canvases = info_win_div.find("canvas")
        //for(let canvas_elt of canvases) {
        //  canvas_elt.onclick = submit_window
        //}
        let window_index = this.get_index_of_window(show_window_elt);
        var menus = show_window_elt.querySelectorAll(".menu");
        for (var i = 0; i < menus.length; i++){
            var menu = menus[i];
            var outer_lis = menu.children[0].children;
            if (outer_lis && outer_lis[0] && outer_lis[0].children && outer_lis[0].children[0]){
                var inner_lis = outer_lis[0].children[0].children;
                this.install_menus_and_recurse(inner_lis, window_index);
            }
            // else we've got a menu with zero items, but for dev purposes its nice to
            //be able to show the menu's name, and its down arrow, even if nothing under it.
            $(menu).jqxMenu({ width: '100px', height: '25px' });
        }
    }


    static install_menus_and_recurse(inner_lis, window_index){ //the arg is li elts that *might* not be leaves
        for(var j = 0; j < inner_lis.length; j++){
            var inner_li = inner_lis[j];
            inner_li.onclick = this.submit_window;
            //$(inner_li).attr('data-window_index', window_index)//because jqx sticks these LIs outside the dom so it screws uo the normal way of looking up the dom to find it.
            inner_li.setAttribute('data-window_index', window_index);
            if (inner_li.children.length > 0){
                this.install_menus_and_recurse(inner_li.children[0].children, window_index);
            }
        }
    }


    //beware, this method uses "this" to mean the subject it was called with, not SW
    static submit_window(event){
        // descriptions of x & y's: http://stackoverflow.com/questions/6073505/what-is-the-difference-between-screenx-y-clientx-y-and-pagex-y
        let subject_elt = this;
        if(this.classList.contains("modebar-btn")) { //user clicked on an icon at the top of a Plot window
            return //so don't do stopPropagation, let its normal processing happen
        }
        event.stopPropagation();
        let result = {offsetX:event.offsetX,  offsetY:event.offsetY, //relative to the elt clocked on
            x:event.x,              y:event.y, //relative to the parent of the elt clicked on
            clientX:event.clientX,  clientY:event.clientY, //Relative to the upper left edge of the content area (the viewport) of the browser window. This point does not move even if the user moves a scrollbar from within the browser.
            pageX:event.pageX,      pageY:event.pageY, //Relative to the top left of the fully rendered content area in the browser.
            screenX:event.screenX,  screenY:event.screenY, //Relative to the top left of the physical screen/monitor
            altKey:event.altKey,    //on mac, the option key.
            ctrlKey:event.ctrlKey,
            metaKey:event.metaKey, //on WindowsOS, the windows key, on Mac, the Command key.
            shiftKey:event.shiftKey,
            tagName:subject_elt.tagName};
        //set clicked_button_value
        if (subject_elt.tagName == "LI"){ //user clicked on a menu item
            if(subject_elt.hasAttribute("data-name")) { result.clicked_button_value = subject_elt.getAttribute("data-name"); }
            else {result.clicked_button_value = subject_elt.innerHTML;}
        }
        else if (subject_elt.tagName == "A"){
            if (subject_elt.href.endsWith("#")){
                if(subject_elt.name)     { result.clicked_button_value = subject_elt.name;   }
                else if (subject_elt.id) { result.clicked_button_value = subject_elt.id;     }
                else                     { result.clicked_button_value = subject_elt.innerHTML;  }
            }
            else { //we've got a real url. The only thing to do with it is open a window, so
                //don't even go through the handler fn, just do it.
                var url = subject_elt.href;
                var double_slash_pos = url.indexOf("//");
                url = url.substring(double_slash_pos + 2, url.length);
                var single_slash_pos =  url.indexOf("/");
                url = url.substring(single_slash_pos + 1, url.length);
                if (!url.startsWith("http")){
                    url = "http://" + url;
                }
                globalThis.open(url);
                return
            }
        }
        else if (subject_elt.tagName == "INPUT") {
            if(subject_elt.name)     { result.clicked_button_value = subject_elt.name;   }
            else if (subject_elt.id) { result.clicked_button_value = subject_elt.id;     }
            else                     { result.clicked_button_value = subject_elt.value;  } //the displayed text in the button.
            //but note that we *might* have 2 buttons with the same label but want them to have different actions
            //so check name and id first because we can give them different values even if
            //the label (value) is the same for 2 different buttons.
            //but if we WANT the action to be the same for 2 same-valued buttons, fine
            //give the buttons values but no name or id.
        }
        else if (subject_elt.name) { result.clicked_button_value = subject_elt.name; }
        else if (subject_elt.id)   { result.clicked_button_value = subject_elt.id; }

        var window_content_elt = SW$1.get_window_content_of_elt(subject_elt);
        var trim_strings_elt = window_content_elt.querySelector("input[name|='trim_strings']");
        var trim_strings = trim_strings_elt.value;
        if (trim_strings == "false") { trim_strings = false;}
        else {trim_strings = true;}
        var clickables = window_content_elt.querySelectorAll(".clickable");
        for(let inp of clickables){
            if     (inp.name && (inp.name.length > 0)) { result[inp.name] = inp.innerHTML; }
            else if(inp.id   && (inp.id.length > 0))   { result[inp.id]   = inp.innerHTML; }
        }
        var inputs = window_content_elt.querySelectorAll("input"); //finds all the descendents of the outer div that are "input" tags
        for (var i = 0; i < inputs.length; i++){
            var inp = inputs[i];
            var in_name = inp.name;
            if (!in_name) { in_name = inp.id; }
            if (!in_name) { in_name = inp.value; }
            var in_type      = inp.type;    //text (one-liner), submit, button, radio, checkbox, etc.
            if (in_type == "radio"){
                if (inp.checked){
                    result[in_name] = inp.value;
                }
                else if (result[in_name] === undefined){ //first time we've seen a radio button from this group.
                    //make sure is val is null instead of not setting
                    //it at call because if no button was set on init,
                    //and user didn't click on one, we STILL
                    //want a field for it in the result (unlike most
                    //stupid web programming that would pretend it didn't exist.
                    //we want to see this field when debugging, etc.
                    result[in_name] = null;
                }
            }
            else if (in_type == "checkbox"){
                if (in_name){
                    let val = inp.checked;
                    result[in_name] = val;
                }
            }
            else if (in_type == "file") {
                let val = null;
                if(inp.files.length > 0){
                    let file0 = inp.files[0];
                    if(file0.path) { //only bound in Electron (in DDE)
                        val = file0.path;
                    }
                    else if(file0.name){ //bound in the browser. only has the "name" part of the path, not its directory
                      //due to security restriction. But when running in the browser. input of type file isn't
                      //much good as you'd really probably want to choose a file on Dexter, not your local
                      //file system, since you're running in the job engine.
                      //but maybe this is good for something.
                        val = file0.name;
                        /* while true, this is commonly printed out when user chooses File menu/upload
                           in which case, this message is just distracting.
                        out("Warning: choosing files in the browser<br/>" +
                            "only gets you the file name and extension, not its directory,<br/>" +
                            "due to browser security restrictions.<br/>" +
                            "This mechanism can only get local file names, not ones from Dexter.",
                            "#e50")*/
                    }
                    else {val = null;}
                }
                result[in_name] = val;
            }
            else if (in_type == "submit");
            else if (in_type == "button"); //button click still causes the callback to be called, but leaves window open
            else if (in_type == "hidden") { //trim_strings, window_callback_string, and for Human.show_instruction: the_job_name
                var val = inp.value;
                if      (val == "false") {val = false;}
                else if (val == "true")  {val = true;}
                else if (val == "null")  {val = null;}
                else if (Utils.is_string_a_number(val)) { val = parseFloat(val); } //for "123", returns an int
                result[in_name] = val; //in_name could be bound to "window_callback_string"
            }
            else if (in_type == "text"){
                if (in_name){
                    var val = inp.value;
                    if (trim_strings) { val = val.trim(); }
                    result[in_name] = val;
                }
            }
            else if ((in_type == "number") || (in_type == "range")){
                if (in_name){
                    var val = parseFloat(inp.value.trim()); //comes in as a string. Gee why would an input of type number return a number? It would be too logical
                    if (isNaN(val)) { val = null; }
                    result[in_name] = val;
                }
            }
            else { //all the other inputs.
                if (in_name){
                    var val = inp.value;
                    result[in_name] = val;
                }
            }
        }
        var textareas = window_content_elt.querySelectorAll("textarea"); //finds all the descentents of teh outer div that are "input" tags
        for (var i = 0; i < textareas.length; i++){
            var inp = textareas[i];
            var in_name = inp.name;
            if (!in_name) { in_name = inp.id; }
            //if (!in_name) { in_name = inp.value } //unlike input, textarea does not have a value attribute
            if (in_name){
                var val = inp.value;
                if (trim_strings) { val = val.trim(); }
                result[in_name] = val;
                //for the below, before the user drags the lower right of the textbox, inp.style.width
                //and inp.style.height have the value of "".
                //After, its a string, suffixed with "px".
                //But I can get the real width had height as integers by inp.offsetWidth
                //even before the first drag, so just do it.
                result[in_name + "_width"]  = inp.offsetWidth - 6; //inp.style.width //usesd by app builder to get size of input and text areas being made by the user
                result[in_name + "_height"] = inp.offsetHeight - 6; //inp.style.height
            }
        }
        var selects = window_content_elt.querySelectorAll("select"); //finds all the descentents of the outer div that are "select" tags
        for (var i = 0; i < selects.length; i++){
            var inp = selects[i];
            var in_name = (inp.name ? inp.name : inp.id);
            if (in_name){
                var val = inp.value;
                result[in_name] = val;
            }
        }
        var combo_boxes = window_content_elt.querySelectorAll(".combo_box");  //should be a div tag a la <div class="combo_box><option>one</option><option selected="selected">two</option></div>
        for (var i = 0; i < combo_boxes.length; i++){
            let outer_cb = combo_boxes[i];
            //let inner_cb = outer_cb.children[1] //not needed but this is a INPUT tag of type "text" whose value prop is the combo box prop
            let input_elt = outer_cb.children[0];
            let val = input_elt.value; //$(outer_cb).val() //inner_cb.value
            var in_name = input_elt.id; //(outer_cb.name ? outer_cb.name : outer_cb.id)
            result[in_name] = val;
        }
        let circles = window_content_elt.querySelectorAll("circle"); //needed by 2d_slider
        for(let i = 0; i < circles.length; i++){
            let cir = circles[i];
            if(cir.id) { //even if you give circle a "name" attr, it won't appear in the actual dom elt.
                         //so use "id", but beware, it may not be unique!
                //let the_matrix = cir.transform.baseVal.getItem(0).matrix
                let x = cir.getAttribute("cx"); //the_matrix.e //rect.x //no, clientLeft doesn't change when dragging the cir. // cir.clientLeft //rect.left
                let y = cir.getAttribute("cy"); //the_matrix.f //rect.y //cir.clientTop  //rect.top
                let val = {cx: x, //offsetX only works when dragging the cir, not when we are moving the Z slider and still want to get x & y. result.offsetX, //parseFloat(cir.getAttribute("cx")), //returns string. can't just do cir.cx due to bad svg design
                           cy: y,//result.offsetY, //parseFloat(cir.getAttribute("cy")), //but this string is just what the cir cx and cy were ORIGNIALLY set to at creating not he dragged posoition which is in the event offsetX & Y.
                           r: parseFloat(cir.getAttribute("r")),
                           fill: cir.getAttribute("fill") //keep as a string. This is the color of the circle.
                           };
                result[cir.id] = val;
            }
        }
        if (subject_elt.type == "submit"){
            result.is_submit = true;  //used by Human.show_window, human_show_window_handler
            SW$1.sw_close(subject_elt);
        }
        else {
            result.is_submit = false;
        }
        //widget_values: result,
        let callback_fn_string = result["window_callback_string"];
        if(callback_fn_string) { //it might be null, as is the new default a of Mar 12, 2021
            let cb;
            if(platform === "browser") { cb = callback_fn_string; }
            else {
                cb = value_of_path(callback_fn_string);
                if (!cb) { try { cb = globalThis.eval("(" + callback_fn_string + ")"); } //probably have an anonymous fn. Evaling it without the parent wrappers errors.
                           catch(err){ dde_error("During show_window handler (callback), could not find: " + callback_fn_string); } //just ignore
                }
            }
            //cb is probably "function () ..." ie a string of a fn src code
            if (!cb) { //cb could have been a named fn such that when evaled didn't return the fn due to bad js design
                if(callback_fn_string.startsWith("function ")){
                    let fn_name = Utils.function_name(callback_fn_string);
                    if ((typeof(fn_name) == "string") && (fn_name.length > 0)) { cb = globalThis.fn_name; }
                    else { //we've got an anonyous function source code def
                        cb = eval("(" + callback_fn_string + ")"); //need extra parens here. Will error without them due to poor JS design
                        if(typeof(cb) != "function"){
                            dde_error("show_window got a callback that doesn't look like a function.");
                        }
                    }
                }
                else {
                    dde_error("In submit_window with bad format for the callback function of: " + callback_fn_string);
                }
            }
            try {   if (platform == "dde") { cb.call(null, result); }
                    else { //in  browser. send to server this button click
                        let mess_obj = {kind: "show_window_call_callback", callback_fn_name: cb, callback_arg: result};
                        let mess = JSON.stringify(mess_obj);
                        web_socket.send(mess);
                    }
            }
            catch(err){
                let err_string;
                if (typeof(err) == "string") { err_string = err; } //weirdly this DOES happen sometimes
                else if (err.message) { err_string = err.message; }
                else { err_string = err.toString(); }
                let fn_name = cb.name;
                if(fn_name == "") { fn_name = cb.toString(); } //ie some anonymous fn
                let arg_string = JSON.stringify(result);
                arg_string = Utils.replace_substrings(arg_string, ",", "<br/>");
                if((result.clicked_button_value == "close_button") &&
                    !cb.toString().includes("close_button")) {
                    warning("The show_window callback function of: <code>" + fn_name +
                            '</code><br/>does not properly handle a clicked_button_value of <code>"close_button"</code>.<br/>' +
                            'We recommand that you extend ' + fn_name + ' to something like:<br/>' +
                            '<code>if(vals.clicked_button_value == "close_button") {}' +
                            '<br/>else { your existing code here } </code>');
                                    }
                                    else {
                                        dde_error("While calling the show_window handler function of:<br/><code>" + fn_name + "</code>,<br/>" +
                                                "passed:<br/>" + arg_string + "<br/>" + err_string);
                                    }
            }
        } //end of handling callback
        event.preventDefault();
        event.stopPropagation();
        if (subject_elt.oninput) { //work around bug in Chrome 51 June 8 2016 wherein when you have
            //input of type text, and using my oninput technique, the
            // upon a keystroke entering a char, the focus changes from the
            //input elt (and out of the show_window window itself back to the codemirror editor)
            //just setting the focus in this method doesn't do the trick, I have to
            //do the setTimeout below to get the focus back to the orig input elt.
            setTimeout(function(){
                if ((subject_elt) && subject_elt.ownerDocument.body.contains(subject_elt)){ //its possible that the win that the_this is in will be closed by the time this code is run.
                    //happens in the case of Human.enter_instruction with immediate_do
                    subject_elt.focus();
                }
            }, 10);
        }
    }

    //called by dex.js and app_builder.js
    static set_combo_box_options(combo_box_div_elt, array_of_strings){
        let select_elt = combo_box_div_elt.children[1];
        select_elt.innerHTML = "";
        for(let item of array_of_strings){
            let option_elt = document.createElement("OPTION");
            option_elt.innerHTML = item;
            select_elt.appendChild(option_elt);
        }
    }


    //rde.hide_window = function() { $('#jqxwindow').jqxWindow('hide') }
    //called from the ui, window_title_index_or_elt can be either a window_index, window title, or elt
    //in the window
    static close_window(window_title_index_or_elt=SW$1.window_index){ //elt can be a window_index int
        if(window_title_index_or_elt === null){
            window_title_index_or_elt = SW$1.window_index;
        }
        try {
            if ((typeof(window_title_index_or_elt) == "string") &&
                Utils.is_string_a_integer(window_title_index_or_elt)) {
                window_title_index_or_elt = parseInt(window_title_index_or_elt);
            }
            if (typeof(window_title_index_or_elt) == "string") {
                SW$1.close_windows_of_title(window_title_index_or_elt); //don't use "this", use SW because we may call this without its subject class
            }
            else if (typeof(window_title_index_or_elt) == "number"){ //ie a window_index
                let win = SW$1.get_window_of_index(window_title_index_or_elt);
                SW$1.sw_close(win); //don't use "this", use SW because we may call this without its subject class
            }
            else if (window_title_index_or_elt instanceof HTMLElement) {
                SW$1.sw_close(window_title_index_or_elt); //don't use "this", use SW because we may call this without its subject class
            }
            else {
                dde_error("close_window called with invalid window_title_index_or_elt: " + window_title_index_or_elt);
            }
        }
        catch(err) { out$1("DDE unable to close the window specified in: " + window_title_index_or_elt +
            ". Perhaps it is already closed.");
        }
    }


   static window_index = null // The window_index of the last show_window made, or null if none made
                       // This value is incremented in show_window fn, then that incremeted value is used in the window being made
                       // The first show_window made has window index of 0

    //path elts separated by space, and are CSS selector expressions.
    //The last one CAN BE a property name surrounded by square brackets
    //value is a string of the new value of the property in the last path elt.
    //a null value means remove the dom_elt or attribute specified in path_string
    //ex: SW.selector_set_in_ui("#show_window_0_id foo [value]" , "blue")
    static selector_set_in_ui(path_string, value=null){
        if(globalThis.platform == "node") { //console.log(val)
            let obj = {kind: "selector_set_in_ui_call", path_string: path_string, value: value};
            globalThis.write_to_stdout("<for_server>" + JSON.stringify(obj) + "</for_server>\n");
        }
        else {
            if(value === -0) { value = 0; } //in some weird raoujnding situations, we get a negative zero.
                                           //and maybe this cause problems in the below setAttrubute call
                                           //so just to be safe. get rid of it.
                                           //Note -0 === 0, but still, here we ensure either 0 or -0 is really 0
            let path_string_elts = path_string.split(" ");
            let last_elt_str = path_string_elts[path_string_elts.length - 1];
            let path_string_references_style_attribute = false;
            let path_string_references_dom_elt = false;
            //exactly one of the above 3 will be set to true in the next if...else
            if((path_string_elts.length > 1) &&
               (path_string_elts[path_string_elts.length - 2] == "[style]")) {
                path_string_references_style_attribute = true;
            }
            else if(last_elt_str.includes("=")) { path_string_references_dom_elt = true; } // ie "[name=foo]"
            else if((last_elt_str.length < 3) ||
                    (last_elt_str[0] !== "[")){
                path_string_references_dom_elt = true;
            }
            else ;
            //now path_string_references_dom_elt is true or false.
            //if its false, exactly one of path_string_references_html_attribute or
            // path_string_references_style_attribute should be true
            if(path_string_references_dom_elt){
                let dom_elt = document.querySelector(path_string);
                if((dom_elt instanceof HTMLElement) || (dom_elt instanceof SVGElement)) {
                    if(value === null){
                        dom_elt.remove();
                    }
                    else {
                        dom_elt.outerHTML = value; //replace the dom_elt
                    }
                }
                else {
                    dde_error("In SW.selector_set_in_ui, path_string: " + path_string +
                              " should be a reference to an existing dom_elt, but isn't.");
                }
            }
            else if (path_string_references_style_attribute) { //2nd to last path_string elt is "[style]"
                let path_elts_before_style = path_string_elts.slice(0, path_string_elts.length - 2);
                let dom_elt_string = path_elts_before_style.join(" ");
                let dom_elt = document.querySelector(dom_elt_string);
                let last_elt_attr_name = last_elt_str.substring(1, last_elt_str.length - 1); //strip off [ and ]
                if(value == null) {
                    dom_elt.style.removeProperty(last_elt_attr_name);
                }
                else { dom_elt.style[last_elt_attr_name] = value; }
            }
            else { //we're referencing an html or svg attribute, presume last_elt_str is surrounded by [] with a single attr name in it.
                let last_elt_attr_name = last_elt_str.substring(1, last_elt_str.length - 1); //strip surrounding square brackets
                let path_elts_for_dom_elt = path_string_elts.slice(0, path_string_elts.length - 1);
                let dom_elt_string = path_elts_for_dom_elt.join(" ");
                let dom_elt = document.querySelector(dom_elt_string);
                if((dom_elt instanceof HTMLElement) || (dom_elt instanceof SVGElement)){
                    if(["value", "innerHTML", "innerText", "outerHTML", "outerText"].includes(last_elt_attr_name)){
                        if(value === null) { dom_elt[last_elt_attr_name] = ""; }
                        else { dom_elt[last_elt_attr_name] = value; }//some_input_of_type_range.setAttribute("value", "" + value)
                                                  // sets the internal value of the elt, but does not update the display to it.
                                                  //looks like a bug in chrome to me.
                    }

                    //https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML
                    else if (["beforebegin", "afterbegin", "beforeend", "afterend"].includes(last_elt_attr_name)){
                       dom_elt.insertAdjacentHTML(last_elt_attr_name, value);
                    }
                    else {
                        if((dom_elt.tagName === "INPUT") &&
                            (dom_elt.type === "checkbox") &&
                            (last_elt_attr_name === "checked")){
                            if((value === false) || (value === "false")) { value = null; } //remove the prop
                            //everything else is considered true including "", "true", true, "on" etc.
                        }
                        if(value === null) { dom_elt.removeAttribute(last_elt_attr_name);}
                        else { dom_elt.setAttribute(last_elt_attr_name, value); } //setAttribute automatically converts value to a string, if it isn't one.
                    }
                }
                else {
                    dde_error("SW.selector_set_in_ui passed: " + path_string +
                              " that didn't resolve to an HTML or SVG element.");
                }
            }
        }
    }

    static append_to_output(text){
        text += "\n";
        if(globalThis["output_div_id"]) { //DDE and browser
            let out_height = output_div_id.scrollHeight;
            output_div_id.insertAdjacentHTML('beforeend', text); //output_div_id is defined in DDE and browser
            output_div_id.scrollTop = out_height;
            SW$1.install_onclick_via_data_fns();
        }
        else { //in Job Engine
            globalThis.write_to_stdout(text);
        }
    }

    //inserts the new_html as the new last child of the element indicated by path_string
    static append_in_ui(path_string, new_html){
        if(globalThis.platform == "node") { //console.log(val)
            let obj = {kind: "append_in_ui_call", path_string: path_string, new_html: new_html};
            globalThis.write_to_stdout("<for_server>" + JSON.stringify(obj) + "</for_server>\n");
        }
        else {
            let elt = value_of_path(path_string);
            let ancestor_svg = $(elt).closest("svg");
            if (ancestor_svg.length > 0) {
                ancestor_svg = ancestor_svg[0];
                let new_tag     = html_to_tag_name(new_html);
                let attr_vals   = html_attributes_and_values(new_html);
                let new_svg_elt = document.createElementNS("http://www.w3.org/2000/svg", new_tag);
                for (let pair of attr_vals){
                    new_svg_elt.setAttribute(pair[0], pair[1]);
                }
                let content = html_content(new_html);
                new_svg_elt.innerHTML = content;
                ancestor_svg.appendChild(new_svg_elt);
            }
            else {
                elt.insertAdjacentHTML("beforeend", new_html); //$(elt).append(new_html)
            }
        }
    }
    static clear_output(){
        output_div_id.innerText = "";
        if(globalThis["init_inspect"]) {
            Inspect.init_inspect();
        }
        return "dont_print"
    }
} // end class SW
globalThis.close_window = SW$1.close_window; //for backwards compatibility, but don't document.
globalThis.clear_output = SW$1.clear_output; //this isn't REALLY part of show_window
   //but is a window system like fn. In DDE3 it was just clear_output at top level
   //so I decided to preserve that, but also stick it in the SW class
globalThis.SW = SW$1; //used a bunch in the ref man for SW.append_in_ui and other misc places in dde

/**
 * Created by Fry on 4/30/16.
 */
//rootObject.name = "rootObject" //its undefined before doing this, but broken jQuery prevents me from doing this
/* js won't let me do this as even though "name" is undefined, its a read-only property. too bad.
Object.defineProperty(Object.prototype, 'name', {
    enumerable : false,
    value : "rootObject"
})
*/

function ob_sys_is_class(obj){
    return ((typeof(obj) == "function") && obj.toString().startsWith("class "))
}

var Root$1 = {name: "Root"}; //"root" is an old node,js global that's been depricated but still defined. I decidd to steer clear of it by using capitalied Root.
globalThis.Root = Root$1;
//globalThis.Root = Root //if I don't to this, value_of_path fails since globalThis["rootObjject"] fails
//rootObject.name = "rootObject" //errors if I do this. the error happens in Jquery on something
                               //that looks very unlrelated, in ready, when seting the operating_system variable.
                               //mysterious. try again once electron is up.
                               //BUT search below for rootObject to see the solution.

    /* User can pass as many property_objects as they like.
     None will be modified by this fn.
     Properties from all will be combined in to one object.
     If there are duplicates, the last one wins.
     You might want a different winner so you can reorder the
     property_objects, but if there is a conflict in ordering,
     you can add an extra property_object to the end to
     ensure a win for a particular property. For instance
     var myboat = {prototype:boat, color:white}
     var my_fav_colors = {prototype:color_pallette, color:blue, trim:green}
     var newObject(myboat, mycolors)
     Here we want to make an instance of myboat,
     BUT we want to over-ride the default color of "white" for a myboat,
     and use my_fav_colors to get the color from.
     If we just passed those 2 classes to newObject, we would indeed get
     a color of blue, however we'd make a color_pallette, not a boat.
     To fix that, we add an extra properties object on the end
     whose job is simply to over-ride the prototype in mycolors.
     newObject(myboat, mycolors, {prototype: boat})
     If no properties object has a prototype property, we use rootObject
     as the default.
     */

function newObject$1(...property_objects){
    property_objects.unshift({}); //put new obj on front as assign mungs the first arg and if first arg is used elsewhere, this would be bad.
    let properties = Object.assign(...property_objects);
    let prototype;
    if (properties.hasOwnProperty("prototype")){
        prototype = properties.prototype;
        delete properties.prototype;
    }
    if (!prototype){ prototype = Root$1; }
    else if (typeof(prototype) == "string"){
        var new_prototype = value_of_path(prototype);
        if ((new_prototype == null) || (typeof(new_prototype) != "object")){
            throw new Error("In a call to newObject, failed to resolve: " + prototype +
                " into the prototype object.")
        }
        else {prototype = new_prototype;}
    }
    if (!prototype) { //no prototype arg passed and no prototype property in properties
        prototype = Root$1;
    }
    if (properties.hasOwnProperty("name")){
        const name_val = properties.name;
        if (name_val) {
            if (typeof(name_val) != "string") {
                dde_error("newObject called with name: " + name_val + " but that is not a string. Names must be strings.");
            }
            //else OK as is
        }
        else { //name is null or undefined so just get rid of it. IF we don't, it will cause a bad bug
            delete properties.name;
        }
    }
    var result;
    if(ob_sys_is_class(prototype)){
        return new prototype(properties) //only works when the class accepts 1 literal object in its constructor
        //if (prototype == Job) {
        //return new Job(properties) //weak as hell
        //result = Reflect.construct(prototype, properties) //errors too
        // result = new (Function.prototype.bind.call(prototype, properties)) //errors
        //}
    }
    else if (ob_sys_is_class(prototype.constructor)){ //ie prototype is a job instance
        //we are going to call effectively new Job(props)
        //so we've got to get the class of prototype in its "constructor" prop,
        //then we have to fill in the defaults of the args to that class's
        //constructor params with values from the actual prototype.
        //
        var class_param_names = function_param_names(prototype.constructor);
        properties = Object.assign({}, properties); //make a copy
        for(let pname of class_param_names){
            if (!(properties.hasOwnProperty(pname))){ //props doesn't have a necessary arg so inherit it from the prototype
                var inherited_val;
                if ((pname == "do_list") && (prototype.constructor == Job)){ //special hack for Job's do_list because
                    //a running job modifies its do_list
                    //so we want to use the orig.
                    inherited_val = prototype.orig_args.do_list;
                }
                else {inherited_val = prototype[pname]; }
                properties[pname] = inherited_val;
            }
        }
        return new prototype.constructor(properties) //only works when the class accepts 1 literal object in its constructor
    }
    else { //not related to classes at all, ie a normal dobject object.
        result = Object.assign(Object.create(prototype), properties);
        if (properties.hasOwnProperty("name")){prototype[properties.name] = result;}
        else if(prototype.name) {//we don't want to inherit so block inheritance
            result.name = undefined;
        }
        result.prototype = prototype; //commenting this out doesn't get rid of jquery bug, but it has a different one.
        result.constructor(); //note this is called even on the obj that defines it! That's true prototype
        //it is never passed args but "this" inside it is the new obj.
        return result
    }
}

globalThis.newObject = newObject$1;

Object.defineProperty(Object, 'isNewObject',{
    enumerable : false,
    value : function(obj, require_name_in_prototype = true, permit_rootObject = true){
        if(obj == Root$1) {
            if (permit_rootObject) { return true}
            else { return false }
        }
        else if ((obj == undefined) || (obj == null) || (typeof(obj) != "object")) { return false }
        else {
            let proto;
            try { proto = Object.getPrototypeOf(obj);}
            catch (err) { return false }
            if (proto){
               if (obj.hasOwnProperty("prototype") && (obj.prototype == proto)){
                   if (require_name_in_prototype){
                       if ((proto == Root$1) || proto.name) {
                            if ((obj.name == undefined) || (proto[obj.name] == obj)) { return true }
                            else { return false} //obj has a name but it isn't in the proto bound to obj
                       }
                       else { return false }
                   }
                   else { return true }
               }
               else { return false }
            }
            else { return false }
        }
    }
});

//jquery breaks if you add properties to Object prototype in the usual way. ie
// Object.prototype.subObjectsOf129 = function(){ ...}
//but http://stackoverflow.com/questions/21729895/jquery-conflict-with-native-prototype
//says the workaround for this jquery bug is to add non-enumerable props.
/* Nope, the below also screws up Jquery. Try in next version of Jquery perhaps.
Object.defineProperty(Object.prototype, 'name',{
    enumerable : false,
    configurable: true,
    writable: true,
    value: "rootObject"})
*/

Object.defineProperty(Object.prototype, 'subObjects',{
    enumerable : false,
    value : function(){
        var result = [];
        for(var sub_ob_name in this){
            if(this.hasOwnProperty(sub_ob_name)){
                var sub_ob = this[sub_ob_name];
                if(Object.isNewObject(sub_ob) && (sub_ob.name == sub_ob_name)){
                   result.push(sub_ob);
                }
            }
        }
        return result
    }
});

Object.defineProperty(Object.prototype, 'isSubObject',{
    value : function(prototype_maybe){
        let pt = (prototype_maybe ? prototype_maybe : Object.getPrototypeOf(this));
        if (pt && //if this is rootObject, pt will be null and this will fail as it should.
                this.hasOwnProperty("name") &&
                this.name &&
                pt.hasOwnProperty(this.name) &&
                (pt[this.name] == this)) { return true } //note (null && 33)evals to null, not false
        else { return false }
    },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'isLeafObject',{
    value : function(){
        let sub_objs = this.subObjects();
        return sub_objs.length == 0
    }
});

Object.defineProperty(Object.prototype, 'leafObjectNamed',{
    value : function(leaf_name){
        if(this.isLeafObject()){
            if(this.name == leaf_name) { return this }
            else { return null }
        }
        else {
            for(let subobj of this.subObjects()){
                let result = subobj.leafObjectNamed(leaf_name);
                if(result) { return result }
            }
            return null
        }
    }
});


//returns true if this == ancestor. This makes sense for prototype object system.
Object.defineProperty(Object.prototype, 'isA',{
    value : function(ancestor){
        if (this == ancestor) { return true }
        else if (Object.isNewObject(ancestor)) { return ancestor.isPrototypeOf(this) }
        else { return false }
    },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'siblings',{
    value : function(include_this=false){
                if(this === Root$1) {
                    if (include_this){ return [Root$1] }
                    else { return [] }
                }
                else {
                    var pt;
                    try{ pt = Object.getPrototypeOf(this);}
                    catch(e) { return [] }
                    if(pt) {
                        var result = pt.subObjects();
                        if (!include_this){
                            for(var i = result.length-1; i--;){ //traverse in reverse order is necessary!
                                if (result[i] === this) result.splice(i, 1);
                            }
                        }
                        return result
                    }
                    else { return [] }
                }
    },
    enumerable : false
});

// retruns true if all args are siblings
Object.defineProperty(Object, 'areSiblings',{
    value : function(...maybe_siblings){
        if(maybe_siblings.length < 2) { return true }
        else {
            var pt;
            try{ pt = Object.getPrototypeOf(maybe_siblings[0]);}
            catch(e) { return [] }
            if(pt) {
                for(var maybe_sib of maybe_siblings){
                    if (Object.getPrototypeOf(maybe_sib) !== pt) { return false }
                }
                return true
            }
            else { return false } //hmm, I'm being conservative here.
        }
    },
    enumerable : false
});


//climbs up the prototype chain from obj,
//returning the first obj that has prop_name, or null
Object.defineProperty(Object.prototype, 'inheritsPropertyFrom',{
    value : function(property_name){
                if(this == null) { return null }
                else if (this.hasOwnProperty(property_name)) {return this}
                else if (this === Root$1) { return null }
                else { return Object.getPrototypeOf(this).inheritsPropertyFrom(property_name) }
    },
    enumerable : false
});

/*fails because "this" needs to be the original obj, but
as we go up the stack we need to remember the previous obj
we came from which isn't 'this' after we've alread gone up one.*/
Object.defineProperty(Object.prototype, 'callPrototypeConstructor',{
    value : function(){
        let next_cons = newObect_find_next_constructor(this);
        if (next_cons) {
            //return Object.getPrototypeOf(this).constructor.apply(this)
            next_cons.apply(this);
        }
       // else {} //do nothing if there is no next_cons
    }
});

//callPrototypeConstructor is called within a constructor.
//we don't want to return THAT constuctor, but rather the
//next one up the change.
function newObect_find_next_constructor(obj, cur_constructor){
    let obj_of_cur_cons = obj.inheritsPropertyFrom("constructor");
    let next_ans_above_cur_cons = Object.getPrototypeOf(obj_of_cur_cons);
    if(next_ans_above_cur_cons) { return next_ans_above_cur_cons.constructor } //might be nothing
    else { return null }
    //if(!cur_constructor) { cur_constructor = obj.constructor }
    //let obj_cons = obj.constructor
    //if (!obj_constructor) { return null } //there is no next constructor
    //else if (obj_cons != cur_constructor) { return obj_cons }
    //else { return newObject_find_next_constructor(Object.getPrototypeOf(obj), cur_constructor) }
}

Object.defineProperty(Object.prototype, 'normal_keys',{
    enumerable : false,
    value : function(include_inherited=false,
                     include_functions=false,
                     include_subobject_names=false,
                     include_name_and_prototype=false){
        return this.normal_keys_aux(include_inherited,  //maybe should be true
                                    include_functions,
                                    include_subobject_names,
                                    include_name_and_prototype,
                                    [])
    }

});

Object.defineProperty(Object.prototype, 'normal_keys_aux',{
    enumerable : false,
    value : function(include_inherited,  //maybe should be true
                     include_functions,
                     include_subobject_names,
                     include_name_and_prototype,
                     result){
        if (this == Root$1){ return result }
        else {
            for(let key of Object.getOwnPropertyNames(this)){
                if (!result.includes(key)) {
                   let val = this[key];
                   if (((typeof(val) != "function") || include_functions) &&
                       (!val.isSubObject() || include_subobject_names) &&
                       (((key != "name") && (key != "prototype")) || include_name_and_prototype)){
                        result.push(key);
                    }
                }
            }
            if (include_inherited) {
                return Object.getPrototypeOf(this).normal_keys_aux(include_inherited,  //maybe should be true
                                            include_functions,
                                            include_subobject_names,
                                            include_name_and_prototype,
                                            result)
            }
            else { return result }
        }
    }
});


//result array has Root first
Object.defineProperty(Object.prototype, 'ancestors',{ //dde4 but was 'ancestors' in dde4
    value : function(include_self=false){
                if(this == Root$1){
                    if(include_self) { return [this] }
                    else { return [] }
                }
                else {
                    var obj = this;
                    if (!include_self) { obj = Object.getPrototypeOf(obj); }
                    var result = obj.ancestors_of_aux([]);
                    return result
                }
    },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'ancestors_of_aux',{
    value : function(result){
        if (this == null){ return result }
        else {
            result.unshift(this); //push onto front of array, order is top of ancestors first
            if (this == Root$1) { return result } //must do this becasue ancestors_of_axu not on this's prototype
            return Object.getPrototypeOf(this).ancestors_of_aux(result)
        }
    },
    enumerable : false
});

Object.defineProperty(Object, 'allCommonAncestors',{
    value : function(...objects){
        let result = [];
        for(let obj of objects){
            var ans = obj.ancestors();
            if(result.length == 0) { result = ans; }
            else {
                for(let i = 0; i < result.length; i++){
                    if(result[i] !== ans[i]) { result = result.slice(0, i);}
                }
            }
        }
        return result
    },
    enumerable : false
    });

Object.defineProperty(Object, 'lowestCommonAncestor',{
    value : function(...objects){
        let ans = Object.allCommonAncestors(...objects);
        if(ans.length == 0) { return null }
        else { return ans[ans.length - 1] }
    },
    enumerable : false
});


//returns a string of a path to "this", or null
//evaling the string should return "this" object.
Object.defineProperty(Object.prototype, 'objectPath',{
    value : function(){ return this.object_path_aux("") },
    enumerable : false
});

Object.defineProperty(Object.prototype, 'object_path_aux',{
    value : function(result){
        if (this == null) {return result} //usually never hits
        else if (this == Root$1) { return "Root" } //hits just once in the recursion
        else if (this.hasOwnProperty("name") && this.name){ //note obj could have name == undefined when we block inheritance.
            //var separator = ((result == "")? "" : ".")
            //result = this.name + separator + result //push onto front of path, order is top of ancestors first
            var proto = Object.getPrototypeOf(this);
            //if (proto == Root) {
             //  return "Root." + this.name
            //}
            //else {
                var result = proto.object_path_aux(result);
                if (result){ return result + "." +  this.name}
                else       { return null }
            //}
        }
        else { return null }
    } ,
    enumerable : false
});

//new_obj.toString errors without this fn
Root$1.toString = function(){
    const path = this.objectPath();
    if (path) { return path }
    else {
        const anses = this.ancestors(true); //include self
        let result = "";
        for(let ans of anses){
            if(ans === Root$1) { result = "Root"; }
            else if (Object.hasOwnProperty("name") && ans.name){
                result +=  "." + ans.name;
            }
            else { //no more named ancestors
                result = "An instance of: " + result;
                break;
            }
        }
        return result
    }
};

// the printer!
// print_this=true, kid_levels="all" or non-neg-int, last_level_format="path"/"full"
/*hier arch printer, fails with refs up  tree
Object.defineProperty(Object.prototype, 'sourceCode',{
    value : function(print_object_values_as_strings=true, indent="  "){
        if (this == Root) { return "Root" }
        else {
            let proto = Object.getPrototypeOf(this)
            if (!proto) { throw new Error("Object.sourceCode passed this with no prototype: " + stringify_value(this))}
            else {
                let prop_names     = Object.getOwnPropertyNames(this)
                let proto_index    = prop_names.indexOf("prototype")
                proto_prop = prop_names.splice(proto_index, 1)
                prop_names = proto_prop.concat(prop_names) //move prototype to begin of list.
                let has_props      = prop_names.length != 0 //since newobjects will always have a prototype, I think this will always be true
                let last_prop_name = (has_props? prop_names[prop_names.length - 1] : undefined)
                let result = "newObject({\n"
                for(let prop_name of prop_names){
                   // let prefix
                   // if (prop_name == "prototype") { prefix = "{"}
                   // else                          { prefix = " "}
                    let val = this[prop_name]
                    let val_string
                    if (Object.isNewObject(val)){
                        if (print_object_values_as_strings || (prop_name == "prototype")) { val_string = val.objectPath() }
                        else {
                            val_string = val.sourceCode(false, indent + "  ")
                        }
                    }
                    else { val_string = Utils.stringify_value_sans_html(val) }
                    result += indent + prop_name + ": " + val_string + ((prop_name == last_prop_name)?
                                                                           "\n" +
                                                                           indent +
                                                                           "})" : ",\n")
                }
                return result
            }
        }
    } ,
    enumerable : false
})
*/
//flat list of obj def printer.
Object.defineProperty(Object.prototype, 'sourceCode',{
    value : function({include_this=true, include_subobjects=true, indent="", at_top_level=true}={}){
        if (this == Root$1) { return "Root" }
        else {
            let proto = Object.getPrototypeOf(this);
            if (!proto) { throw new Error("Object.sourceCode passed this with no prototype: " + stringify_value(this))}
            else {
                let prop_names     = Object.getOwnPropertyNames(this);
                let sub_objs = [];
                let non_subobject_prop_names = ["prototype"];
                for(let prop_name of prop_names){
                    let val = this[prop_name];
                    if (prop_name === "prototype") ; //already is first in non_subobject_prop_names
                    else if(val && val.isSubObject(this)) { sub_objs.push(val); } //needed to check that val is not undefined in order for val.isSubject to be found
                    else { non_subobject_prop_names.push(prop_name); }
                }
                let result = "";
                if(include_this){
                    result = indent + "newObject({\n";
                    indent += "  ";
                    for(let prop_name of non_subobject_prop_names){
                        let val = this[prop_name];
                        let val_string;
                        if (Object.isNewObject(val)){ //whether its the prototype or some other random, non-subobject, just print its path
                            if (val.hasOwnProperty("name")) { //hits for prototype and possibly others, but no subobjects will even be tried here
                                val_string = val.objectPath();
                            }
                            else { val_string = val.sourceCode({include_this: true, include_subobjects: true, indent: indent + "  ", at_top_level: false}); }
                        }
                        else { val_string = Utils.stringify_value_sans_html(val); }
                        result += indent + prop_name + ": " + val_string + ((prop_name == last(non_subobject_prop_names))?
                            "\n" +
                            indent.substring(2) +
                            "})\n" : ",\n");
                    }
                }
                //all non-subojects printed, so the only thing left in this to print are subojects, if any
                if (include_subobjects){
                    let on_first_subobject = true;
                    for (let sub_ob of sub_objs){
                        let comma_prefix = ((include_this || !on_first_subobject || !at_top_level) ? ", " : "");
                        result += comma_prefix + sub_ob.sourceCode({include_this: true, include_subobjects: true, indent: indent, at_top_level: false});
                        on_first_subobject = false;
                    }
                }
                if (at_top_level) {
                    if (include_this){
                        if(include_subobjects && (sub_objs.length > 0)) { result = "[" + result + "\n][0]"; } //only printing this, just leave the object src as is
                    }
                    else {
                        if(include_subobjects) { result = "[" + result + "]"; }  //result is empty string so just leave it.
                    }
                }
                return result
            }
        }
    } ,
    enumerable : false
});

//Coordinate System 

var Coor$1 = newObject$1({prototype: Root$1, name: "Coor"}); //, pose: Vector.make_pose()})
globalThis.Coor = Coor$1;

Coor$1.init = function(){
    Coor$1.pose = Vector.make_pose();
    var Table = Coor$1.create_child(Vector.make_pose(), "Table");
    var L0 = Table.create_child(Vector.make_pose(), "L0");
    var L1 = L0.create_child(Vector.make_pose(), "L1");
    var L2 = L1.create_child(Vector.make_pose(), "L2");
    var L3 = L2.create_child(Vector.make_pose(), "L3");
    var L4 = L3.create_child(Vector.make_pose(), "L4");
    L4.create_child(Vector.make_pose(), "L5");
};

Coor$1.create_child = function(pose, name){
	if(pose === undefined){
    	pose = Vector.make_pose();
    }
    if (!Vector.is_pose(pose)){
    		dde_error("pose is not constructed properly");
    	}
	var old_child = this[name];
	if(Object.isNewObject(old_child)){
    	old_child.set_pose(pose);
        return old_child
    }else if(name){
		return newObject$1({prototype: this, pose: pose, name: name})
    }else {
		return newObject$1({prototype: this, pose: pose})
    }
	
};


Coor$1.get_pose = function(reference_coordinate_system){
	let obj_elt, base_idx, ref_idx;
    let base = this;
    let ref = reference_coordinate_system;
	if (ref === undefined || this === ref){
    	return base.pose
    }else {
        let base_path = base.ancestors();
        base_path.push(base);
        let ref_path = ref.ancestors();
        ref_path.push(ref);
        let common = Object.lowestCommonAncestor(base, ref);
        
        for(let i = 1; i < base_path.length; i++){
        	if (common === base_path[i]){
            	base_idx = i;
                break
            }
        }
        let common_to_base = Vector.make_pose();
        for(let i = base_idx; i < base_path.length; i++){
        	obj_elt = base_path[i];
        	common_to_base = Vector.matrix_multiply(common_to_base, obj_elt.pose);
        }
        //common_to_base = Vector.matrix_multiply(common_to_base, base.pose)
        
        for(let i = 1; i < ref_path.length; i++){
        	if (common === ref_path[i]){
            	ref_idx = i;
                break
            }
        }
        let common_to_ref = Vector.make_pose();
        for(let i = ref_idx; i < ref_path.length; i++){
        	obj_elt = ref_path[i];
        	common_to_ref = Vector.matrix_multiply(common_to_ref, obj_elt.pose);
        }
        //common_to_ref = Vector.matrix_multiply(common_to_ref, ref.pose)
        
        return Vector.matrix_divide(common_to_base, common_to_ref)
    }
};

Coor$1.get_position = function(reference_coordinate_system){
	let result;
    if(reference_coordinate_system === undefined){
    	result = Vector.pull(this.pose, [0, 2], 3);
    }else {
    	let pose = this.get_pose(reference_coordinate_system);
        result = Vector.pull(pose, [0, 2], 3);
    }
    return Vector.transpose(result)
};

Coor$1.get_orientation = function(reference_coordinate_system){
    let result;
    if(reference_coordinate_system === undefined){
    	result = Vector.pull(this.pose, [0, 2], [0, 2]);
    }else {
    	let pose = this.get_pose(reference_coordinate_system);
        result = Vector.pull(pose, [0, 2], [0, 2]);
    }
    return result
};

Coor$1.get_xy_plane_direction = function(reference_coordinate_system){
	let pose = this.get_pose(reference_coordinate_system);
	return Vector.multiply(-1, Vector.pull(pose, [0, 2], 2))
};

Coor$1.get_xz_plane_direction = function(reference_coordinate_system){
	let pose = this.get_pose(reference_coordinate_system);
	return Vector.multiply(-1, Vector.pull(pose, [0, 2], 1))
};

Coor$1.get_yz_plane_direction = function(reference_coordinate_system){
	let pose = this.get_pose(reference_coordinate_system);
	return Vector.multiply(-1, Vector.pull(pose, [0, 2], 0))
};

Coor$1.set_pose = function(pose, reference_coordinate_system){
	let result;
    let ref = reference_coordinate_system;
    if(reference_coordinate_system === undefined){
    	this.pose = pose;
        result = pose;
    }else {
    	let base_ancestors = this.ancestors();
        let parent = base_ancestors[base_ancestors.length-1];
        result = Vector.matrix_multiply(pose, ref.get_pose(parent));
    	this.pose = result;
    }
    return result
};


Coor$1.set_position = function(position, reference_coordinate_system){
	let result, current_pose;
    let ref = reference_coordinate_system;
    if(reference_coordinate_system === undefined){
    	current_pose = this.pose; 
        current_pose[0][3] = position[0];
        current_pose[1][3] = position[1];
        current_pose[2][3] = position[2];
    	this.pose = current_pose;
        result = current_pose;
    }else {
    	let base_ancestors = this.ancestors();
        let parent = base_ancestors[base_ancestors.length-1];
        let temp_position = Vector.transpose(Vector.matrix_multiply(ref.get_pose(parent), Vector.properly_define_point(position)));
        temp_position.pop();
        this.pose = Vector.make_pose(temp_position, this.get_orientation());
    	result = this.pose;
    }
    return result
};


Coor$1.set_orientation = function(orientation, reference_coordinate_system){
	let result;
    let ref = reference_coordinate_system;
    if(reference_coordinate_system === undefined){
    	this.pose = Vector.make_pose(this.get_position(), orientation);
        result = this.pose;
    }else {
    	let base_ancestors = this.ancestors();
        let parent = base_ancestors[base_ancestors.length-1];
        let temp_orientation = Vector.matrix_multiply(ref.get_orientation(parent), orientation);
        this.pose = Vector.make_pose(this.get_position(), temp_orientation);
    	result = this.pose;
    }
    return result
};
Coor$1.move_points_to_coor = function(points, destination_coordinate_system, reference_coordinate_system){
	let dest = destination_coordinate_system;
    let ref = reference_coordinate_system;
    
    if(ref === undefined){
    	ref = Coor$1.Table;
    }else if(dest === undefined){
    	dest = Coor$1.Table;
    }
    let trans = dest.get_pose(ref);
    let result = points.slice();
    let dim = Vector.matrix_dimensions(points);
    if(dim[0] == 1){
    	result = Vector.transpose(Vector.matrix_multiply(trans, Vector.properly_define_point(points)));
        result = result.slice(0, 3);
    }else if(dim[1] == 3){
    	for(let i = 0; i < dim[0]; i++){
    		result[i] = Vector.transpose(Vector.matrix_multiply(trans, Vector.properly_define_point(points[i])));
    	}
        result = Vector.pull(result, [0, dim[0] - 1], [0, 2]);
    }
    
    return result
};

Coor$1.move_vectors_to_coor = function(vectors, destination_coordinate_system, reference_coordinate_system){
	let dest = destination_coordinate_system;
    let ref = reference_coordinate_system;
    
    if(ref === undefined){
    	ref = Coor$1.Table;
    }else if(dest === undefined){
    	dest = Coor$1.Table;
    }
    let trans = dest.get_pose(ref);
    let result = vectors.slice();
    let dim = Vector.matrix_dimensions(vectors);
    if(dim[0] == 1){
    	result = Vector.transpose(Vector.matrix_multiply(trans, Vector.properly_define_vector(vectors)));
        result = result.slice(0, 3);
    }else if(dim[1] == 3){
    	for(let i = 0; i < dim[0]; i++){
    		result[i] = Vector.transpose(Vector.matrix_multiply(trans, Vector.properly_define_vector(vectors[i])));
    	}
        result = Vector.pull(result, [0, dim[0] - 1], [0, 2]);
    }
    
    return result
};



/*
var board = Coor.Table.create_child(Vector.make_pose([0, 0, 1000], [0, 0, 324000]), "board")
var points = [[1, 2, 3], [4, 5, 6]]
debugger
var result = Coor.move_points_to_coor(points, board)
*/

Coor$1.rotate = function(axis_of_rotation, angle, point_of_rotation, reference_coordinate_system){
	let pose, result;
    let ref = reference_coordinate_system;
    if(ref === undefined){
    	pose = this.get_pose();
        if(point_of_rotation == undefined){
        	point_of_rotation = this.get_position();
        }
        pose = Vector.rotate_pose(pose, axis_of_rotation, angle, point_of_rotation);
        this.set_pose(pose);
        result = this.pose;
    }else {
    	pose = this.get_pose(ref);
        if(point_of_rotation == undefined){
        	point_of_rotation = [0, 0, 0];
        }
        pose = Vector.rotate_pose(pose, axis_of_rotation, angle, point_of_rotation);
        this.set_pose(pose, ref);
        result = this.pose;
    }
    return result
};




/*
Table = Coor.create_child(Vector.make_pose(), "Table")
J0 = table.create_child(Vector.make_pose(), "J0")
J1 = J0.create_child(Vector.make_pose([10, 0, 0]), "J1")
J2 = J1.create_child(Vector.make_pose([0, 0, 20]), "J2")
J3 = J2.create_child(Vector.make_pose([0, 0, 20]), "J3")
cube = table.create_child(Vector.make_pose([15, 10, 5], [0, 0, Convert.degrees_to_arcseconds(0)]), "cube")
debugger
J3.set_pose([[ 0.707, 0.707, 0, 15], [-0.707, 0.707, 0, 10],[0, 0, 1, 5],[0, 0, 0, 1]])
J3.set_pose([[1, 0, 0, 10], [0, 1, 0, 10],[0, 0, 1, 10],[0, 0, 0, 1]])
J3.set_pose([[1, 0, 0, 10], [0, 1, 0, 10],[0, 0, 1, 10],[0, 0, 0, 1]], table)
J3.set_position([10, 10, 10])
J3.set_position([10, 10, 10], table)
debugger
J3.set_orientation(Convert.angles_to_DCM([0, 0, Convert.degrees_to_arcseconds(90)]))
J3.set_orientation([[-1, 0, 0], [0, 0, 1], [0, 0, 1]])
J3.set_orientation([[-1, 0, 0], [0, 0, 1], [0, 0, 1]], cube)
J3.get_pose()
J3.get_pose(table)
cube.get_pose()
J3.get_pose(cube)
cube.get_pose(J3)
cube = table.create_child(Vector.make_pose([15, 10, 5], [0, 0, Convert.degrees_to_arcseconds(45)]), "cube")
J3.get_pose(cube)
cube.get_pose(J3)
J3.get_position()
J3.get_position(cube)
J3.get_orientation()
J3.get_orientation(cube)
*/

//James Wigglesworth
//Started: 6_23_17
//Updated: 6_29_17

function sind(theta){
	if(theta%180 == 0){
    	return 0
    }
	return Math.sin(theta*Math.PI/180)
}

function cosd(theta){
	if((theta+90)%180 == 0){
    	return 0
    }
	return Math.cos(theta*Math.PI/180)
}


function acosd(ratio){
	return Math.acos(ratio)*180/Math.PI
}

function atan2d(num1, num2){
	return Math.atan2(num1, num2)*180/Math.PI
}

//Vector Class

var dde_github_issues = "https://github.com/cfry/dde/issues";

class Vector$1{
//The Vector Class contains functions for manipulating the following:
/*

 Name        |    Variable    |    Syntax    |       Example        |     Description
 point               U           [x, y, z]          [1, 2, 3]           Defines a 3D position. Default units are microns.
 vector              Uab         [x, y, z]          [1, 2, 3]           Defines a 3D direction and magnitude. Uab = Ua-Ub.
 unit vector         V           [x, y, z]        [0, .707, .707]       Defines a 3D direction. Magnitude is scaled to be 1.
 plane               P           [x, y, z, d]    [0, .707, .707, 5]     Unit vector perpendicular to plane and distance from the origin.
 
*/

    static size (a){
    	
    	if (a === undefined){
        	dde_error("input to function 'size()' is undefined", "red");
            return
        }
        if (a === null){
        	dde_error("input to function 'size()' is null:");
            return
        }
        
        if (typeof(a) == "number"){
        	return 1
        }
		//debugger
    	let temp_size = a.length;
        
        
        if (temp_size === undefined){
        	return 1
        }else {
        /*
        	let a_temp = a
        	let result = []
        	let i = 0
        	while (a_temp !== undefined){
        		i++
        		result.push(a_temp.length)
            	a_temp = a[i]
        	}*/
        	return temp_size
        }
    }
    
    static max (array){
    	let dim = Vector$1.matrix_dimensions(array);
        let max = -Infinity;
        for(let i = 0; i < dim[0]; i++){
        	for(let j = 0; j < dim[0]; j++){
        		if(array[i][j] > max){
                	max = array[i][j];
                }
        	}
        }
        return max
    }

    static min (array){
    	let dim = Vector$1.matrix_dimensions(array);
        let min = Infinity;
        for(let i = 0; i < dim[0]; i++){
        	for(let j = 0; j < dim[0]; j++){
        		if(array[i][j] < max){
                	min = array[i][j];
                }
        	}
        }
        return min
    }
    
    
    //Vector.size([0, 0, 1])

    //Public
    //Returns the unit vector of the input
    //Works for both 2D and 3D vectors
    static normalize(vector){
    	let magnitude = Vector$1.magnitude(vector);
        return Vector$1.divide(vector, magnitude)
    }
    
    
    //Public
    //Returns the dot product of two arrays
    //Will work for arrays of any equal length
    static dot (vector_A, vector_B){
    	var A_size = Vector$1.size(vector_A);
        var B_size = Vector$1.size(vector_B);
        var point;
        var plane;
        var product = 0;
        if (A_size === B_size){
        	if(A_size == 1){
            	return vector_A*vector_B
            }
        	for(var i = 0; i < Math.min(A_size, B_size); i++){
        		product += vector_A[i] * vector_B[i];
        	}
        	
        }else {
        	if (A_size === 3 && B_size === 4){
            	point = [vector_A[0], vector_A[1], vector_A[2], 1];
                plane = vector_B;
            }else {
            	if (A_size === 4 && B_size === 3){
                	point = [vector_B[0], vector_B[1], vector_B[2], 1];
                	plane = vector_A;
                }else {
                	if (A_size === 3 && B_size === 4){
                		point = [vector_A[0], vector_A[1], vector_A[2], 1];
                		plane = vector_B;
                    }else {
                    	if(vector_A[0].length == vector_B.length){
                        	for(var i = 0; i < vector_A[0].length; i++){
        						product += vector_A[0][i] * vector_B[i];
        					}
                            return product
                        }else {
                        	if(vector_B[0].length == vector_A.length){
                            	for(var i = 0; i < vector_B[0].length; i++){
        							product += vector_A[i] * vector_B[0][i];
        						}
                            }else {
                				dde_error("Reconsider the input size in the function 'Vector.dot()'", "red");
                    			return null
                            }
                        }
                	}
                }
            }
            
        	for(var i = 0; i < 4; i++){
        		product += point[i] * plane[i];
        	}
        }
        return product
    }
    
    //Public
    //Returns the cross product of two vectors
    //Vectors must be equal lengths
    static cross (vector_A, vector_B){
		var A_size = vector_A.length;
    	var B_size = vector_B.length;
    	var mat_size = Math.min(A_size, B_size);
    	var vector_C = new Array(mat_size);
    	for(var i = 0; i < mat_size; i++){
      		vector_C[i] = (vector_A[(i + 1) % mat_size] * vector_B[(i + 2) % mat_size]) - (vector_A[(i + 2) % mat_size] * vector_B[(i + 1) % mat_size]);
    	}
      	return vector_C
	}
    
    //*************************************************
    
    
	//Public
    //This is used to add vectors of equal length
    //Can also add scalars to each element in vector
    //unlimited number of inputs args
    static add(...args){
        let temp_args = Convert.deep_copy(args);
        var sum = temp_args[0];
        
    	for(let i = 1; i < Vector$1.size(args); i++){
        	if (Vector$1.size(args[i]) === Vector$1.size(sum)){
				if (Vector$1.size(sum) === 1){
                	sum += args[i];
                }else {
                	for(let j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i][j];
                	}
                }
            	
            }else {
            	if (Vector$1.size(args[i]) === 1){
                	for(let j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i];
                	}
                }else {
                	if (Vector$1.size(sum) === 1){
                    var temp = sum;
                    sum = args[i];
                		for(var j = 0; j < Vector$1.size(sum); j++){
                			sum[j] += temp;
                        }
                	}else {
                    	let dim_1 = Vector$1.matrix_dimensions(sum);
                        let dim_2 = Vector$1.matrix_dimensions(args[i]);
                        if(dim_1[0] == 1 && dim_1[1] == dim_2[1]){
                        	let shift_vector = sum;
                            sum = args[i];
                            for(let m = 0; m < dim_2[0]; m++){
                            	sum[m] = Vector$1.add(sum[m], shift_vector);
                            }
                        }else if(dim_2[0] == 1 && dim_2[1] == dim_1[1]){
                        	let shift_vector = args[i];
                            for(let m = 0; m < dim_1[0]; m++){
                            	sum[m] = Vector$1.add(sum[m], shift_vector);
                            }
                        }else {
                    		dde_error("Error: inputs to function 'add()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                        }
                    }
                }
            }
        }
        return sum
        
    }
    
    
    
    //Public
    //This is used to subtract vectors of equal length
    //Can also add scalars to each element in vector
    //unlimited number of inputs args
    static subtract (...args){
        let temp_args = Convert.deep_copy(args);
        var sum = temp_args[0];
        
    	for(var i = 1; i < Vector$1.size(temp_args); i++){
        	if (Vector$1.size(temp_args[i]) === Vector$1.size(sum)){
				if (Vector$1.size(sum) === 1){
                	sum -= temp_args[i];
                }else {
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] -= temp_args[i][j];
                	}
                }
            	
            }else {
            	if (Vector$1.size(temp_args[i]) === 1){
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] -= temp_args[i];
                	}
                }else {
                	if (Vector$1.size(sum) === 1){
                    var temp = sum;
                    sum = temp_args[i];
                		for(var j = 0; j < Vector$1.size(sum); j++){
                			sum[j] -= temp;
                        }
                	}else {
                    	dde_error("inputs to function 'subtract()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                    }
                }
            }
        }
        return sum
    }
        
    //Public
    //This should be re-written in a more clever way....
    static multiply(...args){
        if (args === undefined){
        	dde_error("Error: the function 'Vector.multiply' has undefined inputs");
        }
        
        let temp_args = Convert.deep_copy(args);
        var product = temp_args[0];

    	for(var i = 1; i < Vector$1.size(args); i++){
        	let temp_arg = args[i];
            if(temp_arg === undefined) {
                dde_error("Vector.multiply passed an arg that was undefined in: " + args);
			}
        	var temp_arg_size = Vector$1.size(temp_arg);
        	var product_size = Vector$1.size(product);
        	if (product_size === 1 && temp_arg_size === 1){
        		product *= temp_arg;
        	}else {
        		if (temp_arg_size === product_size){
					for(var j = 0; j < temp_arg_size; j++){
            			var arg_element_length = Vector$1.size(temp_arg[j]);
                    	var product_element_length = Vector$1.size(product[j]);
            			if (arg_element_length === 1 && arg_element_length === 1){
							product[j] *= temp_arg[j];
						}else {
                    		if (arg_element_length === product_element_length){
								for(var k = 0; k < arg_element_length; k++){
									product[j][k] *= temp_arg[j][k];
								}
                        	}else {
                        		if (arg_element_length === 1){
                            		for(var k = 0; k < product_element_length; k++){
                                		product[j][k] *= temp_arg[j];
                                	}
                            	}
                            	if (product_element_length === 1){
                            		var product_element_val = product[j];
                            		for(var k = 0; k < arg_element_length; k++){
                                		product[j][k] = temp_arg[j][k] * product_element_val;
                                	}
                            	}
                        	}
            			}
          			}
        		}else {
                	if (Vector$1.size(temp_arg) === 1){
                		for(var j = 0; j < Vector$1.size(product); j++){ 
                        	if (Vector$1.size(product[j]) === 1){
                        		product[j] *= temp_arg;
                        	}else {
                        		for(var k = 0; k < product[j].length; k++){
                            		product[j][k] *= temp_arg;
                            	}
                        	}
                        }
                	}else {
                		if (Vector$1.size(product) === 1){
                    		var temp = product;
                    		product = temp_arg.slice(0);
                			for(var j = 0; j < Vector$1.size(product); j++){
                				if (Vector$1.size(product[j]) === 1){
                        			product[j] *= temp;
                        		}else {
                        			for(var k = 0; k < product[j].length; k++){
                            			product[j][k] *= temp;
                            		}
                        		}
                    		}
                		}else {
                    		dde_error("inputs to function 'multiply()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                    	}
                	}
            	}
        	}
    	}
        return product
    }
    /*
    var pose_1 = [[1, 0, 0, 10], 
			     [0, 1, 0, 20],
			     [0, 0, 1, 30],
			     [0, 0, 0,  1]]
		var pose_2 = [[1, 0, 0, 100], 
			     [0, 1, 0, 200],
			     [0, 0, 1, 300],
			     [0, 0, 0,  1]]
		var result_1 = Vector.matrix_multiply(pose_1, pose_2)
        var result_2 = Vector.matrix_multiply(pose_2, pose_1)
    */
    
    //Public
    static divide (...args){
        if (args === undefined){
        	dde_error("the function 'Vector.divide' has undefined inputs");
        }
        
        let temp_args = Convert.deep_copy(args);
        var quotient = temp_args[0];

    	for(var i = 1; i < Vector$1.size(args); i++){
        	let temp_arg = args[i];
        	var temp_arg_size = Vector$1.size(temp_arg);
        	var quotient_size = Vector$1.size(quotient);
        	if (quotient_size === 1 && temp_arg_size === 1){
        		quotient /= temp_arg;
        	}else {
        		if (temp_arg_size === quotient_size){
					for(var j = 0; j < temp_arg_size; j++){
            			var arg_element_length = Vector$1.size(temp_arg[j]);
                    	var quotient_element_length = Vector$1.size(quotient[j]);
            			if (arg_element_length === 1 && arg_element_length === 1){
							quotient[j] /= temp_arg[j];
						}else {
                    		if (arg_element_length === quotient_element_length){
								for(var k = 0; k < arg_element_length; k++){
									quotient[j][k] /= temp_arg[j][k];
								}
                        	}else {
                        		if (arg_element_length === 1){
                            		for(var k = 0; k < quotient_element_length; k++){
                                		quotient[j][k] /= temp_arg[j];
                                	}
                            	}
                            	if (quotient_element_length === 1){
                            		var quotient_element_val = product[j];
                            		for(var k = 0; k < arg_element_length; k++){
                                		quotient[j][k] = quotient_element_val / temp_arg[j][k];
                                	}
                            	}
                        	}
            			}
          			}
        		}else {
                	if (Vector$1.size(temp_arg) === 1){
                		for(var j = 0; j < Vector$1.size(quotient); j++){ 
                        	if (Vector$1.size(quotient[j]) === 1){
                        		quotient[j] /= temp_arg;
                        	}else {
                        		for(var k = 0; k < quotient[j].length; k++){
                            		quotient[j][k] /= temp_arg;
                            	}
                        	}
                        }
                	}else {
                		if (Vector$1.size(quotient) === 1){
                    		var temp = quotient;
                    		quotient = temp_arg.slice(0);
                			for(var j = 0; j < Vector$1.size(quotient); j++){
                				if (Vector$1.size(quotient[j]) === 1){
                        			quotient[j] = temp / quotient[j];
                        		}else {
                        			for(var k = 0; k < quotient[j].length; k++){
                            			quotient[j][k] = temp / quotient[j][k];
                            		}
                        		}
                    		}
                		}else {
                    		dde_error("inputs to function 'divide()' are not correct sizes:<br/>" + JSON.stringify(args), "red");
                    	}
                	}
            	}
        	}
    	}
        return quotient
    }
    /*
    var pose_1 = [[1, 0, 0, 10], 
			     [0, 1, 0, 20],
			     [0, 0, 1, 30],
			     [0, 0, 0,  1]]
		var pose_2 = [[1, 0, 0, 100], 
			     [0, 1, 0, 200],
			     [0, 0, 1, 300],
			     [0, 0, 0,  1]]
		var result_1 = Vector.matrix_divide(pose_1, pose_2)
        var result_2 = Vector.matrix_divide(pose_2, pose_1)
    */
    
    /*
    debugger
    Vector.average([1, 2, 3])
    */


    static average(...args){
    	let temp_args = Convert.deep_copy(args);
        let sum;
        if(temp_args.length == 1){
        	sum = temp_args[0][0];
        	for(let i = 1; i < temp_args[0].length; i++){
            	sum += temp_args[0][i];
            }
            return sum/temp_args[0].length
        }
        
        sum = temp_args[0];
    	for(var i = 1; i < Vector$1.size(args); i++){
        	if (Vector$1.size(args[i]) === Vector$1.size(sum)){
				if (Vector$1.size(sum) === 1){
                	sum += args[i];
                }else {
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i][j];
                	}
                }
            	
            }else {
            	if (Vector$1.size(args[i]) === 1){
                	for(var j = 0; j < Vector$1.size(sum); j++){
                		sum[j] += args[i];
                	}
                }else {
                	if (Vector$1.size(sum) === 1){
                    var temp = sum;
                    sum = args[i];
                		for(var j = 0; j < Vector$1.size(sum); j++){
                			sum[j] += temp;
                        }
                	}
                }
            }
        }
        return Vector$1.divide(sum, args.length)
    }
    //Vector.average([2, 2], [4, 4])
    
   //private fns here
    
	
    
    //Public
	static distance(...args) {
    	/*SYNTAX:
        	Kin.distance(POINT)        -> distance between point and origin / magnitude of VECTOR
            Kin.distance(POINT, POINT) -> distance between points
            Kin.distance(PLANE, POINT) -> distance between plane and point
            Kin.distance(POINT, PLANE) -> distance between point and point
        */
        var temp_args = Convert.deep_copy(args);
        
        
        switch(Vector$1.size(args)){
            
        	case 1:
            	var a = temp_args[0];
            	switch(Vector$1.size(a)){
					case 2:
                    	//magnitude of 2D vector
                    	return Math.hypot(a[0], a[1])
                 	case 3:
						//magnitude of 3D vector
						return Math.hypot(a[0], a[1], a[2])
					case 4:
						//distance between plane and origin
						return a[4]
					default:
						dde_error("single vector input to function 'distance()' must have a size of 2, 3, or 4", "red");
						return null
             	}
                
                
            case 2:
            	var a = args[0].slice(0);
                var b = args[1].slice(0);
            	var aL = Vector$1.size(a);
                var bL = Vector$1.size(b);
                var point;
                var plane;
            	if (aL === 2 && bL === 2){
                	return Math.hypot(a[0] - b[0], a[1] - b[1])
                }
            	if (aL === 3 && bL === 3){
                	return Math.hypot(a[0] - b[0], a[1] - b[1], a[2] - b[2])
                }else {
                	if (aL === 3 && bL === 4){
                    	point = a;
                        plane = b;
                    }else {
                    	if (aL === 4 && bL === 3){
                        	plane = a;
                            point = b;
                        }else {
                        	dde_error("inputs for function 'distance()' must be a point, plane, or vector", "red");
                            return null
                        }
                    }
					return dist_point_to_plane(point, plane)
                }
                
            case 3:
                point = args[0].slice(0);
                var line_point_A = args[1].slice(0);
                var line_point_B = args[2].slice(0);
                if (Vector$1.size(point) === 3 && Vector$1.size(line_point_A) === 3 && Vector$1.size(line_point_B) === 3){
            		return dist_point_to_line(point, line_point_A, line_point_B)
                }
            	break
            
            default:
            	let sum = 0;
            	for(var i = 0; i < temp_args.length; i++){
                	sum += temp_args[i] * temp_args[i];
                }
            	return Math.sqrt(sum)
        }

    }
    
    static magnitude(vector){
    	if(vector.length == undefined){
        	return vector
        }
    	let sum = 0;
        for(var i = 0; i < vector.length; i++){
          sum += vector[i] * vector[i];
        }
      	return Math.sqrt(sum)
    }
    
    //Public
    static complete_plane(plane, point){
    	if (Vector$1.size(plane) === 3){
        	var vector = Vector$1.normalize(plane);
        	var d = Vector$1.dot(vector, point);
            vector.push(d);
            return vector
    	}else {
        	return plane
        }
    }
    
    //Public
    static project_vector_onto_plane(vector, plane){
		var short_plane = [plane[0], plane[1], plane[2]];
		var term1 = Vector$1.dot(vector, short_plane);
    	var term2 = Math.pow(Vector$1.distance(short_plane), 2);
		return Vector$1.subtract(vector, Vector$1.multiply(term1 / term2, short_plane))
	}

    static project_point_onto_line(point, line_point_1, line_point_2){
    	let U1a = line_point_1;
        let U1b = point;
        let U2a = line_point_1;
        let U2b = line_point_2;
        let U1ba = Vector$1.subtract(U1b, U1a);
        let U2ba = Vector$1.subtract(U2b, U2a);
        let proj = Vector$1.add(Vector$1.multiply(Vector$1.dot(U2ba, U1ba) /
                                 Math.pow(Vector$1.magnitude(U2ba), 2),
                                 U2ba), U2a);
        return proj
    }
    
    /*
    debugger
    Vector.sign(0)
    */
    static sign(array){
		let dim = Vector$1.matrix_dimensions(array);
        let sign_array;
        if(dim[1] == 0){
        	if(array >= 0){
            	return 1
            }else {
            	return -1
            }
        }else if(dim[0] == 1){
        	sign_array = Vector$1.make_matrix(dim)[0];
        	for(let i = 0; i < dim[1]; i++){
            	if(array[i] >= 0){
            		sign_array[i] = 1;
            	}else {
            		sign_array[i] = -1;
            	}
            }
        }else {
        	sign_array = Vector$1.make_matrix(dim);
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; i++){
            		if(array[i][j] >= 0){
            			sign_array[i][j] = 1;
            		}else {
            			sign_array[i][j] = -1;
            		}
                }
            }
        }
        return sign_array
	}
    
    //Public
    static points_to_plane(Ua, Ub, Uc){
    	var Uba = Vector$1.subtract(Ub, Ua);
        var Uca = Vector$1.subtract(Uc, Ua);
        Vector$1.round(Vector$1.normalize(Uba),10);
        Vector$1.round(Vector$1.normalize(Uca),10);
        /*if (Vector.is_equal(Uba_norm, Uca_norm, 10) || Vector.is_equal(Vector.multiply(-1, Uba_norm), Uca_norm, 10)){
        	return Kin.base_rotation_to_plane(0, Vector.normalize(Uba))
        }*/
        var vector = Vector$1.normalize(Vector$1.cross(Uba, Uca));
        
        
        return Vector$1.complete_plane(vector, Ua)
    }
	
    
    //Public 
    static round(number_or_array, digits = 1){
    	if(number_or_array == null) {return null}
    	let mulitplier = Math.pow(10, digits);
        if(typeof(number_or_array) == "number"){
        	return Math.round(mulitplier * number_or_array) / mulitplier
        }else {
        	let temp_array = Convert.deep_copy(number_or_array);
            let dim = Vector$1.matrix_dimensions(number_or_array);
            if(dim[0] == 1){
            	for(var i = 0; i < number_or_array.length; i++){
                    let elt = temp_array[i];
                    if(elt != null) {
                		temp_array[i] = Math.round(mulitplier * elt) / mulitplier;
					}
                }
            }else {
        		for(var i = 0; i < dim[0]; i++){
            		for(var j = 0; j < dim[1]; j++){
                        let elt = temp_array[i][j];
                        if(elt != null) {
            				temp_array[i][j] = Math.round(mulitplier * elt) / mulitplier;
						}
            		}
            	}
            }
            return temp_array
        }
    }

    
    
    //Public
    static is_equal(array1, array2, tolerance = 14, tolerance_type = "decimal_places"){
        let result = true;
        if(array1 == null) {
            if(array2 == null) { return true }
            else { return false }
        }
        else if (array2 == null) { return false }
        else if (array1.length !== array2.length){
        	return false
        }else {
        	let array1_temp = Convert.deep_copy(array1);
            let array2_temp = Convert.deep_copy(array2);
        	switch(tolerance_type){
            	case "decimal_places":
        			array1_temp = Vector$1.round(array1_temp, tolerance);
                	array2_temp = Vector$1.round(array2_temp, tolerance);
					if(array1_temp.length == undefined){
						if(array1_temp == array2_temp){
							return true
						}else {
							return false
						}
					}
					for(var i = 0; i < array1_temp.length; i++){
						if (JSON.stringify(array1_temp[i]) != JSON.stringify(array2_temp[i])){
							return false
						}
					}
					break
                case "absolute":
					if (Vector$1.max(Vector$1.abs(Vector$1.subtract(array1_temp, array2_temp))) > tolerance){
						return false
					}
					break
                
                case "percent_difference":
					if(tolerance > 1){

						warning("Percent difference tolerance should be within 0 and 1.</br>Input of "
						+ tolerance + " changed to " + (tolerance/100) + ".");
						tolerance = tolerance/100;
					}

					let avg = Vector$1.average(array1_temp, array2_temp);
					if (Vector$1.max(Vector$1.divide(Vector$1.abs(Vector$1.subtract(array1_temp, array2_temp)), avg)) > tolerance){
						return false
					}
					break
                
                case "magnitude":
					if (Vector$1.max(Vector$1.magnitude(Vector$1.subtract(array1_temp, array2_temp))) > tolerance){
						return false
					}
					break
                
                default:
					dde_error("Vector.is_equal does not support input of \"" + tolerance_type
					+ "\".</br>Supported tolerance types: \"decimal_places\", \"absolute\", \"percent_difference\", and \"magnitude\"");
                
            }
                
        }
        return result
    }
    
    
    
    //Public
    static shorten(matrix){
    	return [matrix[0], matrix[1], matrix[2]]
    }
    
    //Public
    //Returns the smallest angle between two vectors with range 0-180 degrees
    static angle(vector_A, vector_B){
    	//in case one of the vectors is a complete plane
    	var short_A = Vector$1.shorten(vector_A);
        var short_B = Vector$1.shorten(vector_B);
        var result;
    	if (Vector$1.is_equal(short_A, short_B)){
        	result =  0;
        }else {
        	if (Vector$1.distance(Vector$1.add(short_A, short_B)) === 0){
            	result = 180;
            }else {
            	var result = atan2d(Vector$1.distance(Vector$1.cross(short_A, short_B)), Vector$1.dot(short_A, short_B));
        	}
        }
        return result
    }
    
    //Public
    //Returns angle between two vectors with range -180 to 180
    static signed_angle(vector_A, vector_B, plane){
    	let epsilon = 1e-14;
    	//checks if vectors lie in plane
        var cross_product = Vector$1.normalize(Vector$1.cross(Vector$1.shorten(vector_A), Vector$1.shorten(vector_B)));
        var short_plane = Vector$1.shorten(plane);
        
        if (!(Vector$1.is_equal(cross_product, short_plane) ||
             Vector$1.is_equal(
                             Vector$1.multiply(-1, cross_product),
                             short_plane))
			&&
			(cross_product[0] === NaN)){
            dde_error("input vectors do not lie in plane");
        }
    	
    	var guess_angle = Vector$1.angle(vector_A, vector_B);
        var guess_vector = Vector$1.round(Vector$1.rotate(vector_A, plane, guess_angle), 3);
        var test_vector = Vector$1.round([vector_B[0], vector_B[1], vector_B[2]], 3);
        
        if (Vector$1.magnitude(Vector$1.subtract(guess_vector, test_vector)) < epsilon){
        //if (Vector.magnitude(Vector.subtract(guess_vector, test_vector)) < Vector.magnitude(Vector.subtract(guess_vector, Vector.multiply(-1, test_vector)))){
        	return guess_angle
        }else {
        	return -guess_angle
        }
    }
    
   
    
    
    //Public
    //returns intersection of two planes, a plane and a line, and two lines
    static intersection(...args){
    	switch (Vector$1.size(args)){
        	case 2:
        		//Assumes intersection between two planes
                return Vector$1.normalize(Vector$1.cross(args[1], args[2]))
        	case 3:
            	//Assumes intersection between plane and line
            	var line_vector;
            	var complete_point;
            	var alpha;
            	var intersection_point;
            	
            	for(var i = 0; i < 3; i++){
                	if (Vector$1.size(args[i]) === 4){
                    	var plane = args[i].slice(0);
                        var point_A = args[(i + 1) % 3].slice(0);
                        var point_B = args[(i + 2) % 3].slice(0);
                    }
                    
                }
                if (plane === undefined){
                    dde_error("inputs to the function 'Vector.intersection' must be a plane and two points or two planes");
                }
                if (Vector$1.size(point_A) !== 3 || Vector$1.size(point_B) !== 3){
                	dde_error("inputs to the function 'Vector.intersection' must be a plane and two points or two planes");
                }
                
                //Assumes plane is passed in along with a line defined by a point and unit vector
                if (Vector$1.distance(point_A) === 1 && Vector$1.distance(point_B) !== 1){
                	line_vector = point_A;
                    complete_point = [point_B[0], point_B[1], point_B[2], 1];
                    alpha = -Vector$1.dot(plane, complete_point) / (Math.pow(line_vector[0], 2), Math.pow(line_vector[1], 2), Math.pow(line_vector[2], 2));
                    intersection_point = Vector$1.add(Vector$1.multiply(alpha, line_vector), point_B);
                    return intersection_point
                }
                
                //Assumes plane is passed in along with a line defined by a point and unit vector
                if (Vector$1.distance(point_A) !== 1 && Vector$1.distance(point_B) === 1){
                	line_vector = point_B;
                    complete_point = [point_A[0], point_A[1], point_A[2], 1];
                    alpha = -Vector$1.dot(plane, complete_point) / (Math.pow(line_vector[0], 2), Math.pow(line_vector[1], 2), Math.pow(line_vector[2], 2));
                    intersection_point = Vector$1.add(Vector$1.multiply(alpha, line_vector), point_A);
                    return intersection_point
                }
                
                //Assumes plane is passed in along with a line defined by two points
                line_vector = Vector$1.subtract(point_B, point_A);
                complete_point = [point_A[0], point_A[1], point_A[2], 1];
                alpha = -Vector$1.dot(plane, complete_point) / (Math.pow(line_vector[0], 2), Math.pow(line_vector[1], 2), Math.pow(line_vector[2], 2));
                intersection_point = Vector$1.add(Vector$1.multiply(alpha, line_vector), point_A);
                return [intersection_point, alpha]
            
            	
        }
    }

    //Public
    //rotates a vector in 3D space on a plane by angle theta
    //will also rotate a point about a line by substituting the line's vector in plane and its point in point
	static rotate(vector, plane, theta, point = [0, 0, 0]){
		plane =  Vector$1.normalize(Vector$1.shorten(plane));
		let dim = Vector$1.matrix_dimensions(vector);
		let result, short_vector, term_1, term_2, term_3;
		if (dim[1] == 3 && dim[0] != 1){
			result = Vector$1.make_matrix(dim[0], 1);
			for(var i = 0; i < vector.length; i++){
				short_vector = Vector$1.subtract(vector[i], point);
				if(Vector$1.is_equal(short_vector, point)){
					result[i] = short_vector;
				}else {
					term_1 = Vector$1.multiply(cosd(theta), short_vector);
					term_2 = Vector$1.multiply(sind(theta), Vector$1.cross(Vector$1.shorten(plane), short_vector));
					term_3 = Vector$1.multiply(plane, Vector$1.dot(plane, short_vector), (1-cosd(theta)));
					result[i] = Vector$1.add(Vector$1.multiply(Vector$1.magnitude(short_vector),  Vector$1.normalize(Vector$1.add(term_1, term_2, term_3))), point);
				}
			}
		}else {
			short_vector = Vector$1.subtract(Vector$1.shorten(vector), point);
			if(Vector$1.magnitude(Vector$1.cross(short_vector, plane)) < 1e-10){
				return short_vector
			}
			term_1 = Vector$1.multiply(cosd(theta), short_vector);
			term_2 = Vector$1.multiply(sind(theta), Vector$1.cross(Vector$1.shorten(plane), short_vector));
			term_3 = Vector$1.multiply(plane, Vector$1.dot(plane, short_vector), (1-cosd(theta)));
			result = Vector$1.add(Vector$1.multiply(Vector$1.magnitude(short_vector),  Vector$1.normalize(Vector$1.add(term_1, term_2, term_3))), point);
		}
		return result
	}


    static three_points_to_transformation(point_list, pointA = [0, 0, 0], pointB = [1, 0, 0], pointC = [0, 1, 0], U4){
		
        let points_plane = Vector$1.points_to_plane(pointA, pointB, pointC);
        let dist = Vector$1.distance(U4, points_plane);
        out("input plane and dist:");
        out(points_plane);
        out(dist);
        if(dist < 0){
        	points_plane = Vector$1.multiply(-1, points_plane);
        }
        if(!Vector$1.is_equal(points_plane, [0, 0, 1], 4)){
        	let intersection_axis = Vector$1.cross(points_plane, [0, 0, 1]);
            let phi = Vector$1.signed_angle([1, 0, 0], points_plane, intersection_axis);
            for(var i = 0; i < point_list.length; i++){
				point_list[i] = Vector$1.rotate(point_list[i], [0, 0, 1], phi);
			}
        }
        
    	let rot_plane = Vector$1.cross(points_plane, [0, 0, 1]);
    	let theta = Vector$1.signed_angle([0, 0, 1], points_plane, rot_plane);
        
        let new_point_list = [];

        let sum = [0, 0, 0];
		let drawing_centroid;
        if (point_list[0].length === 2){
        	for(var i = 0; i < point_list.length; i++){
				new_point_list[i] = Vector$1.rotate([point_list[i][0], point_list[i][1], 0], rot_plane, theta);
        		drawing_centroid = Vector$1.add(sum, new_point_list[i]);
			}
        }
        if (point_list[0].length === 3){
        	for(var i = 0; i < point_list.length; i++){
				point_list[i] = [-point_list[i][0], point_list[i][1], point_list[i][2]]; 
			}
        	for(var i = 0; i < point_list.length; i++){
				new_point_list.push(Vector$1.rotate([point_list[i][0], point_list[i][1], point_list[i][2]], rot_plane, theta));
        		drawing_centroid = Vector$1.add(sum, new_point_list[i]);
			}
        }
        drawing_centroid = Vector$1.multiply(drawing_centroid, 1 / point_list.length);
        let plane_centroid = Vector$1.multiply(Vector$1.add(pointA, pointB, pointC), 1 / 3);
        let distance_vector = Vector$1.subtract(plane_centroid, drawing_centroid);
        for(var i = 0; i < point_list.length; i++){
			new_point_list[i] = Vector$1.add(new_point_list[i], distance_vector);
		}
    
    	return [new_point_list, Vector$1.shorten(points_plane)]
    	//[x*cos(theta)+dx, y*cos(theta)+dy, (Py*y + Pz*x)*sin(theta)+dz]
	}

    static max(vector){
    	let dim = Vector$1.matrix_dimensions(vector);
        let temp_max;
        
        if(dim[0] == 1){
        	if(dim[1] == 0){
            	return vector
            }
        	temp_max = -Infinity;
        	for(let i = 0; i < dim[1]; i++){
            	if(vector[i] > temp_max){
                	temp_max = vector[i];
                }
            }
        }else {
        	temp_max = Vector$1.make_matrix(1, dim[1], -Infinity)[0];
        	for(let j = 0; j < dim[1]; j++){
            	for(let i = 0; i < dim[0]; i++){
            		if(vector[i][j] > temp_max[j]){
                		temp_max[j] = vector[i][j];
                	}
            	}
        	}
    	}
    	return temp_max
    }
    /*
    debugger
    var result = Vector.max([[1, 2, 10], [4, 5, 6]])
    var result = Vector.max([1, 2, 10])
    */

    static min(vector){
    	let dim = Vector$1.matrix_dimensions(vector);
        let temp_min;
        if(dim[0] == 1){
        	if(dim[1] == 0){
            	return vector
            }
        	temp_min = Infinity;
        	for(let i = 0; i < dim[1]; i++){
            	if(vector[i] < temp_min){
                	temp_min = vector[i];
                }
            }
        }else {
        	temp_min = Vector$1.make_matrix(1, dim[1], Infinity)[0];
        	for(let j = 0; j < dim[1]; j++){
            	for(let i = 0; i < dim[0]; i++){
            		if(vector[i][j] < temp_min[j]){
                		temp_min[j] = vector[i][j];
                	}
            	}
        	}
    	}
    	return temp_min
    }
    /*
    var result = Vector.min([[1, 2, 10], [4, 5, 6]])
    var result = Vector.min([1, 2, 10])
    */

    static is_NaN(vector){
    	let dim = Vector$1.matrix_dimensions(vector);
        if(dim[0] == 1 && dim[1] == 0){return isNaN(vector)}
        if(dim[0] == 1){
        	for(let i = 0; i < dim[1]; i++){
        		if(isNaN(vector[i])){return true}
        	}
        }else {
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; j++){
        			if(isNaN(vector[i][j])){return true}
                }
        	}
        }
        return false
    }

    static is_NaN_null_or_undefined(vector){
        let dim = Vector$1.matrix_dimensions(vector);
        if(dim[0] == 1 && dim[1] == 0){return Utils.is_NaN_null_or_undefined(vector)}
        if(dim[0] == 1){
            for(let i = 0; i < dim[1]; i++){
                if(Utils.is_NaN_null_or_undefined(vector[i])){return true}
            }
        }else {
            for(let i = 0; i < dim[0]; i++){
                for(let j = 0; j < dim[1]; j++){
                    if(Utils.is_NaN_null_or_undefined(vector[i][j])){return true}
                }
            }
        }
        return false
    }

    static sum (array){
    	let dim = Vector$1.matrix_dimensions(array);
        let sum = 0;
        if(dim[0] == 1){
        	for(let i = 0; i < dim[1]; i++){
            	sum += array[i];
            }
        }
        return sum
    }
    
    /*
    debugger
    Vector.abs([[-10, 9], [-8, -6],[-1, -5]])
    Vector.abs([[-10, 9], [-8, -6]])
    */
    static abs(array){
    	let dim = Vector$1.matrix_dimensions(array);
        let array_copy = Convert.deep_copy(array);
        
        if(dim[1] == 0){
        	return Math.abs(array)
        }else if(dim[0] == 1){
        	array_copy = Vector$1.make_matrix(dim)[0];
        	for(let i = 0; i < dim[1]; i++){
            	array_copy[i] = Math.abs(array[i]);
            }
        }else {
        	array_copy = Vector$1.make_matrix(dim);
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; j++){
            		array_copy[i][j] = Math.abs(array[i][j]);
                }
            }
        }
        return array_copy
    }
    /*
    var myvec = [1, -4, 5, -4]
    Vector.abs(myvec)
    out(myvec)
    */

    static pow(array, power){
    	let dim = Vector$1.matrix_dimensions(array);
        let array_copy = Convert.deep_copy(array);
        
        if(dim[1] == 0){
        	return Math.pow(array, power)
        }else if(dim[0] == 1){
        	array_copy = Vector$1.make_matrix(dim)[0];
        	for(let i = 0; i < dim[1]; i++){
            	array_copy[i] = Math.pow(array[i], power);
            }
        }else {
        	array_copy = Vector$1.make_matrix(dim);
        	for(let i = 0; i < dim[0]; i++){
            	for(let j = 0; j < dim[1]; j++){
            		array_copy[i][j] = Math.pow(array[i][j], power);
                }
            }
        }
        return array_copy
    }
    
    
    
    /*
    Vector.is_greater([4, 4, 5], [4, 3, 5])
    */
    static is_greater(vector_1, vector_2){
        let state = false;
        for(let i = 0; i < vector_1.length; i++){
        	if(vector_1[i] > vector_2[i]){
            	state = true;
                break
            }
        }
        return state
    }

    static is_less(vector_1, vector_2){
        let state = false;
        for(let i = 0; i < vector_1.length; i++){
        	if(vector_1[i] < vector_2[i]){
            	state = true;
                break
            }
        }
        return state
    }

    static quadratic_formula(a, b, c){
    	let det = Math.sqrt(Math.pow(b, 2) -4*a*c);
        if(isNaN(det)){
        	dde_error("Vector.quadratic_formula does not support imaginery roots yet");
        }
        return [(-b+det)/(2*a), (-b-det)/(2*a)]
    }

    static root_mean_square(vector){
    	if(vector.length){
        	let sum = 0;
        	for(let i = 0; i < vector.length; i++){
            	sum += vector[i] * vector[i];
        	}
            return Math.sqrt(sum / vector.length)
        }else {
        	return vector
        }
    }
    
    
    
	//Cubic Formula by Alexander Shtuchkin
	//https://stackoverflow.com/questions/27176423/function-to-solve-cubic-equation-analytically
    static cuberoot(x){
    	let y = Math.pow(Math.abs(x), 1/3);
    	return x < 0 ? -y : y;
	}

    static solveCubic(a, b, c, d) {
    	if (Math.abs(a) < 1e-8) { // Quadratic case, ax^2+bx+c=0
        	a = b; b = c; c = d;
        	if (Math.abs(a) < 1e-8) { // Linear case, ax+b=0
            	a = b; b = c;
            	if (Math.abs(a) < 1e-8) // Degenerate case
                	return [];
            	return [-b/a];
        	}

        	var D = b*b - 4*a*c;
        	if (Math.abs(D) < 1e-8)
            	return [-b/(2*a)];
        	else if (D > 0)
            	return [(-b+Math.sqrt(D))/(2*a), (-b-Math.sqrt(D))/(2*a)];
        	return [];
    	}

    	// Convert to depressed cubic t^3+pt+q = 0 (subst x = t - b/3a)
    	var p = (3*a*c - b*b)/(3*a*a);
    	var q = (2*b*b*b - 9*a*b*c + 27*a*a*d)/(27*a*a*a);
    	var roots;

    	if (Math.abs(p) < 1e-8) { // p = 0 -> t^3 = -q -> t = -q^1/3
        	roots = [cuberoot(-q)];
    	} else if (Math.abs(q) < 1e-8) { // q = 0 -> t^3 + pt = 0 -> t(t^2+p)=0
        	roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);
    	} else {
        	var D = q*q/4 + p*p*p/27;
        	if (Math.abs(D) < 1e-8) {       // D = 0 -> two roots
            	roots = [-1.5*q/p, 3*q/p];
        	} else if (D > 0) {             // Only one real root
            	var u = cuberoot(-q/2 - Math.sqrt(D));
            	roots = [u - p/(3*u)];
        	} else {                        // D < 0, three roots, but needs to use complex numbers/trigonometric solution
            	var u = 2*Math.sqrt(-p/3);
            	var t = Math.acos(3*q/p/u)/3;  // D < 0 implies p < 0 and acos argument in [-1..1]
            	var k = 2*Math.PI/3;
            	roots = [u*Math.cos(t), u*Math.cos(t-k), u*Math.cos(t-2*k)];
        	}
    	}

    	// Convert back from depressed cubic
    	for (var i = 0; i < roots.length; i++)
        	roots[i] -= b/(3*a);

    	return roots;
	}

    static linspace(start, end, n){
		let result = Vector$1.make_matrix(1, n);
    	let step = (end-start)/(n-1);
    	for(let i = 0; i < n; i++){
    		result[i] = start+i*step;
    	}
    	return result
	}
    
    

	//Private
    //This is used to prevent functions from altering outside arrays
    static deep_copy(arg){
        return JSON.parse(JSON.stringify(arg))
    	/*if (typeof(arg) == "number"){
        	return arg
        }else{
        	let result = []
        	for(var i = 0; i < arg.length; i++){
            	let elt = arg[i]
                if (typeof(elt) !== "number"){
                    elt = elt.slice(0)
                }
                result.push(elt)
            }
            return result
        }*/
    }


    //*******************************************
    //Orientation representation conversions:

    static euler_angles_to_DCM(euler_angles = [0, 0, 0], euler_sequence = "ZYX"){
    	//default could be ZX'Z'
        let dim = Vector$1.matrix_dimensions(euler_angles);
        if(dim[0] == 2 && dim[1] == 3){
        	euler_sequence = euler_angles[1];
            euler_angles = euler_angles[0];
        }
        
        var result = [];
        let elt = "";
        for(let char of euler_sequence){
        	if(elt.length == 1){
            	if(char == "'"){
                	elt += char;
                    result.push(elt);
                    elt = "";
                }else {
                	result.push(elt);
                    elt = char;
                }
            }else {
            	elt = char;
            } 
        }
        if((elt != "'") && (elt.length == 1)){
        	result.push(elt);
        }
          
        
    	let DCM = Vector$1.identity_matrix(3);
        if(result.length == 3){
        	for(var i = 0; i < 3; i++){
        		DCM = Vector$1.rotate_DCM(DCM, result[i], euler_angles[i]); 
            }
        }
        //return Vector.transpose(DCM)
        return DCM
    }
    //Convert.angles_to_DCM([Convert.degrees_to_arcseconds(45), Convert.degrees_to_arcseconds(45), 0])
    /* 
    debugger
    Vector.DCM_to_euler_angles(Vector.transpose(Vector.euler_angles_to_DCM([30, 0, 0])))
    */

    static DCM_to_euler_angles(DCM, euler_sequence = "ZYX"){
    	let euler_angles = [0, 0, 0];
        switch(euler_sequence){
        	
        	case "ZYZ":
            	//euler_angles[0] = atan2d(DCM[0][1], DCM[0][0])
                //euler_angles[1] = asind(DCM[0][2])
                //euler_angles[2] = atan2d(DCM[1][2], DCM[2][2])
            	if(DCM[2][2] == 0){
                	dde_error("Singularity in DCM_to_Euler_Angles for euler_sequence: " + euler_sequence + " and DCM:");
                    out(Vector$1.round(DCM,3));
                }
            	euler_angles[0] = atan2d(DCM[2][0], DCM[2][1]);
                euler_angles[1] = acosd(DCM[2][2]);
                euler_angles[2] = atan2d(DCM[0][2], DCM[1][2]);
            
            case "XYZ":
            	let x_prime, y_prime;
                
            	let DCM_0 = DCM.slice();
                out("DCM_0:");
                out(Vector$1.round(DCM_0, 3));
                x_prime = Vector$1.transpose(Vector$1.pull(DCM_0, [0, 2], [0, 0]));
                let x_prime_proj = Vector$1.project_vector_onto_plane(x_prime, [0, 0, 1]);
                euler_angles[2] = Vector$1.signed_angle(x_prime_proj, [1, 0, 0], [0, 0, 1]);
                
                let DCM_1 = Vector$1.rotate_DCM(DCM_0, [0, 0, 1], -euler_angles[2]);
                out("DCM_1:");
                out(Vector$1.round(DCM_1, 3));
                x_prime = Vector$1.transpose(Vector$1.pull(DCM_1, [0, 2], [0, 0]));
                euler_angles[1] = Vector$1.signed_angle(x_prime, [1, 0, 0], [0, 1, 0]);
                
                //debugger
                let DCM_2 = Vector$1.rotate_DCM(DCM_1, [0, 1, 0], -euler_angles[1]);
                out("DCM_2:");
                out(Vector$1.round(DCM_2, 3));
                x_prime = Vector$1.transpose(Vector$1.pull(DCM_2, [0, 2], [0, 0]));
                Vector$1.transpose(Vector$1.pull(DCM_2, [0, 2], [2, 2]));
                y_prime = Vector$1.transpose(Vector$1.pull(DCM_2, [0, 2], [1, 1]));
                euler_angles[0] = Vector$1.signed_angle(y_prime, [0, 1, 0], [1, 0, 0]);
                
            break
            
            
            default:
           		dde_error("The euler sequence of " + euler_sequence + " is not supported.</br>If you wish to have this specific sequence implimented post an Issue on the DDE Github:</br>" + dde_github_issues);
        }
        
        return euler_angles
    }

    static quaternion_to_DCM(quaternion = [1, 0, 0, 0]){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/
    	let w = quaternion[0];
        let x = quaternion[1];
        let y = quaternion[2];
        let z = quaternion[3];
        
        let DCM = Vector$1.make_matrix(3,3);
        DCM[0][0] = 1-2*y*y-2*z*z;
        DCM[1][0] = 2*x*y+2*z*w;
        DCM[2][0] = 2*x*z-2*y*w;
        DCM[0][1] = 2*x*y-2*z*w;
        DCM[1][1] = 1-2*x*x-2*z*z;
        DCM[2][1] = 2*y*z+2*x*w;
        DCM[0][2] = 2*x*z+2*y*w;
        DCM[1][2] = 2*y*z-2*x*w;
        DCM[2][2] = 1-2*x*x-2*y*y;
        return DCM
    }


    static DCM_to_quaternion(DCM = Vector$1.make_DCM()){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/
    	let trace = DCM[0][0] + DCM[1][1] + DCM[2][2];
        let S, w, x, y, z, quaternion;
        if(trace > 0){
        	S = Math.sqrt(1.0 + trace) * 2;
			w = .25 * S;
            x = (DCM[2][1] - DCM[1][2]) / S;
            y = (DCM[2][1] - DCM[1][2]) / S;
            z = (DCM[2][1] - DCM[1][2]) / S;
        }else if(DCM[0][0] > DCM[1][1] && DCM[0][0] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[0][0] - DCM[1][1] - DCM[2][2]);
            w = (DCM[2][1] - DCM[1][2]) / S;
            x = .25 * S;
            y = (DCM[0][1] + DCM[1][0]) / S;
            z = (DCM[0][2] + DCM[2][0]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[1][1] - DCM[0][0] - DCM[2][2]);
            w = (DCM[0][2] - DCM[2][0]) / S;
            x = (DCM[0][1] + DCM[1][0]) / S;
            y = .25 * S;
            z = (DCM[1][2] + DCM[2][1]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[2][2] - DCM[0][0] - DCM[1][1]);
            w = (DCM[1][0] - DCM[0][1]) / S;
            x = (DCM[0][2] + DCM[2][0]) / S;
            y = (DCM[1][2] + DCM[2][1]) / S;
            z = .25 * S;
        }
    	quaternion = [w, x, y, z];
        return quaternion
    }

    static euler_angles_to_quaternion(euler_angles = [0, 0, 0], euler_sequence = "XYZ"){
        return Vector$1.DCM_to_quaternion(Vector$1.euler_angles_to_DCM(euler_angles, euler_sequence))
    }

    static quaternion_to_euler_angles(quaternion = [1, 0, 0, 0], euler_sequence = "XYZ"){
        return Vector$1.DCM_to_euler_angles(Vector$1.quaternion_to_DCM(quaternion), euler_sequence)
    }

    static get_orientation_format(orientation){
    	let result;
        let dim = Vector$1.matrix_dimensions(orientation);
        if(dim[0] == 1 && dim[1] == 3){
            result = "euler_angles";
        }else if(dim[0] == 2 && dim[1] == 3){
            result = "euler_angles";
        }else if(dim[0] == 1 && dim[1] == 4){
            result = "quaternion";
        }else if(dim[0] == 3 && dim[1] == 3){
        	result = "DCM";
        }else {
        	dde_error("orientation is improperly formatted");
        }
        return result
    }
    
    //Euler_angles Utilities:
    static make_euler_angles(orientation = [0, 0, 0], euler_sequence = "XYZ"){
    	let format = Vector$1.get_orientation_format(orientation);
        let angles;
        switch(format){
        	case "euler_angles":
            	angles = [orientation, euler_sequence];
            break
            case "quaternion":
            	angles = Vector$1.quaternion_to_euler_angles(orientation, euler_sequence);
            break
            case "DCM":
            	angles = Vector$1.DCM_to_euler_angles(orientation, euler_sequence);
            break
        }
        return angles
    }

    static make_quaternion(orientation = [1, 0, 0, 0]){
    	let format = Vector$1.get_orientation_format(orientation);
        let quat;
        switch(format){
        	case "euler_angles":
            	quat = Vector$1.euler_angles_to_quaternion(orientation);
            break
            case "quaternion":
            	quat = orientation;
            break
            case "DCM":
            	quat = Vector$1.DCM_to_quaternion(orientation);
            break
        }
        return quat
    }
    
    //DCM Utilities:
    static make_DCM (orientation = [0, 0, 0]){
    	let type = Vector$1.get_orientation_format(orientation);
        let DCM;
        switch(type){
        	case "euler_angles":
            	DCM = Vector$1.euler_angles_to_DCM(orientation);
            break
            case "quaternion":
            	DCM = Vector$1.quaternion_to_DCM(orientation);
            break
            case "DCM":
            	DCM = orientation;
            break
        }
        return DCM
    }
    
    static get_x_vector_from_DCM(DCM = Vector$1.make_DCM()){
    	return Vector$1.transpose(Vector$1.pull(DCM, [0, 2], [0, 0]))
    }

    static get_y_vector_from_DCM(DCM = Vector$1.make_DCM()){
    	return Vector$1.transpose(Vector$1.pull(DCM, [0, 2], [1, 1]))
    }

    static get_z_vector_from_DCM(DCM = Vector$1.make_DCM()){
    	return Vector$1.transpose(Vector$1.pull(DCM, [0, 2], [2, 2]))
    }
    
    //Pose Utilities:
    static get_x_vector_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [0, 0]))
    }

    static get_y_vector_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [1, 1]))
    }

    static get_z_vector_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [2, 2]))
    }

    static get_xyz_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [3, 3]))
    }

    static get_DCM_from_pose(pose = Vector$1.make_pose()){
    	return Vector$1.transpose(Vector$1.pull(pose, [0, 2], [0, 2]))
    }
    
    /**********************************************************
    //Matrix Math
    ***********************************************************/
    /*
    Vector.make_matrix(3,"tilt")
    debugger
    Vector.make_matrix(1,0)
    */

    static make_matrix(nRows, nColumns, value = 0){
    	let result = [];
        if(nColumns === undefined){
        	if(Vector$1.matrix_dimensions(nRows)[1] == 2){
            	nColumns = nRows[1];
                nRows = nRows[0];
            }else {
        		nColumns = nRows;
            }
        }
        if(nColumns === "tilt"){
        	result = Vector$1.make_matrix(nRows);
            for(let i = 0; i < nRows; i++){
            	for(let j = 0; j < nRows; j++){
            		result[i][j] = 2*nRows-i-j-2;
            	}
            }
            return result
        }
        if(nRows < 1 || nColumns < 1){
        	dde_error("matrix dimensions must be greater than 1");
        }
        
    	for(var i = 0; i < nRows; i++){
    		result.push([]);
    		for(var j = 0; j < nColumns; j++){
    			result[i].push(value);
    		}
    	}
    	return result
	}
    //Vector.make_matrix(10, 7)
    //Vector.make_matrix(3)
    //Vector.make_matrix(3, 2, 1)
    //Vector.make_matrix([2,3])
    


	static transpose(matrix){
    	let height = matrix.length;
        let width  = matrix[0].length;
        if(width == undefined){
        	width = height;
        	height = 1;
            matrix = [matrix];
        }
        let result = Vector$1.make_matrix(width, height);
        for(var i = 0; i < width; i++){
        	for(var j = 0; j < height; j++){
        		result[i][j] = matrix[j][i];
        	}
        }
        if(result.length == 1){
        	return result[0]
        }else {
        	return result
        }
    }
    /*
    var v = [1, 2, 3]
    v = Vector.transpose(v)
    var v2 = Vector.transpose(v)
    */
    
    static matrix_multiply(...args){
    	if (args === undefined){
        	dde_error("the function 'Vector.matrix_multiply' has undefined inputs");
        }
        let temp_args = Convert.deep_copy(args);
        let matrix_A = temp_args[0];
        for(let i = 1; i < temp_args.length; i++){
            let matrix_B = temp_args[i];
            matrix_A = multiply_two_matrices(matrix_A, matrix_B);
    	}
        return matrix_A
    }
    
    static matrix_divide(...args){
    	if (args === undefined){
        	dde_error("the function 'Vector.matrix_multiply' has undefined inputs");
        }
        let temp_args = Convert.deep_copy(args);
        let matrix_A = temp_args[0];
        for(var i = 1; i < temp_args.length; i++){
            let matrix_B = temp_args[i];
            matrix_A = divide_two_matrices(matrix_A, matrix_B);
    	}
        return matrix_A
    }
    
    
    static determinant(matrix){
    	let result;
    	let dim = Vector$1.matrix_dimensions(matrix);
        if (dim[0] == 2 && dim[1] == 2){
        	result = matrix[0][0]*matrix[1][1] - matrix[0][1]*matrix[1][0];
        }else if(dim[0] == 3 && dim[1] == 3){
        	//Source: https://en.wikipedia.org/wiki/Determinant#n_.C3.97_n_matrices
        	let a, b, c, d, e, f, g, h, i;
            a = matrix[0][0];
            b = matrix[0][1];
            c = matrix[0][2];
            d = matrix[1][0];
            e = matrix[1][1];
            f = matrix[1][2];
            g = matrix[2][0];
            h = matrix[2][1];
            i = matrix[2][2];
        	result = a*(e*i-f*h)-b*(d*i-f*g)+c*(d*h-e*g);
        }else if(dim[0] == 4 && dim[1] == 4){
        	// Source: http://www.cg.info.hiroshima-cu.ac.jp/~miyazaki/knowledge/teche23.html
            let a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44;
            a11 = matrix[0][0];
            a12 = matrix[0][1];
            a13 = matrix[0][2];
            a14 = matrix[0][3];
            a21 = matrix[1][0];
            a22 = matrix[1][1];
            a23 = matrix[1][2];
            a24 = matrix[1][3];
            a31 = matrix[2][0];
            a32 = matrix[2][1];
            a33 = matrix[2][2];
            a34 = matrix[2][3];
            a41 = matrix[3][0];
            a42 = matrix[3][1];
            a43 = matrix[3][2];
            a44 = matrix[3][3];
            
            result = a11*a22*a33*a44 + a11*a23*a34*a42 + a11*a24*a32*a43
            		+a12*a21*a34*a43 + a12*a23*a31*a44 + a12*a24*a33*a41
                    +a13*a21*a32*a44 + a13*a22*a34*a41 + a13*a24*a31*a42
                    +a14*a21*a33*a42 + a14*a22*a31*a43 + a14*a23*a32*a41
                    -a11*a22*a34*a43 - a11*a23*a32*a44 - a11*a24*a33*a42
                    -a12*a21*a33*a44 - a12*a23*a34*a41 - a12*a24*a31*a43
                    -a13*a21*a34*a42 - a13*a22*a31*a44 - a13*a24*a32*a41
                    -a14*a21*a32*a43 - a14*a22*a33*a41 - a14*a23*a31*a42;
        }else {
        	dde_error("determinants of matricies with these dimensions are not supported yet");
        }
        return result
    }
    /*
    var my_matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    Vector.determinant(my_matrix)
    
    var mat = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    var det = Vector.determinant(mat)
    
    var mat = [[3, 2, 1.7, 1.5],[4.5, 5, 4.1, 1.9], [1.1, 8.5, 9, 8], [3, 9, 9, 10]]
    var det = Vector.determinant(mat)
    */
    
    /////////////////////////////////////////////////////////////////////////////////////

    
    static inverse(matrix){
    	let result;
    	let dim = Vector$1.matrix_dimensions(matrix);
        if (dim[0] == 2 && dim[1] == 2){
        	result = [[matrix[1][1], -matrix[1][0]], [-matrix[0][1], matrix[0][0]]];
            result = Vector$1.multiply(1/Vector$1.determinant(matrix), result);
        }else if(dim[0] == 3 && dim[1] == 3){
        	//Source: University of Massachusetts Lowell - MECH 5960 Mechanics of Composite Materials
        	let a, b, c, d, e, f, g, h, i, A, B, C, D, E, F, G, H, I;
            a = matrix[0][0];
            b = matrix[0][1];
            c = matrix[0][2];
            d = matrix[1][0];
            e = matrix[1][1];
            f = matrix[1][2];
            g = matrix[2][0];
            h = matrix[2][1];
            i = matrix[2][2];
            
            A =  Vector$1.determinant([[e, f], [h, i]]);
            B = -Vector$1.determinant([[d, f], [g, i]]);
            C =  Vector$1.determinant([[d, e], [g, h]]);
            D = -Vector$1.determinant([[b, c], [h, i]]);
            E =  Vector$1.determinant([[a, c], [g, i]]);
            F = -Vector$1.determinant([[a, b], [g, h]]);
            G =  Vector$1.determinant([[b, c], [e, f]]);
            H = -Vector$1.determinant([[a, c], [d, f]]);
            I =  Vector$1.determinant([[a, b], [d, e]]);
            
            result = [[A, B, C], [D, E, F], [G, H, I]];
            result = Vector$1.multiply(1/Vector$1.determinant(matrix), result);
        }else if(dim[0] == 4 && dim[1] == 4){
        	// Source: http://www.cg.info.hiroshima-cu.ac.jp/~miyazaki/knowledge/teche23.html
            let a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44;
            let b11, b12, b13, b14, b21, b22, b23, b24, b31, b32, b33, b34, b41, b42, b43, b44;
            a11 = matrix[0][0];
            a12 = matrix[0][1];
            a13 = matrix[0][2];
            a14 = matrix[0][3];
            a21 = matrix[1][0];
            a22 = matrix[1][1];
            a23 = matrix[1][2];
            a24 = matrix[1][3];
            a31 = matrix[2][0];
            a32 = matrix[2][1];
            a33 = matrix[2][2];
            a34 = matrix[2][3];
            a41 = matrix[3][0];
            a42 = matrix[3][1];
            a43 = matrix[3][2];
            a44 = matrix[3][3];
        	
            b11 = a22*a33*a44 + a23*a34*a42 + a24*a32*a43 - a22*a34*a43 - a23*a32*a44 - a24*a33*a42;
            b12 = a12*a34*a43 + a13*a32*a44 + a14*a33*a42 - a12*a33*a44 - a13*a34*a42 - a14*a32*a43;
            b13 = a12*a23*a44 + a13*a24*a42 + a14*a22*a43 - a12*a24*a43 - a13*a22*a44 - a14*a23*a42;
            b14 = a12*a24*a33 + a13*a22*a34 + a14*a23*a32 - a12*a23*a34 - a13*a24*a32 - a14*a22*a33;
            
            b21 = a21*a34*a43 + a23*a31*a44 + a24*a33*a41 - a21*a33*a44 - a23*a34*a41 - a24*a31*a43;
            b22 = a11*a33*a44 + a13*a34*a41 + a14*a31*a43 - a11*a34*a43 - a13*a31*a44 - a14*a33*a41;
            b23 = a11*a24*a43 + a13*a21*a44 + a14*a23*a41 - a11*a23*a44 - a13*a24*a41 - a14*a21*a43;
            b24 = a11*a23*a34 + a13*a24*a31 + a14*a21*a33 - a11*a24*a33 - a13*a21*a34 - a14*a23*a31;
            
            b31 = a21*a32*a44 + a22*a34*a41 + a24*a31*a42 - a21*a34*a42 - a22*a31*a44 - a24*a32*a41;
            b32 = a11*a34*a42 + a12*a31*a44 + a14*a32*a41 - a11*a32*a44 - a12*a34*a41 - a14*a31*a42;
            b33 = a11*a22*a44 + a12*a24*a41 + a14*a21*a42 - a11*a24*a42 - a12*a21*a44 - a14*a22*a41;
            b34 = a11*a24*a32 + a12*a21*a34 + a14*a22*a31 - a11*a22*a34 - a12*a24*a31 - a14*a21*a32;
            
            b41 = a21*a33*a42 + a22*a31*a43 + a23*a32*a41 - a21*a32*a43 - a22*a33*a41 - a23*a31*a42;
            b42 = a11*a32*a43 + a12*a33*a41 + a13*a31*a42 - a11*a33*a42 - a12*a31*a43 - a13*a32*a41;
            b43 = a11*a23*a42 + a12*a21*a43 + a13*a22*a41 - a11*a22*a43 - a12*a23*a41 - a13*a21*a42;
            b44 = a11*a22*a33 + a12*a23*a31 + a13*a21*a32 - a11*a23*a32 - a12*a21*a33 - a13*a22*a31;
            
            result = [[b11, b12, b13, b14], [b21, b22, b23, b24], [b31, b32, b33, b34], [b41, b42, b43, b44]];
            result = Vector$1.multiply(1/Vector$1.determinant(matrix),result);
        }else {
        	result = matrix_invert(matrix);
        }
        return result
   }
   
   /*
   var mat = Vector.identity_matrix(3)
   var mat = [[3, 2, 1.7, 1.5],[4.5, 5, 4.1, 1.9], [1.1, 8.5, 9, 8], [3, 9, 9, 10]]
   var det = Vector.determinant(mat)
   var imat = Vector.inverse(mat)
   
   var my_DCM = 
   
   var det = Vector.determinant(imat)
   var mat2 = Vector.inverse(imat)
   */
    
    /*
    var mat = []
    Vector.matrix_dimensions(mat)
    debugger
    Vector.matrix_dimensions(3)
    */
    
    static matrix_dimensions(matrix){
        let width;
        let height;
        if(matrix != null) {
            height = matrix.length;
        }
        if(height == undefined){
        	return [1, 0]
        }
        if(height == 0){
        	width = 0;
        	height = 0;
            return [height, width]
        }
        let mat0 = matrix[0];
        if(mat0 != null) {
        	width  = mat0.length;
		}
		if(width == undefined){
			width = height;
			height = 1;
		}
        return [height, width]
    }
    //Vector.matrix_dimensions([10, 20, 30])
    //Vector.matrix_dimensions([[10], [20], [30]])
    
    static properly_define_point(points){
    	//a proper point takes the following form: [[x], [y], [z], [1]]
        //for points: [[x1, x2, ..., xn], [y1, y2, ..., yn], [z1, z2, ..., zm=n] [1, 1, ..., 1]]
    	let dim = Vector$1.matrix_dimensions(points);
        let proper_points = Convert.deep_copy(points);
        if(dim[0] == 1){
        	proper_points = Vector$1.transpose(proper_points);
            proper_points.push([1]);
            return proper_points
        }else {
        	if(dim[1] == 3){
            	for(var i = 0; i < dim[0]; i++){
                	proper_points[i].push(1);
                }
                proper_points = Vector$1.transpose(proper_points);
            	return proper_points
            }else {
            	if(dim[0] == 3){
                	//let ones = Vector.add(Vector.make_matrix(1, dim[0])[0], 1)
                    proper_points.push([1]);
                    return proper_points
                }
            }
        }
    }
    /*
    Vector.properly_define_point([10, 20, 30])
    Vector.properly_define_point([[10], [20], [30]])
    debugger
    Vector.properly_define_point([[10, 20, 30], [10, 20, 30], [10, 20, 30]])
    */
	
    static properly_define_vector(vectors){
    	//a proper point takes the following form: [[x], [y], [z], [1]]
        //for points: [[x1, x2, ..., xn], [y1, y2, ..., yn], [z1, z2, ..., zm=n] [1, 1, ..., 1]]
    	let dim = Vector$1.matrix_dimensions(vectors);
        let proper_vectors = Convert.deep_copy(vectors);
        if(dim[0] == 1){
        	proper_vectors = Vector$1.transpose(proper_vectors);
            if(dim[1] == 3){
            	proper_vectors.push([0]);
            }
            return proper_vectors
        }else {
        	if(dim[1] == 3){
            	for(var i = 0; i < dim[0]; i++){
                	proper_vectors[i].push(0);
                }
                proper_vectors = Vector$1.transpose(proper_vectors);
            	return proper_vectors
            }else {
            	if(dim[0] == 3){
                	//let ones = Vector.add(Vector.make_matrix(1, dim[0])[0], 1)
                    proper_vectors.push([0]);
                    return proper_vectors
                }
            }
        }
    }
    
    static make_dcm(x_vector, y_vector, z_vector){
    	warning("This function is being depricated.</br>Please replace with Vector.make_dcm_from_3_vectors, Vector.euler_angles_to_DCM, or Vector.quaternion_to_DCM");
        let dcm = Vector$1.identity_matrix(3);
        
        if(x_vector == undefined && y_vector == undefined && z_vector == undefined){
        	return dcm
        }else if(x_vector == undefined && y_vector != undefined && z_vector != undefined){
        	x_vector = Vector$1.cross(y_vector, z_vector);
        }else if(x_vector != undefined && y_vector == undefined && z_vector != undefined){
        	y_vector = Vector$1.cross(z_vector, x_vector);
        }else if(x_vector != undefined && y_vector != undefined && z_vector == undefined){
        	z_vector = Vector$1.cross(x_vector, y_vector);
        }
        
        x_vector = Vector$1.normalize(x_vector);
        y_vector = Vector$1.normalize(y_vector);
        z_vector = Vector$1.normalize(z_vector);
        
        dcm = Vector$1.insert(dcm, Vector$1.transpose(x_vector), [0, 0]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(y_vector), [0, 1]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(z_vector), [0, 2]);
        
        return dcm
    }
    
    
    static make_DCM_from_3_vectors(x_vector, y_vector, z_vector){
        let dcm = Vector$1.identity_matrix(3);
        
        if(x_vector == undefined && y_vector == undefined && z_vector == undefined){
        	return dcm
        }else if(x_vector == undefined && y_vector != undefined && z_vector != undefined){
        	x_vector = Vector$1.cross(y_vector, z_vector);
        }else if(x_vector != undefined && y_vector == undefined && z_vector != undefined){
        	y_vector = Vector$1.cross(z_vector, x_vector);
        }else if(x_vector != undefined && y_vector != undefined && z_vector == undefined){
        	z_vector = Vector$1.cross(x_vector, y_vector);
        }
        
        x_vector = Vector$1.normalize(x_vector);
        y_vector = Vector$1.normalize(y_vector);
        z_vector = Vector$1.normalize(z_vector);
        
        dcm = Vector$1.insert(dcm, Vector$1.transpose(x_vector), [0, 0]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(y_vector), [0, 1]);
        dcm = Vector$1.insert(dcm, Vector$1.transpose(z_vector), [0, 2]);
        
        return dcm
    }

    /* obsolete because it uses Convert.
	static make_pose(position = [0, 0, 0], orientation = [0, 0, 0], scale_factor = 1, sequence = "ZYX"){
		let dim = Vector.matrix_dimensions(orientation)
        let DCM
        let s = scale_factor
        if(dim[0] == 1 && dim[1] == 3){
        	//Euler Angle
            DCM = Convert.angles_to_DCM(orientation, sequence)
        }else if(dim[0] == 1 && dim[1] == 4){
            //Quaternion
            DCM = Convert.quat_to_DCM(orientation)
        }else if(dim[0] == 3 && dim[1] == 3){
        	//DCM
            DCM = orientation
        }else{
        	dde_error("orientation is improperly formatted")
        }
        
        //Please tell me there's a better way to do this:
        let pose = [[s*DCM[0][0], s*DCM[0][1], s*DCM[0][2], position[0]],
        			[s*DCM[1][0], s*DCM[1][1], s*DCM[1][2], position[1]],
                    [s*DCM[2][0], s*DCM[2][1], s*DCM[2][2], position[2]],
                    [0, 0, 0, 1]]
        return pose
	}*/

    static make_pose(position = [0, 0, 0], orientation = [0, 0, 0], scale_factor = 1, sequence = "ZYX"){
        let dim = Vector$1.matrix_dimensions(orientation);
        let DCM;
        let s = scale_factor;
        if(dim[0] == 1 && dim[1] == 3){
            //Euler Angle
            DCM = Vector$1.euler_angles_to_DCM(orientation, sequence);
        }else if(dim[0] == 1 && dim[1] == 4){
            //Quaternion
            DCM = Vector$1.quaternion_to_DCM(orientation);
        }else if(dim[0] == 3 && dim[1] == 3){
            //DCM
            DCM = orientation;
        }else {
            dde_error("orientation is improperly formatted");
        }

        //Please tell me there's a better way to do this:
        let pose = [[s*DCM[0][0], s*DCM[0][1], s*DCM[0][2], position[0]],
            [s*DCM[1][0], s*DCM[1][1], s*DCM[1][2], position[1]],
            [s*DCM[2][0], s*DCM[2][1], s*DCM[2][2], position[2]],
            [0, 0, 0, 1]];
        return pose
    }

    
    static identity_matrix(size){
    	let result = Vector$1.make_matrix(size, size);
        for(var i = 0; i < size; i++){
        	result[i][i] = 1;
        }
        return result
    }
    //var im = Vector.identity_matrix(4)
    //var det = Vector.determinant(im)
    
    static rotate_DCM(DCM = [[1, 0, 0],[0, 1, 0],[0, 0, 1]], axis_of_rotation, angle){
    	let trans_matrix = Vector$1.identity_matrix(3);
        let x_vector, y_vector, z_vector;
    	switch(axis_of_rotation){
        	case "X":
            	trans_matrix[1][1] = cosd(angle);
                trans_matrix[2][2] = cosd(angle);
                trans_matrix[2][1] = sind(angle);
                trans_matrix[1][2] = -sind(angle);
                break
            case "Y":
            	trans_matrix[0][0] = cosd(angle);
                trans_matrix[2][2] = cosd(angle);
                trans_matrix[0][2] = sind(angle);
                trans_matrix[2][0] = -sind(angle);
            	break
            case "Z":
            	trans_matrix[0][0] = cosd(angle);
                trans_matrix[1][1] = cosd(angle);
                trans_matrix[1][0] = sind(angle);
                trans_matrix[0][1] = -sind(angle);
            	break
            case "X'":
            	x_vector = [DCM[0][0], DCM[1][0], DCM[2][0]];
            	DCM = Vector$1.rotate_DCM(DCM, x_vector, angle);
            	break
           	case "Y'":
            	y_vector = [DCM[0][1], DCM[1][1], DCM[2][1]];
            	DCM = Vector$1.rotate_DCM(DCM, y_vector, angle);
            	break
            case "Z'":
            	z_vector = [DCM[0][2], DCM[1][2], DCM[2][2]];
            	DCM = Vector$1.rotate_DCM(DCM, z_vector, angle);
            	break
            default:
            	x_vector = [DCM[0][0], DCM[1][0], DCM[2][0]];
                y_vector = [DCM[0][1], DCM[1][1], DCM[2][1]];
                z_vector = [DCM[0][2], DCM[1][2], DCM[2][2]];
                x_vector = Vector$1.rotate(x_vector, axis_of_rotation, angle);
                y_vector = Vector$1.rotate(y_vector, axis_of_rotation, angle);
                z_vector = Vector$1.rotate(z_vector, axis_of_rotation, angle);
                DCM = Vector$1.transpose([x_vector, y_vector, z_vector]);
                return DCM
        }
        return Vector$1.matrix_multiply(DCM, trans_matrix)
    }
    /*
    var mat = Vector.rotate_DCM(Vector.identity_matrix(3), [1, 0, 0], Convert.degrees_to_arcseconds(90))
    var det = Vector.determinant(mat)
    */
    static rotate_pose(pose, axis_of_rotation, angle, point_of_rotation = [0, 0, 0]){
    	if(Vector$1.is_pose(pose) == false){
        	dde_error("pose is not properly formatted");
        }
    	let DCM = Vector$1.pull(pose, [0, 2], [0, 2]);
        DCM = Vector$1.rotate_DCM(DCM, axis_of_rotation, angle);
        let axis;
        switch(axis_of_rotation){
        	case "X":
            	axis = [1, 0, 0];
                break
            case "Y":
            	axis = [0, 1, 0];
            	break
            case "Z":
            	axis = [0, 0, 1];
            	break
            case "X'":
            	axis = [DCM[0][0], DCM[1][0], DCM[2][0]];
            	break
           	case "Y'":
            	axis = [DCM[0][1], DCM[1][1], DCM[2][1]];
            	break
            case "Z'":
            	axis = [DCM[0][2], DCM[1][2], DCM[2][2]];
            	break
            default:
            	axis = axis_of_rotation;
            }
        let position = Vector$1.transpose(Vector$1.pull(pose, [0, 2], 3));
        position = Vector$1.rotate(position, axis, angle, point_of_rotation);
        return Vector$1.make_pose(position, DCM)
    }

	/*
	static quaternion_interpolation(quaternion){
    	THREE.QuaternionLinearInterpolant()
        THREE.Quaternion
    }
    */

    static is_pose(pose){
    	let dim = Vector$1.matrix_dimensions(pose);
        if (!(dim[0] == 4 && dim[1] == 4)){
        	return false
        }
        
        let short, short_mag;
        short = [pose[0][0], pose[1][0], pose[2][0]];
        short_mag = Vector$1.magnitude(short);
        if (Vector$1.round(short_mag, 10) != 1){
        	return false
        }
        short = [pose[0][1], pose[1][1], pose[2][1]];
        short_mag = Vector$1.magnitude(short);
        if (Vector$1.round(short_mag, 10) != 1){
        	return false
        }
        short = [pose[0][2], pose[1][2], pose[2][2]];
        short_mag = Vector$1.magnitude(short);
        if (Vector$1.round(short_mag, 10) != 1){
        	return false
        }
        
        let DCM = Vector$1.pull(pose, [0, 2], [0, 2]);
        if (!Vector$1.is_equal(Vector$1.determinant(DCM), 1, 10)){
        	return false
        }
        
        if (pose[3][3] != 1){
        	return false
        }
        
        if (!((pose[3][0] == 0) && (pose[3][1] == 0) && (pose[3][2] == 0))){
        	return false
        }
        
        return true
    }
    /*
    var my_pose = Vector.make_pose()
    var state = Vector.is_pose(my_pose)
    
    var my_pose = Vector.make_pose([10, 20, 30], [Convert.degrees_to_arcseconds(45), 0, 0], "ZX'Z'")
    var state = Vector.is_pose(my_pose)
    */
    
    
    /*
    static place(matrix, row, column){
    	let dim = Vector.matrix_dimensions(matrix)
        let row_lower, row_upper, col_lower, col_upper
        if (Vector.size(row) == 1){
        	row_lower = row
            row_upper = row
        }else if (Vector.size(row) == 2){
        	row_lower = row[0]
            row_upper = row[1]
        }else{
        	dde_error("row has invalid dimensions")
        }
        if (Vector.size(column) == 1){
        	col_lower = column
            col_upper = column
        }else if (Vector.size(column) == 2){
        	col_lower = column[0]
            col_upper = column[1]
        }else{
        	dde_error("column has invalid dimensions")
        }
        if ((row_lower < 0) || (row_upper > dim[0]) || (col_lower < 0) || (col_upper > dim[1])){
        	dde_error("indeces exceed matrix dimensions")
        }
        
        let result = Vector.make_matrix(row_upper-row_lower+1, col_upper-col_lower+1)
        for(var i = row_lower; i < row_upper+1; i++){
        	for(var j = col_lower; j < col_upper+1; j++){
        		result[i-row_lower][j-col_lower] = matrix[i][j]
        	}
        }
        return result
    }
    */
    
    
    static pull(matrix, row, column){
    	let dim = Vector$1.matrix_dimensions(matrix);
        if(dim[0] == 1){
        	matrix = [matrix];
        }
        let row_lower, row_upper, col_lower, col_upper;
        if (Vector$1.size(row) == 1){
        	row_lower = row;
            row_upper = row;
        }else if (Vector$1.size(row) == 2){
        	row_lower = row[0];
            row_upper = row[1];
        }else {
        	dde_error("row has invalid dimensions");
        }
        if (Vector$1.size(column) == 1){
        	col_lower = column;
            col_upper = column;
        }else if (Vector$1.size(column) == 2){
        	col_lower = column[0];
            col_upper = column[1];
        }else {
        	dde_error("column has invalid dimensions");
        }
        if ((row_lower < 0) || (row_upper > dim[0]) || (col_lower < 0) || (col_upper > dim[1])){
        	dde_error("indeces exceed matrix dimensions");
        }
        
        let result = Vector$1.make_matrix(row_upper-row_lower+1, col_upper-col_lower+1);
        for(var i = row_lower; i < row_upper+1; i++){
        	for(var j = col_lower; j < col_upper+1; j++){
        		result[i-row_lower][j-col_lower] = matrix[i][j];
        	}
        }
        if(Vector$1.matrix_dimensions(result)[0] == 1){
        	return result[0]
        }
        return result
    }
    //Vector.pull([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2], [1, 2])
    
    
    static insert(big_matrix, small_matrix, location = [0, 0]){
    	let big_dim = Vector$1.matrix_dimensions(big_matrix);
        let small_dim = Vector$1.matrix_dimensions(small_matrix);
        let result = big_matrix;
        let small_i, small_j;
        
        for(let i = location[0]; (i < location[0]+small_dim[0]) && (i < big_dim[0]); i++){
        	for(let j = location[1]; (j < location[1]+small_dim[1]) && (j < big_dim[1]); j++){
        		small_i = i-location[0];
                small_j = j-location[1];
                result[i][j] = small_matrix[small_i][small_j];
        	}
        }
        return result
    }
    /*
    var my_big = Vector.make_matrix(10)
    var my_small = Vector.make_matrix(3, 2, 6)
    debugger
    var result = Vector.insert(my_big, my_small, [3, 4])
    */
    
    static concatinate(direction = 0, matrix_1, matrix_2, ...args){

        let result, dim_1, dim_2;
        if(matrix_1.length == 0){
        	return matrix_2
        }
        if(matrix_2.length == 0){
        	return matrix_1
        }
        
    	switch(direction){
        	//Vertical concatination
            case 0:
            dim_1 = Vector$1.matrix_dimensions(matrix_1);
            dim_2 = Vector$1.matrix_dimensions(matrix_2);
            if(dim_1[1] != dim_2[1]){
            	dde_error("Vector.concatinate, matrix widths must match");
            }
            if(dim_1[0] == 1){
            	result = [matrix_1];
            }else {
            	result = matrix_1;
            }
            if(dim_2[0] == 1){
            	for(let i = 0; i < dim_2[0]; i++){
            		result.push(matrix_2);
            	}
            }else {
            	for(let i = 0; i < dim_2[0]; i++){
            		result.push(matrix_2[i]);
            	}
            }
            break
            
            //Horizontal concatination
            case 1:
            dim_1 = Vector$1.matrix_dimensions(matrix_1);
            dim_2 = Vector$1.matrix_dimensions(matrix_2);
            if(dim_1[0] != dim_2[0]){
            	dde_error("Vector.concatinate: matrix heights must match");
            }
            if(dim_1[0] == 1){
            	result = Vector$1.make_matrix(dim_1[0], dim_1[1]+dim_2[1])[0];
                for(let j = 0; j < dim_1[1]; j++){
                	result[j] = matrix_1[j];
                }
                for(let j = 0; j < dim_2[1]; j++){
                	result[j+dim_1[1]] = matrix_2[j];
                }
            }else {
            	result = Vector$1.make_matrix(dim_1[0], dim_1[1]+dim_2[1]);
                for(let i = 0; i < dim_1[0]; i++){
            		for(let j = 0; j < dim_1[1]; j++){
                		result[i][j] = matrix_1[i][j];
                	}
                	for(let j = 0; j < dim_2[1]; j++){
                		result[i][j+dim_1[1]] = matrix_2[i][j];
                	}
            	}
           	}
            
            break
            default:
            dde_error("In Vector.concatinate, direction must 0 or 1");
        }
        
        let n_matrices = args.length + 2;
        if(n_matrices > 2){
        	for(let i = 0; i < n_matrices-2; i++){
            	result = Vector$1.concatinate(direction, result, args[i]);
            }
        }
        
        return result
    }
    /*
    var matrix_1 = [1, 2, 3]
    var matrix_2 = [4, 5, 6]
    //debugger
    var ans = Vector.concatinate(0, matrix_1, matrix_2)
	Vector.concatinate(0, [1, 2, 3], [4, 5, 6])  
    Vector.concatinate(1, [1, 2, 3], [4, 5, 6])
    Vector.concatinate(1, [[1, 1], [2, 2], [3, 2]], [[4], [5], [6]])

    var matrix_1 = [1, 2, 3]
    var matrix_2 = [4, 5, 6]
    debugger
    var ans = Vector.concatinate(1, matrix_1, matrix_2)
    
    var matrix_1 = [[1, 1], [2, 2], [3, 2]]
    var matrix_2 = [[4], [5], [6]]
    //debugger
    var ans = Vector.concatinate(1, matrix_1, matrix_2)
    */
    
    static data_to_file(...args){
    //debugger
    
    	let temp_args = Convert.deep_copy(args);
        let file_name, elt, file_string, data_array, table_titles;
        let data = [];
        for(let i = 0; i < temp_args.length; i++){
        	elt = temp_args[i];
            if($.type(elt) === "string"){
            	//if contains 
            	if (elt.indexOf(" ") > -1){
                	table_titles = elt;
                }else if(file_name == undefined){
                	file_name = elt;
                }else {
                	dde_error("Vector.data_to_file can only take in one string");
                }
            }else {
            	data.push(elt);
            }
        }
        if(file_name == undefined){
        	dde_error("Vector.data_to_file needs a filename input arg");
        }
        
        let dim = Vector$1.matrix_dimensions(data[0]);
        dim[1];
        data_array = [];
        for(var i = 0; i < data.length; i++){
        	elt = data[i];
            dim = Vector$1.matrix_dimensions(elt);
            if(dim[0] == 1){
            	elt = Vector$1.transpose(elt);
            }
            data_array = Vector$1.concatinate(1, data_array, elt);
        }
        
        dim = Vector$1.matrix_dimensions(data_array);
        if(table_titles == undefined){
        	file_string = "";
        }else {
        	file_string = table_titles + "\r\n";
        }
        for(let i = 0; i < dim[0]; i++){
        	file_string += data_array[i][0];
        	for(let j = 1; j < dim[1]; j++){
        		file_string += " " + data_array[i][j];
            }
            file_string += "\r\n";
        }
        write_file(file_name, file_string);
        return file_string
    }
    /*
    var data_1 = [1, 2, 3, 4]
    var data_2 = [100, 200, 300, 400]
    var filename = "2017/Main_Work_Version_Control/_Test_Files/torque_data.txt"
    var table_titles = "x y"
    //debugger
    var sol = Vector.data_to_file(table_titles, filename, Vector.transpose(data_1), Vector.transpose(data_2))
    
    //write_file("2017/Main_Work_Version_Control/_Test_Files/torque_data.txt", "lol")
    
    var my_string = "hello"
    _.isString(my_string)
    $.type(my_string) === "string"
    
    */
    /*
    var x_data = [361.1, 433.95, 474.3, 534.61, 966.06]
	var y_data = [0, 63500.24892, 158750.6223, 317501.2446, 1587506.223]
	
	var solution = Vector.poly_fit(x_data, y_data, 1)
    //debugger
	var solution = Vector.poly_fit(x_data, y_data, 4)
*/
    
    static poly_fit(x_data, y_data, order = 1){
		let dim_x = Vector$1.matrix_dimensions(x_data);
    	let dim_y = Vector$1.matrix_dimensions(y_data);
    	if((dim_x[0]!=1) || (dim_y[0]!=1) || (dim_x[1]!=dim_y[1])){
    		dde_error(" Input data has incorrect dimensions for function Vector.poly_fit()");
    	}
        
		let sol = Vector$1.make_matrix(1, order)[0];
    	let A, B, B1=0, B2=0, A11=0, A12=0, A21=0, A22=0, xi, yi;
    	switch(order){
    		case 0:
        		sol = [Vector$1.average(y_data)];
        		break
        	case 1:
        		for(let i = 0; i < dim_x[1]; i++){
            		xi = x_data[i];
                	yi = y_data[i];
                
            		B1  += 2*xi*yi;
                	B2  += 2*yi;
                	A11 += 2*xi*xi;
                	A12 += 2*xi;
                	A21 += 2*xi;
                	A22 += 2;
            	}
            	A = [[A11, A12], [A21, A22]];
            	B = [[B1], [B2]];
            	sol = Vector$1.matrix_multiply(Vector$1.inverse(A), B);
        		break
        	default:
            	let size = order+1;
                A = Vector$1.make_matrix(size);
                B = Vector$1.make_matrix(size,1);
                let powers = Vector$1.make_matrix(size, "tilt");
                for(let i = 0; i < dim_x[1]; i++){
            		xi = x_data[i];
                	yi = y_data[i];
                	for(let i = 0; i < size; i++){
                    	for(let j = 0; j < size; j++){
            				A[i][j] += 2*Math.pow(xi, powers[i][j]);
                        }
                        B[i][0] += 2*Math.pow(xi, size-i-1)*yi;
                    }
            	}
                sol = Vector$1.matrix_multiply(Vector$1.inverse(A), B);
    	}
    	return sol
	}
    /*
    var data_x = [2,1.80901699437495,1.30901699437495,0.690983005625053,0.190983005625053,0,0.190983005625053,0.690983005625053,1.30901699437495,1.80901699437495,2]
    var data_y = [0,0.293892626146237,0.475528258147577,0.475528258147577,0.293892626146237,0,-0.293892626146237,-0.475528258147577,-0.475528258147577,-0.293892626146237,0]
    debugger
                  0  1  2  3  4  5
    var data_x = [0, 1, 2, 3, 2, 1]
    var data_y = [0, 1.5, 2.5, 3, 1.5, 0.5]
  
    var e = Vector.ellipse_fit(data_x, data_y)
    */
    
    static ellipse_fit(x, y){
		//Code adapted from Nikolai Chernov
    	//https://www.mathworks.com/matlabcentral/fileexchange/22684-ellipse-fit-direct-method
    	if(x.length < 5 || y.length < 5){
        	dde_error("A minumum of 5 datapoints are required to fit an ellipse.<br>Only " + x.length + " were supplied to Vector.ellipse_fit().");
        }
        
    	let results = {};
    	let x_dim = Vector$1.matrix_dimensions(x);
    	let y_dim = Vector$1.matrix_dimensions(y);
        if(1 == x_dim[0]){
        	x = Vector$1.transpose(x);
        }
        if(1 == y_dim[0]){
        	y = Vector$1.transpose(y);
        }
    
    	let n_points = Math.max(x_dim[0], x_dim[1]);
    
    	let orientation_tolerance = 1e-3;

    	let sum_x = 0;
        let sum_y = 0;
        for(let i = 0; i < n_points; i++){
        	sum_x += x[i][0];
            sum_y += y[i][0];
        }
        let mean_x = sum_x / n_points;
        let mean_y = sum_y / n_points;
        
		x = Vector$1.subtract(x, mean_x);
		y = Vector$1.subtract(y, mean_y);

		//X = [x.^2, x.*y, y.^2, x, y ]; //look how elegant this is in MATLAB
    	//solution = sum(X)/(X'*X);      //it's two lines!
    	
        let X_prime = Vector$1.concatinate(0, Vector$1.pow(x, 2), Vector$1.multiply(x, y), Vector$1.pow(y, 2), x, y);
		let X = Vector$1.transpose(X_prime);
        let row_sum = [0, 0, 0, 0, 0];
    	for(let i = 0; i < n_points; i++){
    		row_sum = Vector$1.add(row_sum, X[i]);
    	}
        
    	let coeffs = Vector$1.matrix_multiply(row_sum, Vector$1.inverse(Vector$1.matrix_multiply(X_prime, X)))[0];
		results.coeffs = coeffs;
        let a = coeffs[0];
        let b = coeffs[1];
        let c = coeffs[2];
        let d = coeffs[3];
        let e = coeffs[4];
        coeffs[5];
        
        //debugger
        
        let cos_phi, sin_phi;
        let orientation_rad;
        if(Math.min(Math.abs(b/a), Math.abs(b/c)) > orientation_tolerance ){
    		orientation_rad = 1/2 * Math.atan(b/(c-a));
    		cos_phi = Math.cos( orientation_rad );
    		sin_phi = Math.sin( orientation_rad );
        	a = a*cos_phi*cos_phi - b*cos_phi*sin_phi + c*sin_phi*sin_phi;
        	b = 0;
        	c = a*sin_phi*sin_phi + b*cos_phi*sin_phi + c*cos_phi*cos_phi;
        	d = d*cos_phi - e*sin_phi;
        	e = d*sin_phi + e*cos_phi;
        	mean_x = cos_phi*mean_x - sin_phi*mean_y;
        	mean_y = sin_phi*mean_x + cos_phi*mean_y;
		}else {
    		orientation_rad = 0;
    		cos_phi = Math.cos( orientation_rad );
    		sin_phi = Math.sin( orientation_rad );
		}
		
        
        let test = a*c;
        /*
        switch(test){
        	case (test > 0):
            	results.shape = "Ellipse"	
            break
            case (test == 0):
            	results.shape = "Paraboloa"	
            break
            case (test < 0):
            	results.shape = "Hyperbola"
            break
        }
        */
        if(test > 0){
        	results.shape = "Ellipse";	
        }else if(test == 0){
        	results.shape = "Paraboloa";	
        }else if(test < 0){
        	results.shape = "Hyperbola";
        }else {
        	out("x_data:", "red");
            out(x_data, "red");
            out("y_data:", "red");
            out(y_data, "red");
        	dde_error("Vector.ellipse_fit() received bad data. ^ Data printed above ^");
        }
        
        


		if (test>0){
    		if(a<0){
    			a = -a;
        		c = -c;
        		d = -d;
        		e = -e;
            }
    	}

    	let x_center = mean_x - d/2/a;
    	let y_center = mean_y - e/2/c;
    	let F = 1 + Math.pow(d, 2)/(4*a) + Math.pow(e, 2)/(4*c);
    	let radius_a = Math.sqrt( F/a );
    	let radius_b = Math.sqrt( F/c );
    	results.major_radius = Math.max(radius_a, radius_b);
    	results.minor_radius = Math.min(radius_a, radius_b);
		
        let R = [
        	[cos_phi, sin_phi], 
            [-sin_phi, cos_phi]
        ];
		let P_in = Vector$1.matrix_multiply(R, [[x_center], [y_center]]);
    	P_in[0];
    	P_in[1];
    	
    	//results.x0_in_center = X0_in[0]
        //results.y0_in_center = Y0_in[0]
        results.coeffs = coeffs;
        results.eccentricity = results.minor_radius / results.major_radius;
 		results.rotation_angle = orientation_rad * 180 / Math.PI;
    	results.center_point = [x_center, y_center];
        let phi = orientation_rad;
        results.quad_points_major = [
        	[x_center + results.major_radius*Math.cos(phi), y_center + results.major_radius*Math.sin(phi)],
            [x_center + results.major_radius*Math.cos(phi + Math.PI), y_center + results.major_radius*Math.sin(phi + Math.PI)]
        ];
        results.quad_points_minor = [
        	[x_center + results.minor_radius*Math.cos(phi + Math.PI/2), y_center + results.minor_radius*Math.sin(phi + Math.PI/2)],
            [x_center + results.minor_radius*Math.cos(phi - Math.PI/2), y_center + results.minor_radius*Math.sin(phi - Math.PI/2)]
        ];
        
    	return results
	}
    static median(data){
        let data_temp = data.slice();
        data_temp.sort(function(a, b){return a > b});
        let idx_0 = Math.floor(data_temp.length/2);
        let idx_1 = Math.ceil(data_temp.length/2);
        return 0.5*(data_temp[idx_0] + data_temp[idx_1])
    }
    /*Example:
    var data = [0, 1, 2, 3, 1000]
    out(Vector.average(data)) //201.2
    out(median(data)) //2.5
    */

    static interpolate(data_0_x, data_1_x, data_1_y){
        let y_temp = Vector$1.make_matrix(1, data_0_x.length)[0];
        if(data_1_x[0] > data_0_x[0]){
            data_1_x.unshift(data_0_x[0]);
            data_1_y.unshift(data_1_y[0]);
        }

        let x1, i1, x0, x2, y0, y2, L, R, y1;
        for(let i = 0; i < data_0_x.length; i++){
            x1 = data_0_x[i];
            i1 = 0;

            while(data_1_x[i1+1] < x1 && i1 < data_1_x.length){i1++;}
            while(data_1_x[i1] >= x1 && i1 > 0){i1--;}

            x0 = data_1_x[i1];
            x2 = data_1_x[i1+1];
            y0 = data_1_y[i1];
            y2 = data_1_y[i1+1];

            L = y0 === 0;
            R = y2 === 0;
            if(L && R){
                y1 = 0;
            }else if(!L && !R){
                y1 = (x1 - x0)/(x2 - x0) * (y2 - y0) + y0;
            }else if(L && !R){
                i1++;
                x0 = data_1_x[i1];
                x2 = data_1_x[i1+1];
                y0 = data_1_y[i1];
                y2 = data_1_y[i1+1];
                y1 = (x1 - x0)/(x2 - x0) * (y2 - y0) + y0;
            }else if(!L && R){
                i1--;
                x0 = data_1_x[i1];
                x2 = data_1_x[i1+1];
                y0 = data_1_y[i1];
                y2 = data_1_y[i1+1];
                y1 = (x1 - x0)/(x2 - x0) * (y2 - y0) + y0;
            }
            if(isNaN(y1)){y1 = 0;}
            y_temp[i] = JSON.parse(JSON.stringify(y1));
        }
        return y_temp.slice()
    }
    /* Example:
    var data_0_x = [0, 1, 2]
    var data_1_x = [0, 0.6, 1.4, 3.1]
    var data_1_y = [0, 1.2, 2.8, 6.2]

    var interpolated_y = interpolate(data_0_x, data_1_x, data_1_y)
    out(interpolated_y) //[0, 2, 4]
    */

	//from James W Jan 8, 2023
	static is_valid_triangle = function(L1, L2, L3){
		return (L1 + L2) > L3 && (L2 + L3) > L1 && (L3 + L1) > L2
	}
	//Vector.is_valid_triangle(3, 4, 5) //true
    //Vector.is_valid_triangle(0.339092, 0.3075, 0.0265968) //false

	static circle_fit_3D(points){
		let plane = Vector$1.plane_fit(points);
		let points_local = [];
		for(let i = 0; i < points.length; i++){
			points_local.push([...points[i], 1]);
		}
		points_local = Vector$1.transpose(Vector$1.matrix_multiply(Vector$1.inverse(plane.pose), Vector$1.transpose(points_local)));

		let circle_local = Vector$1.circle_fit_2D(points_local);
		let center_local = [[...circle_local.center, 0, 1]];
		let center_global = Vector$1.transpose(Vector$1.matrix_multiply(plane.pose, Vector$1.transpose(center_local))).slice(0, 3);
		let pose = Vector$1.make_pose(center_global, plane.basis);

		return {
			center: center_global,
			normal: plane.normal,
			radius: circle_local.radius,
			pose
		}
	}
	/*
    var points = [
        [0, -1, 3],
        [1, 0, 3],
        [0, 1, 3],
    ]
    inspect(Vector.circle_fit_3D(points))
    //should return:
    {
        center: [1.6653345369377348e-16, 0, 3],
        normal: [0, 0, 1],
        radius: 1
    }
    */

	static circle_fit_2D(points, IterMax = 100){
		//--------------------------------------------------------------------------
		//
		//     Circle fit by Pratt
		//      V. Pratt, "Direct least-squares fitting of algebraic surfaces",
		//      Computer Graphics, Vol. 21, pages 145-152 (1987)
		//
		//     Input:  XY(n,2) is the array of coordinates of n points x(i)=XY(i,1), y(i)=XY(i,2)
		//
		//     Output: Par = [a b R] is the fitting circle:
		//                           center (a,b) and radius R
		//
		//     Note: this fit does not use built-in matrix functions (except "mean"),
		//           so it can be easily programmed in any programming language
		//
		//--------------------------------------------------------------------------

		let n = points.length;
		let centroid = Vector$1.average(...points);
		let Mxx=0, Myy=0, Mxy=0, Mxz=0, Myz=0, Mzz=0;

		for(let i = 0; i < n; i++){
			let Xi = points[i][0] - centroid[0];
			let Yi = points[i][1] - centroid[1];
			let Zi = Xi*Xi + Yi*Yi;
			Mxy += Xi*Yi;
			Mxx += Xi*Xi;
			Myy += Yi*Yi;
			Mxz += Xi*Zi;
			Myz += Yi*Zi;
			Mzz += Zi*Zi;
		}

		Mxx = Mxx/n;
		Myy = Myy/n;
		Mxy = Mxy/n;
		Mxz = Mxz/n;
		Myz = Myz/n;
		Mzz = Mzz/n;

		let Mz = Mxx + Myy;
		let Cov_xy = Mxx*Myy - Mxy*Mxy;
		let Mxz2 = Mxz*Mxz;
		let Myz2 = Myz*Myz;

		let A2 = 4*Cov_xy - 3*Mz*Mz - Mzz;
		let A1 = Mzz*Mz + 4*Cov_xy*Mz - Mxz2 - Myz2 - Mz*Mz*Mz;
		let A0 = Mxz2*Myy + Myz2*Mxx - Mzz*Cov_xy - 2*Mxz*Myz*Mxy + Mz*Mz*Cov_xy;
		let A22 = A2 + A2;

		let epsilon = 1e-12;
		let ynew = Infinity;
		let xnew = 0;
		let yold, xold;

		for(let iter = 0; iter < IterMax; iter++){
			yold = ynew;
			ynew = A0 + xnew*(A1 + xnew*(A2 + 4.*xnew*xnew));
			if(Math.abs(ynew) > Math.abs(yold)){
				xnew = 0;
				break
			}
			let Dy = A1 + xnew*(A22 + 16*xnew*xnew);
			xold = xnew;
			xnew = xold - ynew/Dy;
			if(Math.abs((xnew-xold)/xnew) < epsilon){break}
			if(iter >= IterMax){
				out('Newton-Pratt will not converge');
				xnew = 0;
			}
			if(xnew < 0.){
				xnew = 0;
			}
		}

		let DET = xnew*xnew - xnew*Mz + Cov_xy;
		let center = [(Mxz*(Myy-xnew)-Myz*Mxy)/DET/2, (Myz*(Mxx-xnew)-Mxz*Mxy)/DET/2];
		let radius = Math.sqrt(Vector$1.matrix_multiply(center, Vector$1.transpose(center))[0][0] + Mz + 2*xnew);
		return {
			center: Vector$1.add(center, centroid.slice(0, 2)),
			radius: radius
		}
	}
	/*
    //Example:
    var points = [
        [0, -2, 3],
        [2, 0, 3],
        [0, 2, 3],
    ]
    inspect(Vector.circle_fit_2D(points))
    //should return {x: 0, y: 0, r: 2}

    */

	static plane_fit(points){
		let point = Vector$1.average(...points);
		let R = [];
		for(let i = 0; i < points.length; i++){
			R.push(Vector$1.subtract(points[i], point));
		}
		let A = Vector$1.matrix_multiply(Vector$1.transpose(R), R);
		let eigen_vectors = mathjs.eigs(A).vectors;
		let normal = [eigen_vectors[0][0], eigen_vectors[1][0], eigen_vectors[2][0]];
		let rot_mat = [
			[0, 0, 1],
			[0, 1, 0],
			[1, 0, 0]
		];
		let basis = Vector$1.matrix_multiply(eigen_vectors, rot_mat); //I like Z-up / Z being the normal of the plane
		let pose = Vector$1.make_pose(point, basis);

		let plane = {
			point: point,
			normal: normal,
			basis: basis,
			pose: pose
		};
		return plane
	}
	/*
    Example:
    var points = [
        [0, -1, 3],
        [1, 0, 3],
        [0, 1, 3],
    ]
    inspect(Vector.plane_fit(points))
    //should return
    {
        normal: [0, 0, 1],
        point: [0.3333333333333333, 0, 3]
    }
    */
} //end class

globalThis.Vector = Vector$1;


//Private
function dist_point_to_plane(point, plane){
    if (Vector$1.size(plane) !== 4){
        dde_error("Complete the plane by using the function 'Vector.complete_plane(vector, point)'");
        return null
    }
    return -Vector$1.dot(point, plane)
}

//Private
function dist_point_to_line(point, line_point_A, line_point_B){
    var term1 = Vector$1.subtract(point, line_point_A);
    var term2 = Vector$1.subtract(point, line_point_B);
    var term3 = Vector$1.subtract(line_point_B, line_point_A);
    var d = Vector$1.distance(Vector$1.cross(term1, term2)) / Vector$1.distance(term3);
    return d
}

function multiply_two_matrices(matrix_A, matrix_B){
    let A_height, B_height, A_width, B_width, A_dim, B_dim;
    A_dim = Vector$1.matrix_dimensions(matrix_A);
    B_dim = Vector$1.matrix_dimensions(matrix_B);
    A_height = A_dim[0];
    A_width = A_dim[1];
    B_height = B_dim[0];
    B_width = B_dim[1];

    /*
    let A_height = matrix_A.length
    let B_height = matrix_B.length
    let A_width  = matrix_A[0].length
    let B_width  = matrix_B[0].length
    */
    if(A_width == undefined){
        A_width = A_height;
        A_height = 1;
    }
    if(B_width == undefined){
        B_width = B_height;
        B_height = 1;
    }
    if(A_width != B_height){
        dde_error("Inner matrix dimension must match");
    }
    let result = Vector$1.make_matrix(A_height, B_width);
    for(var i = 0; i < A_height; i++){
        for(var j = 0; j < B_width; j++){
            let verticle = Vector$1.make_matrix(1, B_height)[0];
            if(B_height == 1){
                verticle = matrix_B[j];
            }else {
                for(var k = 0; k < B_height; k++){
                    verticle[k] = matrix_B[k][j];
                }
            }
            if(A_height == 1){
                result[i][j] = Vector$1.dot(matrix_A, verticle);
            }else {
                result[i][j] = Vector$1.dot(matrix_A[i], verticle);
            }
        }
    }
    return result
}

function divide_two_matrices(matrix_numerator, matrix_denominator){
    let dim_num = Vector$1.matrix_dimensions(matrix_numerator);
    let dim_den = Vector$1.matrix_dimensions(matrix_denominator);
    if (!((dim_num[0] == dim_den[0]) && (dim_num[1] == dim_den[1]))){
        dde_error("matrix dimensions must match in Vector.matrix_divide");
    }
    return Vector$1.matrix_multiply(matrix_numerator, Vector$1.inverse(matrix_denominator))
}

//16 Nov 2013 by Andrew Ippoliti
//http://blog.acipo.com/matrix-inversion-in-javascript/
// Returns the inverse of matrix `M`.
function matrix_invert(M){
    // I use Guassian Elimination to calculate the inverse:
    // (1) 'augment' the matrix (left) by the identity (on the right)
    // (2) Turn the matrix on the left into the identity by elemetry row ops
    // (3) The matrix on the right is the inverse (was the identity matrix)
    // There are 3 elemtary row ops: (I combine b and c in my code)
    // (a) Swap 2 rows
    // (b) Multiply a row by a scalar
    // (c) Add 2 rows

    //if the matrix isn't square: exit (error)
    if(M.length !== M[0].length){return;}

    //create the identity matrix (I), and a copy (C) of the original
    var ii=0, j=0, dim=M.length, e=0;
    var I = [], C = [];
    for(let i=0; i<dim; i+=1){
        // Create the row
        I[I.length]=[];
        C[C.length]=[];
        for(j=0; j<dim; j+=1){
            //if we're on the diagonal, put a 1 (for identity)
            if(i==j){ I[i][j] = 1; }
            else { I[i][j] = 0; }
            // Also, make the copy of the original
            C[i][j] = M[i][j];
        }
    }

    // Perform elementary row operations
    for(let i=0; i<dim; i+=1){
        // get the element e on the diagonal
        e = C[i][i];

        // if we have a 0 on the diagonal (we'll need to swap with a lower row)
        if(e==0){
            //look through every row below the i'th row
            for(ii=i+1; ii<dim; ii+=1){
                //if the ii'th row has a non-0 in the i'th col
                if(C[ii][i] != 0){
                    //it would make the diagonal have a non-0 so swap it
                    for(j=0; j<dim; j++){
                        e = C[i][j];       //temp store i'th row
                        C[i][j] = C[ii][j];//replace i'th row by ii'th
                        C[ii][j] = e;      //repace ii'th by temp
                        e = I[i][j];       //temp store i'th row
                        I[i][j] = I[ii][j];//replace i'th row by ii'th
                        I[ii][j] = e;      //repace ii'th by temp
                    }
                    //don't bother checking other rows since we've swapped
                    break;
                }
            }
            //get the new diagonal
            e = C[i][i];
            //if it's still 0, not invertable (error)
            if(e==0){return}
        }

        // Scale this row down by e (so we have a 1 on the diagonal)
        for(j=0; j<dim; j++){
            C[i][j] = C[i][j]/e; //apply to original matrix
            I[i][j] = I[i][j]/e; //apply to identity
        }

        // Subtract this row (scaled appropriately for each row) from ALL of
        // the other rows so that there will be 0's in this column in the
        // rows above and below this one
        for(ii=0; ii<dim; ii++){
            // Only apply to other rows (we want a 1 on the diagonal)
            if(ii==i){continue;}

            // We want to change this element to 0
            e = C[ii][i];

            // Subtract (the row above(or below) scaled by e) from (the
            // current row) but start at the i'th column and assume all the
            // stuff left of diagonal is 0 (which it should be if we made this
            // algorithm correctly)
            for(j=0; j<dim; j++){
                C[ii][j] -= e*C[i][j]; //apply to original matrix
                I[ii][j] -= e*I[i][j]; //apply to identity
            }
        }
    }

    //we've done all operations, C should be the identity
    //matrix I should be the inverse:
    return I;
}

//Convert Class
//James Wigglesworth
//Started: 6_18_16
//Updated: 1_26_17
//import {Vector} from "./Vector.js" //now global

class Convert$1{
	//Private
    //This is used to prevent functions from altering outside arrays
    static deep_copy(arg){
        //return JSON.parse(JSON.stringify(arg))
    	if (typeof(arg) == "number"){
        	return arg
        }
        else if (arg === null) { return null }
        else if (arg === undefined) { return undefined }
        else {
        	let result = [];
        	for(var i = 0; i < arg.length; i++){
            	let elt = arg[i];
                if(elt === null) ;
                else if (elt === undefined) ;
                else if (typeof(elt) !== "number"){
                    elt = elt.slice(0);
                }
                result.push(elt);
            }
            return result
        }
    }


    //*******************************************
    //Rotation representation conversions:

    static angles_to_DCM(angles = [0, 0, 0], sequence = "XYZ"){
    	//default could be ZX'Z'
        
        var result = [];
        let elt = "";
        for(let char of sequence){
        	if(elt.length == 1){
            	if(char == "'"){
                	elt += char;
                    result.push(elt);
                    elt = "";
                }else {
                	result.push(elt);
                    elt = char;
                }
            }else {
            	elt = char;
            } 
        }
        if((elt != "'") && (elt.length == 1)){
        	result.push(elt);
        }

    	let DCM = Vector.identity_matrix(3);
        if(result.length == 3){
        	for(var i = 0; i < 3; i++){
        		DCM = Vector.rotate_DCM(DCM, result[i], angles[i]); 
            }
        }
        return Vector.transpose(DCM)
    }
    //Convert.angles_to_DCM([Convert.degrees_to_arcseconds(45), Convert.degrees_to_arcseconds(45), 0])

    static DCM_to_angles(DCM, sequence = "XYZ"){
    	
    }

    static quat_to_DCM(quaternion = [1, 0, 0, 0]){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/
    	let w = quaternion[0];
        let x = quaternion[1];
        let y = quaternion[2];
        let z = quaternion[3];
        
        let DCM = Vector.make_matrix(3,3);
        DCM[0][0] = 1-2*y*y-2*z*z;
        DCM[1][0] = 2*x*y+2*z*w;
        DCM[2][0] = 2*x*z-2*y*w;
        DCM[0][1] = 2*x*y-2*z*w;
        DCM[1][1] = 1-2*x*x-2*z*z;
        DCM[2][1] = 2*y*z+2*x*w;
        DCM[0][2] = 2*x*z+2*y*w;
        DCM[1][2] = 2*y*z-2*x*w;
        DCM[2][2] = 1-2*x*x-2*y*y;
        return DCM
    }


    static DCM_to_quat(DCM){
    	//Algorithm was found here:
        //http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/
    	let trace = DCM[0][0] + DCM[1][1] + DCM[2][2];
        let S, w, x, y, z, quaternion;
        if(trace > 0){
        	S = Math.sqrt(1.0 + trace) * 2;
			w = .25 * S;
            x = (DCM[2][1] - DCM[1][2]) / S;
            y = (DCM[2][1] - DCM[1][2]) / S;
            z = (DCM[2][1] - DCM[1][2]) / S;
        }else if(DCM[0][0] > DCM[1][1] && DCM[0][0] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[0][0] - DCM[1][1] - DCM[2][2]);
            w = (DCM[2][1] - DCM[1][2]) / S;
            x = .25 * S;
            y = (DCM[0][1] + DCM[1][0]) / S;
            z = (DCM[0][2] + DCM[2][0]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[1][1] - DCM[0][0] - DCM[2][2]);
            w = (DCM[0][2] - DCM[2][0]) / S;
            x = (DCM[0][1] + DCM[1][0]) / S;
            y = .25 * S;
            z = (DCM[1][2] + DCM[2][1]) / S;
        }else if(DCM[1][1] > DCM[2][2]){
        	S = 2 * Math.sqrt(1 + DCM[2][2] - DCM[0][0] - DCM[1][1]);
            w = (DCM[1][0] - DCM[0][1]) / S;
            x = (DCM[0][2] + DCM[2][0]) / S;
            y = (DCM[1][2] + DCM[2][1]) / S;
            z = .25 * S;
        }
    	quaternion = [w, x, y, z];
        return quaternion
    }
    
}
globalThis.Convert = Convert$1;

//Kinematics Class
//import {Vector}  from "./Vector.js" //now global
//import {Convert} from "./Convert.js" //now global
//import {dde_error} from "../core/utils.js" //now dde_error specially defined in je_and_browser_code.js
//import {Dexter}  from "../core/robot.js" //now global

class Kin$1{
    static inverse_kinematics(xyz, direction = [0, 0, -1], config = [1, 1, 1], dexter_inst_or_workspace_pose = Vector.make_pose()){
        if(xyz == undefined){
        	dde_error("xyz must be defined. To prevent unpredictable movement a default is not used.");
        }
        let dexter_inst, workspace_pose;
        if(Array.isArray(dexter_inst_or_workspace_pose)) { workspace_pose = dexter_inst_or_workspace_pose;}
        else { dexter_inst = dexter_inst_or_workspace_pose; workspace_pose = dexter_inst_or_workspace_pose.pose;}
        let xyz_dim = Vector.matrix_dimensions(xyz);
        if(xyz_dim[0] == 3 && xyz_dim[1] == 3){
        	workspace_pose = direction;
            config = xyz[2];
            direction = xyz[1];
            xyz = xyz[0];
        }
        
        
    
        let J = Vector.make_matrix(1, 5)[0]; // Joint Angles
        let U = Vector.make_matrix(5, 3);
        let P = [0, 0, 0, 0];
        let L;
        if(dexter_inst && dexter_inst.defaults && dexter_inst.LinkLengths) {
            L = dexter_inst.LinkLengths; //[dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5]
        }
		else            { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]; }
		let normal = direction;
    	let right_arm = config[0];
    	let elbow_up = config[1];
    	let wrist_out = config[2];
        
        if(direction.length == 2){
        	normal = Kin$1.angles_to_dir_xyz(direction[0], direction[1]);
        }else if(direction.length == 3){
        	if(Vector.magnitude(direction) == 0){
            	dde_error("Direction must have a magnitude. Try [0, 0, -1] or [0, 0] for the [x_angle, y_angle] form");
            }
        }else {dde_error("Direction must be in the form [x, y, z] or [x_angle, y_angle]");}
        
        
        let xyz_trans, normal_trans;
        if(workspace_pose == undefined || Vector.is_equal(workspace_pose, [0, 0, -1])){
        	workspace_pose = Vector.identity_matrix(4);
            xyz_trans = xyz.slice();
            normal_trans = normal.slice();
        }else if(Vector.is_equal([4,4], Vector.matrix_dimensions(workspace_pose))){
        	xyz_trans = Vector.transpose(Vector.matrix_multiply(workspace_pose, Vector.properly_define_point(xyz))).slice(0,3);
        	normal_trans = Vector.transpose(Vector.matrix_multiply(workspace_pose, Vector.properly_define_vector(normal))).slice(0,3);
        }else {
        	dde_error("Unsupported workspace_pose datatype: " + workspace_pose);
        }
        
        
    	//Knowns:
        P[0] = [1, 0, 0, 0];
    	let V54 = Vector.multiply(-1, Vector.normalize(normal_trans)); //Direction of EE
        U[0] = [0, 0, 0];
        let V10 = [0, 0, 1];
    	U[1] = Vector.multiply(L[0], V10);
        U[4] = Vector.add(xyz_trans, Vector.multiply(L[4], V54));
        U[5] = xyz_trans;
        
    	
    	//Solving for P1
    	P[1] = Vector.points_to_plane(U[1], U[0], U[4]);
        if(Vector.is_NaN_null_or_undefined(P[1])){
        	P[1] = Vector.points_to_plane(U[1], U[0], U[3]);
            if(Vector.is_NaN_null_or_undefined(P[1])){
        		dde_error(`Singularity: Toolpoint xyz is on Base axis. [0, 0, z] divides by 0.
            	Try [0, 1e-10, z] if it works use the ouputted joint angles for a move_all_joints() instead.
            	The first joint angle can be changed to any value without affecting the tool point`);
            }
        }

		//Solving for U3
    	var U54_Proj = Vector.project_vector_onto_plane(V54, P[1]);
    	var U3_a = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], 90)));
        var U3_b = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], -90)));
        
        
        //This is proven to work for directions of approx. [0, 1, 0] but has potentially not been tested enough
        var dist_a = Vector.distance(U3_a, [0, 0, 0]);
    	var dist_b = Vector.distance(U3_b, [0, 0, 0]);
        if (wrist_out){
    		if (dist_a < dist_b){
        		U[3] = U3_a;
        	}else {
        		U[3] = U3_b;
        	}
    	}else {
    		if (dist_a > dist_b){
        		U[3] = U3_a;
        	}else {
        		U[3] = U3_b;
        	}
    	}
    	
        
        
        /*
        //This is proven to work for directions of approx. [0, 0, -1] but not for [x, y, 0]
        var dist_a = Vector.distance(U3_a, U[1], U[0])
    	var dist_b = Vector.distance(U3_b, U[1], U[0])
        if (wrist_out){
    		if (dist_a < dist_b){
        		U[3] = U3_a
        	}else{
        		U[3] = U3_b
        	}
    	}else{
    		if (dist_a > dist_b){
        		U[3] = U3_a
        	}else{
        		U[3] = U3_b
        	}
    	}
        */
        
        
    	//Solving for P2
    	P[2] = Vector.points_to_plane(U[5], U[4], U[3]);
        if(Vector.is_NaN_null_or_undefined(P[2])){
        	dde_error("Unknown plane singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.");
        }
		
    	//Solving for U2
    	var D3 = Vector.distance(U[3], U[1]);
        if(Vector.is_equal(D3, L[1] + L[3], 9)){
        	D3 = L[1] + L[2];
        }
        
        //Checking if in reach
        if (D3 > L[1] + L[2]){
        	let out_of_reach_dist = Vector.round(D3 - (L[1] + L[2]), 4);
        	dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach');
        }

        if(!Vector.is_valid_triangle(L[1], L[2], D3)){
            dde_error("In Kin.xyz_to_J_angles(), Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + "]"
                + " is too close to the robot\'s base."
                +  "<br>Try moving the goal xyz up or away from the origin"
            );
        }

    	//let Beta = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3, 2)) / (2 * D3 * L[1])) // Law of Cosines
        let Beta = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3, 2)) / (2 * D3 * L[1])); // Law of Cosines
        let V31 = Vector.normalize(Vector.subtract(U[3], U[1]));
    	
    	let U2_a = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31, P[1], Beta)));
    	let U2_b = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31, P[1], -Beta)));
    	//let U2_a_dist = Vector.distance(U2_a, P[0])
    	//let U2_b_dist = Vector.distance(U2_b, P[0])
        let V2a1 = Vector.subtract(U2_a, U[1]);
        let V32a = Vector.subtract(U[3], U2_a);
        //let V2b1 = Vector.subtract(U2_b, U[1])
        //let V32b = Vector.subtract(U[3], U2_b)
    	
    	if (elbow_up){
    		if(Vector.dot(Vector.cross(V2a1, V32a), P[1]) < 0){
        		U[2] = U2_a;
        	}else {
        		U[2] = U2_b;
        	}
    	}else {
      		if(Vector.dot(Vector.cross(V2a1, V32a), P[1]) > 0){
        		U[2] = U2_a;
        	}else {
        		U[2] = U2_b;
        	}
    	}


    	//Solving for joint angles
    
		//var V10 = minus(U[1], U[0])
    	var V21 = Vector.normalize(Vector.subtract(U[2], U[1]));
    	var V32 = Vector.normalize(Vector.subtract(U[3], U[2]));
    	var V43 = Vector.normalize(Vector.subtract(U[4], U[3]));
    	//var V54 = minus(U[5], U[3])

		if(right_arm == 1){
    		J[0] = Vector.signed_angle(P[1], P[0], V10); 
    		J[1] = Vector.signed_angle(V21, V10, P[1]);
    		J[2] = Vector.signed_angle(V32, V21, P[1]);
    		J[3] = Vector.signed_angle(V43, V32, P[1]);
    		J[4] = Vector.signed_angle(P[2], P[1], V43);
    	}else {
    		J[0] = Vector.signed_angle(P[1], P[0], V10) + 180;
    		J[1] = -Vector.signed_angle(V21, V10, P[1]);
    		J[2] = -Vector.signed_angle(V32, V21, P[1]);
    		J[3] = -Vector.signed_angle(V43, V32, P[1]);
    		J[4] = Vector.signed_angle(P[2], P[1], V43) + 180;
    	}
    
    	if(Vector.is_NaN_null_or_undefined(J[2])){
        	let thres = 100;
        	if(L[0] > thres || L[1] > thres || L[2] > thres || L[3] > thres || L[4] > thres){
            	dde_error("Link lengths are non properly defined: "  
                + "</br>LINK1: " + L[0] + " (meters)"
                + "</br>LINK2: " + L[1] + " (meters)"
                + "</br>LINK3: " + L[2] + " (meters)"
                + "</br>LINK4: " + L[3] + " (meters)"
                + "</br>LINK5: " + L[4] + " (meters)");
            }
        	dde_error("Singularity at: " + xyz + ", " + direction + ", " + config + ".</br>Please copy this message and report it as a bug.");
    	}
    
    	return [J, U, P]
    } 
    
    static forward_kinematics (joint_angles, dexter_inst_or_workspace_pose = Vector.make_pose()){
        let J = Vector.deep_copy(joint_angles); //Joint Angles
        let U = new Array(5).fill(new Array(3)); //Point Locations

        let dexter_inst, workspace_pose;
        if(Array.isArray(dexter_inst_or_workspace_pose))  { workspace_pose = dexter_inst_or_workspace_pose;}
        else { dexter_inst = dexter_inst_or_workspace_pose; workspace_pose = dexter_inst_or_workspace_pose.pose;}
        let L;
        if(dexter_inst && dexter_inst.defaults && dexter_inst.LinkLengths) {
            L = dexter_inst.LinkLengths;
        }
        else  { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]; }

        let P = new Array(3).fill(new Array(4)); //Planes
        
        let V21, V32, V43, V54;
        //Knowns:
        let U0 = [0, 0, 0];
        let V10 = [0, 0, 1];
        let P0 = [1, 0, 0];
        
        //Calculates all vectors first
        P[0] = P0;
		P[1] = Vector.rotate(P[0], V10, -(J[0]-180));
        V21 = Vector.rotate(V10, P[1], J[1]);
        V32 = Vector.rotate(V21, P[1], J[2]);
        V43 = Vector.rotate(V32, P[1], J[3]);
        P[2] = Vector.rotate(P[1], V43, -(J[4]-180));
        V54 = Vector.rotate(V43, P[2], -90);
		let V = [V10, V21, V32, V43, V54];
        
        //Dimensionalizes vectors by multiplying by link lengths
        U[0] = U0;
		U[1] = Vector.add(U[0], Vector.multiply(L[0], V10));
        U[2] = Vector.add(U[1], Vector.multiply(L[1], V21));
        U[3] = Vector.add(U[2], Vector.multiply(L[2], V32));
        U[4] = Vector.add(U[3], Vector.multiply(L[3], V43));
        U[5] = Vector.add(U[4], Vector.multiply(L[4], V54));
		
        P[1] = Vector.round(P[1], 15);
        P[2] = Vector.round(P[2], 15);
        
        
        let trans_mat = Vector.inverse(workspace_pose);
        if(Vector.is_equal([4,4], Vector.matrix_dimensions(workspace_pose))){
        	for(let i = 0; i < U.length; i++){
            	U[i] = Vector.transpose(Vector.matrix_multiply(trans_mat, Vector.properly_define_point(U[i]))).slice(0,3);
            }
            //debugger
            for(let i = 0; i < P.length; i++){
            	P[i] = Vector.transpose(Vector.matrix_multiply(trans_mat, Vector.properly_define_vector(P[i]))).slice(0,3);
            }
            for(let i = 0; i < V.length; i++){
            	V[i] = Vector.transpose(Vector.matrix_multiply(trans_mat, Vector.properly_define_vector(V[i]))).slice(0,3);
            }
        }else {
        	dde_error("Unsupported workspace_pose datatype");
        }
        
        return [U, V, P]
    }

    /*static is_in_reach(xyz, J5_direction = [0, 0, -1], config = [1, 1, 1], dexter_inst){
    	let base_xyz = [0, 0, 0] // Come back to this and pull it from robot_pose
        let base_plane = [0, 0, 1]
        let U3
        let L
        if(dexter_inst) { L = [dexter_inst.Link1, dexter_inst.Link2, dexter_inst.Link3, dexter_inst.Link4, dexter_inst.Link5] } //Link Lengths
        else            { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5] }

        let U1 = Vector.add(base_xyz, Vector.multiply(base_plane, L[0]))
    	let U4 = Vector.add(xyz, Vector.multiply(-L[4], Vector.normalize(J5_direction)))

		//Solving for P1
    	let P1 = Vector.points_to_plane(U1, base_xyz, U4)
        if(Vector.is_NaN(P1)){
        	P1 = Vector.points_to_plane(U1, base_xyz, U3)
            if(Vector.is_NaN(P1)){
        		return false
            }
        }
    }*/



    static is_in_reach (xyz, J5_direction = [0, 0, -1], config = [1, 1, 1], dexter_inst_or_workspace_pose){
            if((xyz[0] === 0) && (xyz[1] === 0) && (xyz[2] === 0)) { return false }
            let base_xyz = [0, 0, 0]; // Come back to this and pull it from robot_pose
            let base_plane = [0, 0, 1];
            let U3;
            let U1 = Vector.add(base_xyz, Vector.multiply(base_plane, Dexter.LINK1));
            let dexter_inst, workspace_pose;
            if(Array.isArray(dexter_inst_or_workspace_pose)) { workspace_pose = dexter_inst_or_workspace_pose;}
            else if (dexter_inst_or_workspace_pose) { dexter_inst = dexter_inst_or_workspace_pose; workspace_pose = dexter_inst_or_workspace_pose.pose;}
            let L;
            if(dexter_inst && dexter_inst.defaults && dexter_inst.LinkLengths) {
               L = dexter_inst.LinkLengths;
            }
            else { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]; }

            let xyz_trans;
            let normal_trans;
            if(workspace_pose == undefined){
                workspace_pose = Vector.identity_matrix(4);
                xyz_trans = xyz.slice();
                normal_trans = J5_direction.slice();
            }else if(Vector.is_equal([4,4], Vector.matrix_dimensions(workspace_pose))){
                xyz_trans = Vector.transpose(Vector.matrix_multiply(workspace_pose, Vector.properly_define_point(xyz))).slice(0,3);
                normal_trans = Vector.transpose(Vector.matrix_multiply(workspace_pose, Vector.properly_define_vector(J5_direction))).slice(0,3);
            }else {
                dde_error("Unsupported workspace_pose datatype: " + workspace_pose);
            }
            let U5 = xyz_trans;
            let U4 = Vector.add(U5, Vector.multiply(-L[4], Vector.normalize(normal_trans)));


            //Solving for P1
            let P1 = Vector.points_to_plane(U1, base_xyz, U4);
            if(Vector.is_NaN_null_or_undefined(P1)){
                P1 = Vector.points_to_plane(U1, base_xyz, U3);
                if(Vector.is_NaN_null_or_undefined(P1)){
                    return false
                }
            }


            //Solving for U3
            let V54 = Vector.subtract(U5, U4);
            var U54_Proj = Vector.project_vector_onto_plane(V54, P1);
            var U3_a = Vector.add(U4, Vector.multiply(L[2], Vector.rotate(Vector.normalize(U54_Proj), P1, 90)));
            var U3_b = Vector.add(U4, Vector.multiply(L[2], Vector.rotate(Vector.normalize(U54_Proj), P1, -90)));
            var dist_a = Vector.distance(U3_a, U1, base_xyz);
            var dist_b = Vector.distance(U3_b, U1, base_xyz);
            if (config[2] == 1){
                if (dist_a < dist_b){
                    U3 = U3_a;
                }else {
                    U3 = U3_b;
                }
            }else {
                if (dist_a > dist_b){
                    U3 = U3_a;
                }else {
                    U3 = U3_b;
                }
            }


            if (Vector.distance(U1, U3) <= L[1] + L[2]){
                return true
            }else {
                return false
            }
    }
    
    //Public
    static J_angles_to_config (joint_angles, dexter_inst_or_workspace_pose){
    	let U54_Proj, U3_a, U3_b, dist_a, dist_b;
    	let J = Vector.deep_copy(joint_angles);
        let fk = Kin$1.forward_kinematics(J, dexter_inst_or_workspace_pose);
        let U = fk[0];
        let V = fk[1];
        let dexter_inst;
        if(Array.isArray(dexter_inst_or_workspace_pose)) ;
        else if (dexter_inst_or_workspace_pose) { dexter_inst = dexter_inst_or_workspace_pose; dexter_inst_or_workspace_pose.pose;}
        //note that dexter_inst_or_workspace_pose might be undefined.
        //we don't actually need workspace_pose in this method, but I'm following a pattern here.
        let L;
        if(dexter_inst && dexter_inst.defaults && dexter_inst.LinkLengths) {
            L = dexter_inst.LinkLengths;
        }
        else  { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]; }

        let right_arm, elbow_up, wrist_out;
        let P = fk[2];
        
        P[1] = Vector.points_to_plane(U[1], U[0], U[4]);
        U54_Proj = Vector.project_vector_onto_plane(V[4], P[1]);
    	U3_a = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], 90)));
        U3_b = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], -90)));
        
        
        dist_a = Vector.distance(U3_a, U[2]);
    	dist_b = Vector.distance(U3_b, U[2]);
        if (Vector.is_equal(U[3], U3_a)){
    		if (dist_a < dist_b){
        		wrist_out = 0;
        	}else {
        		wrist_out = 1;
        	}
    	}else {
    		if (dist_a > dist_b){
        		wrist_out = 1;
        	}else {
        		wrist_out = 0;
        	}
    	}
        /*
        //Old code:
        dist_a = Vector.distance(U3_a, U[1], U[0])
    	dist_b = Vector.distance(U3_b, U[1], U[0])
    		
        if(U[3] == U3_a){
        	if (dist_a < dist_b){
            	wrist_out = 1
            }else{
            	wrist_out = 0
            }
        }else{
        	if (dist_a < dist_b){
            	wrist_out = 0
            }else{
            	wrist_out = 1
            }
        }
        */
        
        
        let U50 = Vector.subtract(U[5], U[0]);
        if(Vector.dot(Vector.cross(U50, P[1]), V[0]) > 0){
        	right_arm = 0;
            
            if(wrist_out == 0){
            	wrist_out = 1;
            }else {
            	wrist_out = 0;
            }
        }else {
        	right_arm = 1;
        }
        
        if(right_arm == 1){
        	if(Vector.dot(Vector.cross(V[1], V[2]), P[1]) > 0){
        		elbow_up = 0;
        	}else {
        		elbow_up = 1;
        	}
        }else {
        	if(Vector.dot(Vector.cross(V[1], V[2]), P[1]) < 0){
        		elbow_up = 0;
        	}else {
        		elbow_up = 1;
        	}
        }
        
        
        return [right_arm, elbow_up, wrist_out]
    }

	/*
	this.point_at_xyz = function(xyz, current_J5_xyz, current_config, base_xyz = [0, 0, 0], base_plane = [0, 0, 1], base_rotation = 0){
    	let pointing_direction = Vector.subtract(xyz, current_J5_xyz)
        Kin.xyz_to_J_angles(current_J5_xyz, pointing_direction, current_config, base_xyz, base_plane, base_rotation)
    }
    */
    
    
    
    //Torque:
    
    
    /*
    I've run a mile in 4:24 what is that in MPH?
    var meter_per_sec = _mile / (4*_min+24*_s)
    var MPH = meter_per_sec / (_mile/_hour)
    
    
    
    this.gravity_torques = function(J_angles, base_xyz = [0, 0, 0], base_plane = [0, 0, 1], base_rotation = 0){
    	//This will return the torques expected due to the forces of gravity
        //As of now the output units are in Newton-meters but are subject to change
        
        
        //These will change once measurements are taken
        let L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5] //Link Lengths
        let CM_L = Vector.multiply(.5, L) // Center of mass as distance along the link
        let M = [5, 2, 2, .5, .5] //Link masses (kg) (guesses)
        let g = [0, 0, -9.80665] // (micron/millisecond^2 or m/s^2, they are equivalent)
        var T_vector = new Array(5).fill(new Array(3))
        var T = new Array(5)
        var F_vector = new Array(5).fill(new Array(3))
        var CM_r = new Array(5).fill(new Array(3))

        let P0 = Kin.base_rotation_to_plane(base_rotation, base_plane)
        let fk_result = Kin.forward_kinematics(J_angles, base_xyz, base_plane, P0)
        let U = fk_result[0]
        let V = (fk_result[1])
        let Vn = new Array(3).fill(new Array(5))
        for(var i = 0; i < 5; i++){
        	Vn[i] = Vector.normalize(V[i])
            F_vector[i] = Vector.multiply(M[i], g)
            CM_r[i] = Vector.multiply(CM_L[i], Vn[i])
        }
        //var P1 = Vector.points_to_plane(U[1], U[0], U[4])
        var P1 = Vector.rotate(P0, base_plane, J_angles[0])
        
        
        
        
        //Torques are calculated backwards from the end effector
        //The system is stationary so the sum of the torques equal zero 
        //the torque vector is found by crossing the radius (distance from joint to link's center of mass) and the weight vector
        //that torque vector may only have some components that affect the actual joint's torque reading
        //This is dealt with by projecting the torque vector onto the axis of the joint's rotation 
        let T_sum = [0, 0, 0]
        let F_sum = 0
        let radius
        let planes_of_rotation = [Vn[0], P1, P1, P1, Vn[3]]
        
        //Joints 1 and 2 
        T_sum = [0, 0, 0]
        T_sum = Vector.add(T_sum, Vector.cross(Vector.multiply(CM_L[1], Vn[1]), F_vector[1]))
        radius = Vector.add(V[1], CM_r[2])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[2]))
        radius = Vector.add(V[1], V[2], CM_r[3])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[3]))
        radius = Vector.add(V[1], V[2], V[2], CM_r[4])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
        T_vector[0] = T_sum
        T_vector[1] = T_sum
        
        //Joint 3
        T_sum = [0, 0, 0]
        radius = CM_r[2]
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[2]))
        radius = Vector.add(V[2], CM_r[3])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[3]))
        radius = Vector.add(V[2], V[3], CM_r[4])
		T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
		T_vector[2] = T_sum
        
        //Joint 4
        T_sum = [0, 0, 0]
        radius = CM_r[3]
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[3]))
        radius = Vector.add(V[3], CM_r[4])
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
		T_vector[3] = T_sum
        
        //Joint 5
        T_sum = [0, 0, 0]
        radius = CM_r[4]
        T_sum = Vector.add(T_sum, Vector.cross(radius, F_vector[4]))
		T_vector[4] = T_sum
        
        for(var i = 0; i < 5; i++){
        	T[i] = Vector.dot(planes_of_rotation[i], T_vector[i])
        }
        
        T = Vector.multiply(.000001, T) // Converting to Nm (will change)
		return [T, T_vector, U, planes_of_rotation] 
    }*/
    
 
    //similar to Dexter.joints_out_of_range, but returns different values
    static check_J_ranges(J_angles, dexter_inst){
        let lower_limit;
        let upper_limit;
        if(dexter_inst instanceof Dexter) {
            lower_limit = [dexter_inst.J1_angle_min, dexter_inst.J2_angle_min, dexter_inst.J3_angle_min, dexter_inst.J4_angle_min, dexter_inst.J5_angle_min];
            upper_limit = [dexter_inst.J1_angle_max, dexter_inst.J2_angle_max, dexter_inst.J3_angle_max, dexter_inst.J4_angle_max, dexter_inst.J5_angle_max];
        }
        else {
    	    lower_limit = [Dexter.J1_ANGLE_MIN, Dexter.J2_ANGLE_MIN, Dexter.J3_ANGLE_MIN, Dexter.J4_ANGLE_MIN, Dexter.J5_ANGLE_MIN];
            upper_limit = [Dexter.J1_ANGLE_MAX, Dexter.J2_ANGLE_MAX, Dexter.J3_ANGLE_MAX, Dexter.J4_ANGLE_MAX, Dexter.J5_ANGLE_MAX];
        }
        for(var i = 0; i < J_angles.length; i++){
        	let angle = J_angles[i];
        	if((angle != null) && ((lower_limit[i] > angle) || (upper_limit[i] < angle))){
            	return false
            }
        }
        return true
    }

	/**************************************************************
	Wrapper Functions:
	***************************************************************/

    //Wrapper function for inverse kinematics
    //Returns joint angles
    
    //Depricated wrapper functions:
    static xyz_to_J_angles(xyz, J5_direction = [0, 0, -1], config = Dexter.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector.make_pose()){
        return Kin$1.inverse_kinematics(xyz, J5_direction, config, dexter_inst_or_workspace_pose)[0]
    }

    static xyz_to_J_points(xyz, J5_direction = [0, 0, -1], config = Dexter.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector.make_pose()){
        return Kin$1.inverse_kinematics(xyz, J5_direction, config, dexter_inst_or_workspace_pose)[1]
    }
    
    static xyz_to_J_planes(xyz, J5_direction = [0, 0, -1], config = Dexter.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector.make_pose()){
        return Kin$1.inverse_kinematics(xyz, J5_direction, config, dexter_inst_or_workspace_pose)[2]
    }

    
    /*
    var EE_pose = Vector.make_pose([-0.4, 0.4, 0.2], [90, 0, 0])
    var direction = Vector.transpose(Vector.pull(EE_pose, [0,2], [1,1]))
    debugger
    var J_angles = Kin.xyz_to_J_angles_6_axes(EE_pose)
    
    
    */
    static xyz_to_J_angles_6_axes(EE_pose, config = Dexter.RIGHT_UP_OUT, dexter_inst_or_workspace_pose = Vector.make_pose()){
        let direction = Vector.transpose(Vector.pull(EE_pose, [0,2], [1,1]));
        let xyz = Vector.transpose(Vector.pull(EE_pose, [0,2], [3,3]));
        let kin_res = Kin$1.inverse_kinematics(xyz, direction, config, dexter_inst_or_workspace_pose);
        let x_vector = kin_res[2][2].slice(0,3);
        //let y_vector = direction
        //let z_vector = Vector.cross(x_vector, y_vector)
        let x_vector_desired = Vector.transpose(Vector.pull(EE_pose, [0,2], [0,0]));
        let J6 = Vector.signed_angle(x_vector, x_vector_desired, direction);
		
        return [kin_res[0][0], kin_res[0][1], kin_res[0][2], kin_res[0][3], kin_res[0][4], J6]
    }
    
	
    //Wrapper function for forward kinematics
    static J_angles_to_xyz(joint_angles, dexter_inst_or_workspace_pose = Vector.make_pose()){
        let temp_angles = Vector.deep_copy(joint_angles);
        let xyzs = Kin$1.forward_kinematics(temp_angles, dexter_inst_or_workspace_pose)[0];
        //out(xyzs)
        let direction = Vector.normalize(Vector.subtract(xyzs[5], xyzs[4]));
        let config = Kin$1.J_angles_to_config(temp_angles, dexter_inst_or_workspace_pose);
        return [xyzs[5], direction, config]
    }
    
    static J_angles_to_coor(joint_angles, L0_pose, dexter_inst){
        let L0;
        if(Object.isNewObject(L0_pose)){
            L0 = L0_pose;
        }else if(Vector.is_pose(L0_pose)){
        	L0 = Coor.Table.create_child(L0_pose);
        }else if(L0_pose == undefined){ // this should get replaced with is_Coor()
            L0 = Coor.Table.create_child(Vector.make_pose());
        }else {
        	dde_error("L0_pose input arg must be a Coordinate System Object, a pose, or undefined");
        }
        let L;
        if(dexter_inst && dexter_inst.defaults && dexter_inst.LinkLengths) {
            L = dexter_inst.LinkLengths;
        }
        else  { L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]; }
        let J = joint_angles;
        
        
		let L1 = L0.create_child(Vector.make_pose([0, 0, L[0]]), "L1");
		let L2 = L1.create_child(Vector.make_pose([0, 0, L[1]]), "L2");
		let L3 = L2.create_child(Vector.make_pose([0, 0, L[2]]), "L3");
        let L4 = L3.create_child(Vector.make_pose([0, 0, L[3]]), "L4");
        let L5 = L4.create_child(Vector.make_pose([0, 0,    0]), "L5");
		
        L1.rotate("Z", J[0], [0, 0, 0]);
        L2.rotate("X", J[1], [0, 0, 0]);
        L3.rotate("X", J[2], [0, 0, 0]);
        L4.rotate("X", J[3], [0, 0, 0]);
        L5.rotate("Z", J[4], [0, 0, 0]);
        
        return [L0.get_pose(Coor.Table), L1.get_pose(Coor.Table), L2.get_pose(Coor.Table), L3.get_pose(Coor.Table), L4.get_pose(Coor.Table), L5.get_pose(Coor.Table)]
    }
    
    static three_positions_to_pose(J_angles_1, J_angles_2, J_angles_3, scale_factor, dexter_inst){
    	let points_A, points_B, points_C, UA5, UA4, UB5, UB4, UC5, UC4, U5_ave, U4_ave, U45;
        let point, x_vector, z_vector, pose, angleA, angleB, angleC, vector_1, vector_2;
        
        points_A = Kin$1.forward_kinematics(J_angles_1, dexter_inst)[0];
        points_B = Kin$1.forward_kinematics(J_angles_2, dexter_inst)[0];
        points_C = Kin$1.forward_kinematics(J_angles_3, dexter_inst)[0];
        
        UA5 = points_A[5];
        UA4 = points_A[4];
        UB5 = points_B[5];
        UB4 = points_B[4];
        UC5 = points_C[5];
        UC4 = points_C[4];
        
        U5_ave = Vector.average(UA5, UB5, UC5);
        U4_ave = Vector.average(UA4, UB4, UC4);
        U45 = Vector.subtract(U4_ave, U5_ave);
        
        angleA = Vector.angle(Vector.subtract(UB5, UA5), Vector.subtract(UC5, UA5));
        angleB = Vector.angle(Vector.subtract(UA5, UB5), Vector.subtract(UC5, UB5));
        angleC = Vector.angle(Vector.subtract(UB5, UC5), Vector.subtract(UA5, UC5));
        
        switch(Math.max(angleA, angleB, angleC)){
        	case angleA:
            	point = UA5;
                vector_1 = Vector.subtract(UB5, UA5);
                vector_2 = Vector.subtract(UC5, UA5);
            	break
                
            case angleB:
            	point = UB5;
                vector_1 = Vector.subtract(UA5, UB5);
                vector_2 = Vector.subtract(UC5, UB5);
            	break
                
            case angleC:
            	point = UC5;
                vector_1 = Vector.subtract(UB5, UC5);
                vector_2 = Vector.subtract(UA5, UC5);
            	break
        }
        
        if(0 < Vector.dot(Vector.cross(vector_1, vector_2), U45)){
        	x_vector = Vector.normalize(vector_1);
        }else {
        	x_vector = Vector.normalize(vector_2);
        }
        
        z_vector = Vector.pull(Vector.points_to_plane(UA5, UB5, UC5), 0, [0, 2]);
        if(0 > Vector.dot(z_vector, U45)){
        	z_vector = Vector.multiply(-1, z_vector);
        }
        
        pose = Vector.make_pose(point, Vector.make_DCM_from_3_vectors(x_vector, undefined, z_vector), scale_factor);
        return pose
    }
    /*
    var applied_force = -75 //N
    var angles = [0, 45, 90, -45, 0]
    var fk = Kin.forward_kinematics(angles)
    var points = fk[0]

	var forcepoint = points[5]
    var arm1 = Vector.subtract(points[5], points[1])[1]
    var arm2 = 0
    var arm3 = 0
    //var arm1 = 0
    //var arm2 = Vector.subtract(points[5], points[1])[1]
    //var arm3 = Vector.subtract(points[5], points[2])[1]
    var T = [0, 0, 0]
    T[0] = arm1*applied_force
    T[1] = arm2*applied_force
    T[2] = arm3*applied_force
    out(T)
    
    //var angles = [0, 45, 0, 0, 0]
    //T = [0, -0.8255, 0.8255]
    //debugger
    Kin.three_torques_to_force(angles, T)
    
    */

    static three_torques_to_force(J_angles, torques = [0, 0, 0], dexter_inst){
    	if(torques.length != 3){dde_error("Only the first three torques are required for this function");}
        
        let U, V, P, U_contact;
        let axes = [0, 0, 0];
        let D = [0, 0, 0];
        let T = [0, 0, 0];
        let F = [0, 0, 0];
        let temp_J_angles = Vector.deep_copy(J_angles);
        temp_J_angles[0];
        temp_J_angles[0] = 0;
        let fk = Kin$1.forward_kinematics(temp_J_angles);
        U = fk[0];
        V = fk[1];
        P = fk[2];
        (dexter_inst ? dexter_inst.Link2 : Dexter.LINK2);
        (dexter_inst ? dexter_inst.Link3 : Dexter.LINK3);
        
        U_contact = U[5];
        
        //Torque axes
        axes[0] = Vector.normalize(V[0]);
        axes[1] = P[1];
        axes[2] = P[1];
        
        //Moment arms (as vectors):
        D[0] = Vector.project_vector_onto_plane(U_contact, axes[0]);
        D[1] = Vector.subtract(Vector.project_vector_onto_plane(U_contact, P[1]), U[1]);
        D[2] = Vector.subtract(Vector.project_vector_onto_plane(U_contact, P[1]), U[2]);
		
        //Torques (as vectors):
        T[0] = Vector.multiply(torques[0], axes[0]);
        T[1] = Vector.multiply(torques[1], axes[1]);
        T[2] = Vector.multiply(torques[2], axes[2]);
        
        //Perpendicular forces:
        F[0] = Vector.multiply(Vector.abs(torques[0]/Vector.magnitude(D[0])), Vector.normalize(Vector.cross(D[0], T[0])));
        F[1] = Vector.multiply(Vector.abs(torques[1]/Vector.magnitude(D[1])), Vector.normalize(Vector.cross(D[1], T[1])));
        F[2] = Vector.multiply(Vector.abs(torques[2]/Vector.magnitude(D[2])), Vector.normalize(Vector.cross(D[2], T[2])));
        
        //Force-space calcs:
        let F1a = F[1];
        let F1b = Vector.add(F[1], Vector.cross(F[1], P[1]));
        let F2a = F[2];
        let F2b = Vector.add(F[2], Vector.cross(F[2], P[1]));
        
        
        let A = (F2b[1]-F1b[1])/(F1a[1]-F1b[1]);
        let B = ((F2a[1]-F2b[1])*(F1b[2]-F2b[2]))/((F1a[1]-F1b[1])*(F2a[2]-F2b[2]));
        let C = ((F2a[1]-F2b[1])*(F1a[2]-F1b[2]))/((F1a[1]-F1b[1])*(F2a[2]-F2b[2]));
        let alpha = (A+B)/(1-C);
        let beta = (F1b[2]-F2b[2]+(F1a[2]-F1b[2])*alpha)/(F2a[2]-F2b[2]);
        
        let ForceYZ = Vector.add(F2b, Vector.multiply(beta, Vector.subtract(F2a, F2b)));
		if(torques[1] == 0 && torques[2] == 0){
        	ForceYZ[1] = 0;
            ForceYZ[2] = 0;
        }

		let lineYZa = [0, ForceYZ[1], ForceYZ[2]];
        let lineYZb = [1, ForceYZ[1], ForceYZ[2]];
        let ForceXYZ;
        if(torques[0] == 0){
        	ForceXYZ = [0, ForceYZ[1], ForceYZ[2]];
        }else {
        	ForceXYZ = Vector.project_point_onto_line(F[0], lineYZa, lineYZb);
        }
        
        ForceXYZ[1] *= -1;
        ForceXYZ[2] *= -1;
        return ForceXYZ
    }
    /*
    var J_angles = Convert.degrees_to_arcseconds([0, 0, 0, 0, 0]) 
    var F = 22
    var T = [F*Convert.mms_to_microns(40.7), F*(Dexter.LINK2 + Dexter.LINK3), F*Dexter.LINK3]
    debugger
    out(Kin.three_joints_force(J_angles, T, 'EndAxisHub'))
    
    
    
    var J_angles = Convert.degrees_to_arcseconds([0, 0, 90, 0, 0]) 
    var F = 22
    var F2 = 0
    var T = [F2*Dexter.LINK3, F*Dexter.LINK3, F*Dexter.LINK3]
    //debugger
    out(Kin.three_joints_force(J_angles, T, 'EndAxisHub'))
    
    var J_angles = Convert.degrees_to_arcseconds([45, 0, 45, 0, 0]) 
    var Fz = 13
    var Fx = 0
    var T = [Fx*Dexter.LINK3, Fz*Dexter.LINK3, Fz*Dexter.LINK3]
    //debugger
    out(Kin.three_joints_force(J_angles, T, 'EndAxisHub'))
    
    
    var Fv_mag = Vector.magnitude(Fv[1])
    var angle = Math.atan(Fv[1][1]/Fv[1][2])
    var hyp = Fv_mag/Math.cos(angle)
    var hyp2 = Fv_mag*Math.sqrt(1+Math.pow(Math.hypot(Fv[1][1], Fv[0][1])/Fv[1][2],2))
    var hyp2 = Fv_mag*Math.sqrt(1+Math.pow(Fv[0][1]/Fv[1][2],2))
    Vector.cross(Fv[1], [0,0,1])
    */
    /*
    function dde_warning(message){
        if(!(dde_warning_list.indexOf(message) > -1)){
        	dde_warning_list.push(message)
    		out("dde_warning: " + message, "red")
        }
    }
    */
    
    static make_xyz_dir_config(xyz = [0, 0.5, 0.1], dir = [0, 0, -1], config = [1, 1, 1]){
    	return [xyz, dir, config]
    }

    /*returns time in milliseconds*/
    /* this errors if the 2 args are of different length.
       It also counts joints beyond joint 5, which it shouldn't
	static predict_move_dur(J_angles_original, J_angles_destination, robot){
        
        //let speed = robot.prop("MAX_SPEED")
        let speed = 30
        let delta = Vector.subtract(J_angles_destination, J_angles_original)
        for(let i = 0; i < delta.length; i++){
        	delta[i] = Math.abs(delta[i])
        }
        return Vector.max(delta)/speed
    }*/

    /*returns time in milliseconds*/
    static predict_move_dur_5_joint(J_angles_original, J_angles_destination, robot){
        //let speed = robot.prop("MAX_SPEED")
        let speed = 30; //degrees per second
        let angle_length = Math.min(J_angles_original.length, J_angles_destination.length);
        angle_length = Math.min(angle_length, 5);
        let delta = [];
        for(let i = 0; i < angle_length; i++){
            let delta_val = J_angles_destination[i] - J_angles_original[i];
            delta.push(Math.abs(delta_val));
        }
        return Vector.max(delta)/speed
    }

    static predict_move_dur(J_angles_original, J_angles_destination, robot){
        //let speed = robot.prop("MAX_SPEED")
        //let speed = 30 //degrees per second
        let angle_length = Math.min(J_angles_original.length, J_angles_destination.length);
        //angle_length = Math.min(angle_length, 5)
        let result_dur_in_seconds = 0;
        for(let i = 0; i < angle_length; i++){
            let delta_val = J_angles_destination[i] - J_angles_original[i];
            delta_val = Math.abs(delta_val);
            let speed = ((i <= 4) ? Kin$1.j1_thru_j5_motor_degrees_per_second  :
                                    Kin$1.dynamixel_320_degrees_per_second);
            let dur = delta_val / speed;
            result_dur_in_seconds = Math.max(result_dur_in_seconds, dur);
        }
        return result_dur_in_seconds
    }

    static tip_speed_to_angle_speed(J_angles_original, J_angles_destination, tip_speed, dexter_inst_or_workspace_pose){
        let EE_point_1 = Kin$1.J_angles_to_xyz(J_angles_destination, dexter_inst_or_workspace_pose)[0];
        let EE_point_2 = Kin$1.J_angles_to_xyz(J_angles_original, dexter_inst_or_workspace_pose)[0];
        let delta = Vector.subtract(J_angles_destination, J_angles_original);
        let dist = Vector.distance(EE_point_2, EE_point_1);
        if(dist == 0){return 30}
        let time = dist/tip_speed;
        for(let i = 0; i < delta.length; i++){
        	delta[i] = Math.abs(delta[i]);
        }
        let max_theta = Vector.max(delta);
        return max_theta/time
    }
    
    static delta_time_to_angle_speed(J_angles_original, J_angles_destination, delta_time){
		let delta = Vector.subtract(J_angles_destination, J_angles_original);
    	for(let i = 0; i < delta.length; i++){
    		delta[i] = Math.abs(delta[i]);
    	}
    	let max_theta = Vector.max(delta);
    	return max_theta/delta_time
	}
    
    /*
    Kin.tip_speed_to_angle_speed([0, 90, 0, 0, 0], [1, 90, 0, 0, 0], 5*_mm/_s)
    */
    
    static angles_to_dir_xyz (x_angle = 0, y_angle = 0){
        if(x_angle.length == 2){
        	y_angle = x_angle[1];
            x_angle = x_angle[0];
        }
        let ZX_plane = [0, cosd(y_angle), sind(y_angle)];
        let ZY_plane = [cosd(x_angle), 0, sind(x_angle)];
        if(Vector.is_equal(ZX_plane, ZY_plane) || Vector.is_equal(Vector.multiply(-1, ZX_plane), ZY_plane)){
        	dde_error("Direction (" + x_angle +", " + y_angle + ") causes a singularity");
        }
		return Vector.round(Vector.normalize(Vector.cross(ZX_plane, ZY_plane)), 15)
    }
    
    static dir_xyz_to_angles(dir_xyz = [0, 0, -1]){
    	let x_angle, y_angle;
        if(dir_xyz[2] == 0){
        	dde_error("The direction " + dir_xyz + " cannot be converted to angles");
        }
        if(dir_xyz[2] < 0){
        	x_angle = atan2d(dir_xyz[0], -dir_xyz[2]);
        	y_angle = atan2d(dir_xyz[1], -dir_xyz[2]);
        }else {
        	if(Math.abs(dir_xyz[0]) > Math.abs(dir_xyz[1])){
        		x_angle = atan2d(dir_xyz[0], -dir_xyz[2]);
        		y_angle = -atan2d(dir_xyz[1], dir_xyz[2]);
            }else {
            	x_angle = -atan2d(dir_xyz[0], dir_xyz[2]);
        		y_angle = atan2d(dir_xyz[1], -dir_xyz[2]);
            }
        }
		return [x_angle, y_angle]
    }
    
    /*
    
    Kin.angles_to_dir_xyz(90, 0)
    
    Kin.angles_to_dir_xyz(91, 45) //[0.999695459881888, -0.017449749160683, 0.017449749160683]
    Kin.angles_to_dir_xyz(91, -45) //[0.999695459881888, 0.017449749160683, 0.017449749160683]
    Kin.angles_to_dir_xyz(-91, 45) //[-0.999695459881888, -0.017449749160683, 0.017449749160683]
    Kin.angles_to_dir_xyz(-91, -45) //[-0.999695459881888, 0.017449749160683, 0.017449749160683]
    
    
    Kin.angles_to_dir_xyz(45, 91) //[-0.017449749160683, 0.999695459881888, 0.017449749160683]
    Kin.angles_to_dir_xyz(-45, 91) //[0.017449749160683, 0.999695459881888, 0.017449749160683]
    
    Kin.angles_to_dir_xyz(91, 91) //[-0.707052927141246, -0.707052927141246, -0.012341654750937]
    Kin.angles_to_dir_xyz(-91, 91) //[0.707052927141246, -0.707052927141246, -0.012341654750937]
    Kin.angles_to_dir_xyz(91, -91) //[-0.707052927141246, 0.707052927141246, -0.012341654750937]
    Kin.angles_to_dir_xyz(-95, -95) //[0.707052927141246, 0.707052927141246, -0.012341654750937]
    
    [0.705757556807952, 0.705757556807952, -0.061745785418449]
    [0.705757556807952, 0.705757556807952, -0.061745785418449] 
    
    Kin.angles_to_dir_xyz(85, 85) //[0.707052927141246, 0.707052927141246, -0.012341654750937]
    
    */
    
    static dir_xyz_to_percent(dir_xyz = [0, 0, -1]){
    	let total = Vector.sum(Vector.abs(dir_xyz));
		return Vector.multiply(100, Vector.divide(dir_xyz, total))
    }
    
	/*
    debugger
    Kin.interp_movement([0, 0, 0, 0, 0], [44, 45, 0, 0, 0], 30)
    */
    static interp_movement(J_angles_original, J_angles_destination, resolution = 5*_deg){
    	let delta = Vector.subtract(J_angles_destination, J_angles_original);
        let abs_delta = [0, 0, 0, 0, 0];
        for(let i = 0; i < delta.length; i++){
        	abs_delta[i] = Math.abs(delta[i]);
        }
        let max_delta = Vector.max(abs_delta);
        let div = 1;
    	let step = Infinity;
    	while(resolution < step){
    		div++;
        	step = max_delta / div;
    	}
        let J_angles_array = [];
        let delta_steps = Vector.divide(delta, div);
        for(let i = 1; i < div+1; i++){
    		J_angles_array.push(Vector.add(Vector.multiply(i, delta_steps), J_angles_original));
    	}
        return J_angles_array
    }
    /*
    out(Kin.angles_to_direction(0, 45))
    */
    
    static move_to_straight(xyz_1, xyz_2, J5_direction, config, tool_speed = 5*_mm / _s, resolution = .5*_mm, dexter_inst_or_workspace_pose, no_error = false){
    	let U1 = xyz_1;
    	let U2 = xyz_2;
    	let U21 = Vector.subtract(U2, U1);
    	let v21 = Vector.normalize(U21);
    	let mag = Vector.magnitude(U21);
    	let div = 1;
    	let step = Infinity;
    	while(resolution < step){
    		div++;
        	step = mag / div;
    	}
    	let angular_velocity;
    	let Ui, new_J_angles;
    	let old_J_angles = Kin$1.xyz_to_J_angles(U1, J5_direction, config, dexter_inst_or_workspace_pose);
        let xyzs = [];
        let speeds = [];
    	for(let i = 0; i < div+1; i++){
    		Ui = Vector.add(U1, Vector.multiply(i*step, v21));
            if(!Kin$1.is_in_reach(Ui, J5_direction, config, dexter_inst_or_workspace_pose) && no_error){
        		return xyzs
            }
            new_J_angles = Kin$1.xyz_to_J_angles(Ui, J5_direction, config, dexter_inst_or_workspace_pose);
        	angular_velocity = Kin$1.tip_speed_to_angle_speed(old_J_angles, new_J_angles, tool_speed, dexter_inst_or_workspace_pose);
        	old_J_angles = new_J_angles;
            
            xyzs.push(Ui);
            speeds.push(angular_velocity);
            /*
        	movCMD.push(make_ins("S", "MaxSpeed", angular_velocity))
    		movCMD.push(make_ins("S", "StartSpeed", angular_velocity))
        	movCMD.push(Dexter.move_to(Ui, J5_direction, config, workspace_pose))
            */
    	}
		return [xyzs, speeds]
	}

    //this will probably be put into Kin at some point
    //will only work with configs of [1, 1, 1] or [1, 0, 1]
    /*static point_down(J_angles){
        //let J = JSON.parse(JSON.stringify(J_angles)) //the new copy function we wrote doesn't exist in LTS
        //J[3] = 90 - J[2] - J[1]
        //J[4] = 0
        //return J
        return [J_angles[0],
                J_angles[1],
                J_angles[2],
                90 - J_angles[2] - J_angles[1],
                0 ]
    }*/

    static point_down(J_angles){
        let result = [];
        for(let i = 0; i < J_angles.length; i++){
            if(i === 3) { result.push(90 - J_angles[2] - J_angles[1]); }
            else if(i === 4) { result.push(0); }
            else { result.push(J_angles[i]); }
        }
        return result
    }

    //if angles(the joint angles of a dexter) are
    //pointing in the direction of "direction" within a
    //tolerance of tolerance_in_deg, then return true.
    static is_direction(angles,
                        direction=[0, 0, -1], //down
                        tolerance_in_deg=0.01){ //always non-negative
        let cur_dir = Kin$1.J_angles_to_xyz(angles)[1];
        let deg = Math.abs(Vector.angle(direction, cur_dir)); //angle between the cur dir and the arg direction
        return deg <= tolerance_in_deg
    }

    //Returns an array of an inner radius, an outer radius, and the center point
    //of the outer circle. All xyz locations between the two radii are valid "in-range"
    //locations including locations ON the returned inner and outer radii.
    static xy_donut_slice_approx(Z, dir){
        let inner_r, outer_r;
        let feet_r = 210 * _mm;
        let non_zero_r = 2 * _cm; //5 * _mm
        if(Z < Dexter.LINK1){
            inner_r = feet_r;
        }else if(Z < Dexter.LINK1 + feet_r){
            inner_r = Math.sqrt(Math.pow(feet_r, 2) - Math.pow(Z - Dexter.LINK1, 2));
            if(inner_r < non_zero_r){
                inner_r = non_zero_r;
            }
        }else {
            inner_r = non_zero_r;
        }

        let v54 = Vector.multiply(-Dexter.LINK5, dir);
        let v54_proj = [v54[0], 0, v54[2]];
        let v43 = Vector.multiply(Dexter.LINK4, Vector.normalize(Vector.rotate(v54_proj, [0, 1, 0], 90)));
        let v35 = Vector.add(v54, v43);

        outer_r = v35[0] + Math.sqrt(Math.pow(Dexter.LINK2 + Dexter.LINK3, 2) - Math.pow((Z + v35[2] - Dexter.LINK1), 2));

        let outer_xy = [0, 0];
        if(Number.isNaN(outer_r)) {
            inner_r = 0;
            outer_r = 0;
        }
        return [inner_r, outer_r, outer_xy]
    }

    //example of use:
    //var my_angles = Kin.xyz_to_J_angles([0, 0.3, 0.3], [1, 1, -1])
    //out(Kin.J_angles_to_dir(my_angles))
    static J_angles_to_dir(J_angles){
        let U = Kin$1.forward_kinematics(J_angles.slice(0, 5));
        return Vector.normalize(Vector.subtract(U[0][5], U[0][4]))
    }

    //Returns one positive float in meters of how far Dexter can go from its origin, the table,
    //to straight up. ie is maximun height.
    //When the Kin fns are changed to using the actual link lengths from
    //a particular Dexter, this fn will get passed a dexter instance
    //and get its link lengths from that.
    //ultimately needs to get the link lengths from the dexter instance,
    //bot for now, all kin fns work off just the Dexter.LINK1 to 5 constants
    //return Dexter.LINK1 + Dexter.LINK2 + Dexter.LINK3 - Dexter.LINK5
    //returns the highest z value you can move Dexter to for a given xy position and direction
    //returns NaN if xy is out of range or in singularity
    static max_z( x, y, dir = [0, 0, -1],) {
            let L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5];
            if(x == 0 && y == 0){
                return NaN
            }

            let u54 = Vector.multiply(-L[4], dir);
            let u54_xy_proj = [u54[0], u54[1], 0];
            let u4 = Vector.add([x, y, 0], u54_xy_proj);

            let u0 = [0, 0, 0];
            let u1 = [0, 0, L[0]];

            let p1 = Vector.points_to_plane(u1, u0, u4);

            let v54_p1_proj = Vector.project_vector_onto_plane(u54, p1);
            let u43_a = Vector.multiply(L[3], Vector.rotate(Vector.normalize(v54_p1_proj), p1, 90));
            let u43_b = Vector.multiply(L[3], Vector.rotate(Vector.normalize(v54_p1_proj), p1, -90));

            let u3_a = [u43_a[0], u43_a[1], 0];
            let u3_b = [u43_b[0], u43_b[1], 0];
            u3_a = Vector.add(u3_a, u4);
            u3_b = Vector.add(u3_b, u4);

            let dist_a = Vector.distance(u3_a, [0, 0, 0]);
            let dist_b = Vector.distance(u3_b, [0, 0, 0]);

            let u3, u34;
            if(dist_a < dist_b){
                u3 = u3_a;
                u34 = Vector.multiply(-1, u43_a);
            }else {
                u3 = u3_b;
                u34 = Vector.multiply(-1, u43_b);
            }
            let xy_mag = Vector.magnitude(u3);
            let R = L[1] + L[2];
            u3[2] = Math.sqrt(Math.pow(R, 2) - Math.pow(xy_mag, 2));

            let u45 = Vector.multiply(-1, u54);
            let u5 = Vector.add(u3, u34, u45, u1);

            return u5[2]
        }
//Examples:
        /*
        reach_extents()
        */

        /*
        var my_x = 0
        var my_y = 0.4
        var my_dir = [0, 0, -1]

        max_z(my_x, my_y, my_dir)
        */

        /*
        //Brute force method of finding max z:
        for(let z = 0; z < 1; z+=1*_mm){
            Kin.xyz_to_J_angles([my_x, my_y, z], my_dir)
            out(z)
        }
        */


    //returns furthest possible reach in each axis
    //format: [[x_min, x_max], [y_min, y_max], [z_min, z_max]]
    //assumes obscure but maximized direction vector
    static reach_extents(){
        let L = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5];
        let R = L[1] + L[2] + Math.hypot(L[3], L[4]);
        return [[-R, R], [-R, R], [L[0] - R, L[0] + R]]
    }

    static roll_to_J6(xyz, roll = 0){
        return atan2d(xyz[1], xyz[0]) - 90 - roll
    }

    static J6_to_roll(xyz, J6 = 0){
        return atan2d(xyz[1], xyz[0]) - 90 - J6
    }
    
    /*
	Kin.inverse_kinematics([0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4], [0, 1, 0])
	debugger
    Kin.context_inverse_kinematics(
    	[0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4],
        [0, 1, 0],
        [1, 1, 1],
        {similar_J_angles: [30, 1e-10, 0, -1e-10, 0]}
    )
    var my_context = {similar_J_angles: [30, 1e-10, 0, -1e-10, 0]}
    Kin.context_inverse_kinematics(
    	[0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4],
        [0, 1, 0],
        [1, 1, 1],
        my_context
    )
	
    */
    
    /*
    this.context_inverse_kinematics = function (xyz, direction = [0, 0, -1], config = [1, 1, 1], 
    	context = {
        	workspace_pose: Vector.make_pose(),
            similar_J_angles: [30, 0, 0, 0, 0],
            link_lengths: [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]
        }
        
     this.context_inverse_kinematics = function (xyz, direction = [0, 0, -1], config = [1, 1, 1], 
    	context = {
        	workspace_pose: Vector.make_pose(),
            similar_J_angles: [30, 0, 0, 0, 0],
            link_lengths: [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]
        }
        
		
        //Singularity at home position
		var jangles = Kin.context_inverse_kinematics({
     		xyz: [0, Dexter.LINK5, Dexter.LINK1+Dexter.LINK2+Dexter.LINK3+Dexter.LINK4],
            dir: [0, 1, 0],
     		similar_J_angles: [-30, 0, 0, 0, 0],
     	})[0]
        out(jangles, 3)
        
        
        
        
        
        //Singularity when J5 is +/- 90
		var jangles = Kin.context_inverse_kinematics({
     		xyz: [Dexter.LINK5, 0.5, 0.3],
            dir: [1, 0, 0],
     		similar_J_angles: [0, 0, 0, 0, 0],
     	})[0]
        out(jangles, 3)
        
        
        new Job({name: "my_job",
         do_list: [
         	Dexter.set_parameter("MaxSpeed", 20),
         	Dexter.move_all_joints(jangles),
            //Dexter.move_to([0, 0.0001, 0.45])
         ]}).start()
		
        
        function main(){
        	CMD = []
            let jangles
            let start_theta = -90
            let end_theta = 90
            let theta_step = 1
            
            CMD.push(Dexter.set_parameter("MaxSpeed", 3))
            CMD.push(Dexter.set_parameter("StartSpeed", 3))
            
            for(let theta = start_theta; theta < end_theta; theta += theta_step){
            	jangles = Kin.context_inverse_kinematics({
     				xyz: [Dexter.LINK5, 0.5, 0.3],
            		dir: [1, 0, 0],
     				similar_J_angles: [0, 0, 0, theta, 0],
     			})[0]
            	CMD.push(Dexter.move_all_joints(jangles))
            }
            for(let theta = end_theta; theta > start_theta; theta -= theta_step){
            	jangles = Kin.context_inverse_kinematics({
     				xyz: [Dexter.LINK5, 0.5, 0.3],
            		dir: [1, 0, 0],
     				similar_J_angles: [0, 0, 0, theta, 0],
     			})[0]
            	CMD.push(Dexter.move_all_joints(jangles))
            }
            
            return CMD
        }
        
        new Job({name: "J4_90_Singularity",
         do_list: [
         	Dexter.set_parameter("MaxSpeed", 20),
            Dexter.set_parameter("StartSpeed", 0.1),
         	main
         ]}).start()
         
        
        
        Kin.inverse_kinematics([0, 0.0001, 0.45])[0]
        
        //Singularity at [0, 0, z]
		var jangles = Kin.context_inverse_kinematics({
     		xyz: [0, 0, 0.45],
            dir: [0, 0, -1],
            config: [1, 1, 1],
     		similar_J_angles: [0, 0, 0, 0, 0],
     	})[0]
        out(jangles, 3)
        
        
        
        
        
        Kin.context_inverse_kinematics({
     		xyz: [0, 0.5, 0.1],
            dir: [0, 1, 0],
     		similar_J_angles: [0, 0, 0, 0, 0],
     	})
        
      	Kin.context_inverse_kinematics()
     */

     /*not called may 30, 2019 and James W said ok to comment out. --fry
     static signed_angle_test(vector_A, vector_B, plane){
    	let epsilon = 1e-14
    	//checks if vectors lie in plane
        let cross_product = Vector.normalize(Vector.cross(Vector.shorten(vector_A), Vector.shorten(vector_B)))
        let short_plane = Vector.shorten(plane)
        
        let guess_angle = Vector.angle(vector_A, vector_B)
        if(Vector.is_equal(cross_product, short_plane)){
        	return guess_angle
        }else if(Vector.is_equal(Vector.multiply(-1, cross_product), short_plane)){
        	return -guess_angle
        }else{
        	dde_error("Error: input vectors do not lie in plane")
        }
    }*/
    
     
     /* not called. May be used some day. Has the pre-may 2019 use of global vars for Dexter.LINK1 nd firends.
     this.context_inverse_kinematics = function(args){
	
		//Input arg management:
        
        if(args.xyz_dir_config && (args.xyz || args.dir || args.config)){
        	let error_string
            if(args.config){error_string = "config"}
            if(args.dir){error_string = "dir"}
            if(args.xyz){error_string = "xyz"}
            
            dde_error("Both " + error_string + " and xyz_dir_config cannot be passed into Kin.context_inverse_kinematics")
        }
        
        //Defaults:
        if(args.xyz === undefined){				args.xyz = [0, 0.5, 0.1]}
        if(args.dir === undefined){				args.dir = [0, 0, -1]}
        if(args.config === undefined){			args.config = [1, 1, 1]}
        if(args.workspace_pose === undefined){	args.workspace_pose = Vector.make_pose()}
        if(args.similar_J_angles === undefined){args.similar_J_angles = [0, 0, 0, 0, 0]}
        if(args.link_lengths === undefined){	args.link_lengths = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]}

		let xyz, direction, config
		if(args.xyz_dir_config){
			xyz = args.xyz_dir_config[0]
            direction = args.xyz_dir_config[1]
            config = args.xyz_dir_config[2]
        }else{
        	xyz = args.xyz
            direction = args.dir
            config = args.config
        }


		//Kinematics Start
        let J = Vector.make_matrix(1, 5)[0] // Joint Angles
        let U = Vector.make_matrix(5, 3)
        let P = [0, 0, 0, 0]
        let L = args.link_lengths 
		let normal = direction
    	let right_arm = config[0]
    	let elbow_up = config[1]
    	let wrist_out = config[2]
        
        if(direction.length == 2){
        	normal = Kin.angles_to_dir_xyz(direction[0], direction[1])
        }else if(direction.length == 3){
        	if(Vector.magnitude(direction) == 0){
            	dde_error("Direction must have a magnitude. Try [0, 0, -1] or [0, 0] for the [x_angle, y_angle] form")
            }
        }else{
        	dde_error("Direction must be in the form [x, y, z] or [x_angle, y_angle]")
        }
        
  		let xyz_trans = Vector.transpose(Vector.matrix_multiply(args.workspace_pose, Vector.properly_define_point(xyz))).slice(0,3)
		let normal_trans = Vector.transpose(Vector.matrix_multiply(args.workspace_pose, Vector.properly_define_vector(normal))).slice(0,3)

        
        
    	//Knowns:
        P[0] = [1, 0, 0, 0]
    	let V54 = Vector.multiply(-1, Vector.normalize(normal_trans)) //Direction of EE
        U[0] = [0, 0, 0]
        let V10 = [0, 0, 1]
    	U[1] = Vector.multiply(L[0], V10)
        U[4] = Vector.add(xyz_trans, Vector.multiply(Dexter.LINK5, V54))
        U[5] = xyz_trans
        
    	
    	//Solving for P1
    	P[1] = Vector.points_to_plane(U[1], U[0], U[4])
        if(Vector.is_NaN(P[1])){
        	P[1] = Vector.points_to_plane(U[1], U[0], U[3])
            if(Vector.is_NaN(P[1])){

        		//dde_error(`Singularity: Toolpoint xyz is on Base axis. [0, 0, z] divides by 0.
            	//Try [0, 1e-10, z] if it works use the ouputted joint angles for a move_all_joints() instead.
            	//The first joint angle can be changed to any value without affecting the tool point`)

                
                P[1] = Vector.rotate([1, 0, 0], [0, 0, -1], args.similar_J_angles[0])
                
            }
        }
		
    
		//Solving for U3
    	let U54_Proj = Vector.project_vector_onto_plane(V54, P[1])
        
        let U3_a, U3_b, dist_a, dist_b
        if(Vector.magnitude(U54_Proj) > 1e-10){
        
    		U3_a = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], 90)))
        	U3_b = Vector.add(U[4], Vector.multiply(L[3], Vector.rotate(Vector.normalize(U54_Proj), P[1], -90)))
        	
        
        	//This is proven to work for directions of approx. [0, 1, 0] but has potentially not been tested enough
        	dist_a = Vector.distance(U3_a, [0, 0, 0])
    		dist_b = Vector.distance(U3_b, [0, 0, 0])

        	//if (wrist_out){
    		//	if (dist_a < dist_b){
        	//		U[3] = U3_a
        	//	}else{
        	//		U[3] = U3_b
        	//	}
    		//}else{
    		//	if (dist_a > dist_b){
        	//		U[3] = U3_a
        	//	}else{
        	//		U[3] = U3_b
        	//	}
    		//}

            
            //Solving for P2
    		//P[2] = Vector.points_to_plane(U[5], U[4], U[3])
        	let P2_a = Vector.points_to_plane(U[5], U[4], U3_a)
            if(Vector.is_NaN(P2_a)){
        		dde_error("Unknown plane_a singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.")
        	}
            let P2_b = Vector.points_to_plane(U[5], U[4], U3_b)
            if(Vector.is_NaN(P2_b)){
        		dde_error("Unknown plane_b singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.")
        	}
		
    		//Solving for U2
    		let D3_a = Vector.distance(U3_a, U[1])
        	if(Vector.is_equal(D3_a, Dexter.LINK2 + Dexter.LINK3, 9)){
        		D3_a = Dexter.LINK2 + Dexter.LINK3
        	}
            let D3_b = Vector.distance(U3_b, U[1])
        	if(Vector.is_equal(D3_b, Dexter.LINK2 + Dexter.LINK3, 9)){
        		D3_b = Dexter.LINK2 + Dexter.LINK3
        	}
        	
        	let wrist_a_in_reach = true
            let wrist_b_in_reach = true
        	
        	//Checking if in reach
        	if (D3_a > Dexter.LINK2 + Dexter.LINK3){
        		let out_of_reach_dist_a = Vector.round(D3_a - (Dexter.LINK2 + Dexter.LINK3), 4)
        		wrist_a_in_reach = false
                //dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
        	}
            if (D3_b > Dexter.LINK2 + Dexter.LINK3){
        		let out_of_reach_dist_b = Vector.round(D3_b - (Dexter.LINK2 + Dexter.LINK3), 4)
        		//dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
        		wrist_b_in_reach = false
            }
        
        
    		//let Beta = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3, 2)) / (2 * D3 * L[1])) // Law of Cosines
        	let Beta_a = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3_a, 2)) / (2 * D3_a * L[1])) // Law of Cosines
        	let V31_a = Vector.normalize(Vector.subtract(U3_a, U[1]))
            
            let Beta_b = acosd((-Math.pow(L[2], 2) + Math.pow(L[1], 2) + Math.pow(D3_b, 2)) / (2 * D3_b * L[1])) // Law of Cosines
        	let V31_b = Vector.normalize(Vector.subtract(U3_b, U[1]))
            
            
    		let V23_a, V23_b
        	//For wrist a
    		let U2_aA = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_a, P[1], Beta_a)))
    		let U2_aB = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_a, P[1], -Beta_a)))
        	let V2A1_a = Vector.subtract(U2_aA, U[1])
        	let V32A_a = Vector.subtract(U[3], U2_aA)
        	
        	let U2_a
    		if (elbow_up){
    			if(Vector.dot(Vector.cross(V2A1_a, V32A_a), P[1]) < 0){
        			U2_a = U2_aA
        		}else{
        			U2_a = U2_aB
        		}
    		}else{
      			if(Vector.dot(Vector.cross(V2A1_a, V32A_a), P[1]) > 0){
        			U2_a = U2_aA
        		}else{
        			U2_a = U2_aB
        		}
    		}
            
            
            
            //For wrist b
    		let U2_bA = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_b, P[1], Beta_b)))
    		let U2_bB = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V31_b, P[1], -Beta_b)))
        	let V2A1_b = Vector.subtract(U2_bA, U[1])
        	let V32A_b = Vector.subtract(U[3], U2_bA)
        
        	let U2_b
    		if (elbow_up){
    			if(Vector.dot(Vector.cross(V2A1_b, V32A_b), P[1]) < 0){
        			U2_b = U2_bA
        		}else{
        			U2_b = U2_bB
        		}
    		}else{
      			if(Vector.dot(Vector.cross(V2A1_b, V32A_b), P[1]) > 0){
        			U2_b = U2_bA
        		}else{
        			U2_b = U2_bB
        		}
    		}
            
            
            //Solving for joint angles
            
            //wrist a
    		let V21_a = Vector.normalize(Vector.subtract(U2_a, U[1]))
    		let V32_a = Vector.normalize(Vector.subtract(U3_a, U2_a))
    		let V43_a = Vector.normalize(Vector.subtract(U[4], U3_a))
            let J0_a = Vector.signed_angle(P[1], P[0], V10) 
    		let J1_a = Vector.signed_angle(V21_a, V10, P[1])
    		let J2_a = Vector.signed_angle(V32_a, V21_a, P[1])
    		let J3_a = Vector.signed_angle(V43_a, V32_a, P[1])
    		let J4_a = Vector.signed_angle(P2_a, P[1], V43_a)
            
            //wrist b
            let V21_b = Vector.normalize(Vector.subtract(U2_b, U[1]))
    		let V32_b = Vector.normalize(Vector.subtract(U3_b, U2_b))
    		let V43_b = Vector.normalize(Vector.subtract(U[4], U3_b))
            let J0_b = Vector.signed_angle(P[1], P[0], V10) 
    		let J1_b = Vector.signed_angle(V21_b, V10, P[1])
    		let J2_b = Vector.signed_angle(V32_b, V21_b, P[1])
    		let J3_b = Vector.signed_angle(V43_b, V32_b, P[1])
    		let J4_b = Vector.signed_angle(P2_b, P[1], V43_b)
            
            let J0, J1, J2, J3, J4
            let wrist_score_a = Math.abs(J3_a) + Math.abs(J4_a)
            let wrist_score_b = Math.abs(J3_b) + Math.abs(J4_b)
            if(!wrist_a_in_reach){
            	wrist_score_a = Infinity 
            }
            if(!wrist_b_in_reach){
            	wrist_score_b = Infinity 
            }
            
            if(wrist_score_a < wrist_score_b){
            	if(!wrist_a_in_reach){
            		dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
            	}
            	J0 = J0_a
                J1 = J1_a
                J2 = J2_a
                J3 = J3_a
                J4 = J4_a
            }else{
            	if(!wrist_b_in_reach){
            		dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
            	}
            	J0 = J0_b
                J1 = J1_b
                J2 = J2_b
                J3 = J3_b
                J4 = J4_b
            }
            
			if(right_arm == 1){
    			J[0] = J0
    			J[1] = J1
    			J[2] = J2
    			J[3] = J3
    			J[4] = J4
    		}else{
    			J[0] = J0
    			J[1] = -J1
    			J[2] = -J2
    			J[3] = -J3
    			J[4] = -J4
    		}
            
            
    	}else{
        	let a = L[3]
            let b = L[2]
            let c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) -2*a*b*cosd(180-args.similar_J_angles[3])) //Law of Cosines
            
            let Gamma = acosd((-Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2)) / (2 * c * b)) // Law of Cosines
            
            
            a = L[1]
            b = Vector.distance(U[4], U[1])
            
            let L41_max = L[1] + L[2] + L[3]
        	if(Vector.is_equal(b, L41_max, 9)){
        		b = L41_max
        	}
        
        	//Checking if in reach
        	if (b > L41_max){
        		let out_of_reach_dist = Vector.round(b - (L41_max), 4)
        		dde_error("Point [" + Vector.round(xyz, 3)+"], [" + Vector.round(V54,3) + '] is ' + out_of_reach_dist + 'm out of reach')
        	}
            
        	let Beta = acosd((-Math.pow(c, 2) + Math.pow(a, 2) + Math.pow(b, 2)) / (2 * a * b)) // Law of Cosines
        	let V41 = Vector.normalize(Vector.subtract(U[4], U[1]))
    		let V23
            
            let U2_a = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V41, P[1], Beta)))
    		let U2_b = Vector.add(U[1], Vector.multiply(L[1], Vector.rotate(V41, P[1], -Beta)))
        	
            let V2a1 = Vector.subtract(U2_a, U[1])
            let V2b1 = Vector.subtract(U2_b, U[1])
        	//let V32a = Vector.subtract(U[3], U2_a)
            
            let V42a = Vector.subtract(U[4], U2_a)
            let V42b = Vector.subtract(U[4], U2_b)
            
			
            
            let rot_sign = -1
            
            let theta_a = signed_angle_test(V2a1, V41, P[1])
            let theta_b = signed_angle_test(V2b1, V41, P[1])
            
            if (elbow_up){
    			if(theta_a < theta_b){
        			U[2] = U2_a
                    
        		}else{
        			U[2] = U2_b
                    rot_sign = 1
        		}
    		}else{
      			if(theta_a < theta_b){
        			U[2] = U2_a
                    rot_sign = 1
        		}else{
        			U[2] = U2_b
        		}
    		}
            

    		//if (elbow_up){
    		//	if(Vector.dot(Vector.cross(V2a1, V32a), P[1]) < 0){
        	//		U[2] = U2_a
            //        rot_sign = 1
        	//	}else{
        	//		U[2] = U2_b
        	//	}
    		//}else{
      		//	if(Vector.dot(Vector.cross(V2a1, V32a), P[1]) > 0){
        	//		U[2] = U2_a
        	//	}else{
        	//		U[2] = U2_b
            //        rot_sign = 1
        	//	}
    		//}

            

           // V21 = Vector.normalize(Vector.subtract(U[2], U[1]))
           // V31 = Vector.rotate(V21, P[1], rot_sign*Gamma)
           // U[3] = Vector.add(U[2], Vector.multiply(L[2], V31))

            
            let V42 = Vector.normalize(Vector.subtract(U[4], U[2]))
            let V32 = Vector.rotate(V42, P[1], Math.sign(args.similar_J_angles[3])*Gamma)
            U[3] = Vector.add(U[2], Vector.multiply(L[2], V32))
            
            //Solving for P2
    		P[2] = Vector.points_to_plane(U[5], U[4], U[3])
        	if(Vector.is_NaN(P[2])){
        		dde_error("Unknown plane singularity at: " + xyz + ", " + direction + ", " + config + ". Please copy this message and report it as a bug.")
        	}
            
            
            //Solving for joint angles
    		let V21 = Vector.normalize(Vector.subtract(U[2], U[1]))
    		V32 = Vector.normalize(Vector.subtract(U[3], U[2]))
    		let V43 = Vector.normalize(Vector.subtract(U[4], U[3]))
			if(right_arm == 1){
    			J[0] = Vector.signed_angle(P[1], P[0], V10) 
    			J[1] = Vector.signed_angle(V21, V10, P[1])
    			J[2] = Vector.signed_angle(V32, V21, P[1])
    			J[3] = Vector.signed_angle(V43, V32, P[1])
    			J[4] = Vector.signed_angle(P[2], P[1], V43)
    		}else{
    			J[0] = Vector.signed_angle(P[1], P[0], V10) + 180
    			J[1] = -Vector.signed_angle(V21, V10, P[1])
    			J[2] = -Vector.signed_angle(V32, V21, P[1])
    			J[3] = -Vector.signed_angle(V43, V32, P[1])
    			J[4] = -Vector.signed_angle(P[2], P[1], V43)
    		}
            
            
        }
        
        
       
    	


    	
    	
    	if(Vector.is_NaN(J[2])){
        	let thres = 100
        	if(Dexter.LINK1 > thres || Dexter.LINK2 > thres || Dexter.LINK3 > thres || Dexter.LINK4 > thres || Dexter.LINK5 > thres){
            	dde_error("Link lengths are non properly defined: "  
                + "</br>Dexter.LINK1: " + Dexter.LINK1 + " (meters)"
                + "</br>Dexter.LINK2: " + Dexter.LINK2 + " (meters)"
                + "</br>Dexter.LINK3: " + Dexter.LINK3 + " (meters)"
                + "</br>Dexter.LINK4: " + Dexter.LINK4 + " (meters)"
                + "</br>Dexter.LINK5: " + Dexter.LINK5 + " (meters)")
            }
        	dde_error("Singularity at: " + xyz + ", " + direction + ", " + config + ".</br>Please copy this message and report it as a bug.")
    	}
    
    	return [J, U, P]
    } end of context_inverse_kinematics */
}
globalThis.Kin = Kin$1;

//Used in predict_move_dur
//Computation based on James N reading of Dynamixel XL 320, 114RPM at 7.4 volts.
//but we're running it at 5 volts so down to 77RPM, which is 1.28rps
//which is 461 deg per sec.
//the dynamixel 430 has a slower RPM, but the 320 is our default.
//used in
Kin$1.dynamixel_320_degrees_per_second = 461;
Kin$1.j1_thru_j5_motor_degrees_per_second = 30;
    /*
    
    Kin.move_to_straight([0, .5, .075], [0, .6, .075])
    */
    /*
    this.make_ins_move_straight(xyz_1, xyz_2, J5_direction, config, tool_speed = 5*_mm / _s, resolution = .5*_mm, robot_pose){
    	let CMD = []
        
        
        for(let i = 0; i < .length; i++){
    		CMD.push(make_ins("S", "MaxSpeed", angular_velocity))
    		CMD.push(make_ins("S", "StartSpeed", angular_velocity))
        	CMD.push(Dexter.move_to(Ui, J5_direction, config, robot_pose))
        }
        return CMD
    }*/

/*
var point_1 = [0, .3, .4]
//debugger
//var myJangles = Kin.xyz_to_J_angles([-0.4961591506890708, 0.4961591506890706, 0.08255000000000005], [0, 0, -1], Dexter.RIGHT_UP_OUT)
myJangles = [0,-45, -45, 0, 0]
var myPoints = Kin.forward_kinematics(myJangles)[0]
var myPosition = Kin.J_angles_to_xyz(myJangles)
debugger
Kin.xyz_to_J_angles(myPosition[0], myPosition[1], myPosition[2])


var point_1 = [.1, .2, .3]
//debugger
var myJangles = Kin.xyz_to_J_angles(point_1, [0, 1, -1], Dexter.RIGHT_DOWN_OUT)
var new_point = Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, 1, -1], Dexter.RIGHT_DOWN_OUT))
*/

/*
new TestSuite("Inverse to Forward Kinematics and Back",
	["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3]))", "[[0.09999999999999996, 0.20000000000000004, 0.30000000000000004],[0, 0, -1],[1, 1, 1]]"],
	["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, .1, -1]))", "[ [0.10000000000000012, 0.19999999999999998, 0.30000000000000004], [3.362274453740632e-16, 0.09950371902099878, -0.995037190209989], [1, 1, 1]]"],
	["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, 0, -1], [1, 0, 1]))", "[ [0.09999999999999994, 0.20000000000000004, 0.3], [-3.362274453740631e-16, -6.724548907481262e-16, -1], [1, 0, 1]]", "known, wrist_out vs wrist_in issue"],
    ["Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3], [0, 0, -1], [1, 0, 0]))", "[[0.1, 0.20000000000000012, 0.29999999999999993], [0, 0, -1], [1, 0, 0]]"],
    ["Kin.xyz_to_J_angles(Kin.J_angles_to_xyz([0, 45, 45, 30, 0]))", "[0, 45, 44.999999999999986, 30.000000000000014, 0]"]
)

debugger
Kin.xyz_to_J_angles([.1, .2, .3])
Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([.1, .2, .3]))

Kin.J_angles_to_xyz(Kin.xyz_to_J_angles([0.1, .5, .3]))



*/

//txt class
//James Wigglesworth
//Started: 5_16_17
//Updated: 5_1_19


/*

var my_string = 
`BAYMF`

var points = txt.string_to_lines(my_string)
Vector.max(txt.a())[0]
var dd = txt.a_max()
points[1]


Vector.add(txt.a(), [3, 0, 100])


SW.clear_output()
var file_path = choose_file()
var content = read_file(file_path)
var entities = DXF.content_to_entities(content)
var points = DXF.entities_to_points(entities)
var noprint = out(points)

Vector.max(Vector.transpose(Vector.pull(txt.vertical_bar(), [0, txt.vertical_bar().length-1], [0,0])))

txt.string_to_lines("#%()@[]_{}~^><|\\\`\n")
txt.string_to_lines("Hello\nWorld!\b\b\b\b\b\b______", undefined, undefined, true)
*/

var txt$1 = new function(){
	this.string_to_lines = function(string = "Hello World", horizontal_spacing = 0.15, vertical_spacing = 0.15, fixed_width = false){
    	let lines = [];
        let spacing = horizontal_spacing;
        let vert_spacing = 1 + vertical_spacing;
        let max_width = 0;
        let line_num = 0;
        let width = 0;
        
        for(let i = 0; i < string.length; i++){
        	switch(string[i]){
            	case "a":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.a()));
                    width = txt$1.a_max()+spacing;
                	break
                case "b":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.b()));
                    width = txt$1.b_max()+spacing;
                	break
                case "c":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.c()));
                    width = txt$1.c_max()+spacing;
                	break
                case "d":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.d()));
                    width = txt$1.d_max()+spacing;
                	break
                case "e":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.e()));
                    width = txt$1.e_max()+spacing;
                	break
                case "f":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.f()));
                    width = txt$1.f_max()+spacing;
                	break
                case "g":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.g()));
                    width = txt$1.g_max()+spacing;
                	break
                case "h":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.h()));
                    width = txt$1.h_max()+spacing;
                	break
                case "i":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.i()));
                    width = txt$1.i_max()+spacing;
                	break
                case "j":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.j()));
                    width = txt$1.j_max()+spacing;
                	break
                case "k":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.k()));
                    width = txt$1.k_max()+spacing;
                	break
                case "l":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.l()));
                    width = txt$1.l_max()+spacing;
                	break
                case "m":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.m()));
                    width = txt$1.m_max()+spacing;
                	break
                case "n":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.n()));
                    width = txt$1.n_max()+spacing;
                	break
                case "o":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.o()));
                    width = txt$1.o_max()+spacing;
                	break
                case "p":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.p()));
                    width = txt$1.p_max()+spacing;
                	break
                case "q":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.q()));
                    width = txt$1.q_max()+spacing;
                	break
                case "r":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.r()));
                    width = txt$1.r_max()+spacing;
                	break
                case "s":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.s()));
                    width = txt$1.s_max()+spacing;
                	break
                case "t":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.t()));
                    width = txt$1.t_max()+spacing;
                	break
                case "u":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.u()));
                    width = txt$1.u_max()+spacing;
                	break
                case "v":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.v()));
                    width = txt$1.v_max()+spacing;
                	break
                case "w":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.w()));
                    width = txt$1.w_max()+spacing;
                	break
                case "x":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.x()));
                    width = txt$1.x_max()+spacing;
                	break
                case "y":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.y()));
                    width = txt$1.y_max()+spacing;
                	break
                case "z":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.z()));
                    width = txt$1.z_max()+spacing;
                	break
                
                //Capital Letters
                case "A":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.A()));
                    width = txt$1.A_max()+spacing;
                	break
                    
               case "B":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.B()));
                    width = txt$1.V_max()+spacing;
                	break
                    
               case "C":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.C()));
                    width = txt$1.C_max()+spacing;
                	break
                    
               case "D":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.D()));
                    width = txt$1.D_max()+spacing;
                	break
                    
               case "E":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.E()));
                    width = txt$1.E_max()+spacing;
                	break
                    
               case "F":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.F()));
                    width = txt$1.F_max()+spacing;
                	break
                    
               case "G":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.G()));
                    width = txt$1.G_max()+spacing;
                	break
                    
               case "H":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.H()));
                    width = txt$1.H_max()+spacing;
                	break
                    
               case "I":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.I()));
                    width = txt$1.I_max()+spacing;
                	break
                    
               case "J":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.J()));
                    width = txt$1.J_max()+spacing;
                	break
                    
               case "K":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.K()));
                    width = txt$1.K_max()+spacing;
                	break
                    
               case "L":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.L()));
                    width = txt$1.L_max()+spacing;
                	break
                    
               case "M":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.M()));
                    width = txt$1.M_max()+spacing;
                	break
                    
               case "N":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.N()));
                    width = txt$1.N_max()+spacing;
                	break
                    
               case "O":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.O()));
                    width = txt$1.O_max()+spacing;
                	break
                    
               case "P":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.P()));
                    width = txt$1.P_max()+spacing;
                	break
                    
               case "Q":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.Q()));
                    width = txt$1.Q_max()+spacing;
                	break
                    
               case "R":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.R()));
                    width = txt$1.R_max()+spacing;
                	break
                    
               case "S":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.S()));
                    width = txt$1.S_max()+spacing;
                	break
                    
               case "T":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.T()));
                    width = txt$1.T_max()+spacing;
                	break
                    
               case "U":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.U()));
                    width = txt$1.U_max()+spacing;
                	break
                    
               case "V":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.V()));
                    width = txt$1.V_max()+spacing;
                	break
                    
               case "W":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.W()));
                    width = txt$1.W_max()+spacing;
                	break
                    
               case "X":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.X()));
                    width = txt$1.X_max()+spacing;
                	break
                    
               case "Y":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.Y()));
                    width = txt$1.Y_max()+spacing;
                	break
                    
               case "Z":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.Z()));
                    width = txt$1.Z_max()+spacing;
                	break
                
                
                
                //Numbers
                case "0":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._0()));
                    width = txt$1._0_max()+spacing;
                	break
                    
                case "1":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._1()));
                    width = txt$1._1_max()+spacing;
                	break
                    
                case "2":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._2()));
                    width = txt$1._2_max()+spacing;
                	break
                    
                case "3":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._3()));
                    width = txt$1._3_max()+spacing;
                	break
                    
                case "4":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._4()));
                    width = txt$1._4_max()+spacing;
                	break
                    
                case "5":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._5()));
                    width = txt$1._5_max()+spacing;
                	break
                    
                case "6":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._6()));
                    width = txt$1._6_max()+spacing;
                	break
                    
                case "7":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._7()));
                    width = txt$1._7_max()+spacing;
                	break
                    
                case "8":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._8()));
                    width = txt$1._8_max()+spacing;
                	break
                    
                case "9":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1._9()));
                    width = txt$1._9_max()+spacing;
                	break
                
                
                
                
                //Symbols
                case ".":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.period()));
                    width = txt$1.exclamation_max()+spacing;
                	break
                
                case ",":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.comma()));
                    width = txt$1.exclamation_max()+spacing;
                	break
                
                case "!":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.exclamation()));
                    width = txt$1.exclamation_max()+spacing;
                	break
                    
                case "'":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.single_quote()));
                    width = txt$1.single_quote_max()+spacing;
                	break
                    
                case "-":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.minus()));
                    width = txt$1.minus_max()+spacing;
                	break
                    
                case "+":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.plus()));
                    width = txt$1.plus_max()+spacing;
                	break
                    
                case "=":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.equals()));
                    width = txt$1.equals_max()+spacing;
                	break
                    
                case "?":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.question()));
                    width = txt$1.question_max()+spacing;
                	break
                    
                case '"':
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.double_quote()));
                    width = txt$1.double_quote_max()+spacing;
                	break
                    
                case "*":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.star()));
                    width = txt$1.star_max()+spacing;
                	break
                    
                case "/":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.forward_slash()));
                    width = txt$1.forward_slash_max()+spacing;
                	break
                    
                case "$":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.dollar()));
                    width = txt$1.dollar_max()+spacing;
                	break
                    
                case ":":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.colon()));
                    width = txt$1.colon_max()+spacing;
                	break
                    
                //New Caracters (4_23_19):
                case "#":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.hashtag()));
                    width = txt$1.hashtag_max()+spacing;
                	break
                
                case "%":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.percent()));
                    width = txt$1.percent_max()+spacing;
                	break
                    
                case "&":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.ampersand()));
                    width = txt$1.ampersand_max()+spacing;
                	break
                    
                case "(":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.open_paren()));
                    width = txt$1.open_paren_max()+spacing;
                	break
                    
                case ")":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.close_paren()));
                    width = txt$1.close_paren_max()+spacing;
                	break
                    
                case "@":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.at_sign()));
                    width = txt$1.at_sign_max()+spacing;
                	break
                    
                case "[":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.open_square_bracket()));
                    width = txt$1.open_square_bracket_max()+spacing;
                	break
                    
                case "]":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.close_square_bracket()));
                    width = txt$1.close_square_bracket_max()+spacing;
                	break
                    
                case "_":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.underscore()));
                    width = txt$1.underscore_max()+spacing;
                	break
                    
                case "{":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.open_curly_brace()));
                    width = txt$1.open_curly_brace_max()+spacing;
                	break
                    
                case "}":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.close_curly_brace()));
                    width = txt$1.close_curly_brace_max()+spacing;
                	break
                    
                case "~":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.tilde()));
                    width = txt$1.tilde_max()+spacing;
                	break
                    
                case "^":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.caret()));
                    width = txt$1.caret_max()+spacing;
                	break
                    
                case ">":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.greater_than()));
                    width = txt$1.greater_than_max()+spacing;
                	break
                    
                case "<":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.less_than()));
                    width = txt$1.less_than_max()+spacing;
                	break
                    
                case "|":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.vertical_bar()));
                    width = txt$1.vertical_bar_max()+spacing;
                	break
                    
                case "\\":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.backslash()));
                    width = txt$1.backslash_max()+spacing;
                	break
                
                case "\`":
                	lines.push(Vector.add([max_width, -line_num*vert_spacing, 0], txt$1.backtick()));
                    width = txt$1.backtick_max()+spacing;
                	break
                    
                //Special Characters
                case "\n":
                    line_num++;
                    max_width = 0;
                    width = 0;
                	break
                    
                case " ":
                    width = 1+spacing;
                	break
                
                case "\t":
                    width = 4*(1+spacing);
                	break
                
                case "\b":
                    width = -(1+spacing);
                	break
                
                default:
                	warning('The character "' + string[i] + '" is not supported by DXF.string_to_lines()<br>A space was used in its place.');
            		width = 1+spacing;
            }
        }
        if(fixed_width){
        	if(fixed_width == true){
            	width = 1 + spacing;
            }else {
            	width = fixed_width + spacing;
            }
            
            //overwrite with special char cases if needed:
            if(string[i] == "\n"){
            	width = 0;
            }else if(string[i] == "\t"){
            	width = 4*width;
            }else if(string[i] == "\b"){
            	width = -width;
            }
        }
        max_width += width;
        
        let elt;
        let result = [];
        if(lines.length != 1){
        	for(let i = 0; i < lines.length; i++){
        		elt = lines[i];
                for(let j = 0; j < elt.length; j++){
                	result.push(elt[j]);
                }
        	}
        }else {
        	result = lines[0];
        }
        return result
    };
    
    this.a_max = function(){return 0.5844795491948674};
	this.a = function(){
    	return [
                [0, 0.5013053841213804, 0],
                [0.0417183435327218, 0.5850920221709118, 0],
                [0.0417183435327218, 0.5850920221709118, 0],
                [0.0828585304459182, 0.6262322090841224, 0],
                [0.0828585304459182, 0.6262322090841224, 0],
                [0.1670515009790563, 0.6682908966985935, 0],
                [0.1670515009790563, 0.6682908966985935, 0],
                [0.3753608867560558, 0.6682908966985935, 0],
                [0.3753608867560558, 0.6682908966985935, 0],
                [0.45933040569534, 0.626605190917914, 0],
                [0.45933040569534, 0.626605190917914, 0],
                [0.5016471002539618, 0.5420222280966556, 0],
                [0.5016471002539618, 0.5420222280966556, 0],
                [0.5016471002539618, 0.2506877584206393, 0],
                [0.5016471002539618, 0.2506877584206393, 0],
                [0.5016471002539618, 0.3337084078802803, 0],
                [0.5016471002539618, 0.3337084078802803, 0],
                [0.459284487518886, 0.3760710206153703, 0],
                [0.459284487518886, 0.3760710206153703, 0],
                [0.3754941637237437, 0.4177083472079204, 0],
                [0.3754941637237437, 0.4177083472079204, 0],
                [0.1668075789816328, 0.4177083472079204, 0],
                [0.1668075789816328, 0.4177083472079204, 0],
                [0.0828154281047944, 0.3759183608023022, 0],
                [0.0828154281047944, 0.3759183608023022, 0],
                [0.0416341917307648, 0.3347371244282868, 0],
                [0.0416341917307648, 0.3347371244282868, 0],
                [0.0000177406168689, 0.2500630226771534, 0],
                [0.0000177406168689, 0.2500630226771534, 0],
                [0.0000177406168689, 0.1676235006995483, 0],
                [0.0000177406168689, 0.1676235006995483, 0],
                [0.042130747734717, 0.0835410848777798, 0],
                [0.042130747734717, 0.0835410848777798, 0],
                [0.125671885927801, -5.331529e-8, 0],
                [0.125671885927801, -5.331529e-8, 0],
                [0.3770155328828935, -5.331529e-8, 0],
                [0.3770155328828935, -5.331529e-8, 0],
                [0.458379743935069, 0.0813641577368856, 0],
                [0.458379743935069, 0.0813641577368856, 0],
                [0.5016471002539618, 0.2506877584206393, 0],
                [0.5016471002539618, 0.2506877584206393, 0],
                [0.5016471002539618, 0.1261776403560191, 0],
                [0.5016471002539618, 0.1261776403560191, 0],
                [0.5432772926963878, 0.0412022031831754, 0],
                [0.5432772926963878, 0.0412022031831754, 0],
                [0.5844795491948674, -5.33153042e-8, 0]
                ]
    };
    
    this.b_max = function(){return 0.6677685667166317};
	this.b = function(){
    	return [
                [0.0835750791019336, 1, 0],
                [0.0835750791019336, 0.2505979856938723, 0],
                [0.0835750791019336, 0.2505979856938723, 0],
                [0.0835750791019336, 0.4596499844835194, 0],
                [0.0835750791019336, 0.4596499844835194, 0],
                [0.1248576793608436, 0.5422846756756883, 0],
                [0.1248576793608436, 0.5422846756756883, 0],
                [0.2085348941799907, 0.6259618904948355, 0],
                [0.2085348941799907, 0.6259618904948355, 0],
                [0.2917268697551662, 0.6676587978472526, 0],
                [0.2917268697551662, 0.6676587978472526, 0],
                [0.4581027609523858, 0.6676587978472526, 0],
                [0.4581027609523858, 0.6676587978472526, 0],
                [0.5420374788506024, 0.62710802860272, 0],
                [0.5420374788506024, 0.62710802860272, 0],
                [0.6266513300668919, 0.5424941773864305, 0],
                [0.6266513300668919, 0.5424941773864305, 0],
                [0.6677685667166317, 0.4187784213453086, 0],
                [0.6677685667166317, 0.4187784213453086, 0],
                [0.6677685667166317, 0.2506041897267437, 0],
                [0.6677685667166317, 0.2506041897267437, 0],
                [0.6263828111332828, 0.1256631393115981, 0],
                [0.6263828111332828, 0.1256631393115981, 0],
                [0.5427430154034738, 0.0420233435817892, 0],
                [0.5427430154034738, 0.0420233435817892, 0],
                [0.4594742852456762, 0, 0],
                [0.4594742852456762, 0, 0],
                [0.2506132515645731, 0, 0],
                [0.2506132515645731, 0, 0],
                [0.1668314604312968, 0.041729686803734, 0],
                [0.1668314604312968, 0.041729686803734, 0],
                [0.1253614145051642, 0.1252822722218241, 0],
                [0.1253614145051642, 0.1252822722218241, 0],
                [0.0835750791019336, 0.2505979856938723, 0],
                [0.0835750791019336, 0.2505979856938723, 0],
                [0.0835750791019336, 0.1251235397716073, 0],
                [0.0835750791019336, 0.1251235397716073, 0],
                [0.0418569787381671, 0.0418569451360895, 0],
                [0.0418569787381671, 0.0418569451360895, 0],
                [0, 0, 0]
                ]
    };
    
    this.c_max = function(){return 0.6681574259470722};
	this.c = function(){
    	return [
                [0.6680185475726148, 0.5014703084891609, 0],
                [0.6276775908582977, 0.584717534436777, 0],
                [0.6276775908582977, 0.584717534436777, 0],
                [0.5848902072879127, 0.6262147969854936, 0],
                [0.5848902072879127, 0.6262147969854936, 0],
                [0.4595119347141577, 0.6680991306568274, 0],
                [0.4595119347141577, 0.6680991306568274, 0],
                [0.2513545247047091, 0.6680991306568274, 0],
                [0.2513545247047091, 0.6680991306568274, 0],
                [0.1253500952982449, 0.6262797123536075, 0],
                [0.1253500952982449, 0.6262797123536075, 0],
                [0.0835827858414717, 0.5845124028968343, 0],
                [0.0835827858414717, 0.5845124028968343, 0],
                [0.0417689954575735, 0.5011139548950326, 0],
                [0.0417689954575735, 0.5011139548950326, 0],
                [-8.04944875e-8, 0.3758117087137975, 0],
                [-8.04944875e-8, 0.3758117087137975, 0],
                [-8.04944875e-8, 0.2924874619681077, 0],
                [-8.04944875e-8, 0.2924874619681077, 0],
                [0.0417324696423407, 0.1670986619627399, 0],
                [0.0417324696423407, 0.1670986619627399, 0],
                [0.0836327976996927, 0.0833613174200423, 0],
                [0.0836327976996927, 0.0833613174200423, 0],
                [0.1247921330740667, 0.0422019820456683, 0],
                [0.1247921330740667, 0.0422019820456683, 0],
                [0.2500203289919227, -2.2048425e-9, 0],
                [0.2500203289919227, -2.2048425e-9, 0],
                [0.4579718297351861, -2.2048425e-9, 0],
                [0.4579718297351861, -2.2048425e-9, 0],
                [0.5845980007659364, 0.0414157000095941, 0],
                [0.5845980007659364, 0.0414157000095941, 0],
                [0.6264439945960305, 0.0832616938396882, 0],
                [0.6264439945960305, 0.0832616938396882, 0],
                [0.6681574259470722, 0.166711742157986, 0]
                ]
    };
    
    this.d_max = function(){return 0.6687340335045562};
	this.d = function(){
    	return [
                [0.5852238367106111, 0.4593830597531508, 0],
                [0.5429594546485533, 0.5434867448696821, 0],
                [0.5429594546485533, 0.5434867448696821, 0],
                [0.4601054872179447, 0.6263407123002906, 0],
                [0.4601054872179447, 0.6263407123002906, 0],
                [0.3757651443603436, 0.6683123397466773, 0],
                [0.3757651443603436, 0.6683123397466773, 0],
                [0.2090496834961186, 0.6683123397466773, 0],
                [0.2090496834961186, 0.6683123397466773, 0],
                [0.1269203844656772, 0.627708457928236, 0],
                [0.1269203844656772, 0.627708457928236, 0],
                [0.0415461713906922, 0.5423342448532509, 0],
                [0.0415461713906922, 0.5423342448532509, 0],
                [0, 0.4175710560257642, 0],
                [0, 0.4175710560257642, 0],
                [0, 0.2511104993343736, 0],
                [0, 0.2511104993343736, 0],
                [0.0418878851972409, 0.125086769528167, 0],
                [0.0418878851972409, 0.125086769528167, 0],
                [0.1246797394586565, 0.0422949152667513, 0],
                [0.1246797394586565, 0.0422949152667513, 0],
                [0.2090934341978823, 0, 0],
                [0.2090934341978823, 0, 0],
                [0.4178220116259013, 0, 0],
                [0.4178220116259013, 0, 0],
                [0.5013822395721946, 0.0417838586027699, 0],
                [0.5013822395721946, 0.0417838586027699, 0],
                [0.5431886441046458, 0.1253828986082794, 0],
                [0.5431886441046458, 0.1253828986082794, 0],
                [0.5849099555290423, 0.2506350585731241, 0],
                [0.5849099555290423, 0.2506350585731241, 0],
                [0.5849099555290423, 1.002458673958159, 0],
                [0.5849099555290423, 1.002458673958159, 0],
                [0.5849099555290423, 0.1261043822332795, 0],
                [0.5849099555290423, 0.1261043822332795, 0],
                [0.6270338536863278, 0.0417001798182355, 0],
                [0.6270338536863278, 0.0417001798182355, 0],
                [0.6687340335045562, 0, 0]
                ]
    };
    
    this.e_max = function(){return 0.6681505023968839};
	this.e = function(){
    	return [
                [0.0001140367142227, 0.3342305888374426, 0],
                [0.6681505023968839, 0.3342305888374426, 0],
                [0.6681505023968839, 0.3342305888374426, 0],
                [0.6681505023968839, 0.4169623498193858, 0],
                [0.6681505023968839, 0.4169623498193858, 0],
                [0.6265109355852873, 0.5425120455479373, 0],
                [0.6265109355852873, 0.5425120455479373, 0],
                [0.5432444043025555, 0.625778576830669, 0],
                [0.5432444043025555, 0.625778576830669, 0],
                [0.4602368862798301, 0.6682750485490488, 0],
                [0.4602368862798301, 0.6682750485490488, 0],
                [0.2095557884939296, 0.6682750485490488, 0],
                [0.2095557884939296, 0.6682750485490488, 0],
                [0.1267845770173608, 0.6279865756794579, 0],
                [0.1267845770173608, 0.6279865756794579, 0],
                [0.0403513165522398, 0.5415533152143368, 0],
                [0.0403513165522398, 0.5415533152143368, 0],
                [0, 0.4174574862373391, 0],
                [0, 0.4174574862373391, 0],
                [0, 0.2506091141623585, 0],
                [0, 0.2506091141623585, 0],
                [0.0424017777232564, 0.1235178410100843, 0],
                [0.0424017777232564, 0.1235178410100843, 0],
                [0.119807937144607, 0.0461116815887337, 0],
                [0.119807937144607, 0.0461116815887337, 0],
                [0.2068728572871166, 1.5489263e-9, 0],
                [0.2068728572871166, 1.5489263e-9, 0],
                [0.4586757629852798, 1.5489263e-9, 0],
                [0.4586757629852798, 1.5489263e-9, 0],
                [0.5429270486741018, 0.0419052431658145, 0],
                [0.5429270486741018, 0.0419052431658145, 0],
                [0.6678452429846616, 0.1668234374763742, 0]
                ]
    };
    
    this.f_max = function(){return 0.4995542111909117};
	this.f = function(){
    	return [
                [0.4940568551058107, 1.001484233218903, 0],
                [0.3695905876884638, 0.9594443346899197, 0],
                [0.3695905876884638, 0.9594443346899197, 0],
                [0.2882268917988355, 0.8780806388002915, 0],
                [0.2882268917988355, 0.8780806388002915, 0],
                [0.2458081036341468, 0.7509536886078934, 0],
                [0.2458081036341468, 0.7509536886078934, 0],
                [0.2458081036341539, 1.5489281e-9, 0],
                [0.4995542111909117, 0.5814229158122118, 0],
                [0, 0.5814229158122118, 0]
                ]
    };
    
    this.g_max = function(){return 0.5852999895271012};
	this.g = function(){
    	return [
                [0.5852753034184559, 0.3346367865900817, 0],
                [0.5426893629555707, 0.418865075158621, 0],
                [0.5426893629555707, 0.418865075158621, 0],
                [0.5031977844319045, 0.4583566536822872, 0],
                [0.5031977844319045, 0.4583566536822872, 0],
                [0.4167801597195365, 0.5010565675274848, 0],
                [0.4167801597195365, 0.5010565675274848, 0],
                [0.1678205357037257, 0.5010565675274848, 0],
                [0.1678205357037257, 0.5010565675274848, 0],
                [0.0836258314497514, 0.4592602840225056, 0],
                [0.0836258314497514, 0.4592602840225056, 0],
                [0.0421063700647366, 0.4177408226374908, 0],
                [0.0421063700647366, 0.4177408226374908, 0],
                [0, 0.3344461277731199, 0],
                [0, 0.3344461277731199, 0],
                [0, 0.1664173181933819, 0],
                [0, 0.1664173181933819, 0],
                [0.0429051121859914, 0.0828415522195485, 0],
                [0.0429051121859914, 0.0828415522195485, 0],
                [0.0851588763524731, 0.0405877880530667, 0],
                [0.0851588763524731, 0.0405877880530667, 0],
                [0.166725608478373, -0.0002775385317904, 0],
                [0.166725608478373, -0.0002775385317904, 0],
                [0.4146099667712804, -0.0002775385317904, 0],
                [0.4146099667712804, -0.0002775385317904, 0],
                [0.4999548689186213, 0.0399654727106054, 0],
                [0.4999548689186213, 0.0399654727106054, 0],
                [0.5439942926903996, 0.0840048964823836, 0],
                [0.5439942926903996, 0.0840048964823836, 0],
                [0.5852999895271012, 0.1670085664210177, 0],
                [0.5852999895271012, 0.1670085664210177, 0],
                [0.5852999895271012, 0.4996454452079036, 0],
                [0.5852999895271012, 0.4996454452079036, 0],
                [0.5852999895271012, -0.0837743231641497, 0],
                [0.5852999895271012, -0.0837743231641497, 0],
                [0.5430284146422651, -0.2102321807824126, 0],
                [0.5430284146422651, -0.2102321807824126, 0],
                [0.4607386070032291, -0.2925219884214485, 0],
                [0.4607386070032291, -0.2925219884214485, 0],
                [0.3760662127510557, -0.3351961462707038, 0],
                [0.3760662127510557, -0.3351961462707038, 0],
                [0.2093613580807982, -0.3351961462707038, 0],
                [0.2093613580807982, -0.3351961462707038, 0],
                [0.1254617948247301, -0.2921057711929649, 0],
                [0.1254617948247301, -0.2921057711929649, 0],
                [0.0420149656117701, -0.2086589419800049, 0],
                [0.0420149656117701, -0.2086589419800049, 0],
                [0.000191153496047, -0.1258274813344116, 0]
                ]
    };
    
    this.h_max = function(){return 0.5850044116069171};
	this.h = function(){
    	return [
                [0.0020705746691476, 1.000000001548924, 0],
                [0.0020705746691405, 1.5489263e-9, 0],
                [0.0020705746691405, 1.5489263e-9, 0],
                [0, 0.376174869704883, 0],
                [0, 0.376174869704883, 0],
                [0.0419390770322536, 0.4590481217656617, 0],
                [0.0419390770322536, 0.4590481217656617, 0],
                [0.1247501562211895, 0.5418592009545975, 0],
                [0.1247501562211895, 0.5418592009545975, 0],
                [0.2104901467826039, 0.5850431273099163, 0],
                [0.2104901467826039, 0.5850431273099163, 0],
                [0.3745042156119496, 0.5850431273099163, 0],
                [0.3745042156119496, 0.5850431273099163, 0],
                [0.460311163066848, 0.5421406108764586, 0],
                [0.460311163066848, 0.5421406108764586, 0],
                [0.5417687240027931, 0.4606830499405135, 0],
                [0.5417687240027931, 0.4606830499405135, 0],
                [0.5850044116069171, 0.3767833307587551, 0],
                [0.5850044116069171, 0.3767833307587551, 0],
                [0.58500441160691, 1.5489263e-9, 0]
                ]
    };
    
    this.i_max = function(){return 0.0837800650134284};
	this.i = function(){
    	return [
                [0.0414302810410732, 0.8770927383296225, 0],
                [0.0414302810410732, 0.7931759277937971, 0],
                [0.0414302810410732, 0.7931759277937971, 0],
                [0, 0.8346061850890933, 0],
                [0, 0.8346061850890933, 0],
                [0.0837800650134284, 0.8346061850890933, 0],
                [0.0837800650134284, 0.8346061850890933, 0],
                [0.0414302810410732, 0.8770927383296225, 0],
                [0.0421503289530279, 0.6793251888468462, 0],
                [0.0421503289530279, 0, 0]
                ] 
    };
    
    this.j_max = function(){return 0.4173861709172685};
	this.j = function(){
    	return [
                [0.3763626645157672, 0.6669350820100703, 0],
                [0.3763626645157672, 0.1247941417015284, 0],
                [0.3763626645157672, 0.1247941417015284, 0],
                [0.3339567360308707, 0, 0],
                [0.3339567360308707, 0, 0],
                [0.2931021000893282, -0.0828936783987473, 0],
                [0.2931021000893282, -0.0828936783987473, 0],
                [0.2517747457776096, -0.1242210327104658, 0],
                [0.2517747457776096, -0.1242210327104658, 0],
                [0.1668831189591345, -0.1663912042533013, 0],
                [0.1668831189591345, -0.1663912042533013, 0],
                [1e-16, -0.1663912042533013, 0],
                [0.3757186410799705, 0.8766963476290641, 0],
                [0.3757186410799705, 0.7948993501773743, 0],
                [0.3757186410799705, 0.7948993501773743, 0],
                [0.334623191820981, 0.8359947994363636, 0],
                [0.334623191820981, 0.8359947994363636, 0],
                [0.4173861709172685, 0.8359947994363636, 0],
                [0.4173861709172685, 0.8359947994363636, 0],
                [0.3757186410799705, 0.8766963476290641, 0]
                ]
    };
    
    this.k_max = function(){return 0.581830493937673};
	this.k = function(){
    	return [
                [0, 1.000000001548924, 0],
                [0, 1.5489263e-9, 0],
                [0.5803999061942023, 0.5848617749492462, 0],
                [0, 0.2948392258441448, 0],
                [0, 0.2948392258441448, 0],
                [0.1619926802914335, 0.3757860515984017, 0],
                [0.1619926802914335, 0.3757860515984017, 0],
                [0.581830493937673, 1.5489281e-9, 0]
                ]
    };
    
    this.l_max = function(){return 0.2092599385287457};
	this.l = function(){
    	return [
                [0, 1.000000001548926, 0],
                [0, 0.2496943636310505, 0],
                [0, 0.2496943636310505, 0],
                [0.041910677084303, 0.1260163362715048, 0],
                [0.041910677084303, 0.1260163362715048, 0],
                [0.125510386086205, 0.0424166272696027, 0],
                [0.125510386086205, 0.0424166272696027, 0],
                [0.2092599385287457, 1.5489281e-9, 0]
                ]
    };
    
    this.m_max = function(){return 0.7505380961145534};
	this.m = function(){
    	return [
                [0, 0.6628787039858537, 0],
                [0, 1.5489281e-9, 0],
                [0, 1.5489281e-9, 0],
                [0, 0.5030049855748331, 0],
                [0, 0.5030049855748331, 0],
                [0.0403952121676525, 0.5848499977523433, 0],
                [0.0403952121676525, 0.5848499977523433, 0],
                [0.082154596978711, 0.6266093825634016, 0],
                [0.082154596978711, 0.6266093825634016, 0],
                [0.1657226533922937, 0.6683958677648008, 0],
                [0.1657226533922937, 0.6683958677648008, 0],
                [0.2075675736739413, 0.6683958677648008, 0],
                [0.2075675736739413, 0.6683958677648008, 0],
                [0.2907195629146315, 0.6270412703226214, 0],
                [0.2907195629146315, 0.6270412703226214, 0],
                [0.3327717402811032, 0.5849890929561427, 0],
                [0.3327717402811032, 0.5849890929561427, 0],
                [0.3745494370675999, 0.501337647454136, 0],
                [0.3745494370675999, 0.501337647454136, 0],
                [0.3745494370675999, 1.5489263e-9, 0],
                [0.3745494370675999, 1.5489263e-9, 0],
                [0.3745494370675999, 0.501337647454136, 0],
                [0.3745494370675999, 0.501337647454136, 0],
                [0.4163430189817348, 0.584697964846896, 0],
                [0.4163430189817348, 0.584697964846896, 0],
                [0.4584194490448113, 0.6267743949099654, 0],
                [0.4584194490448113, 0.6267743949099654, 0],
                [0.5416169372275021, 0.6683854906542451, 0],
                [0.5416169372275021, 0.6683854906542451, 0],
                [0.5836246110571893, 0.6683854906542451, 0],
                [0.5836246110571893, 0.6683854906542451, 0],
                [0.6667241696247004, 0.6273256525666682, 0],
                [0.6667241696247004, 0.6273256525666682, 0],
                [0.7080935425440913, 0.5859562796472773, 0],
                [0.7080935425440913, 0.5859562796472773, 0],
                [0.7505380961145534, 0.5011585187600219, 0],
                [0.7505380961145534, 0.5011585187600219, 0],
                [0.7505380961145393, 1.5489245e-9, 0]
                ]
    };
    
    this.n_max = function(){return 0.5849347225037889};
	this.n = function(){
    	return [
                [0, 0.6683622656925224, 0],
                [0, 1.5489263e-9, 0],
                [0, 1.5489263e-9, 0],
                [0, 0.4177489512711361, 0],
                [0, 0.4177489512711361, 0],
                [0.0417415881632053, 0.543133025020893, 0],
                [0.0417415881632053, 0.543133025020893, 0],
                [0.1252290535962288, 0.6266204904539096, 0],
                [0.1252290535962288, 0.6266204904539096, 0],
                [0.2093696596040786, 0.6687150050934179, 0],
                [0.2093696596040786, 0.6687150050934179, 0],
                [0.3759980528759002, 0.6687150050934179, 0],
                [0.3759980528759002, 0.6687150050934179, 0],
                [0.4590281408014221, 0.6265430866579039, 0],
                [0.4590281408014221, 0.6265430866579039, 0],
                [0.5423552120430486, 0.5432160154162702, 0],
                [0.5423552120430486, 0.5432160154162702, 0],
                [0.5849347225037889, 0.4176188255990781, 0],
                [0.5849347225037889, 0.4176188255990781, 0],
                [0.5849347225037889, 1.5489263e-9, 0]
                ]
    };
    
    this.o_max = function(){return 0.5846858952672278};
	this.o = function(){
    	return [
                [0.209501173209361, 1.5489245e-9, 0],
                [0.1253300627583087, 0.0417631755808259, 0],
                [0.1253300627583087, 0.0417631755808259, 0],
                [0.0417176379671389, 0.1253756003719886, 0],
                [0.0417176379671389, 0.1253756003719886, 0],
                [0, 0.2504205966539246, 0],
                [0, 0.2504205966539246, 0],
                [0, 0.4178196144525402, 0],
                [0, 0.4178196144525402, 0],
                [0.041755788137209, 0.5430621971234473, 0],
                [0.041755788137209, 0.5430621971234473, 0],
                [0.1252656744793086, 0.6265720834655469, 0],
                [0.1252656744793086, 0.6265720834655469, 0],
                [0.208819574457749, 0.6683919145798285, 0],
                [0.208819574457749, 0.6683919145798285, 0],
                [0.3759062991977942, 0.6683919145798285, 0],
                [0.3759062991977942, 0.6683919145798285, 0],
                [0.4593573617368918, 0.6266993198223929, 0],
                [0.4593573617368918, 0.6266993198223929, 0],
                [0.543055676533399, 0.5430010050258858, 0],
                [0.543055676533399, 0.5430010050258858, 0],
                [0.5846858952672278, 0.4175545863432575, 0],
                [0.5846858952672278, 0.4175545863432575, 0],
                [0.5846858952672278, 0.2524338384598082, 0],
                [0.5846858952672278, 0.2524338384598082, 0],
                [0.5436147643375762, 0.126332179279288, 0],
                [0.5436147643375762, 0.126332179279288, 0],
                [0.4603405354412474, 0.0430579503829662, 0],
                [0.4603405354412474, 0.0430579503829662, 0],
                [0.3762554000968805, 1.5489263e-9, 0],
                [0.3762554000968805, 1.5489263e-9, 0],
                [0.209501173209361, 1.5489245e-9, 0]
                ]
    };
    
    this.p_max = function(){return 0.585117792937723};
	this.p = function(){
    	return [
                [0, 0.6678369023321978, 0],
                [0, -0.1661134930088934, 0],
                [0, -0.1661134930088934, 0],
                [0, 0.4182602283121355, 0],
                [0, 0.4182602283121355, 0],
                [0.0420793290830943, 0.543121658065175, 0],
                [0.0420793290830943, 0.543121658065175, 0],
                [0.1254880101613196, 0.6266194309937845, 0],
                [0.1254880101613196, 0.6266194309937845, 0],
                [0.2092038476000937, 0.6684310330905419, 0],
                [0.2092038476000937, 0.6684310330905419, 0],
                [0.3760603143003323, 0.6684310330905419, 0],
                [0.3760603143003323, 0.6684310330905419, 0],
                [0.4596677950144681, 0.6266397734247989, 0],
                [0.4596677950144681, 0.6266397734247989, 0],
                [0.5433574555818268, 0.5429501128574401, 0],
                [0.5433574555818268, 0.5429501128574401, 0],
                [0.585117792937723, 0.4178258721131556, 0],
                [0.585117792937723, 0.4178258721131556, 0],
                [0.585117792937723, 0.3353332788221195, 0],
                [0.585117792937723, 0.3353332788221195, 0],
                [0.5434815030432106, 0.2091360019800561, 0],
                [0.5434815030432106, 0.2091360019800561, 0],
                [0.4599295194521176, 0.1255840183889703, 0],
                [0.4599295194521176, 0.1255840183889703, 0],
                [0.3760091943939585, 0.0835989070285877, 0],
                [0.3760091943939585, 0.0835989070285877, 0],
                [0.2091791614914484, 0.0835989070285877, 0],
                [0.2091791614914484, 0.0835989070285877, 0],
                [0.1256221453002695, 0.1248776527340993, 0],
                [0.1256221453002695, 0.1248776527340993, 0],
                [0.0415095396329122, 0.2089902584014567, 0],
                [0.0415095396329122, 0.2089902584014567, 0],
                [0, 0.3351887404965197, 0]
                ]
    };
    
    this.q_max = function(){return 0.584677156821698};
	this.q = function(){
    	return [
                [0.584677156821698, 0.4176739215657222, 0],
                [0.5428385719130518, 0.5433485544110539, 0],
                [0.5428385719130518, 0.5433485544110539, 0],
                [0.4597230924075149, 0.6264640339165908, 0],
                [0.4597230924075149, 0.6264640339165908, 0],
                [0.3750414115511091, 0.668312684615387, 0],
                [0.3750414115511091, 0.668312684615387, 0],
                [0.2084245967196239, 0.668312684615387, 0],
                [0.2084245967196239, 0.668312684615387, 0],
                [0.1251817276453551, 0.6263777102042525, 0],
                [0.1251817276453551, 0.6263777102042525, 0],
                [0.0422577126317805, 0.5434536951906779, 0],
                [0.0422577126317805, 0.5434536951906779, 0],
                [0, 0.4175180178333165, 0],
                [0, 0.4175180178333165, 0],
                [0, 0.3343831143420886, 0],
                [0, 0.3343831143420886, 0],
                [0.0413217058553244, 0.2096056074117172, 0],
                [0.0413217058553244, 0.2096056074117172, 0],
                [0.125182164567633, 0.125475571961374, 0],
                [0.125182164567633, 0.125475571961374, 0],
                [0.2087944514268258, 0.0837008662577148, 0],
                [0.2087944514268258, 0.0837008662577148, 0],
                [0.3755781705680192, 0.0837008662577148, 0],
                [0.3755781705680192, 0.0837008662577148, 0],
                [0.459144362127006, 0.1252710769970093, 0],
                [0.459144362127006, 0.1252710769970093, 0],
                [0.5428890364360086, 0.2089660973842058, 0],
                [0.5428890364360086, 0.2089660973842058, 0],
                [0.5846529076353307, 0.3342579301512529, 0],
                [0.5846529076353307, 0.3342579301512529, 0],
                [0.5846529076353307, 0.668388371636027, 0],
                [0.5846529076353307, 0.668388371636027, 0],
                [0.5846529076353307, -0.1667297780746963, 0]
                ]
    };
    
    this.r_max = function(){return 0.3337175210844236};
	this.r = function(){
    	return [
                [0.3337175210844236, 0.6679443810975983, 0],
                [0.2502487631931274, 0.6679443810975983, 0],
                [0.2502487631931274, 0.6679443810975983, 0],
                [0.1255142254979091, 0.6269315694395914, 0],
                [0.1255142254979091, 0.6269315694395914, 0],
                [0.0414296596391921, 0.5428470035808745, 0],
                [0.0414296596391921, 0.5428470035808745, 0],
                [0, 0.4175196665426597, 0],
                [0, 0.4175196665426597, 0],
                [0, 0.6680673416218923, 0],
                [0, 0.6680673416218923, 0],
                [0, 0, 0]
                ]
    };
    
    this.s_max = function(){return 0.5016464135127876};
	this.s = function(){
    	return [
                [0.501140894438663, 0.543091598936698, 0],
                [0.4593807370787033, 0.6266214914932249, 0],
                [0.4593807370787033, 0.6266214914932249, 0],
                [0.3340458681753375, 0.6684081391098289, 0],
                [0.3340458681753375, 0.6684081391098289, 0],
                [0.1670141956421389, 0.6684081391098289, 0],
                [0.1670141956421389, 0.6684081391098289, 0],
                [0.0417339420233702, 0.6266249505300721, 0],
                [0.0417339420233702, 0.6266249505300721, 0],
                [0, 0.5430038052870714, 0],
                [0, 0.5430038052870714, 0],
                [0, 0.4595935789340189, 0],
                [0, 0.4595935789340189, 0],
                [0.0418285356962827, 0.3756939812244298, 0],
                [0.0418285356962827, 0.3756939812244298, 0],
                [0.16758765613028, 0.3334481052867062, 0],
                [0.16758765613028, 0.3334481052867062, 0],
                [0.3344803873795001, 0.3334481052867062, 0],
                [0.3344803873795001, 0.3334481052867062, 0],
                [0.4594333862130498, 0.2924147041236296, 0],
                [0.4594333862130498, 0.2924147041236296, 0],
                [0.5016464135127876, 0.2085702039296109, 0],
                [0.5016464135127876, 0.2085702039296109, 0],
                [0.5016464135127876, 0.1261066006617284, 0],
                [0.5016464135127876, 0.1261066006617284, 0],
                [0.4593680663326723, 0.0418970073637866, 0],
                [0.4593680663326723, 0.0418970073637866, 0],
                [0.3337928901771647, 1.5489263e-9, 0],
                [0.3337928901771647, 1.5489263e-9, 0],
                [0.1663140276937725, 1.5489263e-9, 0],
                [0.1663140276937725, 1.5489263e-9, 0],
                [0.0410475371267296, 0.0421818013979305, 0],
                [0.0410475371267296, 0.0421818013979305, 0],
                [0.0005446236178841, 0.1238298131909232, 0]
                ]
    };
    
    this.t_max = function(){return 0.4998969767169683};
	this.t = function(){
    	return [
                [0.2490382700256077, 0.8354348162987292, 0],
                [0.2490382700256077, 0.1673607213191701, 0],
                [0.2490382700256077, 0.1673607213191701, 0],
                [0.290913556405485, 0.0834070143902608, 0],
                [0.290913556405485, 0.0834070143902608, 0],
                [0.3322386976403777, 0.042081873155361, 0],
                [0.3322386976403777, 0.042081873155361, 0],
                [0.4151801251816778, 1.5489263e-9, 0],
                [0, 0.5853535346883662, 0],
                [0.4998969767169683, 0.5853535346883662, 0]
                ]
    };
    
    this.u_max = function(){return 0.5848340119190425};
	this.u = function(){
    	return [
                [0, 0.6684991447222473, 0],
                [0, 0.2523584808712656, 0],
                [0, 0.2523584808712656, 0],
                [0.0416791082776626, 0.1257827689259727, 0],
                [0.0416791082776626, 0.1257827689259727, 0],
                [0.1253140901990264, 0.042147787004609, 0],
                [0.1253140901990264, 0.042147787004609, 0],
                [0.2094646901992689, 0, 0],
                [0.2094646901992689, 0, 0],
                [0.3743534774265242, 0, 0],
                [0.3743534774265242, 0, 0],
                [0.4594390662026342, 0.042250735060918, 0],
                [0.4594390662026342, 0.042250735060918, 0],
                [0.543367148548569, 0.1261788174068528, 0],
                [0.543367148548569, 0.1261788174068528, 0],
                [0.5848340119190425, 0.2509088149981835, 0],
                [0.5848340119190425, 0.2509088149981835, 0],
                [0.5848340119190425, 0.6704821611347, 0],
                [0.5848340119190425, 0.6704821611347, 0],
                [0.5848340119190425, 0.0000959486425671, 0]
                ]
    };
    
    this.v_max = function(){return 0.6685133663476677};
	this.v = function(){
    	return [
                [0, 0.6685777142735958, 0],
                [0.3351473492348305, 1.5489263e-9, 0],
                [0.3351473492348305, 1.5489263e-9, 0],
                [0.6685133663476677, 0.66816477115988, 0]
                ]
    };
    
    this.w_max = function(){return 0.7528247288495038};
	this.w = function(){
    	return [
                [0, 0.669060167556438, 0],
                [0.1676608406116031, 1.5489263e-9, 0],
                [0.1676608406116031, 1.5489263e-9, 0],
                [0.3769767587756405, 0.668400891604037, 0],
                [0.3769767587756405, 0.668400891604037, 0],
                [0.5858828438441606, 0.0003292673651032, 0],
                [0.5858828438441606, 0.0003292673651032, 0],
                [0.7528247288495038, 0.6685053215737611, 0]
                ]
    };
    
    this.x_max = function(){return 0.6691180667785944};
	this.x = function(){
    	return [
                [0.0000225014972557, 0.6683736310993283, 0],
                [0.6691180667785944, 1.5489263e-9, 0],
                [0.6684301326539526, 0.668430046343218, 0],
                [8.78596467e-8, 1.5489245e-9, 0]
                ]
    };
    
    this.y_max = function(){return 0.6685583693421507};
	this.y = function(){
    	return [
                [0.6685583693421507, 0.6689683368148849, 0],
                [0.2080138897795507, 0, 0],
                [0.2080138897795507, 0, 0],
                [0.0835513362015661, -0.1251365894477345, 0],
                [0.0835513362015661, -0.1251365894477345, 0],
                [0, -0.1669292491998249, 0],
                [0.0000349537821194, 0.6685591821700996, 0],
                [0.3286851303847982, 0.1752821773170421, 0]
                ]
    };
    
    this.z_max = function(){return 0.6688860610496477};
	this.z = function(){
    	return [
                [0.0001371935948669, 0.6684042682828704, 0],
                [0.6684043542396126, 0.6684042682828704, 0],
                [0.6684043542396126, 0.6684042682828704, 0],
                [8.75056827e-8, 1.5489281e-9, 0],
                [8.75056827e-8, 1.5489281e-9, 0],
                [0.6688860610496477, 1.5489281e-9, 0]
                ]
    };
    
    
    //Capital Letters
    this.A_max = function(){return 0.6704006815866707};
	this.A = function(){
    	return [
                [0, 0, 0],
                [0.3352600751822194, 1.003620764981164, 0],
                [0.3352600751822194, 1.003620764981164, 0],
                [0.6704006815866707, 0, 0],
                [0.1684521068546587, 0.4609508391083353, 0],
                [0.5022399724256275, 0.4609508391083353, 0]
                ]
    };
    
    this.B_max = function(){return 0.6682667281578177};
	this.B = function(){
    	return [
                [-1.811864649e-7, 1.002420750975531, 0],
                [-1.811864578e-7, -1.5086101e-9, 0],
                [-1.811864649e-7, 1.002420750975531, 0],
                [0.4594343703940922, 1.002420750975531, 0],
                [0.4594343703940922, 1.002420750975531, 0],
                [0.5429703284415553, 0.9606542922506378, 0],
                [0.5429703284415553, 0.9606542922506378, 0],
                [0.6264991209408564, 0.8771254997513366, 0],
                [0.6264991209408564, 0.8771254997513366, 0],
                [0.6682667281578177, 0.7935879282028396, 0],
                [0.6682667281578177, 0.7935879282028396, 0],
                [0.6682667281578177, 0.7100566863888959, 0],
                [0.6682667281578177, 0.7100566863888959, 0],
                [0.6265030093781548, 0.6265206822414342, 0],
                [0.6265030093781548, 0.6265206822414342, 0],
                [0.5429700348043909, 0.5429881406070863, 0],
                [0.5429700348043909, 0.5429881406070863, 0],
                [0.4594334964978942, 0.501221835214892, 0],
                [0.4594334964978942, 0.501221835214892, 0],
                [-1.811864649e-7, 0.501221835214892, 0],
                [-1.811864649e-7, 0.501221835214892, 0],
                [0.4594334964978942, 0.501221835214892, 0],
                [0.4594334964978942, 0.501221835214892, 0],
                [0.5429657404863804, 0.4594547591504466, 0],
                [0.5429657404863804, 0.4594547591504466, 0],
                [0.6264744393857029, 0.375946060251124, 0],
                [0.6264744393857029, 0.375946060251124, 0],
                [0.6682667281578177, 0.292388659676746, 0],
                [0.6682667281578177, 0.292388659676746, 0],
                [0.6682667281578177, 0.2088509798934126, 0],
                [0.6682667281578177, 0.2088509798934126, 0],
                [0.6265091266516833, 0.125339757518546, 0],
                [0.6265091266516833, 0.125339757518546, 0],
                [0.5429584165946792, 0.0417890474615419, 0],
                [0.5429584165946792, 0.0417890474615419, 0],
                [0.4570063737391479, -1.5086119e-9, 0],
                [0.4594337149719366, 0.0012138250115186, 0],
                [-1.811864649e-7, 0.0012134748279387, 0],
                [0.4570063737391479, -1.5086119e-9, 0],
                [-1.811864578e-7, -1.5086137e-9, 0]
                ]
    };

    this.C_max = function(){return 0.6688626609616222};
	this.C = function(){
    	return [
                          [0.6682814896378205, 0.6682895598691232, 0],
                          [0.6265096329805147, 0.7936029914735343, 0],
                          [0.6265096329805147, 0.7936029914735343, 0],
                          [0.5848263613283962, 0.8771138461158614, 0],
                          [0.5848263613283962, 0.8771138461158614, 0],
                          [0.5013001025561721, 0.9606401048880854, 0],
                          [0.5013001025561721, 0.9606401048880854, 0],
                          [0.4174449935442297, 1.002428270470772, 0],
                          [0.4174449935442297, 1.002428270470772, 0],
                          [0.2505642652604365, 1.002428270470772, 0],
                          [0.2505642652604365, 1.002428270470772, 0],
                          [0.1670218941426356, 0.9606600629888646, 0],
                          [0.1670218941426356, 0.9606600629888646, 0],
                          [0.0835640814391354, 0.8771133549737726, 0],
                          [0.0835640814391354, 0.8771133549737726, 0],
                          [0.040670148046047, 0.7926609809391323, 0],
                          [0.040670148046047, 0.7926609809391323, 0],
                          [2.351684998e-7, 0.6682679496170465, 0],
                          [2.351684998e-7, 0.6682679496170465, 0],
                          [2.351684998e-7, 0.3345034997566074, 0],
                          [2.351684998e-7, 0.3345034997566074, 0],
                          [0.0416405565147216, 0.2089774036259371, 0],
                          [0.0416405565147216, 0.2089774036259371, 0],
                          [0.0837090387208264, 0.125013224831747, 0],
                          [0.0837090387208264, 0.125013224831747, 0],
                          [0.167021145995335, 0.0417011175572384, 0],
                          [0.167021145995335, 0.0417011175572384, 0],
                          [0.2526231955384901, -1.5086101e-9, 0],
                          [0.2526231955384901, -1.5086101e-9, 0],
                          [0.4155390737300877, -1.5086101e-9, 0],
                          [0.4155390737300877, -1.5086101e-9, 0],
                          [0.5012155381609773, 0.0417764274773447, 0],
                          [0.5012155381609773, 0.0417764274773447, 0],
                          [0.584766025964882, 0.1253269152812493, 0],
                          [0.584766025964882, 0.1253269152812493, 0],
                          [0.626477420251149, 0.2088290787138192, 0],
                          [0.626477420251149, 0.2088290787138192, 0],
                          [0.6688626609616222, 0.3339435977705705, 0]
                          ]
    };
    
    this.D_max = function(){return 0.6681683721944865};
	this.D = function(){
    	return [
                [-1.377225161e-7, 1.002428270470772, 0],
                [-1.377225161e-7, -1.5086101e-9, 0],
                [-1.377225161e-7, 1.002428270470772, 0],
                [0.4174862287618453, 1.002428270470772, 0],
                [0.4174862287618453, 1.002428270470772, 0],
                [0.5009547790418765, 0.9606900226565642, 0],
                [0.5009547790418765, 0.9606900226565642, 0],
                [0.5844307107020086, 0.8772140909964321, 0],
                [0.5844307107020086, 0.8772140909964321, 0],
                [0.6264018843253325, 0.793401132073285, 0],
                [0.6264018843253325, 0.793401132073285, 0],
                [0.6681683721944865, 0.6680764042007752, 0],
                [0.6681683721944865, 0.6680764042007752, 0],
                [0.6681683721944865, 0.3343163746191919, 0],
                [0.6681683721944865, 0.3343163746191919, 0],
                [0.6263320900786767, 0.2088693523654399, 0],
                [0.6263320900786767, 0.2088693523654399, 0],
                [0.5845401004653468, 0.1253226443503479, 0],
                [0.5845401004653468, 0.1253226443503479, 0],
                [0.5010375732497891, 0.0418201171347903, 0],
                [0.5010375732497891, 0.0418201171347903, 0],
                [0.4152004671821175, -1.5086101e-9, 0],
                [0.4152004671821175, -1.5086101e-9, 0],
                [-1.377225161e-7, -1.5086101e-9, 0]
                ]
    };
    
    this.E_max = function(){return 0.5844795491948674};
	this.E = function(){
    	return [
                [0.5842716826599031, 1.001898873733324, 0],
                [-1.161176328e-7, 1.001898873733324, 0],
                [-1.161176328e-7, 1.001898873733324, 0],
                [-1.161176328e-7, -6.45150067e-8, 0],
                [-1.161176328e-7, -6.45150067e-8, 0],
                [0.5842716826599031, -6.45150067e-8, 0],
                [-1.161176328e-7, 0.500949404609159, 0],
                [0.5842716826599031, 0.500949404609159, 0]
                ]
    };
    
    this.F_max = function(){return 0.5885762622268658};
	this.F = function(){
    	return [
                [0.5885762622268658, 1.002428270470772, 0],
                [3.75029003e-8, 1.002428270470772, 0],
                [3.75029003e-8, 1.002428270470772, 0],
                [3.75029003e-8, -1.5086101e-9, 0],
                [3.75029003e-8, 0.5012141344810815, 0],
                [0.5885762622268658, 0.5012141344810815, 0]
                ]
    };
    
    this.G_max = function(){return 0.6683106445256044};
	this.G = function(){
    	return [
                [0.6683106445256044, 0.6684747204381836, 0],
                [0.6266287150705239, 0.7935921863474676, 0],
                [0.6266287150705239, 0.7935921863474676, 0],
                [0.5849239682657981, 0.8771894819981582, 0],
                [0.5849239682657981, 0.8771894819981582, 0],
                [0.5013594809772428, 0.9607539692867135, 0],
                [0.5013594809772428, 0.9607539692867135, 0],
                [0.4167668105852869, 1.002428270470772, 0],
                [0.4167668105852869, 1.002428270470772, 0],
                [0.2510739266928113, 1.002428270470772, 0],
                [0.2510739266928113, 1.002428270470772, 0],
                [0.1671772155531244, 0.9606566249942432, 0],
                [0.1671772155531244, 0.9606566249942432, 0],
                [0.0836378653461338, 0.8771172747872527, 0],
                [0.0836378653461338, 0.8771172747872527, 0],
                [0.0415005945736766, 0.7913437378457218, 0],
                [0.0415005945736766, 0.7913437378457218, 0],
                [-1.382792334e-7, 0.6677124679098654, 0],
                [-1.382792334e-7, 0.6677124679098654, 0],
                [-1.382792334e-7, 0.3345334594242502, 0],
                [-1.382792334e-7, 0.3345334594242502, 0],
                [0.0417542698165789, 0.2090378141033682, 0],
                [0.0417542698165789, 0.2090378141033682, 0],
                [0.0837704063375213, 0.1255328531661632, 0],
                [0.0837704063375213, 0.1255328531661632, 0],
                [0.1670896473102914, 0.0422136121933932, 0],
                [0.1670896473102914, 0.0422136121933932, 0],
                [0.2517222078689656, -1.5086101e-9, 0],
                [0.2517222078689656, -1.5086101e-9, 0],
                [0.4170768581044513, -1.5086101e-9, 0],
                [0.4170768581044513, -1.5086101e-9, 0],
                [0.501243350851496, 0.0417661134933667, 0],
                [0.501243350851496, 0.0417661134933667, 0],
                [0.5842081402752229, 0.1247309029170935, 0],
                [0.5842081402752229, 0.1247309029170935, 0],
                [0.6263092721720795, 0.2084882261013092, 0],
                [0.6263092721720795, 0.2084882261013092, 0],
                [0.6680542848886191, 0.3332720300803356, 0],
                [0.3325036796505856, 0.5013518358823889, 0],
                [0.6680542848886262, 0.5013518358823889, 0],
                [0.6680542848886262, 0.5013518358823889, 0],
                [0.6680542848886333, -1.5086101e-9, 0]
                ]
    };
    
    this.H_max = function(){return 0.664923111926953};
	this.H = function(){
    	return [
                [0, 1, 0],
                [0, 0, 0],
                [0.664923111926953, 1.002428270470772, 0],
                [0.664923111926953, 0, 0],
                [0, 0.5012141344810815, 0],
                [0.664923111926953, 0.5012141344810815, 0]
                ]
    };
    
    this.I_max = function(){return 0.2520914706697113};
	this.I = function(){
    	return [
                [0.2520914706697113, 1.002428270470772, 0],
                [0.0014858324691431, 1.002428270470772, 0],
                [0.1267886515694343, 1.002428270470771, 0],
                [0.1267886515694343, -1.5086101e-9, 0],
                [2.03322088e-8, -1.5086101e-9, 0],
                [0.2520028856642966, -1.5086101e-9, 0]
                ]
    };
    
    this.J_max = function(){return 0.6682800047917681};
	this.J = function(){
    	return [
                [0.6682800047917681, 1.002428270470772, 0],
                [0.6682800047917681, 0.2091856478733405, 0],
                [0.6682800047917681, 0.2091856478733405, 0],
                [0.6265135169226143, 0.1253997536589679, 0],
                [0.6265135169226143, 0.1253997536589679, 0],
                [0.5428357191776172, 0.041721955913971, 0],
                [0.5428357191776172, 0.041721955913971, 0],
                [0.4587845201017445, -1.5086101e-9, 0],
                [0.4587845201017445, -1.5086101e-9, 0],
                [0.2088674289889241, -1.5086101e-9, 0],
                [0.2088674289889241, -1.5086101e-9, 0],
                [0.1252821075654538, 0.0417479412359683, 0],
                [0.1252821075654538, 0.0417479412359683, 0],
                [0.0419726049974827, 0.1250574438039393, 0],
                [0.0419726049974827, 0.1250574438039393, 0],
                [9.2519258e-8, 0.2089553022317148, 0],
                [9.2519258e-8, 0.2089553022317148, 0],
                [9.2519258e-8, 0.2924420909115213, 0]
                ]
    };
    
    this.K_max = function(){return 0.6736032151655423};
	this.K = function(){
    	return [
                [1.493841069e-7, 1.002428270470772, 0],
                [1.493841069e-7, -1.5086101e-9, 0],
                [0.6683189853711724, 1.002428270470771, 0],
                [1.493841069e-7, 0.5012141344810815, 0],
                [1.493841069e-7, 0.5012141344810815, 0],
                [0.6736032151655423, -1.5086101e-9, 0]
                ]
    };
    
    this.L_max = function(){return 0.6685877579551374};
	this.L = function(){
    	return [
                [-1.328541117e-7, 1.002428270470772, 0],
                [-1.328541117e-7, -1.5086101e-9, 0],
                [-1.328541117e-7, -1.5086101e-9, 0],
                [0.6685877579551374, -1.5086101e-9, 0]
                ]
    };
    
    this.M_max = function(){return 0.6657700496519965};
	this.M = function(){
    	return [
                [0, 0, 0],
                [0, 1, 0],
                [0, 1, 0],
                [0.328345580558846, 0, 0],
                [0.328345580558846, 0, 0],
                [0.6657700496519965, 1, 0],
                [0.6657700496519965, 1, 0],
                [0.6657700496519965, 0, 0]
                ]
    };
    
    this.N_max = function(){return 0.6683444664786009};
	this.N = function(){
    	return [
                [0, 0, 0],
                [0, 1, 0],
                [0, 1, 0],
                [0.6683444664786009, 0, 0],
                [0.6683444664786009, 0, 0],
                [0.6683444664786009, 1, 0]
                ]
    };
    
    this.O_max = function(){return 0.6682619960490115};
	this.O = function(){
    	return [
                [0.2506217892629365, -1.5086101e-9, 0],
                [0.1670618085056503, 0.0417896836090108, 0],
                [0.1670618085056503, 0.0417896836090108, 0],
                [0.0835447032776244, 0.1253067888370367, 0],
                [0.0835447032776244, 0.1253067888370367, 0],
                [0.0417573377289102, 0.2087827772978414, 0],
                [0.0417573377289102, 0.2087827772978414, 0],
                [1.768119944e-7, 0.3341508467944436, 0],
                [1.768119944e-7, 0.3341508467944436, 0],
                [1.768119944e-7, 0.6683898080103888, 0],
                [1.768119944e-7, 0.6683898080103888, 0],
                [0.0413132009279025, 0.7904744556665122, 0],
                [0.0413132009279025, 0.7904744556665122, 0],
                [0.084081849001052, 0.8780585121604929, 0],
                [0.084081849001052, 0.8780585121604929, 0],
                [0.1652059537211841, 0.959182616880625, 0],
                [0.1652059537211841, 0.959182616880625, 0],
                [0.2505007603461706, 1.002428270470772, 0],
                [0.2505007603461706, 1.002428270470772, 0],
                [0.4174459508618043, 1.002428270470772, 0],
                [0.4174459508618043, 1.002428270470772, 0],
                [0.5012755158849131, 0.9605878913001646, 0],
                [0.5012755158849131, 0.9605878913001646, 0],
                [0.58473116886384, 0.8771322383212378, 0],
                [0.58473116886384, 0.8771322383212378, 0],
                [0.6271034258034263, 0.7932427368953939, 0],
                [0.6271034258034263, 0.7932427368953939, 0],
                [0.6682619960490115, 0.6682711753804114, 0],
                [0.6682619960490115, 0.6682711753804114, 0],
                [0.6682619960490115, 0.3343872327020279, 0],
                [0.6682619960490115, 0.3343872327020279, 0],
                [0.6266411565112833, 0.2089791926427722, 0],
                [0.6266411565112833, 0.2089791926427722, 0],
                [0.5847380618102705, 0.1254287255093232, 0],
                [0.5847380618102705, 0.1254287255093232, 0],
                [0.5011776552061633, 0.041868318905216, 0],
                [0.5011776552061633, 0.041868318905216, 0],
                [0.4175051545376789, -1.5086101e-9, 0],
                [0.4175051545376789, -1.5086101e-9, 0],
                [0.2506217892629365, -1.5086101e-9, 0]
                ]
    };
    
    this.P_max = function(){return 0.6682710758300062};
	this.P = function(){
    	return [
                [0, 0.5010746315276294, 0],
                [0.459016229577145, 0.5010746315276294, 0],
                [0.459016229577145, 0.5010746315276294, 0],
                [0.5430535536252137, 0.5428801627808469, 0],
                [0.5430535536252137, 0.5428801627808469, 0],
                [0.6263469024981703, 0.6261735116537963, 0],
                [0.6263469024981703, 0.6261735116537963, 0],
                [0.6682710758300062, 0.7100618375843198, 0],
                [0.6682710758300062, 0.7100618375843198, 0],
                [0.6682710758300062, 0.7935884822624218, 0],
                [0.6682710758300062, 0.7935884822624218, 0],
                [0.6265185026518055, 0.8771045747119927, 0],
                [0.6265185026518055, 0.8771045747119927, 0],
                [0.5429681386229533, 0.960654938740845, 0],
                [0.5429681386229533, 0.960654938740845, 0],
                [0.4593461098376111, 1.002428270470772, 0],
                [0.4593461098376111, 1.002428270470772, 0],
                [0, 1.002428270470772, 0],
                [0, 1.002428270470772, 0],
                [0, 0, 0]
                ]
    };
    
    this.Q_max = function(){return 0.67279917831641};
	this.Q = function(){
    	return [
                [0.2506216744397705, -1.5086101e-9, 0],
                [0.1670616936824842, 0.0417896836090108, 0],
                [0.1670616936824842, 0.0417896836090108, 0],
                [0.0835445884544584, 0.1253067888370367, 0],
                [0.0835445884544584, 0.1253067888370367, 0],
                [0.0417572229057441, 0.2087827772978414, 0],
                [0.0417572229057441, 0.2087827772978414, 0],
                [6.19888283e-8, 0.3341508467944436, 0],
                [6.19888283e-8, 0.3341508467944436, 0],
                [6.19888283e-8, 0.6683898080103888, 0],
                [6.19888283e-8, 0.6683898080103888, 0],
                [0.0413130861047364, 0.7904744556665122, 0],
                [0.0413130861047364, 0.7904744556665122, 0],
                [0.0840817341778859, 0.8780585121604929, 0],
                [0.0840817341778859, 0.8780585121604929, 0],
                [0.165205838898018, 0.959182616880625, 0],
                [0.165205838898018, 0.959182616880625, 0],
                [0.2505006455230045, 1.002428270470772, 0],
                [0.2505006455230045, 1.002428270470772, 0],
                [0.4174458360386382, 1.002428270470772, 0],
                [0.4174458360386382, 1.002428270470772, 0],
                [0.5012754010617471, 0.9605878913001646, 0],
                [0.5012754010617471, 0.9605878913001646, 0],
                [0.5847310540406739, 0.8771322383212378, 0],
                [0.5847310540406739, 0.8771322383212378, 0],
                [0.6271033109802602, 0.7932427368953939, 0],
                [0.6271033109802602, 0.7932427368953939, 0],
                [0.6682618812258454, 0.6682711753804114, 0],
                [0.6682618812258454, 0.6682711753804114, 0],
                [0.6682618812258454, 0.3343872327020279, 0],
                [0.6682618812258454, 0.3343872327020279, 0],
                [0.6266410416881172, 0.2089791926427722, 0],
                [0.6266410416881172, 0.2089791926427722, 0],
                [0.5847379469871044, 0.1254287255093232, 0],
                [0.5847379469871044, 0.1254287255093232, 0],
                [0.5011775403829973, 0.041868318905216, 0],
                [0.5011775403829973, 0.041868318905216, 0],
                [0.4175050397145128, -1.5086101e-9, 0],
                [0.4175050397145128, -1.5086101e-9, 0],
                [0.2506216744397705, -1.5086101e-9, 0],
                [0.3379709089173559, 0.3348282678904439, 0],
                [0.67279917831641, -1.5086101e-9, 0]
                ]
    };
    
    this.R_max = function(){return 0.6694213593157201};
	this.R = function(){
    	return [
                [1.529646312e-7, 0.5010746315276294, 0],
                [0.4590163014262317, 0.5010746315276294, 0],
                [0.4590163014262317, 0.5010746315276294, 0],
                [0.5430536254743004, 0.5428801627808469, 0],
                [0.5430536254743004, 0.5428801627808469, 0],
                [0.626346974347257, 0.6261735116537963, 0],
                [0.626346974347257, 0.6261735116537963, 0],
                [0.6682711476790928, 0.7100618375843198, 0],
                [0.6682711476790928, 0.7100618375843198, 0],
                [0.6682711476790928, 0.7935884822624218, 0],
                [0.6682711476790928, 0.7935884822624218, 0],
                [0.6265185745008921, 0.8771045747119927, 0],
                [0.6265185745008921, 0.8771045747119927, 0],
                [0.54296821047204, 0.960654938740845, 0],
                [0.54296821047204, 0.960654938740845, 0],
                [0.4593461816866978, 1.002428270470772, 0],
                [0.4593461816866978, 1.002428270470772, 0],
                [1.52964617e-7, 1.002428270470772, 0],
                [1.52964617e-7, 1.002428270470772, 0],
                [1.52964617e-7, -1.5086101e-9, 0],
                [0.4590163014262317, 0.5010746315276294, 0],
                [0.6694213593157201, -1.5086101e-9, 0]
                ]
    };
    
    this.S_max = function(){return 0.6682717266528755};
	this.S = function(){
    	return [
                [0.6682699789428739, 0.8353562013633677, 0],
                [0.6265117257072177, 0.9188857239219885, 0],
                [0.6265117257072177, 0.9188857239219885, 0],
                [0.5847421133015019, 0.9606553363276972, 0],
                [0.5847421133015019, 0.9606553363276972, 0],
                [0.5011266418072183, 1.002428270470772, 0],
                [0.5011266418072183, 1.002428270470772, 0],
                [0.1670828992244253, 1.002428270470772, 0],
                [0.1670828992244253, 1.002428270470772, 0],
                [0.0835362447558339, 0.9606532831406867, 0],
                [0.0835362447558339, 0.9606532831406867, 0],
                [0.0417685353898349, 0.9188859094014389, 0],
                [0.0417685353898349, 0.9188859094014389, 0],
                [0.0000035719671416, 0.8353539630118689, 0],
                [0.0000035719671416, 0.8353539630118689, 0],
                [0.0000035719671416, 0.6683189002322365, 0],
                [0.0000035719671416, 0.6683189002322365, 0],
                [0.0417613882752903, 0.5847510858745864, 0],
                [0.0417613882752903, 0.5847510858745864, 0],
                [0.0836177453630143, 0.5428947287868624, 0],
                [0.0836177453630143, 0.5428947287868624, 0],
                [0.1670730683557338, 0.5012206839635951, 0],
                [0.1670730683557338, 0.5012206839635951, 0],
                [0.5012024487280087, 0.5012206839635951, 0],
                [0.5012024487280087, 0.5012206839635951, 0],
                [0.584738398472922, 0.4594601595639319, 0],
                [0.584738398472922, 0.4594601595639319, 0],
                [0.6264389040663759, 0.417759653970478, 0],
                [0.6264389040663759, 0.417759653970478, 0],
                [0.6682717266528755, 0.3341552435563386, 0],
                [0.6682717266528755, 0.3341552435563386, 0],
                [0.6682717266528755, 0.1670918016772163, 0],
                [0.6682717266528755, 0.1670918016772163, 0],
                [0.6265091041422579, 0.0835675552328752, 0],
                [0.6265091041422579, 0.0835675552328752, 0],
                [0.5847374147561624, 0.0417958658467796, 0],
                [0.5847374147561624, 0.0417958658467796, 0],
                [0.5009990589780103, -1.5086101e-9, 0],
                [0.5009990589780103, -1.5086101e-9, 0],
                [0.1670962255130917, -1.5086101e-9, 0],
                [0.1670962255130917, -1.5086101e-9, 0],
                [0.0835200784384256, 0.041726450178885, 0],
                [0.0835200784384256, 0.041726450178885, 0],
                [0.0416907870049101, 0.0835557416124004, 0],
                [0.0416907870049101, 0.0835557416124004, 0],
                [7.65471668e-8, 0.1670947594988519, 0]
                ]
    };
    
    this.T_max = function(){return 0.5844795491948674};
	this.T = function(){
    	return [
                [-1.43200765e-7, 1.002428270470772, 0],
                [0.6696511054776693, 1.002428270470772, 0],
                [0.3348254811384521, 1.002428270470772, 0],
                [0.3348254811384521, -1.5086083e-9, 0]
                ]
    };
    
    this.U_max = function(){return 0.6682668376336097};
	this.U = function(){
    	return [
                [2.121941236e-7, 1.002428270470772, 0],
                [2.121941236e-7, 0.3342865068841263, 0],
                [2.121941236e-7, 0.3342865068841263, 0],
                [0.0415118198575328, 0.2097367946874726, 0],
                [0.0415118198575328, 0.2097367946874726, 0],
                [0.0833589878388921, 0.1258043688572314, 0],
                [0.0833589878388921, 0.1258043688572314, 0],
                [0.1670413082954099, 0.0417972780159204, 0],
                [0.1670413082954099, 0.0417972780159204, 0],
                [0.2509119445032581, -1.5086101e-9, 0],
                [0.2509119445032581, -1.5086101e-9, 0],
                [0.4176312435027683, -1.5086101e-9, 0],
                [0.4176312435027683, -1.5086101e-9, 0],
                [0.501197341244989, 0.0417872054341331, 0],
                [0.501197341244989, 0.0417872054341331, 0],
                [0.5847296881418913, 0.1253195523310353, 0],
                [0.5847296881418913, 0.1253195523310353, 0],
                [0.6265046520504997, 0.2088636777166783, 0],
                [0.6265046520504997, 0.2088636777166783, 0],
                [0.6682668376336097, 0.3341551636152076, 0],
                [0.6682668376336097, 0.3341551636152076, 0],
                [0.6682659637786231, 1.002428270470772, 0]
                ]
    };
    
    this.V_max = function(){return 0.6682752995922386};
	this.V = function(){
    	return [
                [0, 1, 0],
                [0.3341437345824829, 0, 0],
                [0.3341437345824829, 0, 0],
                [0.6682752995922386, 1, 0]
                ] 
    };
    
    this.W_max = function(){return 0.5844795491948674};
	this.W = function(){
    	return [
                [0, 1, 0],
                [0.1668335609454346, -1.5086101e-9, 0],
                [0.1668335609454346, -1.5086101e-9, 0],
                [0.3758096474550001, 1.002428270470772, 0],
                [0.3758096474550001, 1.002428270470772, 0],
                [0.5845847473158301, -1.5086101e-9, 0],
                [0.5845847473158301, -1.5086101e-9, 0],
                [0.751666259210623, 1.002428270470772, 0]
                ]
    };
    
    this.X_max = function(){return 0.5844795491948674};
	this.X = function(){
    	return [
                [0.0003369483156348, 1.002428270470772, 0],
                [0.6686979500945541, -1.5086101e-9, 0],
                [0.6689391340730282, 1.002428270470772, 0],
                [-1.412485346e-7, -1.5086101e-9, 0]
                ]
    };
    
    this.Y_max = function(){return 0.6686469575894592};
	this.Y = function(){
    	return [
                [-1.32364306e-8, 1.002428270470772, 0],
                [0.333481185193591, 0.5054526871971774, 0],
                [0.333481185193591, 0.5054526871971774, 0],
                [0.333481185193591, -1.5086101e-9, 0],
                [0.333481185193591, 0.5054526871971774, 0],
                [0.6686469575894592, 1.002428270470772, 0]
                ]
    };
    
    this.Z_max = function(){return 0.6691223020828545};
	this.Z = function(){
    	return [
                [0, 1, 0],
                [0.6675504554113445, 1, 0],
                [0.6675504554113445, 1, 0],
                [0.0008510889046534, 0, 0],
                [0.0008510889046534, 0, 0],
                [0.6691223020828545, 0, 0]
                ]
    };
    
    //Numbers
    this._0_max = function(){return 0.5847517382670447};
	this._0 = function(){
    	return [
                [0.1672043386573989, 0.000339229551642, 0],
                [0.0831509562511883, 0.0412414144207674, 0],
                [0.0831509562511883, 0.0412414144207674, 0],
                [0.0418194422765339, 0.0834484165710308, 0],
                [0.0418194422765339, 0.0834484165710308, 0],
                [-1.510404672e-7, 0.1670252678001418, 0],
                [-1.510404672e-7, 0.1670252678001418, 0],
                [-1.510404672e-7, 0.8353199495337975, 0],
                [-1.510404672e-7, 0.8353199495337975, 0],
                [0.041785672260886, 0.9188668292901951, 0],
                [0.041785672260886, 0.9188668292901951, 0],
                [0.0836037624169279, 0.9606860936195786, 0],
                [0.0836037624169279, 0.9606860936195786, 0],
                [0.1670869831885966, 1.002401966237243, 0],
                [0.1670869831885966, 1.002401966237243, 0],
                [0.4176955754335552, 1.002401966237243, 0],
                [0.4176955754335552, 1.002401966237243, 0],
                [0.5012129288066376, 0.9606334078175819, 0],
                [0.5012129288066376, 0.9606334078175819, 0],
                [0.5429746641440687, 0.9188716724801508, 0],
                [0.5429746641440687, 0.9188716724801508, 0],
                [0.5847517382670447, 0.8353423427981567, 0],
                [0.5847517382670447, 0.8353423427981567, 0],
                [0.5847517382670447, 0.1670473197037552, 0],
                [0.5847517382670447, 0.1670473197037552, 0],
                [0.5430412911332497, 0.0835966354030404, 0],
                [0.5430412911332497, 0.0835966354030404, 0],
                [0.5012133793734819, 0.0417687236432727, 0],
                [0.5012133793734819, 0.0417687236432727, 0],
                [0.4176886721706694, 5.35233369e-8, 0],
                [0.4176886721706694, 5.35233369e-8, 0],
                [0.1672043386573989, 0.000339229551642, 0]
                ]
    };
    
    this._1_max = function(){return 0.2509255111655193};
	this._1 = function(){
    	return [
                [0.0000536467380812, 0.8354669686477222, 0],
                [0.1253581962806152, 1.002536340375712, 0],
                [0.1253581962806152, 1.002536340375712, 0],
                [0.1253581962806294, -6.89072976e-8, 0],
                [1.074189981e-7, -6.89072976e-8, 0],
                [0.2509255111655193, -6.89072976e-8, 0]
                ]
    };
    
    this._2_max = function(){return 0.6682695124055728};
	this._2 = function(){
    	return [
                [8.924839818e-7, 0.7520235160261404, 0],
                [8.924839818e-7, 0.7937043091421981, 0],
                [0.0000231325113731, 0.7936871344762279, 0],
                [0.0417679125779387, 0.877236317691441, 0],
                [0.0417679125779387, 0.877236317691441, 0],
                [0.1252293631781924, 0.9606977682916948, 0],
                [0.1252293631781924, 0.9606977682916948, 0],
                [0.2037524467529579, 0.9999999310927024, 0],
                [0.2037524467529579, 0.9999999310927024, 0],
                [0.4645068447937604, 0.9999999310927024, 0],
                [0.4645068447937604, 0.9999999310927024, 0],
                [0.5429613277450756, 0.9607779113599832, 0],
                [0.5429613277450756, 0.9607779113599832, 0],
                [0.6264127758551723, 0.8773264632498793, 0],
                [0.6264127758551723, 0.8773264632498793, 0],
                [0.6682695124055728, 0.7937074346618403, 0],
                [0.6682695124055728, 0.7937074346618403, 0],
                [0.6682695124055728, 0.6266361585524294, 0],
                [0.6682695124055728, 0.6266361585524294, 0],
                [0.6265007729099921, 0.543104157818931, 0],
                [0.6265007729099921, 0.543104157818931, 0],
                [0.5847089263634189, 0.5013123112723576, 0],
                [0.5847089263634189, 0.5013123112723576, 0],
                [0.083474826832628, 0.1671579929339089, 0],
                [0.083474826832628, 0.1671579929339089, 0],
                [0.0419034699924907, 0.1255866360937787, 0],
                [0.0419034699924907, 0.1255866360937787, 0],
                [-1.715264091e-7, 0.041913512417068, 0],
                [-1.715264091e-7, 0.041913512417068, 0],
                [-1.715264091e-7, -6.89072959e-8, 0],
                [-1.715264091e-7, -6.89072959e-8, 0],
                [0.6681235786214758, -6.89072959e-8, 0]
                ]
    };
    
    this._3_max = function(){return 0.6683444776927843};
	this._3 = function(){
    	return [
                [7.91587809e-8, 0.7518612773866807, 0],
                [7.91587809e-8, 0.793532427608227, 0],
                [7.91587809e-8, 0.793532427608227, 0],
                [0.0417091780509793, 0.8771551615189707, 0],
                [0.0417091780509793, 0.8771551615189707, 0],
                [0.124900749158698, 0.9603467326266893, 0],
                [0.124900749158698, 0.9603467326266893, 0],
                [0.2088804785464333, 1.002403159445336, 0],
                [0.2088804785464333, 1.002403159445336, 0],
                [0.459492260128684, 1.002403159445336, 0],
                [0.459492260128684, 1.002403159445336, 0],
                [0.5429694431252301, 0.9606822858438306, 0],
                [0.5429694431252301, 0.9606822858438306, 0],
                [0.6262895258909822, 0.8773622030780714, 0],
                [0.6262895258909822, 0.8773622030780714, 0],
                [0.6683444776927843, 0.7940899370162527, 0],
                [0.6683444776927843, 0.7940899370162527, 0],
                [0.6683444776927843, 0.7100325632071077, 0],
                [0.6683444776927843, 0.7100325632071077, 0],
                [0.6265217776512771, 0.6265169504043087, 0],
                [0.6265217776512771, 0.6265169504043087, 0],
                [0.5430156979994507, 0.5430108707524895, 0],
                [0.5430156979994507, 0.5430108707524895, 0],
                [0.4594865800712285, 0.5012043600486891, 0],
                [0.4594865800712285, 0.5012043600486891, 0],
                [0.2506203808272005, 0.5012043600486891, 0],
                [0.2506203808272005, 0.5012043600486891, 0],
                [0.4594865800712285, 0.5012043600486891, 0],
                [0.4594865800712285, 0.5012043600486891, 0],
                [0.5430483085384878, 0.459439039181504, 0],
                [0.5430483085384878, 0.459439039181504, 0],
                [0.626501031096808, 0.3759863166231838, 0],
                [0.626501031096808, 0.3759863166231838, 0],
                [0.6683121450579961, 0.2923566512556732, 0],
                [0.6683121450579961, 0.2923566512556732, 0],
                [0.6683121450579961, 0.2088357623385946, 0],
                [0.6683121450579961, 0.2088357623385946, 0],
                [0.6265427501711544, 0.1253002441955857, 0],
                [0.6265427501711544, 0.1253002441955857, 0],
                [0.5429550444458187, 0.0417132579403727, 0],
                [0.5429550444458187, 0.0417132579403727, 0],
                [0.4594778415212773, -3.52267335e-8, 0],
                [0.4594778415212773, -3.52267335e-8, 0],
                [0.208880260082708, -3.52267335e-8, 0],
                [0.208880260082708, -3.52267335e-8, 0],
                [0.1253336056140881, 0.0417818334533848, 0],
                [0.1253336056140881, 0.0417818334533848, 0],
                [0.0417342164875692, 0.1253812225799038, 0],
                [0.0417342164875692, 0.1253812225799038, 0],
                [0.0000448642272488, 0.2088332042225858, 0],
                [0.0000448642272488, 0.2088332042225858, 0],
                [0.0000448642272488, 0.2505930091521265, 0]
                ]
    };
    
    this._4_max = function(){return 0.6682644188224458};
	this._4 = function(){
    	return [
                [0.6682644188224458, 0.250734201109708, 0],
                [1.964841658e-7, 0.250734201109708, 0],
                [1.964841658e-7, 0.250734201109708, 0],
                [0.5847367706999762, 0.9999999310927024, 0],
                [0.5847367706999762, 0.9999999310927024, 0],
                [0.5847367706999762, -6.89072994e-8, 0]
                ]
    };
    
    this._5_max = function(){return 0.6682663962241407};
	this._5 = function(){
    	return [
                [0.6680095359762959, 0.9999999310927024, 0],
                [0.0000026639339694, 0.9999999310927024, 0],
                [0.0000026639339694, 0.9999999310927024, 0],
                [0.0000026639339694, 0.4595704405243879, 0],
                [0.0000026639339694, 0.4595421791634351, 0],
                [0.0417441693130911, 0.5430761274454455, 0],
                [0.0417441693130911, 0.5430761274454455, 0],
                [0.1253013565009553, 0.6266333146333097, 0],
                [0.1253013565009553, 0.6266333146333097, 0],
                [0.2088346618862431, 0.6684036497915855, 0],
                [0.2088346618862431, 0.6684036497915855, 0],
                [0.4594318730761984, 0.6684030353422657, 0],
                [0.4594318730761984, 0.6684030353422657, 0],
                [0.5429669510431268, 0.626636729903467, 0],
                [0.5429669510431268, 0.626636729903467, 0],
                [0.6264980716218957, 0.5431056093246909, 0],
                [0.6264980716218957, 0.5431056093246909, 0],
                [0.6682663962241407, 0.4595695282560257, 0],
                [0.6682663962241407, 0.4595695282560257, 0],
                [0.6682663962241407, 0.2089731976105043, 0],
                [0.6682663962241407, 0.2089731976105043, 0],
                [0.626544941184676, 0.1254523978144135, 0],
                [0.626544941184676, 0.1254523978144135, 0],
                [0.5431285690421106, 0.0420360256718482, 0],
                [0.5431285690421106, 0.0420360256718482, 0],
                [0.4591605935028725, -6.89072976e-8, 0],
                [0.4591605935028725, -6.89072976e-8, 0],
                [0.2090688130998046, -6.89072976e-8, 0],
                [0.2090688130998046, -6.89072976e-8, 0],
                [0.1252618958355356, 0.0418628479658878, 0],
                [0.1252618958355356, 0.0418628479658878, 0],
                [0.0417631999296475, 0.1254513737322043, 0],
                [0.0417631999296475, 0.1254513737322043, 0],
                [6.984623155e-7, 0.2089723783447397, 0],
                [6.984623155e-7, 0.2089723783447397, 0],
                [1.387383008e-7, 0.2507190896772187, 0]
                ] 
    };
    
    this._6_max = function(){return 0.5847517382670447};
	this._6 = function(){
    	return [
                [0.6682302121354269, 0.7937175177082594, 0],
                [0.6265068913492371, 0.8772239803533921, 0],
                [0.6265068913492371, 0.8772239803533921, 0],
                [0.5429592885487438, 0.9607715831538854, 0],
                [0.5429592885487438, 0.9607715831538854, 0],
                [0.4644912298588793, 0.9999999310927041, 0],
                [0.4644912298588793, 0.9999999310927041, 0],
                [0.2037577898797451, 0.9999999310927041, 0],
                [0.2037577898797451, 0.9999999310927041, 0],
                [0.1252939980768133, 0.9607690850339452, 0],
                [0.1252939980768133, 0.9607690850339452, 0],
                [0.0417623798107201, 0.8772374667678519, 0],
                [0.0417623798107201, 0.8772374667678519, 0],
                [-3.64386779e-8, 0.7936807190207987, 0],
                [-3.64386779e-8, 0.7936807190207987, 0],
                [-3.64386779e-8, 0.2089714908068174, 0],
                [-3.64386779e-8, 0.2089714908068174, 0],
                [0.0417626516033067, 0.125437855847025, 0],
                [0.0417626516033067, 0.125437855847025, 0],
                [0.1253004708974856, 0.0419000365528461, 0],
                [0.1253004708974856, 0.0419000365528461, 0],
                [0.2091098709253742, -6.89072976e-8, 0],
                [0.2091098709253742, -6.89072976e-8, 0],
                [0.4594259140843633, -6.89072976e-8, 0],
                [0.4594259140843633, -6.89072976e-8, 0],
                [0.542964910119423, 0.0419047670643948, 0],
                [0.542964910119423, 0.0419047670643948, 0],
                [0.6264801822434976, 0.1254200391884694, 0],
                [0.6264801822434976, 0.1254200391884694, 0],
                [0.6682658478977999, 0.2089822095339571, 0],
                [0.6682658478977999, 0.2089822095339571, 0],
                [0.6682658478977999, 0.376043403232444, 0],
                [0.6682658478977999, 0.376043403232444, 0],
                [0.6265074510732518, 0.4595502755104519, 0],
                [0.6265074510732518, 0.4595502755104519, 0],
                [0.542968375175434, 0.5430893514082697, 0],
                [0.542968375175434, 0.5430893514082697, 0],
                [0.4594261006590444, 0.584869741743205, 0],
                [0.4594261006590444, 0.584869741743205, 0],
                [0.2088339269852497, 0.584869741743205, 0],
                [0.2088339269852497, 0.584869741743205, 0],
                [0.1253029536610768, 0.5431102635191536, 0],
                [0.1253029536610768, 0.5431102635191536, 0],
                [0.0417391706306205, 0.4595464804887044, 0],
                [0.0417391706306205, 0.4595464804887044, 0],
                [-3.64386779e-8, 0.3752649642077568, 0]
                ]
    };
    
    this._7_max = function(){return 0.6655854309758809};
	this._7 = function(){
    	return [
                [6.4954321e-8, 1.002730332488056, 0],
                [0.6655854309758809, 1.002730332488056, 0],
                [0.6655854309758809, 1.002730332488056, 0],
                [0.3325399392843167, -3.75269877e-8, 0]
                ]
    };
    
    this._8_max = function(){return 0.6682701365310777};
	this._8 = function(){
    	return [
                [0.3383057389756061, 4.00320914e-8, 0],
                [0.2088320586543375, 4.00320914e-8, 0],
                [0.2088320586543375, 4.00320914e-8, 0],
                [0.1252880251031456, 0.0417673695530851, 0],
                [0.1252880251031456, 0.0417673695530851, 0],
                [0.0417722777638403, 0.1252831168923905, 0],
                [0.0417722777638403, 0.1252831168923905, 0],
                [1.475518161e-7, 0.2088346394726841, 0],
                [1.475518161e-7, 0.2088346394726841, 0],
                [1.475518161e-7, 0.2923666359009473, 0],
                [1.475518161e-7, 0.2923666359009473, 0],
                [0.04178485140514, 0.375889893494346, 0],
                [0.04178485140514, 0.375889893494346, 0],
                [0.1252362776030225, 0.4593413196922285, 0],
                [0.1252362776030225, 0.4593413196922285, 0],
                [0.208829073459583, 0.5012016449744295, 0],
                [0.208829073459583, 0.5012016449744295, 0],
                [0.3383057389756061, 0.5012016449744295, 0],
                [0.3383057389756061, 0.5012016449744295, 0],
                [0.208829073459583, 0.5012016449744295, 0],
                [0.208829073459583, 0.5012016449744295, 0],
                [0.12530446487483, 0.5847262535591824, 0],
                [0.12530446487483, 0.5847262535591824, 0],
                [0.0835337329213815, 0.6682674129067863, 0],
                [0.0835337329213815, 0.6682674129067863, 0],
                [0.0835339194960625, 0.8353002736640888, 0],
                [0.0835339194960625, 0.8353002736640888, 0],
                [0.1253057496969916, 0.9188617636600326, 0],
                [0.1253057496969916, 0.9188617636600326, 0],
                [0.1669452984553743, 0.9606581088436882, 0],
                [0.1669452984553743, 0.9606581088436882, 0],
                [0.2506003439364974, 1.002400177670153, 0],
                [0.2506003439364974, 1.002400177670153, 0],
                [0.4176673281009755, 1.002400177670153, 0],
                [0.4176673281009755, 1.002400177670153, 0],
                [0.5011990477238158, 0.9606339405034987, 0],
                [0.5011990477238158, 0.9606339405034987, 0],
                [0.5429676446810561, 0.9188658396930762, 0],
                [0.5429676446810561, 0.9188658396930762, 0],
                [0.5847305807720033, 0.8353498392431077, 0],
                [0.5847305807720033, 0.8353498392431077, 0],
                [0.5847305807720033, 0.6682210561186963, 0],
                [0.5847305807720033, 0.6682210561186963, 0],
                [0.5429785274863264, 0.5847431995033361, 0],
                [0.5429785274863264, 0.5847431995033361, 0],
                [0.4594362999436897, 0.5012009719607065, 0],
                [0.4594362999436897, 0.5012009719607065, 0],
                [0.3383057389756061, 0.5012016449744295, 0],
                [0.3383057389756061, 0.5012016449744295, 0],
                [0.4594362999436897, 0.5012009719607065, 0],
                [0.4594362999436897, 0.5012009719607065, 0],
                [0.5430040882164066, 0.459438684870861, 0],
                [0.5430040882164066, 0.459438684870861, 0],
                [0.6265089660771963, 0.3759338070100711, 0],
                [0.6265089660771963, 0.3759338070100711, 0],
                [0.6682701365310777, 0.2923633588378749, 0],
                [0.6682701365310777, 0.2923633588378749, 0],
                [0.6682701365310777, 0.2088352539220182, 0],
                [0.6682701365310777, 0.2088352539220182, 0],
                [0.6264593122236591, 0.1253220323342816, 0],
                [0.6264593122236591, 0.1253220323342816, 0],
                [0.5429286903347901, 0.0417914104454127, 0],
                [0.5429286903347901, 0.0417914104454127, 0],
                [0.4592257754606664, 4.00320914e-8, 0],
                [0.4592257754606806, 4.00320914e-8, 0],
                [0.3383057389756061, 4.00320914e-8, 0]
                ]
    };
    
    this._9_max = function(){return 0.6682804371447446};
	this._9 = function(){
    	return [
                [0.6682804371447446, 0.6265232250712103, 0],
                [0.6265037560023359, 0.5429808512765391, 0],
                [0.6265037560023359, 0.5429808512765391, 0],
                [0.5429618312584239, 0.4594389265326342, 0],
                [0.5429618312584239, 0.4594389265326342, 0],
                [0.4594362121138432, 0.4176768828212545, 0],
                [0.4594362121138432, 0.4176768828212545, 0],
                [0.2088375083265248, 0.4176770876376992, 0],
                [0.2088375083265248, 0.4176770876376992, 0],
                [0.1253029900836111, 0.4594445537029941, 0],
                [0.1253029900836111, 0.4594445537029941, 0],
                [0.0417663092861744, 0.5429818489497507, 0],
                [0.0417663092861744, 0.5429818489497507, 0],
                [1.865585091e-7, 0.6265176950272604, 0],
                [1.865585091e-7, 0.6265176950272604, 0],
                [1.865585091e-7, 0.7935710374287908, 0],
                [1.865585091e-7, 0.7935710374287908, 0],
                [0.0417701510127131, 0.8770970941802289, 0],
                [0.0417701510127131, 0.8770970941802289, 0],
                [0.1252417517279838, 0.9605686948954996, 0],
                [0.1252417517279838, 0.9605686948954996, 0],
                [0.2088449713134253, 1.002415263242184, 0],
                [0.2088449713134253, 1.002415263242184, 0],
                [0.4594434885260626, 1.002415263242184, 0],
                [0.4594434885260626, 1.002415263242184, 0],
                [0.5429662525646677, 0.9606473875440003, 0],
                [0.5429662525646677, 0.9606473875440003, 0],
                [0.6265034761892565, 0.8771101639194114, 0],
                [0.6265034761892565, 0.8771101639194114, 0],
                [0.6682705486871328, 0.793577250194204, 0],
                [0.6682705486871328, 0.793577250194204, 0],
                [0.6682699889631181, 0.2088590783289135, 0],
                [0.6682699889631181, 0.2088590783289135, 0],
                [0.6265155102067013, 0.1253433989438832, 0],
                [0.6265155102067013, 0.1253433989438832, 0],
                [0.5431612290146292, 0.0419891177518181, 0],
                [0.5431612290146292, 0.0419891177518181, 0],
                [0.4594255773575356, -3.08126147e-8, 0],
                [0.4594255773575356, -3.08126147e-8, 0],
                [0.2088263138462025, -3.08126147e-8, 0],
                [0.2088263138462025, -3.08126147e-8, 0],
                [0.1253141845639334, 0.0417916718650133, 0],
                [0.1253141845639334, 0.0417916718650133, 0],
                [0.0417765984514063, 0.1253292579775334, 0],
                [0.0417765984514063, 0.1253292579775334, 0],
                [0.0000231352431967, 0.2088287654954684, 0]
                ]
    };
    
    
    
    //Symbols
    this.period_max = function(){return 0.0839491771521068};
	this.period = function(){
    	return [
                [0.0418921311051292, 0.0416591264874526, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [-4.80492162e-8, 0, 0],
                [-4.80492162e-8, 0, 0],
                [0.083686368402681, 0, 0],
                [0.083686368402681, 0, 0],
                [0.0418921311051292, 0.0416591264874526, 0]
                ]
    };
    
    this.comma_max = function(){return 0.0839491771521068};
	this.comma = function(){
    	return [
        		[0.083686368402681, 0, 0],
                [0.0418921311051292, 0.0416591264874526, 0],
                [0.0418921311051292, 0.0416591264874526, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0.083686368402681, 0, 0],
                [0.083686368402681, 0, 0],
                [0, -0.083784358308705, 0]
                ]
    };
    
    this.semicolon_max = function(){return 0.0839491771521068};
	this.semicolon = function(){
    	return [
                [0.0421566363818329, 0.7101689680214635, 0],
                [0.0421566363818329, 0.6270342337244302, 0],
                [0.0421566363818329, 0.6270342337244302, 0],
                [0, 0.669190768677197, 0],
                [0, 0.669190768677197, 0],
                [0.0837429280404649, 0.669190768677197, 0],
                [0.0837429280404649, 0.669190768677197, 0],
                [0.0421566363818329, 0.7101689680214635, 0],
                [0.083686368402681, 0, 0],
                [0.0418921311051292, 0.0416591264874526, 0],
                [0.0418921311051292, 0.0416591264874526, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0.083686368402681, 0, 0],
                [0.083686368402681, 0, 0],
                [0, -0.083784358308705, 0]
                ]
    };
    
    
    this.exclamation_max = function(){return 0.0839491771521068};
	this.exclamation = function(){
    	return [
                [0.0422189489680989, 0.2509815885743549, 0],
                [0.0002538750603662, 1.002223530253267, 0],
                [0.0002538750603662, 1.002223530253267, 0],
                [0.0839491771521068, 1.002223530253267, 0],
                [0.0839491771521068, 1.002223530253267, 0],
                [0.0422189489680989, 0.2509815885743549, 0],
                [0.0418921311051292, 0.0416591264874526, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0.0418921311051292, -0.0418921791543525, 0],
                [0, 0, 0],
                [0, 0, 0],
                [0.083686368402681, 0, 0],
                [0.083686368402681, 0, 0],
                [0.0418921311051292, 0.0416591264874526, 0]
                ]
    };
    
    this.single_quote_max = function(){return 0.1670718827331825};
	this.single_quote = function(){
    	return [
                [0.1670718827331825, 0.9999999310927024, 0],
                [-2.81146981e-8, 0.9999999310927024, 0],
                [-2.81146981e-8, 0.9999999310927024, 0],
                [0.0835319310645844, 0.9164679719134198, 0],
                [0.0835319310645844, 0.9164679719134198, 0],
                [0.0835319310645844, 1.083541834811796, 0],
                [0.0835319310645844, 1.083541834811796, 0],
                [0.1670718827331825, 0.9999999310927024, 0],
                [0.1670718827331825, 0.9999999310927024, 0],
                [0.1566454525727181, 0.9215851534021339, 0],
                [0.1566454525727181, 0.9215851534021339, 0],
                [0.1462309983125465, 0.8827026969261736, 0],
                [0.1462309983125465, 0.8827026969261736, 0],
                [0.1331818459813689, 0.8449392657695682, 0],
                [0.1331818459813689, 0.8449392657695682, 0],
                [0.1061184246459561, 0.7889386348270762, 0],
                [0.1061184246459561, 0.7889386348270762, 0],
                [0.0839024250823286, 0.7500581117051297, 0]
                ]
    };
    
    this.minus_max = function(){return 0.6659415148739072};
	this.minus = function(){
    	return [
                [0, 0.4593194631833626, 0],
                [0.6659415148739072, 0.4593194631833626, 0]
                ]
    };
    
    this.plus_max = function(){return 0.6683500267304794};
	this.plus = function(){
    	return [
                [0.3342542897755152, 0.8356316784812491, 0],
                [0.3342542897755152, 0.0834885734010556, 0],
                [0, 0.4595695989644924, 0],
                [0.6683500267304794, 0.4595695989644924, 0]
                ] 
    };
    
    this.equals_max = function(){return 0.5845692356545414};
	this.equals = function(){
    	return [
                [0, 0.6682870037232221, 0],
                [0.5845692356545414, 0.6682870037232221, 0],
                [0, 0.2506042455582573, 0],
                [0.5845669158804156, 0.2506042455582573, 0]
                ]
    };
    
    this.question_max = function(){return 0.5844795491948674};
	this.question = function(){
    	return [
                [0.0832388402540119, 0.5853237626762962, 0],
                [0.0417239996843648, 0.6268386032459432, 0],
                [0.0417239996843648, 0.6268386032459432, 0],
                [-7.1722184e-9, 0.7101448374318409, 0],
                [-7.1722184e-9, 0.7101448374318409, 0],
                [-7.1722184e-9, 0.7936114692335537, 0],
                [-7.1722184e-9, 0.7936114692335537, 0],
                [0.0417078268638989, 0.8772486228617992, 0],
                [0.0417078268638989, 0.8772486228617992, 0],
                [0.1249670226105763, 0.9605078186084767, 0],
                [0.1249670226105763, 0.9605078186084767, 0],
                [0.2037160452693456, 1, 0],
                [0.2037160452693456, 1, 0],
                [0.4644616872805614, 1, 0],
                [0.4644616872805614, 1, 0],
                [0.5429242638721803, 0.9607704196988321, 0],
                [0.5429242638721803, 0.9607704196988321, 0],
                [0.626459294766903, 0.8772360932688059, 0],
                [0.626459294766903, 0.8772360932688059, 0],
                [0.6682231776968593, 0.7937118747534555, 0],
                [0.6682231776968593, 0.7937118747534555, 0],
                [0.6682231776968593, 0.7101592731420113, 0],
                [0.6682231776968593, 0.7101592731420113, 0],
                [0.626462156574064, 0.6266392807687283, 0],
                [0.626462156574064, 0.6266392807687283, 0],
                [0.5847933799827559, 0.5849705041774201, 0],
                [0.5847933799827559, 0.5849705041774201, 0],
                [0.4593927113527343, 0.5013407964551391, 0],
                [0.4593927113527343, 0.5013407964551391, 0],
                [0.3758489125035282, 0.4177977020706294, 0],
                [0.3758489125035282, 0.4177977020706294, 0],
                [0.3340895707397067, 0.3342711669465643, 0],
                [0.3340895707397067, 0.3342711669465643, 0],
                [0.3340899229720549, 0.1672413645312929, 0],
                [0.3342818896095991, 0.0420911040275485, 0],
                [0.3342818896095991, -0.0415555874805875, 0],
                [0.3342818896095991, -0.0415555874805875, 0],
                [0.2923063589780668, 0, 0],
                [0.2923063589780668, 0, 0],
                [0.3759854968573109, 0, 0],
                [0.3759854968573109, 0, 0],
                [0.3342818896095991, 0.0420911040275485, 0]
                ]
    };
    
    this.double_quote_max = function(){return 0.5014326421759847};
	this.double_quote = function(){
    	return [
                [0.1670718453449922, 0.9999999310927024, 0],
                [-6.55028884e-8, 0.9999999310927024, 0],
                [-6.55028884e-8, 0.9999999310927024, 0],
                [0.083531893676394, 0.9164679719134198, 0],
                [0.083531893676394, 0.9164679719134198, 0],
                [0.083531893676394, 1.083541834811796, 0],
                [0.083531893676394, 1.083541834811796, 0],
                [0.1670718453449922, 0.9999999310927024, 0],
                [0.1670718453449922, 0.9999999310927024, 0],
                [0.1566454151845278, 0.9215851534021339, 0],
                [0.1566454151845278, 0.9215851534021339, 0],
                [0.1462309609243562, 0.8827026969261736, 0],
                [0.1462309609243562, 0.8827026969261736, 0],
                [0.1331818085931786, 0.8449392657695682, 0],
                [0.1331818085931786, 0.8449392657695682, 0],
                [0.1061183872577658, 0.7889386348270762, 0],
                [0.1061183872577658, 0.7889386348270762, 0],
                [0.0839023876941383, 0.7500581117051297, 0],
                [0.5014326421759847, 0.9999999310927024, 0],
                [0.3343607313281041, 0.9999999310927024, 0],
                [0.3343607313281041, 0.9999999310927024, 0],
                [0.4178926905073866, 0.9164679719134198, 0],
                [0.4178926905073866, 0.9164679719134198, 0],
                [0.4178926905073866, 1.083541834811796, 0],
                [0.4178926905073866, 1.083541834811796, 0],
                [0.5014326421759847, 0.9999999310927024, 0],
                [0.5014326421759847, 0.9999999310927024, 0],
                [0.4910062120155203, 0.9215851534021339, 0],
                [0.4910062120155203, 0.9215851534021339, 0],
                [0.4805917577553487, 0.8827026969261736, 0],
                [0.4805917577553487, 0.8827026969261736, 0],
                [0.4675426054241712, 0.8449392657695682, 0],
                [0.4675426054241712, 0.8449392657695682, 0],
                [0.4404791840887583, 0.7889386348270762, 0],
                [0.4404791840887583, 0.7889386348270762, 0],
                [0.4182631845251308, 0.7500581117051297, 0]
                ]
    };
    
    this.star_max = function(){return 0.6684433118214486};
	this.star = function(){
    	return [
                [0, 0.7518521800237324, 0],
                [0.6681850876705653, 0.1671448825844379, 0],
                [0.6684433118214486, 0.7518618528999071, 0],
                [0.0000914855199881, 0.1670899630313301, 0],
                [0.3342357214271772, 0.8353218266794897, 0],
                [0.3342357214271772, 0.0832481104960721, 0]
                ]
    };
    
    this.forward_slash_max = function(){return 0.6681428964700729};
	this.forward_slash = function(){
    	return [
                [0.6681428964700729, 0.835538467129112, 0],
                [0, 0.0836275910179865, 0]
                ]
    };
    
    this.backslash_max = function(){return 0.6681428964700729};
	this.backslash = function(){
    	return [
                [0, 0.835538467129112, 0],
                [0.6681428964700729, 0.0836275910179865, 0]
                ]
    };
    
    this.dollar_max = function(){return 0.6682717266528755};
	this.dollar = function(){
    	return [
                [0.6682699789428739, 0.8353562028719778, 0],
                [0.6265117257072177, 0.9188857254305987, 0],
                [0.6265117257072177, 0.9188857254305987, 0],
                [0.5847421133015019, 0.9606553378363074, 0],
                [0.5847421133015019, 0.9606553378363074, 0],
                [0.4511161042348704, 1.002428271979383, 0],
                [0.4511161042348704, 1.002428271979383, 0],
                [0.2036515003871386, 1.002428271979383, 0],
                [0.2036515003871386, 1.002428271979383, 0],
                [0.0835362447558339, 0.9606532846492967, 0],
                [0.0835362447558339, 0.9606532846492967, 0],
                [0.0417685353898349, 0.9188859109100491, 0],
                [0.0417685353898349, 0.9188859109100491, 0],
                [0.0000035719671416, 0.835353964520479, 0],
                [0.0000035719671416, 0.835353964520479, 0],
                [0.0000035719671416, 0.6683189017408467, 0],
                [0.0000035719671416, 0.6683189017408467, 0],
                [0.0417613882752903, 0.5847510873831965, 0],
                [0.0417613882752903, 0.5847510873831965, 0],
                [0.0836177453630143, 0.5428947302954726, 0],
                [0.0836177453630143, 0.5428947302954726, 0],
                [0.1670730683557338, 0.5012206854722053, 0],
                [0.1670730683557338, 0.5012206854722053, 0],
                [0.5012024487280087, 0.5012206854722053, 0],
                [0.5012024487280087, 0.5012206854722053, 0],
                [0.584738398472922, 0.459460161072542, 0],
                [0.584738398472922, 0.459460161072542, 0],
                [0.6264389040663759, 0.4177596554790881, 0],
                [0.6264389040663759, 0.4177596554790881, 0],
                [0.6682717266528755, 0.3341552450649488, 0],
                [0.6682717266528755, 0.3341552450649488, 0],
                [0.6682717266528755, 0.1670918031858264, 0],
                [0.6682717266528755, 0.1670918031858264, 0],
                [0.6265091041422579, 0.0835675567414853, 0],
                [0.6265091041422579, 0.0835675567414853, 0],
                [0.5847374147561624, 0.0417958673553898, 0],
                [0.5847374147561624, 0.0417958673553898, 0],
                [0.4491502654760211, 0, 0],
                [0.4491502654760211, 0, 0],
                [0.2050849541381581, 0, 0],
                [0.2050849541381581, 0, 0],
                [0.0835200784384256, 0.0417264516874951, 0],
                [0.0835200784384256, 0.0417264516874951, 0],
                [0.0416907870049101, 0.0835557431210106, 0],
                [0.0416907870049101, 0.0835557431210106, 0],
                [7.65471668e-8, 0.167094761007462, 0],
                [0.3283833290659004, 1.085262445119909, 0],
                [0.3283833290659004, -0.0834922361936066, 0]
                ]
    };
    
    this.colon_max = function(){return 0.5844795491948674};
	this.colon = function(){
    	return [
                [0.0421566363818329, 0.7101689680214635, 0],
                [0.0421566363818329, 0.6270342337244302, 0],
                [0.0421566363818329, 0.6270342337244302, 0],
                [0, 0.669190768677197, 0],
                [0, 0.669190768677197, 0],
                [0.0837429280404649, 0.669190768677197, 0],
                [0.0837429280404649, 0.669190768677197, 0],
                [0.0421566363818329, 0.7101689680214635, 0],
                [0.0421566363818329, 0.1244947008542567, 0],
                [0.0421566363818329, 0.0413599665572235, 0],
                [0.0421566363818329, 0.0413599665572235, 0],
                [0, 0.0835165015099904, 0],
                [0, 0.0835165015099904, 0],
                [0.0837429280404649, 0.0835165015099904, 0],
                [0.0837429280404649, 0.0835165015099904, 0],
                [0.0421566363818329, 0.1244947008542567, 0]
                ]
    };
    
    
    //New Characters (4_22_2019):
    
    this.hashtag_max = function(){return 0.7267785583640034};
	this.hashtag = function(){
    	return [
			[0.3150114186441897, 1.002427586737184, 0],
			[0.1080042839507627, -6.85242199e-7, 0],
			[0.6210246327154892, 1.002427586737184, 0],
			[0.4140174980220622, -6.85242199e-7, 0],
			[0.0022503583018079, 0.6705791470012628, 0],
			[0.7267785583640034, 0.6705791470012628, 0],
			[0, 0.3196812623777987, 0],
			[0.7245314286969915, 0.3196812623777987, 0]
		]
    };
    
    this.percent_max = function(){return 0.9656135727414039};
	this.percent = function(){
    	return [
			[0.7433188533141362, 1.002427586737184, 0],
			[0.2314059262103001, -6.85242199e-7, 0],
			[0.1682570624716391, 0.5295713513914962, 0],
			[0.2449435910016291, 0.5554167163695638, 0],
			[0.2449435910016291, 0.5554167163695638, 0],
			[0.2909258046815921, 0.6119909438712057, 0],
			[0.2909258046815921, 0.6119909438712057, 0],
			[0.3156862032710705, 0.694200091631501, 0],
			[0.3156862032710705, 0.694200091631501, 0],
			[0.3183369122607473, 0.7923224003411633, 0],
			[0.3183369122607473, 0.7923224003411633, 0],
			[0.2873872211825983, 0.9037027263498202, 0],
			[0.2873872211825983, 0.9037027263498202, 0],
			[0.2307957142747909, 0.9567406958622086, 0],
			[0.2307957142747909, 0.9567406958622086, 0],
			[0.1688963321180381, 0.9753050669169169, 0],
			[0.1688963321180381, 0.9753050669169169, 0],
			[0.1016923033475905, 0.9682325509393194, 0],
			[0.1016923033475905, 0.9682325509393194, 0],
			[0.0424468588153104, 0.9196139205259896, 0],
			[0.0424468588153104, 0.9196139205259896, 0],
			[0.0097278759876644, 0.8400559828705809, 0],
			[0.0097278759876644, 0.8400559828705809, 0],
			[0, 0.7481231090278015, 0],
			[0, 0.7481231090278015, 0],
			[0.0088432301131434, 0.6561902351845675, 0],
			[0.0088432301131434, 0.6561902351845675, 0],
			[0.0371389835668197, 0.5996140409101827, 0],
			[0.0371389835668197, 0.5996140409101827, 0],
			[0.1016923033475905, 0.5395055221933945, 0],
			[0.1016923033475905, 0.5395055221933945, 0],
			[0.1485591629025293, 0.5244774091274849, 0],
			[0.1485591629025293, 0.5244774091274849, 0],
			[0.1768549163566604, 0.5227092801328582, 0],
			[0.8155337229522956, 0.0085239945065041, 0],
			[0.8922202514822856, 0.0343693594845718, 0],
			[0.8922202514822856, 0.0343693594845718, 0],
			[0.9382024651622486, 0.0909435869862137, 0],
			[0.9382024651622486, 0.0909435869862137, 0],
			[0.9629628637517271, 0.1731527347465089, 0],
			[0.9629628637517271, 0.1731527347465089, 0],
			[0.9656135727414039, 0.2712750434561713, 0],
			[0.9656135727414039, 0.2712750434561713, 0],
			[0.9346638816632548, 0.3826553694648282, 0],
			[0.9346638816632548, 0.3826553694648282, 0],
			[0.8780723747554475, 0.4356933389772167, 0],
			[0.8780723747554475, 0.4356933389772167, 0],
			[0.8161729925986946, 0.454257710031925, 0],
			[0.8161729925986946, 0.454257710031925, 0],
			[0.7489689638282471, 0.4471851940543275, 0],
			[0.7489689638282471, 0.4471851940543275, 0],
			[0.689723519295967, 0.3985665636409976, 0],
			[0.689723519295967, 0.3985665636409976, 0],
			[0.6570045364683211, 0.3190086259855889, 0],
			[0.6570045364683211, 0.3190086259855889, 0],
			[0.6472766604806566, 0.2270757521428095, 0],
			[0.6472766604806566, 0.2270757521428095, 0],
			[0.6561198905938, 0.1351428782995754, 0],
			[0.6561198905938, 0.1351428782995754, 0],
			[0.6844156440474763, 0.0785666840251906, 0],
			[0.6844156440474763, 0.0785666840251906, 0],
			[0.7489689638282471, 0.0184581653084024, 0],
			[0.7489689638282471, 0.0184581653084024, 0],
			[0.795835823383186, 0.0034300522424928, 0],
			[0.795835823383186, 0.0034300522424928, 0],
			[0.8241315768373169, 0.0016619232478661, 0]
		]
    };
    
    this.ampersand_max = function(){return 0.7214706831150579};
	this.ampersand = function(){
    	return [
			[0.7214706831150579, 0.023221689696129, 0],
            [0.621860849071254, 0.098617935524544, 0],
            [0.621860849071254, 0.098617935524544, 0],
            [0.1622227444422606, 0.6804405471989412, 0],
            [0.1622227444422606, 0.6804405471989412, 0],
            [0.1323385027753829, 0.7643706213998485, 0],
            [0.1323385027753829, 0.7643706213998485, 0],
            [0.1280702478616149, 0.8454567417347789, 0],
            [0.1280702478616149, 0.8454567417347789, 0],
            [0.169338655055526, 0.912315225644761, 0],
            [0.169338655055526, 0.912315225644761, 0],
            [0.2376436482177269, 0.9549922345986487, 0],
            [0.2376436482177269, 0.9549922345986487, 0],
            [0.3002565586161836, 0.9663719836103155, 0],
            [0.3002565586161836, 0.9663719836103155, 0],
            [0.3842139722191859, 0.949302360092588, 0],
            [0.3842139722191859, 0.949302360092588, 0],
            [0.44255862770342, 0.8852878300485826, 0],
            [0.44255862770342, 0.8852878300485826, 0],
            [0.4695952136717097, 0.7842861655572051, 0],
            [0.4695952136717097, 0.7842861655572051, 0],
            [0.4382903727896519, 0.6946662168502371, 0],
            [0.4382903727896519, 0.6946662168502371, 0],
            [0.3529091313371282, 0.6178479940881516, 0],
            [0.3529091313371282, 0.6178479940881516, 0],
            [0.1152622544850601, 0.47986116192169, 0],
            [0.1152622544850601, 0.47986116192169, 0],
            [0.0412651785595699, 0.40019701852043, 0],
            [0.0412651785595699, 0.40019701852043, 0],
            [0.0014205992147254, 0.310577069813462, 0],
            [0.0014205992147254, 0.310577069813462, 0],
            [0, 0.2124213259612588, 0],
            [0, 0.2124213259612588, 0],
            [0.0469572613228593, 0.1327591493331965, 0],
            [0.0469572613228593, 0.1327591493331965, 0],
            [0.1323385027753829, 0.0673206755827778, 0],
            [0.1323385027753829, 0.0673206755827778, 0],
            [0.2433357309810162, 0.0488271083590917, 0],
            [0.2433357309810162, 0.0488271083590917, 0],
            [0.365713896078887, 0.0630527780099328, 0],
            [0.365713896078887, 0.0630527780099328, 0],
            [0.4639031309079656, 0.1341811262664123, 0],
            [0.4639031309079656, 0.1341811262664123, 0],
            [0.5492843723604893, 0.2408726652638506, 0],
            [0.5492843723604893, 0.2408726652638506, 0],
            [0.5891289517053337, 0.3233807625315421, 0],
            [0.5891289517053337, 0.3233807625315421, 0],
            [0.6289735310497236, 0.4528317995527687, 0]
		]
    };
    
    this.open_paren_max = function(){return 0.2270601840664312};
	this.open_paren = function(){
    	return [
            [0.2184913878927545, 1.002428271979383, 0],
            [0.1028190968158924, 0.8000289024910358, 0],
            [0.1028190968158924, 0.8000289024910358, 0],
            [0.0299907866083231, 0.5801849749448281, 0],
            [0.0299907866083231, 0.5801849749448281, 0],
            [0.0014302851186584, 0.3974560220961081, 0],
            [0.0014302851186584, 0.3974560220961081, 0],
            [-1e-16, 0.3146588091860992, 0],
            [-1e-16, 0.3146588091860992, 0],
            [0.0257063885214847, 0.1476325725682415, 0],
            [0.0257063885214847, 0.1476325725682415, 0],
            [0.1028190968158924, -0.052225006990497, 0],
            [0.1028190968158924, -0.052225006990497, 0],
            [0.2270601840664312, -0.2834919525564458, 0]
		]
    };
    
    this.close_paren_max = function(){return 0.217061102774096};
	this.close_paren = function(){
    	return [
            [0.0042843980868383, 1.002428271979383, 0],
            [0.0885388460710601, 0.872834908180053, 0],
            [0.0885388460710601, 0.872834908180053, 0],
            [0.1599400997947668, 0.7043827610825844, 0],
            [0.1599400997947668, 0.7043827610825844, 0],
            [0.2070652501161021, 0.5373584912374696, 0],
            [0.2070652501161021, 0.5373584912374696, 0],
            [0.217061102774096, 0.3603390806254225, 0],
            [0.217061102774096, 0.3603390806254225, 0],
            [0.1956423409742455, 0.163335288798649, 0],
            [0.1956423409742455, 0.163335288798649, 0],
            [0.1385213379949163, -0.0179638200245194, 0],
            [0.1385213379949163, -0.0179638200245194, 0],
            [-1e-16, -0.289201494792664, 0]
		]
    };
    
    this.at_sign_max = function(){return 1.168746874209929};
	this.at_sign = function(){
    	return [
            [0.7932308435476187, 0.4010986898617262, 0],
            [0.7622876097386069, 0.5487246768686305, 0],
            [0.7622876097386069, 0.5487246768686305, 0],
            [0.7032165114734852, 0.6274585366056158, 0],
            [0.7032165114734852, 0.6274585366056158, 0],
            [0.6216450588246261, 0.6836964459113802, 0],
            [0.6216450588246261, 0.6836964459113802, 0],
            [0.5372582368228649, 0.6851026886599243, 0],
            [0.5372582368228649, 0.6851026886599243, 0],
            [0.4303710604364568, 0.6527650057611823, 0],
            [0.4303710604364568, 0.6527650057611823, 0],
            [0.3389522723206682, 0.551535195592976, 0],
            [0.3389522723206682, 0.551535195592976, 0],
            [0.2911329655650405, 0.4418698957057928, 0],
            [0.2911329655650405, 0.4418698957057928, 0],
            [0.2756613486605346, 0.3293940770947188, 0],
            [0.2756613486605346, 0.3293940770947188, 0],
            [0.2812888587324522, 0.2267580241779683, 0],
            [0.2812888587324522, 0.2267580241779683, 0],
            [0.3066045824695465, 0.1592721396565935, 0],
            [0.3066045824695465, 0.1592721396565935, 0],
            [0.3600481706622958, 0.086161284141042, 0],
            [0.3600481706622958, 0.086161284141042, 0],
            [0.4289633757600058, 0.0467943542727767, 0],
            [0.4289633757600058, 0.0467943542727767, 0],
            [0.4936587554622492, 0.0439818687752336, 0],
            [0.4936587554622492, 0.0439818687752336, 0],
            [0.5836698589015868, 0.0777257944225198, 0],
            [0.5836698589015868, 0.0777257944225198, 0],
            [0.6835282978083086, 0.1691138721236598, 0],
            [0.6835282978083086, 0.1691138721236598, 0],
            [0.7819790520381247, 0.2900271472264535, 0],
            [0.7819790520381247, 0.2900271472264535, 0],
            [0.8410469216684504, 0.7174403715582116, 0],
            [0.8410469216684504, 0.7174403715582116, 0],
            [0.7580677843431403, 0.0974092593566525, 0],
            [0.7580677843431403, 0.0974092593566525, 0],
            [0.774947085924552, 0.0678840619554535, 0],
            [0.774947085924552, 0.0678840619554535, 0],
            [0.829798358794207, 0.0510130825184092, 0],
            [0.829798358794207, 0.0510130825184092, 0],
            [0.9212139182756544, 0.0763195516739757, 0],
            [0.9212139182756544, 0.0763195516739757, 0],
            [1.035136289409976, 0.1620826583809389, 0],
            [1.035136289409976, 0.1620826583809389, 0],
            [1.113895601340274, 0.2886209044779093, 0],
            [1.113895601340274, 0.2886209044779093, 0],
            [1.150463116586408, 0.3800089821790493, 0],
            [1.150463116586408, 0.3800089821790493, 0],
            [1.157495082700435, 0.4812387923477104, 0],
            [1.157495082700435, 0.4812387923477104, 0],
            [1.153275257305423, 0.5937146109583296, 0],
            [1.153275257305423, 0.5937146109583296, 0],
            [1.105459179184137, 0.7160341288096675, 0],
            [1.105459179184137, 0.7160341288096675, 0],
            [1.037948430128537, 0.8017972355166307, 0],
            [1.037948430128537, 0.8017972355166307, 0],
            [0.9605968028751448, 0.8608495970922263, 0],
            [0.9605968028751448, 0.8608495970922263, 0],
            [0.8748022961964778, 0.9142750209009022, 0],
            [0.8748022961964778, 0.9142750209009022, 0],
            [0.7524435029060186, 0.9550481935177118, 0],
            [0.7524435029060186, 0.9550481935177118, 0],
            [0.6413332724898027, 0.9705148969794095, 0],
            [0.6413332724898027, 0.9705148969794095, 0],
            [0.5147546538043315, 0.9606731645123431, 0],
            [0.5147546538043315, 0.9606731645123431, 0],
            [0.3909881758369664, 0.9283354816136011, 0],
            [0.3909881758369664, 0.9283354816136011, 0],
            [0.2855086841274641, 0.8791268192782695, 0],
            [0.2855086841274641, 0.8791268192782695, 0],
            [0.1983097214066873, 0.804609721013719, 0],
            [0.1983097214066873, 0.804609721013719, 0],
            [0.1068909332908987, 0.6865089314084685, 0],
            [0.1068909332908987, 0.6865089314084685, 0],
            [0.046412150349326, 0.5641894135571306, 0],
            [0.046412150349326, 0.5641894135571306, 0],
            [0.005628038342067, 0.3968799616160936, 0],
            [0.005628038342067, 0.3968799616160936, 0],
            [5.282701494e-7, 0.285808418980821, 0],
            [5.282701494e-7, 0.285808418980821, 0],
            [0.0281283927262592, 0.1170927242912398, 0],
            [0.0281283927262592, 0.1170927242912398, 0],
            [0.1082953893330085, -0.0220977729971423, 0],
            [0.1082953893330085, -0.0220977729971423, 0],
            [0.2208100757908795, -0.1359818011299581, 0],
            [0.2208100757908795, -0.1359818011299581, 0],
            [0.3712999621717898, -0.2104969326213109, 0],
            [0.3712999621717898, -0.2104969326213109, 0],
            [0.5189744791993434, -0.2386158872739656, 0],
            [0.5189744791993434, -0.2386158872739656, 0],
            [0.6525850639992968, -0.241428372771054, 0],
            [0.6525850639992968, -0.241428372771054, 0],
            [0.8649581893638895, -0.2175281463640317, 0],
            [0.8649581893638895, -0.2175281463640317, 0],
            [0.9605968028751448, -0.1809717352196571, 0],
            [0.9605968028751448, -0.1809717352196571, 0],
            [1.08717542156107, -0.096614871261238, 0],
            [1.08717542156107, -0.096614871261238, 0],
            [1.168746874209929, 0.0074274244040566, 0]
		]
    };
    
    this.open_square_bracket_max = function(){return 0.2010503038945898};
	this.open_square_bracket = function(){
    	return [
            [0.1987676592470961, 0.951484196674997, 0],
            [0, 0.951484196674997, 0],
            [0, 0.951484196674997, 0],
            [0, -0.2247247730763178, 0],
            [0, -0.2247247730763178, 0],
            [0.2010503038945898, -0.2247247730763178, 0]
		]
    };
    
    this.close_square_bracket_max = function(){return 0.2010503038941351};
	this.close_square_bracket = function(){
    	return [
            [0.002282644647039, 0.951484196674997, 0],
            [0.2010503038941351, 0.951484196674997, 0],
            [0.2010503038941351, 0.951484196674997, 0],
            [0.2010503038941351, -0.2247247730763178, 0],
            [0.2010503038941351, -0.2247247730763178, 0],
            [-4.547e-13, -0.2247247730763178, 0]
		]
    };
    
    this.underscore_max = function(){return 0.8051730345869145};
	this.underscore = function(){
    	return [
        	[0, -0.2308847063470552, 0],
 			[0.8051730345869145, -0.2308847063470552, 0]
        ]
    };
    
    this.open_curly_brace_max = function(){return 0.4499844872361791};
	this.open_curly_brace = function(){
    	return [
            [0.4499844872361791, 0.9672183812747476, 0],
            [0.3511043246071494, 0.961487204534265, 0],
            [0.3511043246071494, 0.961487204534265, 0],
            [0.3095453403011561, 0.9428638302872656, 0],
            [0.3095453403011561, 0.9428638302872656, 0],
            [0.2808815225048419, 0.917077468501489, 0],
            [0.2808815225048419, 0.917077468501489, 0],
            [0.2608187872283451, 0.8812625308066941, 0],
            [0.2608187872283451, 0.8812625308066941, 0],
            [0.2507874195903241, 0.5976086176158475, 0],
            [0.2507874195903241, 0.5976086176158475, 0],
            [0.2393225381988486, 0.5202475654853203, 0],
            [0.2393225381988486, 0.5202475654853203, 0],
            [0.2063646364122178, 0.4486176900952758, 0],
            [0.2063646364122178, 0.4486176900952758, 0],
            [0.1662359372244281, 0.4070735424327411, 0],
            [0.1662359372244281, 0.4070735424327411, 0],
            [0.1089147589018466, 0.3769878147047763, 0],
            [0.1089147589018466, 0.3769878147047763, 0],
            [0.0530238656974688, 0.3626618396267674, 0],
            [0.0530238656974688, 0.3626618396267674, 0],
            [-1e-16, 0.3554988520879903, 0],
            [-1e-16, 0.3554988520879903, 0],
            [0.1318445216847976, 0.3383092554129377, 0],
            [0.1318445216847976, 0.3383092554129377, 0],
            [0.1705364784843368, 0.3168202927956969, 0],
            [0.1705364784843368, 0.3168202927956969, 0],
            [0.2063646364122178, 0.2810053551004473, 0],
            [0.2063646364122178, 0.2810053551004473, 0],
            [0.2292911705603728, 0.2380274298664205, 0],
            [0.2292911705603728, 0.2380274298664205, 0],
            [0.2450565932117569, 0.1721267644436609, 0],
            [0.2450565932117569, 0.1721267644436609, 0],
            [0.2507874195903241, 0.077576115638081, 0],
            [0.2507874195903241, 0.077576115638081, 0],
            [0.2536544470967783, -0.0141089447977123, 0],
            [0.2536544470967783, -0.0141089447977123, 0],
            [0.2608187872283451, -0.1143907703437747, 0],
            [0.2608187872283451, -0.1143907703437747, 0],
            [0.2765842098797293, -0.1702628598575159, 0],
            [0.2765842098797293, -0.1702628598575159, 0],
            [0.2906513707421254, -0.2066147266020692, 0],
            [0.2906513707421254, -0.2066147266020692, 0],
            [0.3473978521101344, -0.2391923558159163, 0],
            [0.3473978521101344, -0.2391923558159163, 0],
            [0.4112925304366399, -0.2418927352475606, 0],
            [0.4112925304366399, -0.2418927352475606, 0],
            [0.4479730478933561, -0.2414403774402984, 0]
		]
    };
    
    this.close_curly_brace_max = function(){return .4499844872357244};
	this.close_curly_brace = function(){
    	return [
            [-4.547e-13, 0.9676707390820098, 0],
            [0.0988801626285749, 0.9619395623415272, 0],
            [0.0988801626285749, 0.9619395623415272, 0],
            [0.1404391469345683, 0.9433161880945277, 0],
            [0.1404391469345683, 0.9433161880945277, 0],
            [0.1691029647308824, 0.9175298263087512, 0],
            [0.1691029647308824, 0.9175298263087512, 0],
            [0.1891657000073792, 0.8817148886139563, 0],
            [0.1891657000073792, 0.8817148886139563, 0],
            [0.1991970676454002, 0.5980609754231097, 0],
            [0.1991970676454002, 0.5980609754231097, 0],
            [0.2106619490368757, 0.5206999232925825, 0],
            [0.2106619490368757, 0.5206999232925825, 0],
            [0.2436198508235066, 0.4490700479025378, 0],
            [0.2436198508235066, 0.4490700479025378, 0],
            [0.2837485500112962, 0.4075259002400032, 0],
            [0.2837485500112962, 0.4075259002400032, 0],
            [0.3410697283338777, 0.3774401725120384, 0],
            [0.3410697283338777, 0.3774401725120384, 0],
            [0.3969606215382555, 0.3631141974340295, 0],
            [0.3969606215382555, 0.3631141974340295, 0],
            [0.4499844872357244, 0.3559512098952524, 0],
            [0.4499844872357244, 0.3559512098952524, 0],
            [0.3181399655509267, 0.3387616132201998, 0],
            [0.3181399655509267, 0.3387616132201998, 0],
            [0.2794480087513875, 0.3172726506029591, 0],
            [0.2794480087513875, 0.3172726506029591, 0],
            [0.2436198508235066, 0.2814577129077094, 0],
            [0.2436198508235066, 0.2814577129077094, 0],
            [0.2206933166753515, 0.2384797876736826, 0],
            [0.2206933166753515, 0.2384797876736826, 0],
            [0.2049278940239674, 0.172579122250923, 0],
            [0.2049278940239674, 0.172579122250923, 0],
            [0.1991970676454002, 0.0780284734453432, 0],
            [0.1991970676454002, 0.0780284734453432, 0],
            [0.196330040138946, -0.0136565869904502, 0],
            [0.196330040138946, -0.0136565869904502, 0],
            [0.1891657000073792, -0.1139384125365126, 0],
            [0.1891657000073792, -0.1139384125365126, 0],
            [0.1734002773559951, -0.1698105020502538, 0],
            [0.1734002773559951, -0.1698105020502538, 0],
            [0.1593331164935989, -0.2061623687948071, 0],
            [0.1593331164935989, -0.2061623687948071, 0],
            [0.10258663512559, -0.2387399980086542, 0],
            [0.10258663512559, -0.2387399980086542, 0],
            [0.0386919567990844, -0.2414403774402984, 0],
            [0.0386919567990844, -0.2414403774402984, 0],
            [0.0020114393423683, -0.2409880196330363, 0]
		]
    };
    
    this.tilde_max = function(){return 0.697088034771241};
	this.tilde = function(){
    	return [
            [0, 0.4602012982645647, 0],
            [0.0556003160918408, 0.498868056918127, 0],
            [0.0556003160918408, 0.498868056918127, 0],
            [0.0966685479420448, 0.5211063600768285, 0],
            [0.0966685479420448, 0.5211063600768285, 0],
            [0.1377400084265901, 0.5313709487550115, 0],
            [0.1377400084265901, 0.5313709487550115, 0],
            [0.1791504755424285, 0.5323976043005132, 0],
            [0.1791504755424285, 0.5323976043005132, 0],
            [0.2369914640325987, 0.525897419287503, 0],
            [0.2369914640325987, 0.525897419287503, 0],
            [0.272587160270632, 0.5152906120943044, 0],
            [0.272587160270632, 0.5152906120943044, 0],
            [0.3098715952492768, 0.5041805944539332, 0],
            [0.3098715952492768, 0.5041805944539332, 0],
            [0.4090579914824417, 0.4746250275674698, 0],
            [0.4090579914824417, 0.4746250275674698, 0],
            [0.4878628281217062, 0.4567850134330911, 0],
            [0.4878628281217062, 0.4567850134330911, 0],
            [0.5566553451053551, 0.4574694504635773, 0],
            [0.5566553451053551, 0.4574694504635773, 0],
            [0.6151808041263394, 0.4708120390041586, 0],
            [0.6151808041263394, 0.4708120390041586, 0],
            [0.6676525733109884, 0.4958077580135978, 0],
            [0.6676525733109884, 0.4958077580135978, 0],
            [0.697088034771241, 0.5197571537473779, 0]
		]
    };
    
    this.caret_max = function(){return 0.5844795491948674};
	this.caret = function(){
    	return [
            [0, 0.4689141029866733, 0],
            [0.226724406069934, 1.002427586737184, 0],
            [0.226724406069934, 1.002427586737184, 0],
            [0.4596251900902644, 0.4717324888028998, 0]
		]
    };
    
    this.greater_than_max = function(){return 0.6580958149561412};
	this.greater_than = function(){
    	return [
            [0, 0.7688096282299739, 0],
            [0.6580958149561412, 0.4903676636881756, 0],
            [0.6580958149561412, 0.4903676636881756, 0],
            [0, 0.2162525999115132, 0]
		]
    };
    
    this.less_than_max = function(){return 0.6653118132412601};
	this.less_than = function(){
    	return [
            [0.6653118132412601, 0.7630391160282671, 0],
            [0, 0.4975798205541651, 0],
            [0, 0.4975798205541651, 0],
            [0.6653118132412601, 0.2104820877093516, 0]
		]
    };
    
    this.vertical_bar_max = function(){return 0.1};
	this.vertical_bar = function(){
    	return [
        	[0, 1.002428271979383, 0],
 			[0, -0.2931547086734412, 0]
        ]
    };
    
    this.backtick_max = function(){return 0.1};
	this.backtick = function(){
    	return [
            [-4.262472117e-7, 0.9783775842390269, 0],
            [0.1613786472882168, 1.021618976668129, 0],
            [0.1613786472882168, 1.021618976668129, 0],
            [0.1023126325067523, 0.9193136380660079, 0],
            [0.1023126325067523, 0.9193136380660079, 0],
            [0.0590707348497972, 1.08069459713743, 0],
            [0.0590707348497972, 1.08069459713743, 0],
            [-4.262472117e-7, 0.9783775842390269, 0],
            [-4.262472117e-7, 0.9783775842390269, 0],
            [0.0303659698045635, 0.9053332840029497, 0],
            [0.0303659698045635, 0.9053332840029497, 0],
            [0.0504890803975258, 0.870471174210138, 0],
            [0.0504890803975258, 0.870471174210138, 0],
            [0.0728674888371472, 0.8373718699124381, 0],
            [0.0728674888371472, 0.8373718699124381, 0],
            [0.1135027762784375, 0.7902839430638409, 0],
            [0.1135027762784375, 0.7902839430638409, 0],
            [0.1450248038812703, 0.7584781654337789, 0]
		]
    };
    
};

/*downloaded from https://github.com/gdsestimating/dxf-parser on Aug 15 by Fry and hacked
to remove all the export junk.
This version of the file contains all 3 of the color table, scanner, and parser.
The last mod date on the file is May 27, 2016
 */

/**
 * AutoCad files sometimes use an indexed color value between 1 and 255 inclusive.
 * Each value corresponds to a color. index 1 is red, that is 16711680 or 0xFF0000.
 * index 0 and 256, while included in this array, are actually reserved for inheritance
 * values in AutoCad so they should not be used for index color lookups.
 */

var AUTO_CAD_COLOR_INDEX = [
 0,
 16711680,
 16776960,
 65280,
 65535,
 255,
 16711935,
 16777215,
 8421504,
 12632256,
 16711680,
 16744319,
 13369344,
 13395558,
 10027008,
 10046540,
 8323072,
 8339263,
 4980736,
 4990502,
 16727808,
 16752511,
 13382400,
 13401958,
 10036736,
 10051404,
 8331008,
 8343359,
 4985600,
 4992806,
 16744192,
 16760703,
 13395456,
 13408614,
 10046464,
 10056268,
 8339200,
 8347455,
 4990464,
 4995366,
 16760576,
 16768895,
 13408512,
 13415014,
 10056192,
 10061132,
 8347392,
 8351551,
 4995328,
 4997670,
 16776960,
 16777087,
 13421568,
 13421670,
 10000384,
 10000460,
 8355584,
 8355647,
 5000192,
 5000230,
 12582656,
 14679935,
 10079232,
 11717734,
 7510016,
 8755276,
 6258432,
 7307071,
 3755008,
 4344870,
 8388352,
 12582783,
 6736896,
 10079334,
 5019648,
 7510092,
 4161280,
 6258495,
 2509824,
 3755046,
 4194048,
 10485631,
 3394560,
 8375398,
 2529280,
 6264908,
 2064128,
 5209919,
 1264640,
 3099686,
 65280,
 8388479,
 52224,
 6736998,
 38912,
 5019724,
 32512,
 4161343,
 19456,
 2509862,
 65343,
 8388511,
 52275,
 6737023,
 38950,
 5019743,
 32543,
 4161359,
 19475,
 2509871,
 65407,
 8388543,
 52326,
 6737049,
 38988,
 5019762,
 32575,
 4161375,
 19494,
 2509881,
 65471,
 8388575,
 52377,
 6737074,
 39026,
 5019781,
 32607,
 4161391,
 19513,
 2509890,
 65535,
 8388607,
 52428,
 6737100,
 39064,
 5019800,
 32639,
 4161407,
 19532,
 2509900,
 49151,
 8380415,
 39372,
 6730444,
 29336,
 5014936,
 24447,
 4157311,
 14668,
 2507340,
 32767,
 8372223,
 26316,
 6724044,
 19608,
 5010072,
 16255,
 4153215,
 9804,
 2505036,
 16383,
 8364031,
 13260,
 6717388,
 9880,
 5005208,
 8063,
 4149119,
 4940,
 2502476,
 255,
 8355839,
 204,
 6710988,
 152,
 5000344,
 127,
 4145023,
 76,
 2500172,
 4129023,
 10452991,
 3342540,
 8349388,
 2490520,
 6245528,
 2031743,
 5193599,
 1245260,
 3089996,
 8323327,
 12550143,
 6684876,
 10053324,
 4980888,
 7490712,
 4128895,
 6242175,
 2490444,
 3745356,
 12517631,
 14647295,
 10027212,
 11691724,
 7471256,
 8735896,
 6226047,
 7290751,
 3735628,
 4335180,
 16711935,
 16744447,
 13369548,
 13395660,
 9961624,
 9981080,
 8323199,
 8339327,
 4980812,
 4990540,
 16711871,
 16744415,
 13369497,
 13395634,
 9961586,
 9981061,
 8323167,
 8339311,
 4980793,
 4990530,
 16711807,
 16744383,
 13369446,
 13395609,
 9961548,
 9981042,
 8323135,
 8339295,
 4980774,
 4990521,
 16711743,
 16744351,
 13369395,
 13395583,
 9961510,
 9981023,
 8323103,
 8339279,
 4980755,
 4990511,
 3355443,
 5987163,
 8684676,
 11382189,
 14079702,
 16777215
];

/**
 * DxfArrayScanner
 *
 * Based off the AutoCad 2012 DXF Reference
 * http://images.autodesk.com/adsk/files/autocad_2012_pdf_dxf-reference_enu.pdf
 *
 * Reads through an array representing lines of a dxf file. Takes an array and
 * provides an easy interface to extract group code and value pairs.
 * @param data - an array where each element represents a line in the dxf file
 * @constructor
 */
function DxfArrayScanner(data) {
   this._pointer = 0;
   this._data = data;
   this._eof = false;
}

/**
 * Gets the next group (code, value) from the array. A group is two consecutive elements
 * in the array. The first is the code, the second is the value.
 * @returns {{code: Number}|*}
 */
DxfArrayScanner.prototype.next = function() {
   var group;
   if(!this.hasNext()) {
      if(!this._eof)
         throw new Error('Unexpected end of input: EOF group not read before end of file. Ended on code ' + this._data[this._pointer]);
      else
         throw new Error('Cannot call \'next\' after EOF group has been read');
   }

   group = {
      code: parseInt(this._data[this._pointer])
   };

   this._pointer++;

   group.value = parseGroupValue(group.code, this._data[this._pointer].trim());
   
   this._pointer++;

   if(group.code === 0 && group.value === 'EOF') this._eof = true;

   return group;
};

/**
 * Returns true if there is another code/value pair (2 elements in the array).
 * @returns {boolean}
 */
DxfArrayScanner.prototype.hasNext = function() {
   // Check if we have read EOF group code
   if(this._eof) {
      return false;
   }
   
   // We need to be sure there are two lines available
   if(this._pointer > this._data.length - 2) {
      return false;
   }
   return true;
};

/**
 * Returns true if the scanner is at the end of the array
 * @returns {boolean}
 */
DxfArrayScanner.prototype.isEOF = function() {
   return this._eof;
};

/**
 * Parse a value to its proper type.
 * See pages 3 - 10 of the AutoCad DXF 2012 reference given at the top of this file
 *
 * @param code
 * @param value
 * @returns {*}
 */
function parseGroupValue(code, value) {
   if(code <= 9) return value;
   if(code >= 10 && code <= 59) return parseFloat(value);
   if(code >= 60 && code <= 99) return parseInt(value);
   if(code >= 100 && code <= 109) return value;
   if(code >= 110 && code <= 149) return parseFloat(value);
   if(code >= 160 && code <= 179) return parseInt(value);
   if(code >= 210 && code <= 239) return parseFloat(value);
   if(code >= 270 && code <= 289) return parseInt(value);
   if(code >= 290 && code <= 299) return parseBoolean(value);
   if(code >= 300 && code <= 369) return value;
   if(code >= 370 && code <= 389) return parseInt(value);
   if(code >= 390 && code <= 399) return value;
   if(code >= 400 && code <= 409) return parseInt(value);
   if(code >= 410 && code <= 419) return value;
   if(code >= 420 && code <= 429) return parseInt(value);
   if(code >= 430 && code <= 439) return value;
   if(code >= 440 && code <= 459) return parseInt(value);
   if(code >= 460 && code <= 469) return parseFloat(value);
   if(code >= 470 && code <= 481) return value;
   if(code === 999) return value;
   if(code >= 1000 && code <= 1009) return value;
   if(code >= 1010 && code <= 1059) return parseFloat(value);
   if(code >= 1060 && code <= 1071) return parseInt(value);

   console.log('WARNING: Group code does not have a defined type: %j', { code: code, value: value });
   return value;
}

/**
 * Parse a boolean according to a 1 or 0 value
 * @param str
 * @returns {boolean}
 */
function parseBoolean(str) {
   if(str === '0') return false;
   if(str === '1') return true;
   throw TypeError('String \'' + str + '\' cannot be cast to Boolean type');
}


function DxfParser(stream) {}

DxfParser.prototype.parse = function(source, done) {
   throw new Error("read() not implemented. Use readSync()");
};

DxfParser.prototype.parseSync = function(source) {
   if(typeof(source) === 'string') {
      return this._parse(source);
   }else {
      console.error('Cannot read dxf source of type `' + typeof(source));
      return null;
   }
};

DxfParser.prototype.parseStream = function(stream, done) {

   var dxfString = "";
   var self = this;

   stream.on('data', onData);
   stream.on('end', onEnd);
   stream.on('error', onError);

   function onData(chunk) {
      dxfString += chunk;
   }

   function onEnd() {
      try {
         var dxf = self._parse(dxfString);
      }catch(err) {
         return done(err);
      }
      done(null, dxf);
   }

   function onError(err) {
      done(err);
   }
};

DxfParser.prototype._parse = function(dxfString) {
   var scanner;
   var curr;
   var dxf = {};
   var lastHandle = 0;
   var dxfLinesArray = dxfString.split(/\r\n|\r|\n/g);

   scanner = new DxfArrayScanner(dxfLinesArray);
   if(!scanner.hasNext()) throw Error('Empty file');

   var parseAll = function() {
      curr = scanner.next();
      while(!scanner.isEOF()) {
         if(curr.code === 0 && curr.value === 'SECTION') {
            curr = scanner.next();

            // Be sure we are reading a section code
            if (curr.code !== 2) {
               console.error('Unexpected code %s after 0:SECTION', debugCode(curr));
               curr = scanner.next();
               continue;
            }

            if (curr.value === 'HEADER') {
               //log.debug('> HEADER');
               dxf.header = parseHeader();
               //log.debug('<');
            } else if (curr.value === 'BLOCKS') {
               //log.debug('> BLOCKS');
               dxf.blocks = parseBlocks();
               //log.debug('<');
            } else if(curr.value === 'ENTITIES') {
               //log.debug('> ENTITIES');
               dxf.entities = parseEntities(false);
               //log.debug('<');
            } else if(curr.value === 'TABLES') {
               //log.debug('> TABLES');
               dxf.tables = parseTables();
               //log.debug('<');
            } else if(curr.value === 'EOF') ; else ;
         } else {
            curr = scanner.next();
         }
         // If is a new section
      }
   };

   var groupIs = function(code, value) {
      return curr.code === code && curr.value === value;
   };

   /**
    *
    * @return {object} header
    */
   var parseHeader = function() {
      // interesting variables:
      //  $ACADVER, $VIEWDIR, $VIEWSIZE, $VIEWCTR, $TDCREATE, $TDUPDATE
      // http://www.autodesk.com/techpubs/autocad/acadr14/dxf/header_section_al_u05_c.htm
      // Also see VPORT table entries
      var currVarName = null, currVarValue = null;
      var header = {};
      // loop through header variables
      curr = scanner.next();

      while(true) {
         if(groupIs(0, 'ENDSEC')) {
            if(currVarName) header[currVarName] = currVarValue;
            break;
         } else if(curr.code === 9) {
            if(currVarName) header[currVarName] = currVarValue;
            currVarName = curr.value;
            // Filter here for particular variables we are interested in
         } else {
            if(curr.code === 10) {
               currVarValue = { x: curr.value };
            } else if(curr.code === 20) {
               currVarValue.y = curr.value;
            } else if(curr.code === 30) {
               currVarValue.z = curr.value;
            } else {
               currVarValue = curr.value;
            }
         }
         curr = scanner.next();
      }
      // console.log(util.inspect(header, { colors: true, depth: null }));
      curr = scanner.next(); // swallow up ENDSEC
      return header;
   };


   /**
    *
    */
   var parseBlocks = function() {
      var blocks = {};
      var block;
      
        curr = scanner.next();
      
      while(curr.value !== 'EOF') {
         if(groupIs(0, 'ENDSEC')) {
            break;
         }

         if(groupIs(0, 'BLOCK')) {
            //log.debug('block {');
            block = parseBlock();
            //log.debug('}');
            ensureHandle(block);
                if(!block.name);else {
                    blocks[block.name] = block;
                }
         } else {
            curr = scanner.next();
         }
      }
      return blocks;
   };

   var parseBlock = function() {
      var block = {};
      curr = scanner.next();

      while(curr.value !== 'EOF') {
         switch(curr.code) {
            case 1:
               block.xrefPath = curr.value;
               curr = scanner.next();
               break;
            case 2:
               block.name = curr.value;
               curr = scanner.next();
               break;
            case 3:
               block.name2 = curr.value;
               curr = scanner.next();
               break;
            case 5:
               block.handle = curr.value;
               curr = scanner.next();
               break;
            case 8:
               block.layer = curr.value;
               curr = scanner.next();
               break;
            case 10:
               block.position = parsePoint();
               break;
            case 67:
               block.paperSpace = (curr.value && curr.value == 1) ? true : false;
               curr = scanner.next();
               break;
            case 70:
               if (curr.value != 0) {
                  //if(curr.value & BLOCK_ANONYMOUS_FLAG) console.log('  Anonymous block');
                  //if(curr.value & BLOCK_NON_CONSTANT_FLAG) console.log('  Non-constant attributes');
                  //if(curr.value & BLOCK_XREF_FLAG) console.log('  Is xref');
                  //if(curr.value & BLOCK_XREF_OVERLAY_FLAG) console.log('  Is xref overlay');
                  //if(curr.value & BLOCK_EXTERNALLY_DEPENDENT_FLAG) console.log('  Is externally dependent');
                  //if(curr.value & BLOCK_RESOLVED_OR_DEPENDENT_FLAG) console.log('  Is resolved xref or dependent of an xref');
                  //if(curr.value & BLOCK_REFERENCED_XREF) console.log('  This definition is a referenced xref');
                  block.type = curr.value;
               }
               curr = scanner.next();
               break;
            case 100:
               // ignore class markers
               curr = scanner.next();
               break;
            case 330:
               block.ownerHandle = curr.value;
               curr = scanner.next();
               break;
            case 0:
               if(curr.value == 'ENDBLK')
                  break;
               block.entities = parseEntities(true);
               break;
            default:
               curr = scanner.next();
         }
         
         if(groupIs(0, 'ENDBLK')) {
            curr = scanner.next();
            break;
         }
      }
      return block;
   };

   /**
    * parseTables
    * @return {Object} Object representing tables
    */
   var parseTables = function() {
      var tables = {};
      curr = scanner.next();
      while(curr.value !== 'EOF') {
         if(groupIs(0, 'ENDSEC'))
            break;

         if(groupIs(0, 'TABLE')) {
            curr = scanner.next();

            var tableDefinition = tableDefinitions[curr.value];
            if(tableDefinition) {
               //log.debug(curr.value + ' Table {');
               tables[tableDefinitions[curr.value].tableName] = parseTable();
               //log.debug('}');
            }
         } else {
            // else ignored
            curr = scanner.next();
         }
      }

      curr = scanner.next();
      return tables;
   };

   const END_OF_TABLE_VALUE = 'ENDTAB';

   var parseTable = function() {
      var tableDefinition = tableDefinitions[curr.value];
      var table = {};

      curr = scanner.next();
      while(!groupIs(0, END_OF_TABLE_VALUE)) {

         switch(curr.code) {
            case 5:
               table.handle = curr.value;
               curr = scanner.next();
               break;
            case 330:
               table.ownerHandle = curr.value;
               curr = scanner.next();
               break;
            case 100:
               if(curr.value === 'AcDbSymbolTable') {
                  // ignore
                  curr = scanner.next();
               }else {
                  curr = scanner.next();
               }
               break;
            case 70:
               curr.value;
               curr = scanner.next();
               break;
            case 0:
               if(curr.value === tableDefinition.dxfSymbolName) {
                  table[tableDefinition.tableRecordsProperty] = tableDefinition.parseTableRecords();
               } else {
                  curr = scanner.next();
               }
               break;
            default:
               curr = scanner.next();
         }
      }
      var tableRecords = table[tableDefinition.tableRecordsProperty];
      if(tableRecords) {
         if(tableRecords.constructor === Array){
            tableRecords.length;
         } else if(typeof(tableRecords) === 'object') {
            Object.keys(tableRecords).length;
         }
         //if(expectedCount !== actualCount) log.warn('Parsed ' + actualCount + ' ' + tableDefinition.dxfSymbolName + '\'s but expected ' + expectedCount);
      }
      curr = scanner.next();
      return table;
   };

   var parseViewPortRecords = function() {
      var viewPorts = []; // Multiple table entries may have the same name indicating a multiple viewport configuration
      var viewPort = {};

      //log.debug('ViewPort {');
      curr = scanner.next();
      while(!groupIs(0, END_OF_TABLE_VALUE)) {

         switch(curr.code) {
            case 2: // layer name
               viewPort.name = curr.value;
               curr = scanner.next();
               break;
            case 10:
               viewPort.lowerLeftCorner = parsePoint();
               break;
            case 11:
               viewPort.upperRightCorner = parsePoint();
               break;
            case 12:
               viewPort.center = parsePoint();
               break;
            case 13:
               viewPort.snapBasePoint = parsePoint();
               break;
            case 14:
               viewPort.snapSpacing = parsePoint();
               break;
            case 15:
               viewPort.gridSpacing = parsePoint();
               break;
            case 16:
               viewPort.viewDirectionFromTarget = parsePoint();
               break;
            case 17:
               viewPort.viewTarget = parsePoint();
               break;
            case 42:
               viewPort.lensLength = curr.value;
               curr = scanner.next();
               break;
            case 43:
               viewPort.frontClippingPlane = curr.value;
               curr = scanner.next();
               break;
            case 44:
               viewPort.backClippingPlane = curr.value;
               curr = scanner.next();
               break;
            case 45:
               viewPort.viewHeight = curr.value;
               curr = scanner.next();
               break;
            case 50:
               viewPort.snapRotationAngle = curr.value;
               curr = scanner.next();
               break;
            case 51:
               viewPort.viewTwistAngle = curr.value;
               curr = scanner.next();
               break;
                case 79:
                    viewPort.orthographicType = curr.value;
                    curr = scanner.next();
                    break;
            case 110:
               viewPort.ucsOrigin = parsePoint();
               break;
            case 111:
               viewPort.ucsXAxis = parsePoint();
               break;
            case 112:
               viewPort.ucsYAxis = parsePoint();
               break;
            case 110:
               viewPort.ucsOrigin = parsePoint();
               break;
            case 281:
               viewPort.renderMode = curr.value;
               curr = scanner.next();
               break;
            case 281:
               // 0 is one distant light, 1 is two distant lights
               viewPort.defaultLightingType = curr.value;
               curr = scanner.next();
               break;
            case 292:
               viewPort.defaultLightingOn = curr.value;
               curr = scanner.next();
               break;
            case 330:
               viewPort.ownerHandle = curr.value;
               curr = scanner.next();
               break;
            case 63:
            case 421:
            case 431:
               viewPort.ambientColor = curr.value;
               curr = scanner.next();
               break;
            case 0:
               // New ViewPort
               if(curr.value === 'VPORT') {
                  //log.debug('}');
                  viewPorts.push(viewPort);
                  //log.debug('ViewPort {');
                  viewPort = {};
                  curr = scanner.next();
               }
               break;
            default:
               curr = scanner.next();
               break;
         }
      }
      // Note: do not call scanner.next() here,
      //  parseTable() needs the current group
      //log.debug('}');
      viewPorts.push(viewPort);

      return viewPorts;
   };

   var parseLineTypes = function() {
      var ltypes = {};
      var ltypeName;
      var ltype = {};
      var length;

      //log.debug('LType {');
      curr = scanner.next();
      while(!groupIs(0, 'ENDTAB')) {

         switch(curr.code) {
            case 2:
               ltype.name = curr.value;
               ltypeName = curr.value;
               curr = scanner.next();
               break;
            case 3:
               ltype.description = curr.value;
               curr = scanner.next();
               break;
            case 73: // Number of elements for this line type (dots, dashes, spaces);
               length = curr.value;
               if(length > 0) ltype.pattern = [];
               curr = scanner.next();
               break;
            case 40: // total pattern length
               ltype.patternLength = curr.value;
               curr = scanner.next();
               break;
            case 49:
               ltype.pattern.push(curr.value);
               curr = scanner.next();
               break;
            case 0:
               //log.debug('}');
               if(length > 0 && length !== ltype.pattern.length) //log.warn('lengths do not match on LTYPE pattern');
               ltypes[ltypeName] = ltype;
               ltype = {};
               //log.debug('LType {');
               curr = scanner.next();
               break;
            default:
               curr = scanner.next();
         }
      }

      //log.debug('}');
      ltypes[ltypeName] = ltype;
      return ltypes;
   };

   var parseLayers = function() {
      var layers = {};
      var layerName;
      var layer = {};

      //log.debug('Layer {');
      curr = scanner.next();
      while(!groupIs(0, 'ENDTAB')) {

         switch(curr.code) {
            case 2: // layer name
               layer.name = curr.value;
               layerName = curr.value;
               curr = scanner.next();
               break;
            case 62: // color, visibility
               layer.visible = curr.value <= 0;
               // TODO 0 and 256 are BYBLOCK and BYLAYER respectively. Need to handle these values for layers?.
               layer.color = getAcadColor(Math.abs(curr.value));
               curr = scanner.next();
               break;
            case 0:
               // New Layer
               if(curr.value === 'LAYER') {
                  //log.debug('}');
                  layers[layerName] = layer;
                  //log.debug('Layer {');
                  layer = {};
                  layerName = undefined;
                  curr = scanner.next();
               }
               break;
            default:
               curr = scanner.next();
               break;
         }
      }
      // Note: do not call scanner.next() here,
      //  parseLayerTable() needs the current group
      //log.debug('}');
      layers[layerName] = layer;

      return layers;
   };

   var tableDefinitions = {
      VPORT: {
         tableRecordsProperty: 'viewPorts',
         tableName: 'viewPort',
         dxfSymbolName: 'VPORT',
         parseTableRecords: parseViewPortRecords
      },
      LTYPE: {
         tableRecordsProperty: 'lineTypes',
         tableName: 'lineType',
         dxfSymbolName: 'LTYPE',
         parseTableRecords: parseLineTypes
      },
      LAYER: {
         tableRecordsProperty: 'layers',
         tableName: 'layer',
         dxfSymbolName: 'LAYER',
         parseTableRecords: parseLayers
      }
   };

   /**
    * Is called after the parser first reads the 0:ENTITIES group. The scanner
    * should be on the start of the first entity already.
    * @return {Array} the resulting entities
    */
   var parseEntities = function(forBlock) {
      var entities = [];

      var endingOnValue = (forBlock ? 'ENDBLK' : 'ENDSEC');

      if (!forBlock) {
         curr = scanner.next();
      }
      while(true) {

         if(curr.code === 0) {
            if(curr.value === endingOnValue) {
               break;
            }
            
            var entity;
            // Supported entities here
            if(curr.value === 'LWPOLYLINE') {
               //log.debug('LWPOLYLINE {');
               entity = parseLWPOLYLINE();
               //log.debug('}')
            } else if(curr.value === 'POLYLINE') {
               //log.debug('POLYLINE {');
               entity = parsePOLYLINE();
               //log.debug('}');
            } else if(curr.value === 'LINE') {
               //log.debug('LINE {');
               entity = parseLINE();
               //log.debug('}');
            } else if(curr.value === 'CIRCLE') {
               //log.debug('CIRCLE {');
               entity = parseCIRCLE();
               //log.debug('}');
            } else if(curr.value === 'ARC') {
               //log.debug('ARC {');
               // similar properties to circle?
               entity = parseCIRCLE();
               //log.debug('}')
            } else if(curr.value === 'TEXT') {
               //log.debug('TEXT {');
               entity = parseTEXT();
               //log.debug('}')
            } else if(curr.value === 'DIMENSION') {
               //log.debug('DIMENSION {');
               entity = parseDIMENSION();
               //log.debug('}')
            } else if(curr.value === 'SOLID') {
               //log.debug('SOLID {');
               entity = parseSOLID();
               //log.debug('}')
            } else if(curr.value === 'POINT') {
               //log.debug('POINT {');
               entity = parsePOINT();
               //log.debug('}')
            } else if(curr.value === 'MTEXT') {
               //log.debug('MTEXT {');
               entity = parseMTEXT();
               //log.debug('}')
            } else if(curr.value === 'ATTDEF') {
               //log.debug('ATTDEF {');
               entity = parseATTDEF();
               //log.debug('}')
            } else {
               //log.warn('Unhandled entity ' + curr.value);
               curr = scanner.next();
               continue;
            }
            ensureHandle(entity);
            entities.push(entity);
         } else {
            // ignored lines from unsupported entity
            curr = scanner.next();
         }
      }
      // console.log(util.inspect(entities, { colors: true, depth: null }));
      if(endingOnValue == 'ENDSEC') curr = scanner.next(); // swallow up ENDSEC, but not ENDBLK
      return entities;
   };

   /**
    *
    * @param entity
    */
   var checkCommonEntityProperties = function(entity) {
      switch(curr.code) {
         case 0:
            entity.type = curr.value;
            curr = scanner.next();
            break;
         case 5:
            entity.handle = curr.value;
            curr = scanner.next();
            break;
         case 6:
            entity.lineType = curr.value;
            curr = scanner.next();
            break;
         case 8: // Layer name
            entity.layer = curr.value;
            curr = scanner.next();
            break;
         case 48:
            entity.lineTypeScale = curr.value;
            curr = scanner.next();
            break;
         case 60:
            entity.visible = curr.value === 0;
            curr = scanner.next();
            break;
         case 62: // Acad Index Color. 0 inherits ByBlock. 256 inherits ByLayer. Default is bylayer
            entity.colorIndex = curr.value;
            entity.color = getAcadColor(Math.abs(curr.value));
            curr = scanner.next();
            break;
         case 67:
            entity.inPaperSpace = curr.value !== 0;
            curr = scanner.next();
            break;
         case 330:
            entity.ownerHandle = curr.value;
            curr = scanner.next();
            break;
         case 347:
            entity.materialObjectHandle = curr.value;
            curr = scanner.next();
            break;
         case 370:
            // This is technically an enum. Not sure where -2 comes from.
            //From https://www.woutware.com/Forum/Topic/955/lineweight?returnUrl=%2FForum%2FUserPosts%3FuserId%3D478262319
            // An integer representing 100th of mm, must be one of the following values:
            // 0, 5, 9, 13, 15, 18, 20, 25, 30, 35, 40, 50, 53, 60, 70, 80, 90, 100, 106, 120, 140, 158, 200, 211.
            entity.lineweight = curr.value;
            curr = scanner.next();
            break;
         case 420: // TrueColor Color
            entity.color = curr.value;
            curr = scanner.next();
            break;
         case 100:
                //ignore
                curr = scanner.next();
                break;
         default:
            curr = scanner.next();
            break;
      }
   };


   var parseVertex = function() {
      var entity = { type: curr.value };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 10:   // X
               entity.x = curr.value;
               curr = scanner.next();
               break;
            case 20: // Y
               entity.y = curr.value;
               curr = scanner.next();
               break;
            case 30: // Z
               entity.z = curr.value;
               curr = scanner.next();
               break;
            case 40: // start width
            case 41: // end width
            case 42: // bulge
               curr = scanner.next();
               break;
            case 70: // flags
               entity.curveFittingVertex = (curr.value & 1) !== 0;
               entity.curveFitTangent = (curr.value & 2) !== 0;
               entity.splineVertex = (curr.value & 8) !== 0;
               entity.splineControlPoint = (curr.value & 16) !== 0;
               entity.threeDPolylineVertex = (curr.value & 32) !== 0;
               entity.threeDPolylineMesh = (curr.value & 64) !== 0;
               entity.polyfaceMeshVertex = (curr.value & 128) !== 0;
               curr = scanner.next();
               break;
            case 50: // curve fit tangent direction
            case 71: // polyface mesh vertex index
            case 72: // polyface mesh vertex index
            case 73: // polyface mesh vertex index
            case 74: // polyface mesh vertex index
               curr = scanner.next();
               break;
            default:
               checkCommonEntityProperties(entity);
               break;
         }
      }
      return entity;
   };

   var parseSeqEnd = function() {
        var entity = { type: curr.value };
        curr = scanner.next();
        while(curr != 'EOF') {
            if (curr.code == 0) break;
            checkCommonEntityProperties(entity);
        }

      return entity;
   };

   /**
    * Parses a 2D or 3D point, returning it as an object with x, y, and
    * (sometimes) z property if it is 3D. It is assumed the current group
    * is x of the point being read in, and scanner.next() will return the
    * y. The parser will determine if there is a z point automatically.
    * @return {Object} The 2D or 3D point as an object with x, y[, z]
    */
   var parsePoint = function() {
      var point = {};
      var code = curr.code;

      point.x = curr.value;

      code += 10;
      curr = scanner.next();
      if(curr.code != code)
         throw new Error('Expected code for point value to be ' + code +
         ' but got ' + curr.code + '.');
      point.y = curr.value;

      code += 10;
      curr = scanner.next();
      if(curr.code != code)
         return point;
      point.z = curr.value;

      curr = scanner.next(); // advance the scanner before returning
      return point;
   };

   var parseLWPolylineVertices = function(n) {
      if(!n || n <= 0) throw Error('n must be greater than 0 verticies');
      var vertices = [];
      var vertexIsStarted = false;
      var vertexIsFinished = false;

      for(let i = 0; i < n; i++) {
         var vertex = {};
         while(curr !== 'EOF') {
            if(curr.code === 0 || vertexIsFinished) break;
   
            switch(curr.code) {
               case 10: // X
                  if(vertexIsStarted) {
                     vertexIsFinished = true;
                     continue;
                  }
                  vertex.x = curr.value;
                  vertexIsStarted = true;
                  break;
               case 20: // Y
                  vertex.y = curr.value;
                  break;
               case 30: // Z
                  vertex.z = curr.value;
                  break;
               case 40: // start width
                  vertex.startWidth = curr.value;
                  break;
               case 41: // end width
                  vertex.endWidth = curr.value;
                  break;
               case 42: // bulge
                  if(curr.value != 0) vertex.bulge = curr.value;
                  break;
               default:
                  //todo: mark unhandled somehow?
                  curr = scanner.next();
                  continue;
            }
            curr = scanner.next();
         }
         // See https://groups.google.com/forum/#!topic/comp.cad.autocad/9gn8s5O_w6E
         vertices.push(vertex);
         vertexIsStarted = false;
         vertexIsFinished = false;
      }
      return vertices;
   };

   var parsePolylineVertices = function() {
      var vertices = [];
      while (curr !== 'EOF') {
         if (curr.code === 0) {
            if (curr.value === 'VERTEX') {
               vertices.push(parseVertex());
            } else if (curr.value === 'SEQEND') {
               parseSeqEnd();
               break;
            }
         }
      }
      return vertices;
   };

   var parseMTEXT = function() {
      var entity = { type: curr.value };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
                case 1:
                    entity.text = curr.value;
                    curr = scanner.next();
                    break;
                case 3:
                    entity.text += curr.value;
                    curr = scanner.next();
                    break;
                case 10:
                    entity.position = parsePoint();
                    break;
                case 40:
                    entity.height = curr.value;
                    curr = scanner.next();
                    break;
                case 41:
                    entity.width = curr.value;
                    curr = scanner.next();
                    break;
                case 71:
                    entity.attachmentPoint = curr.value;
                    curr = scanner.next();
                    break;
                case 72:
                    entity.drawingDirection = curr.value;
                    curr = scanner.next();
                    break;
            default:
               checkCommonEntityProperties(entity);
               break;
         }
      }
      return entity;
   };

   var parseATTDEF = function() {
      var entity = {
         type: curr.value,
         scale: 1,
         textStyle: 'STANDARD'
       };
      curr = scanner.next();
      while (curr !== 'EOF') {
         if (curr.code === 0) {
            break;
         }
         switch(curr.code) {
            case 1:
               entity.text = curr.value;
               curr = scanner.next();
               break;
            case 2:
               entity.tag = curr.value;
               curr = scanner.next();
               break;
            case 3:
               entity.prompt = curr.value;
               curr = scanner.next();
               break;
            case 7:
               entity.textStyle = curr.value;
               curr = scanner.next();
               break;
            case 10:
               entity.x = curr.value;
               curr = scanner.next();
               break;
            case 20:
               entity.y = curr.value;
               curr = scanner.next();
               break;
            case 30:
               entity.z = curr.value;
               curr = scanner.next();
               break;
            case 39:
               entity.thickness = curr.value;
               curr = scanner.next();
               break;
            case 40:
               entity.textHeight = curr.value;
               curr = scanner.next();
               break;
            case 41:
               entity.scale = curr.value;
               curr = scanner.next();
               break;
            case 50:
               entity.rotation = curr.value;
               curr = scanner.next();
               break;
            case 51:
               entity.obliqueAngle = curr.value;
               curr = scanner.next();
               break;
            case 70:
               entity.invisible = !!(curr.value & 0x01);
               entity.constant = !!(curr.value & 0x02);
               entity.verificationRequired = !!(curr.value & 0x04);
               entity.preset = !!(curr.value & 0x08);
               curr = scanner.next();
               break;
            case 71:
               entity.backwards = !!(curr.value & 0x02);
               entity.mirrored = !!(curr.value & 0x04);
               curr = scanner.next();
               break;
            case 72:
               // TODO: enum values?
               entity.horizontalJustification = curr.value;
               curr = scanner.next();
               break;
            case 73:
               entity.fieldLength = curr.value;
               curr = scanner.next();
               break;
            case 74:
               // TODO: enum values?
               entity.verticalJustification = curr.value;
               curr = scanner.next();
               break;
            case 100:
               // subclass
               curr = scanner.next();
               break;
            case 210:
               entity.extrusionDirectionX = curr.value;
               curr = scanner.next();
               break;
            case 220:
               entity.extrusionDirectionY = curr.value;
               curr = scanner.next();
               break;
            case 230:
               entity.extrusionDirectionZ = curr.value;
               curr = scanner.next();
               break;
            default:
               checkCommonEntityProperties(entity);
               break;
         }
      }

      return entity;
   };

   /**
    * Called when the parser reads the beginning of a new entity,
    * 0:LWPOLYLINE. Scanner.next() will return the first attribute of the
    * entity.
    * @return {Object} the entity parsed
    */
   var parseLWPOLYLINE = function() {
      var entity = { type: curr.value, vertices: [] };
      var numberOfVertices = 0;
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 38:
               entity.elevation = curr.value;
               curr = scanner.next();
               break;
            case 39:
               entity.depth = curr.value;
               curr = scanner.next();
               break;
            case 70: // 1 = Closed shape, 128 = plinegen?, 0 = default
               entity.shape = (curr.value === 1);
               curr = scanner.next();
               break;
            case 90:
               numberOfVertices = curr.value;
               curr = scanner.next();
               break;
            case 10: // X coordinate of point
               entity.vertices = parseLWPolylineVertices(numberOfVertices);
               break;
            case 43:
               if(curr.value !== 0) entity.width = curr.value;
               curr = scanner.next();
               break;
            default:
               checkCommonEntityProperties(entity);
               break;
         }
      }
      return entity;
   };

   /**
    * Called when the parser reads the beginning of a new entity,
    * 0:POLYLINE. Scanner.next() will return the first attribute of the
    * entity.
    * @return {Object} the entity parsed
    */
   var parsePOLYLINE = function() {
      var entity = { type: curr.value, vertices: [] };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 10: // always 0
            case 20: // always 0
            case 30: // elevation
            case 39: // thickness
                    entity.thickness = curr.value;
               curr = scanner.next();
               break;
            case 40: // start width
            case 41: // end width
               curr = scanner.next();
               break;
            case 70:
               entity.shape = (curr.value & 1) !== 0;
                    entity.includesCurveFitVertices = (curr.value & 2) !== 0;
                    entity.includesSplineFitVertices = (curr.value & 4) !== 0;
                    entity.is3dPolyline = (curr.value & 8) !== 0;
                    entity.is3dPolygonMesh = (curr.value & 16) !== 0;
                    entity.is3dPolygonMeshClosed = (curr.value & 32) !== 0; // 32 = The polygon mesh is closed in the N direction
                    entity.isPolyfaceMesh = (curr.value & 64) !== 0;
                    entity.hasContinuousLinetypePattern = (curr.value & 128) !== 0;
               curr = scanner.next();
               break;
            case 71: // Polygon mesh M vertex count
            case 72: // Polygon mesh N vertex count
            case 73: // Smooth surface M density
            case 74: // Smooth surface N density
            case 75: // Curves and smooth surface type
               curr = scanner.next();
               break;
            case 210:
                entity.extrusionDirection = parsePoint();
               break;
            default:
               checkCommonEntityProperties(entity);
               break;
         }
      }

      entity.vertices = parsePolylineVertices();

      return entity;
   };


   /**
    * Called when the parser reads the beginning of a new entity,
    * 0:LINE. Scanner.next() will return the first attribute of the
    * entity.
    * @return {Object} the entity parsed
    */
   var parseLINE = function() {
      var entity = { type: curr.value, vertices: [] };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 10: // X coordinate of point
               entity.vertices.unshift(parsePoint());
               break;
            case 11:
               entity.vertices.push(parsePoint());
               break;
            case 210:
               entity.extrusionDirection = parsePoint();
               break;
            case 100:
               if(curr.value == 'AcDbLine') {
                  curr = scanner.next();
                  break;
               }
            default:
               checkCommonEntityProperties(entity);
               break;
         }
      }
      return entity;
   };

   /**
    * Used to parse a circle or arc entity.
    * @return {Object} the entity parsed
    */
   var parseCIRCLE = function() {
      var entity, endAngle;
      entity = { type: curr.value };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 10: // X coordinate of point
               entity.center = parsePoint();
               break;
            case 40: // radius
               entity.radius = curr.value;
               curr = scanner.next();
               break;
            case 50: // start angle
               entity.startAngle = Math.PI / 180 * curr.value;
               curr = scanner.next();
               break;
            case 51: // end angle
               endAngle = Math.PI / 180 * curr.value;
               if(endAngle < entity.startAngle)
                  entity.angleLength = endAngle + 2 * Math.PI - entity.startAngle;
               else
                  entity.angleLength = endAngle - entity.startAngle;
               entity.endAngle = endAngle;
               curr = scanner.next();
               break;
            default: // ignored attribute
               checkCommonEntityProperties(entity);
               break;
         }
      }
      return entity;
   };

   var parseTEXT = function() {
      var entity;
      entity = { type: curr.value };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;
         switch(curr.code) {
            case 10: // X coordinate of 'first alignment point'
               entity.startPoint = parsePoint();
               break;
            case 11: // X coordinate of 'second alignment point'
               entity.endPoint = parsePoint();
               break;
            case 40: // Text height
               entity.textHeight = curr.value;
               curr = scanner.next();
               break;
            case 41:
               entity.xScale = curr.value;
               curr = scanner.next();
               break;
            case 1: // Text
               entity.text = curr.value;
               curr = scanner.next();
               break;
            // NOTE: 72 and 73 are meaningless without 11 (second alignment point)
            case 72: // Horizontal alignment
               entity.halign = curr.value;
               curr = scanner.next();
               break;
            case 73: // Vertical alignment
               entity.valign = curr.value;
               curr = scanner.next();
               break;
            default: // check common entity attributes
               checkCommonEntityProperties(entity);
               break;
         }
      }
      return entity;
   };

   var parseDIMENSION = function() {
      var entity;
      entity = { type: curr.value };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 2: // Referenced block name
               entity.block = curr.value;
               curr = scanner.next();
               break;
            case 10: // X coordinate of 'first alignment point'
               entity.anchorPoint = parsePoint();
               break;
            case 11:
               entity.middleOfText = parsePoint();
               break;
            case 71: // 5 = Middle center
               entity.attachmentPoint = curr.value;
               curr = scanner.next();
               break;
            case 42: // Actual measurement
               entity.actualMeasurement = curr.value;
               curr = scanner.next();
               break;
            case 1: // Text entered by user explicitly
               entity.text = curr.value;
               curr = scanner.next();
               break;
            case 50: // Angle of rotated, horizontal, or vertical dimensions
               entity.angle = curr.value;
               curr = scanner.next();
               break;
            default: // check common entity attributes
               checkCommonEntityProperties(entity);
               break;
         }
      }

      return entity;
   };

   var parseSOLID = function() {
      var entity;
      entity = { type: curr.value };
      entity.points = [];
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 10:
               entity.points[0] = parsePoint();
               break;
            case 11:
               entity.points[1] = parsePoint();
               break;
            case 12:
               entity.points[2] = parsePoint();
               break;
            case 13:
               entity.points[3] = parsePoint();
               break;
            case 210:
               entity.extrusionDirection = parsePoint();
               break;
            default: // check common entity attributes
               checkCommonEntityProperties(entity);
               break;
         }
      }

      return entity;
   };

   var parsePOINT = function() {
      var entity;
      entity = { type: curr.value };
      curr = scanner.next();
      while(curr !== 'EOF') {
         if(curr.code === 0) break;

         switch(curr.code) {
            case 10:
               entity.position = parsePoint();
               break;
            case 39:
               entity.thickness = curr.value;
               curr = scanner.next();
               break;
            case 210:
               entity.extrusionDirection = parsePoint();
               break;
            case 100:
               if(curr.value == 'AcDbPoint') {
                  curr = scanner.next();
                  break;
               }
            default: // check common entity attributes
               checkCommonEntityProperties(entity);
               break;
         }
      }

      return entity;
   };
   
   var ensureHandle = function(entity) {
      if(!entity) throw new TypeError('entity cannot be undefined or null');
      
      if(!entity.handle) entity.handle = lastHandle++; 
   };

   parseAll();
   return dxf;
};


function debugCode(curr) {
   return curr.code + ':' + curr.value;
}

/**
 * Returns the truecolor value of the given AutoCad color index value
 * @return {Number} truecolor value as a number
 */
function getAcadColor(index) {
   return AUTO_CAD_COLOR_INDEX[index];
}

//*! loglevel - v1.4.1 - https://github.com/pimterry/loglevel - (c) 2016 Tim Perry - licensed MIT */
/* Below WAS some "logging" utility but it binds module.exports, thus
   breaking the ability to export DxfParser meaning that DXF.js can't use it.
   So fry deleted it jan 2019 since it had lots of comments in it making
   it not possible to comment it out.
*/

//Kent Gilson

function setKeepPosition(robot){
	let pidXYZ  = 0x3e4ecccc; //not set in this file
	let pidRP   = 0x3cf5c28f;
	let pidBase = 0x3e4ecccc;
	let PID_P = 20;
	let PID_ADDRESS = 21;
	let DIFF_FORCE_SPEED_FACTOR_ANGLE = 55;
	let DIFF_FORCE_SPEED_FACTOR_ROT   = 56;
	let SPEED_FACTORA = 27;
	let result = [
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ANGLE, 0),
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ROT, 0),
        make_ins("w", PID_ADDRESS, 0),
        make_ins("w", PID_P, pidBase),
   	    make_ins("w", PID_ADDRESS, 1),
        make_ins("w", PID_P, pidXYZ),
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ROT, 0),
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ROT, 0),
  	    make_ins("w", PID_ADDRESS, 2),
  	    make_ins("w", PID_ADDRESS, 3),
  	    make_ins("w", PID_P, pidRP),
  	    make_ins("w", PID_ADDRESS, 4),
  	    make_ins("w", SPEED_FACTORA, 0),
        make_ins("w", 42, 12960)
    ];
    Instruction.add_robot_to_instructions(result);
    return result
}

function setOpenLoop(robot){
	let PID_P = 20;
	let PID_ADDRESS = 21;
	let DIFF_FORCE_SPEED_FACTOR_ANGLE = 55;
	let DIFF_FORCE_SPEED_FACTOR_ROT   = 56;
	let SPEED_FACTORA = 27;
	let result = [
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ANGLE, 0),
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ROT, 0),
	    make_ins("w", PID_ADDRESS, 0),
        make_ins("w", PID_P, 0),
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ROT, 0),
        make_ins("w", DIFF_FORCE_SPEED_FACTOR_ROT, 0),
   	    make_ins("w", PID_ADDRESS, 1),
  	    make_ins("w", PID_ADDRESS, 2),
  	    make_ins("w", PID_ADDRESS, 3),
  	    make_ins("w", PID_P, 0),
  	    make_ins("w", PID_ADDRESS, 4),
  	    make_ins("w", SPEED_FACTORA, 0),
        make_ins("w", 42, 12960)
    ];
    Instruction.add_robot_to_instructions(result);
    return result
}

/*Created by Fry on 7/4/16.*/


//FILE SYSTEM

function read_file$1(path, encoding="utf8"){
    path = make_full_path(path);
    try{ return fs.readFileSync(path, encoding) }
    catch(err){
        if(err.message.startsWith("Access denied")){
            dde_error("You are not permitted to access files<br/>" +
                      " outside of Documents/dde_apps such as<br/>" +
                      path);
        }
        else {
            dde_error("read_file could not get the content of:<br/><code title='unEVALable'>" + path + "</code>");
        }
    }
}

function folder_separator(){
    if (operating_system == "win") { return "\\" }
    else                           { return "/"  }
}

function add_default_file_prefix_maybe(path){
    if (is_root_path(path)) { return path }
    //else if (path.startsWith(dde_apps_folder)) { return path } //redundant with the above
    else if (path.includes(":")) { return path }
    else if (path.startsWith("dde_apps/")) {
        path = path.substring(8);
        return dde_apps_folder + path
    }
    else if(path.startsWith("./")) {  //return "dde_apps/" + path.substring(2)
        return dde_apps_folder + path.substring(1)
    }
    else if (path.startsWith("../")) {
        let core_path = path.substring(3);
        let last_slash_pos = dde_apps_folder.lastIndexOf("/");

        let up_from_dde_apps = dde_apps_folder.substring(0, last_slash_pos + 1);
        let new_path = up_from_dde_apps + core_path;
        return new_path
    }
    else { return dde_apps_folder + "/" + path }
}


function adjust_path_to_os(path){
    if (path.includes("://")) { //looks like a url so leave it alone
       return path
    }
    else {//dde standard is to use / between separators and that's what users should use
          // But for windows compatibility we need backslash,. This fn called by dde utils like
          //read_file. Note if user passes in a path with backslashes,
          //this will do nothing. So on a windows machine, that's ok,
          //but on a mac or linux, that's bad. But this is unlikely to
          //happen on a mac or linus, esp since dde standard is slash.
        let result = path.replace(/\//g, folder_separator());
        //we might have  a path like \C:\foo.txt in which case, take off the initial backslash
        if(result.startsWith("\\") && //looks like we've got WindowsOS path
            //(result.length == 3) && //unnecessarily restrictive
            (result[2] == ":")) {
            result = result.substring(1);
        }
        return result
    }
}

function make_full_path(path, adjust_to_os=true){
    path = add_default_file_prefix_maybe(path);
    if (adjust_to_os) { path = adjust_path_to_os(path); }
    return path
}

function is_root_path(path){
    if(path.startsWith("/")) { return true }
    else if ((path.length > 1) && (path[1] == ":")){
        let first_char = path[0];
        return ((first_char >= "A") && (first_char <= "Z"))
    }
    else { return false }
}

//DXF class
//import {Instruction, make_ins} from "../core/instruction.js"
//import {Dexter}    from "../core/robot.js"
//import {Job}       from "../core/job.js"


var DXF$1 = new function() {
	
    this.content_to_entities = function(content){
    	let parser = new DxfParser();
        return parser.parseSync(content).entities
    };
    
    this.entities_to_points = function(dxf_entities){
    	let ent, a, b;
        let points = [];
    	for(let i = 0; i < dxf_entities.length; i++){
            	ent = dxf_entities[i];
            	if (ent.type == "LINE"){
                	a = Utils.point_object_to_array(ent.vertices[0]);
               		b = Utils.point_object_to_array(ent.vertices[1]);
                	points.push(a);
                    points.push(b);
                }else if (ent.type == "POLYLINE"){
                	a = Utils.point_object_to_array(ent.vertices[0]);
               		b = Utils.point_object_to_array(ent.vertices[1]);
                	points.push(a);
                    points.push(b);
                }else if (ent.type == "LWPOLYLINE"){
                	let v_array = ent.vertices;
                    points.push([v_array[0].x, v_array[0].y, v_array[0].z]);
                    for(let j = 1; j < v_array.length-1; j++){
                    	points.push([v_array[j].x, v_array[j].y, v_array[j].z]);
                        points.push([v_array[j].x, v_array[j].y, v_array[j].z]);
                    }
                    points.push([v_array[v_array.length-1].x, v_array[v_array.length-1].y, v_array[v_array.length-1].z]);
                }else {
                	warning("Entity of type " + ent.type + " is not currently supported.");
                }
                
            }//end for
            
        out(points);
        return points
 	};
	
    this.edit = function(points, shift = [0, 0, 0], scale_factor = 1){
        
        let dim = Vector.matrix_dimensions(points);
        let result = points;
        for(let i = 0; i < dim[0]; i++){
        	result[i] = Vector.add(shift, points[i]);
        }
        return Vector.multiply(scale_factor, result)
    };
    
    this.points_to_path = function(points, lift_height){
    	let path = [];
        let Ua, Ub, Ub_old;
        let dim = Vector.matrix_dimensions(points);
        path.push(Vector.add(points[0], [0, 0, lift_height]));
        path.push(points[0]);
        path.push(points[1]);
        let rapid = [1, 1, 0];
        Ub_old = points[1];
        for(let i = 3; i < dim[0]; i+=2){
        	Ua = points[i-1];
            Ub = points[i];
            if(!Vector.is_equal(Ua, Ub_old, 10)){
            	path.push(Vector.add(Ub_old, [0, 0, lift_height]));
                path.push(Vector.add(Ua, [0, 0, lift_height]));
                path.push(Ua);
                rapid.push(1);
                rapid.push(1);
                rapid.push(1);
            }
            path.push(Ub);
            rapid.push(0);
            Ub_old = Ub;
        }
        path.push(Vector.add(Ub, [0, 0, lift_height]));
        rapid.push(1);
        return [path, rapid]
    };
    
    this.move_path_to_coor = function(path, destination_coordinate_system){
    	return Coor.move_points_to_coor(path, destination_coordinate_system)
    };
    
    this.auto_fit = function(dxf_points, J_angles_1, J_angles_2, J_angles_3){
		let points_A, points_B, points_C, UA5, UA4, UB5, UB4, UC5, UC4, U5_ave, U4_ave, U45;
    	let point, angleA, angleB, angleC, vector_1, vector_2, x_length, y_length, y_dist_1, y_dist_2;
        
    	points_A = Kin.forward_kinematics(J_angles_1)[0];
    	points_B = Kin.forward_kinematics(J_angles_2)[0];
    	points_C = Kin.forward_kinematics(J_angles_3)[0];
        
    	UA5 = points_A[5];
    	UA4 = points_A[4];
    	UB5 = points_B[5];
    	UB4 = points_B[4];
    	UC5 = points_C[5];
    	UC4 = points_C[4];
        
    	U5_ave = Vector.average(UA5, UB5, UC5);
    	U4_ave = Vector.average(UA4, UB4, UC4);
    	U45 = Vector.subtract(U4_ave, U5_ave);
        
    	angleA = Vector.angle(Vector.subtract(UB5, UA5), Vector.subtract(UC5, UA5));
    	angleB = Vector.angle(Vector.subtract(UA5, UB5), Vector.subtract(UC5, UB5));
    	angleC = Vector.angle(Vector.subtract(UB5, UC5), Vector.subtract(UA5, UC5));
        
    	switch(Math.max(angleA, angleB, angleC)){
        	case angleA:
            	point = UA5;
            	vector_1 = Vector.subtract(UB5, UA5);
             	vector_2 = Vector.subtract(UC5, UA5);
            	y_dist_1 = Vector.distance(UC5, point, UB5);
            	y_dist_2 = Vector.distance(UB5, point, UC5);
            	break
                
        	case angleB:
            	point = UB5;
            	vector_1 = Vector.subtract(UA5, UB5);
            	vector_2 = Vector.subtract(UC5, UB5);
            	y_dist_1 = Vector.distance(UC5, point, UA5);
            	y_dist_2 = Vector.distance(UA5, point, UC5);
            	break
                
        	case angleC:
            	point = UC5;
            	vector_1 = Vector.subtract(UB5, UC5);
            	vector_2 = Vector.subtract(UA5, UC5);
            	y_dist_1 = Vector.distance(UA5, point, UB5);
            	y_dist_2 = Vector.distance(UB5, point, UA5);
            	break
    	}
        
    	if(0 < Vector.dot(Vector.cross(vector_1, vector_2), U45)){
    		x_length = Vector.magnitude(vector_1);
        	Vector.normalize(vector_1);
        	y_length = y_dist_1;
    	}else {
    		x_length = Vector.magnitude(vector_2);
        	Vector.normalize(vector_2);
        	y_length = y_dist_2;
    	}
        
    	let upper = Vector.max(dxf_points);
    	let lower = Vector.min(dxf_points);
    	let diff = Vector.subtract(upper, lower);
    	let shift = Vector.multiply(-1, lower);
    	let width = Math.abs(diff[0]);
    	let height = Math.abs(diff[1]);
    
    	let scale_factor_1 = x_length / width;
    	let scale_factor_2 = y_length / height;
    
    	return [shift, Math.min(scale_factor_1, scale_factor_2)]
	};

	/* aug 15, 2022 James W said take this out. Not used, doesn't work
	this.fill_DXF = function(filename, scale, theta, tool_diameter = 5000, overlap_ratio = .1, toggle_fill = false, J_angles){
		let dxf_content = read_file(filename)
		let my_entities = DXF.content_to_entities(dxf_content)
		let perimeter_points = DXF.entities_to_points(my_entities)
    	perimeter_points = scale_points(perimeter_points, scale, J_angles)
    
		let perimeter = points_to_object(perimeter_points)
		perimeter.points = Vector.matrix_multiply(perimeter.points, z_rotate_matrix(-theta))

		let fill = fill_perimeter(perimeter, tool_diameter, overlap_ratio, toggle_fill)
		perimeter.points = Vector.matrix_multiply(perimeter.points, z_rotate_matrix(theta))
		fill.points = Vector.matrix_multiply(fill.points, z_rotate_matrix(theta))
    
    	return fill
	}*/

	this.points_to_object = function(point_array){
		let dim = Vector.matrix_dimensions(point_array);
    	let unique_points = [];
    	let lines_seg = [];
    	let connectivity = [];
    	let elt, dimu, diml;
    	for(let i = 0; i < dim[0]; i++){
    		elt = point_array[i];
        	dimu = Vector.matrix_dimensions(unique_points);
        	let match_flag = 0;
        	for(let j = 0; j < dimu[0]; j++){
        		if(Vector.is_equal(elt, unique_points[j])){
            		match_flag = 1;
                	break
            	}
        	}
        	if(match_flag == 0){
        		unique_points.push(elt);
        	}
    	}
    	dimu = Vector.matrix_dimensions(unique_points);
    	for(let i = 0; i < dim[0]; i += 2){
    		lines_seg.push([point_array[i][0], point_array[i][1], point_array[i][2],
                        	point_array[i+1][0], point_array[i+1][1], point_array[i+1][2]]);
    	}
    
    	diml = Vector.matrix_dimensions(lines_seg);
        if(diml[0] ==0){
        	dde_error("The DXF appears to be empty. </br> Only regular line segments are currently supported. <br/>Polylines, circle, splines etc. are ignored.");
        }
    	connectivity = Vector.make_matrix(diml[0], 2);
    	for(let i = 0; i < diml[0]; i++){
    		for(let j = 0; j < 2; j++){
        		elt = [lines_seg[i][0+3*j], lines_seg[i][1+3*j], lines_seg[i][2+3*j]];
            	for(let k = 0; k < dimu[0]; k++){
            		unique_points[k];
                	if(Vector.is_equal(elt, unique_points[k])){
                		connectivity[i][j] = k;
                    	break
            		}
            	}
        	}
    	}
    	let result = {points: unique_points, lines: connectivity};
    	return result
	};

	this.object_to_points = function(object){
		object.points;
    	object.lines;
    	let points = [];
    	for(let i = 0; i < object.lines.length; i++){
    		for(let j = 0; j < 2; j++){
        		points.push(object.points[object.lines[i][j]]);
        	}
    	}
    	return points
	};


	this.find_intersections = function(object, point_1, point_2){
		let U2a, U2b, A, B, C, alpha, beta, int_point;
    	let U1b = point_1;
    	let U1a = point_2;
		let dim = Vector.matrix_dimensions(object.lines);
    	let result = [];
    	for(let i = 0; i < dim[0]; i++){
    		U2b = object.points[object.lines[i][0]];
        	U2a = object.points[object.lines[i][1]];
        
        	A = (U2b[0]-U1b[0])/(U1a[0]-U1b[0]);
        	B = ((U2a[0]-U2b[0])*(U1b[1]-U2b[1]))/((U1a[0]-U1b[0])*(U2a[1]-U2b[1]));
        	C = ((U2a[0]-U2b[0])*(U1a[1]-U1b[1]))/((U1a[0]-U1b[0])*(U2a[1]-U2b[1]));
        	alpha = (A+B)/(1-C);
        	beta = (U1b[1]-U2b[1]+(U1a[1]-U1b[1])*alpha)/(U2a[1]-U2b[1]);
			if(((0 <= alpha) && (alpha <= 1)) && ((0 <= beta) && (beta <= 1))){
        		int_point = Vector.add(U2b, Vector.multiply(beta, Vector.subtract(U2a, U2b)));
        		result.push({point: int_point, alpha: alpha, beta: beta, idx: i});
        	}
    	}
    	return result
	};

	this.connect_fill = function(fill_obj, perimeter_obj, tool_diameter){
    	let fill = fill_obj;
    	let line_list = Vector.deep_copy(fill_obj.lines);
    	let perim_idxs_list = Vector.deep_copy(fill_obj.perim_idxs);
    	let fill_idxs_list = Vector.deep_copy(fill_obj.fill_idxs);
    	let new_lines = [];
    	let new_perim_idxs = [];
    	let new_fill_idxs = [];
    	let end_point_idx, perim_line_idx, fill_line_idx, start_point_idx;
    	let result = {lines: [], points: []};
    
    	new_lines.push(line_list.shift());
    	new_perim_idxs.push(perim_idxs_list.shift());
    	new_fill_idxs.push(fill_idxs_list.shift());
    	//debugger
    	while(line_list.length != 0){
    		end_point_idx = new_lines[new_lines.length-1][1];
    		perim_line_idx = perim_idxs_list[line_list.length-1][1]; //this is wyere  eerror
			fill_line_idx = fill_idxs_list[line_list.length-1];
        	for(let i = 0; i < line_list.length; i++){
        	
    			if(perim_idxs_list[i][0] == perim_line_idx && fill_idxs_list[i] == fill_line_idx+1){
            		start_point_idx = line_list[i][0];
            		new_lines.push([end_point_idx, start_point_idx]);
                	new_lines.push(line_list.splice(i, 1)[0]);
                	new_perim_idxs.push(perim_idxs_list.splice(i, 1)[0]);
                	new_fill_idxs.push(fill_idxs_list.splice(i, 1)[0]);
                	break
            	}
            
            	if(i == line_list.length-1){
            		new_lines.push(line_list.splice(i, 1)[0]);
                	new_perim_idxs.push(perim_idxs_list.splice(i, 1)[0]);
                	new_fill_idxs.push(fill_idxs_list.splice(i, 1)[0]);
            	}
    		}
    	}
    	result.points = fill.points;
    	result.lines = new_lines;
    	return result
	};

	this.rotate_2D_matrix = function(theta){
		let theta_radians = theta*Math.PI/180;
		let c = Math.cos(theta_radians);
		let s = Math.sin(theta_radians);
    	let result = [[ c, s, 0],
                  	  [-s, c, 0],
          		  	  [ 0, 0, 1]];
		return result
		/*
    	//shear transformation matrix I wrote by accident
		let theta_radians = theta*Math.PI/180
		let m = Math.cos(theta_radians)
    	let m2 = m*m
		let n = Math.sin(theta_radians)
    	let n2 = n*n
		let result = [[  m2,  n2,  2*n*m],
                  	  [  n2,  m2, -2*n*m],
          		  	  [-n*m, n*m,  m2-n2]]
    	return result
    	*/
	};


	this.fill_perimeter = function(perimeter_obj, tool_diameter, overlap_ratio = .1, toggle_fill = false){
		let perim = perimeter_obj;
    	Vector.matrix_dimensions(perim.points);
    	let upper_lim = Vector.max(perim.points);
    	let lower_lim = Vector.min(perim.points);
    	let R = tool_diameter/2;
    	let U1f, U2f, y, int;
    	let U1, U2;
    	let fill = {points: [], lines: [], fill_idxs: [], perim_idxs: []};
    	y = lower_lim[1]+R;
    	let t=0;
    	let direction = 1;
    	let fill_idx = 0;
    	//draws and trims lines over perimeter
    	while(y < upper_lim[1]) { 
    		if(direction == 1){
    			U1f = [lower_lim[0]-R, y, 0];
    			U2f = [upper_lim[0]+R, y, 0];
            	direction = 0;
        	}else {
        		U2f = [lower_lim[0]-R, y, 0];
    			U1f = [upper_lim[0]+R, y, 0];
            	direction = 1;
        	}
    		int = find_intersections(perim, U1f, U2f);
        	int.sort(function(a, b){return a.alpha-b.alpha}); //sorts based on alphas from smallest to largest

			for(let i = 0; i < int.length; i+=2){
        		//debugger
            	/*
            	if(t > 1 && int[i].idx == fill.idxs[fill.idxs.length-1][1]){ //if connected to the same perimeter line
            		fill.idxs.push(int[i].idx, int[i+1].idx)
            		fill.lines.push([t-1, t])
            		//t+=2
            	}
            	*/
            	//debugger
            	U1 = int[i].point;
            	U2 = int[i+1].point;
            
        		fill.points.push(U1, U2);
            	//fill.points.push(int[i].point, int[i+1].point)
            	fill.fill_idxs.push(fill_idx);
            	fill.perim_idxs.push([int[i].idx, int[i+1].idx]);
            	fill.lines.push([t, t+1]);
            	t+=2;
        	}
        	fill_idx++;
    		y += R * (1-overlap_ratio);
    	}
    	return fill
	};
    
    
    
    /*
    this.text_fit_top_left = function(dxf_points, J_angles_1, J_angles_2, J_angles_3, scale = 1){
		let points_A, points_B, points_C, UA5, UA4, UB5, UB4, UC5, UC4, U5_ave, U4_ave, U45
    	let point, x_vector, y_vector, z_vector, pose, angleA, angleB, angleC, vector_1, vector_2, x_length, y_length, y_dist_1, y_dist_2
        
    	points_A = Kin.J_angles_to_xyz(J_angles_1)
    	points_B = Kin.J_angles_to_xyz(J_angles_2)
    	points_C = Kin.J_angles_to_xyz(J_angles_3)
        
    	UA5 = points_A[5]
    	UA4 = points_A[4]
    	UB5 = points_B[5]
    	UB4 = points_B[4]
    	UC5 = points_C[5]
    	UC4 = points_C[4]
        
    	U5_ave = Vector.average(UA5, UB5, UC5)
    	U4_ave = Vector.average(UA4, UB4, UC4)
    	U45 = Vector.subtract(U4_ave, U5_ave)
        
    	angleA = Vector.angle(Vector.subtract(UB5, UA5), Vector.subtract(UC5, UA5))
    	angleB = Vector.angle(Vector.subtract(UA5, UB5), Vector.subtract(UC5, UB5))
    	angleC = Vector.angle(Vector.subtract(UB5, UC5), Vector.subtract(UA5, UC5))
        
    	switch(Math.max(angleA, angleB, angleC)){
        	case angleA:
            	point = UA5
            	vector_1 = Vector.subtract(UB5, UA5)
             	vector_2 = Vector.subtract(UC5, UA5)
            	y_dist_1 = Vector.distance(UC5, point, UB5)
            	y_dist_2 = Vector.distance(UB5, point, UC5)
            	break
                
        	case angleB:
            	point = UB5
            	vector_1 = Vector.subtract(UA5, UB5)
            	vector_2 = Vector.subtract(UC5, UB5)
            	y_dist_1 = Vector.distance(UC5, point, UA5)
            	y_dist_2 = Vector.distance(UA5, point, UC5)
            	break
                
        	case angleC:
            	point = UC5
            	vector_1 = Vector.subtract(UB5, UC5)
            	vector_2 = Vector.subtract(UA5, UC5)
            	y_dist_1 = Vector.distance(UA5, point, UB5)
            	y_dist_2 = Vector.distance(UB5, point, UA5)
            	break
    	}
        
    	if(0 < Vector.dot(Vector.cross(vector_1, vector_2), U45)){
    		x_length = Vector.magnitude(vector_1)
        	x_vector = Vector.normalize(vector_1)
        	y_length = y_dist_1
    	}else{
    		x_length = Vector.magnitude(vector_2)
        	x_vector = Vector.normalize(vector_2)
        	y_length = y_dist_2
    	}
        
    	let upper = Vector.max(dxf_points)
    	let lower = Vector.min(dxf_points)
    	let diff = Vector.subtract(upper, lower)
        let shift = 
    	let shift = y_length - 1.1*scale
    	let width = Math.abs(diff[0])
    	let height = Math.abs(diff[1])
    
    	let scale_factor_1 = x_length / width
    	let scale_factor_2 = y_length / height
    
    	return [shift, scale]
	}
    
    
    this.draw_dxf_on_plane = function(dxf_content = Hello_World_DXF, J_angles){
		let lift_height = 25000
    	let low_speed = 60000
    	let high_speed = 130000
    	let J_angles_1 = J_angles[0]
    	let J_angles_2 = J_angles[1]
    	let J_angles_3 = J_angles[2]
    
    
    	let my_pose = Kin.three_positions_to_pose(J_angles_1, J_angles_2, J_angles_3)
    	let J5_dir = Vector.multiply(-1, Vector.pull(my_pose, [0, 2], 2))
    	var white_board = Table.create_child(my_pose, "white_board")
    	let my_entities = DXF.content_to_entities(dxf_content)
    	let my_points = DXF.entities_to_points(my_entities)
    	let my_edit = DXF.auto_fit(my_points, J_angles_1, J_angles_2, J_angles_3)
    	my_points = DXF.edit(my_points, my_edit[0], my_edit[1])
    	let my_path = DXF.points_to_path(my_points, lift_height)
    	let path_points = my_path[0]
    	let rapid = my_path[1]
    	path_points = Coor.move_points_to_coor(path_points, white_board)
    	let dim = Vector.matrix_dimensions(path_points)
    	let movCMD = []
    
    	let temp_mov
    	movCMD.push(Dexter.move_to(path_points[0], J5_dir))
    	for(let i = 1; i < dim[0]; i++){
    		if(rapid[i] == 0){
        		temp_mov = move_straight_to(path_points[i-1], path_points[i], 500, J5_dir)
            	for(let j = 0; j < temp_mov.length; j++){
            		movCMD.push(temp_mov[j])
            	}
        	}else{
            	temp_mov = move_straight_to(path_points[i-1], path_points[i], 200000, J5_dir)
            	for(let j = 0; j < temp_mov.length; j++){
            		movCMD.push(temp_mov[j])
            	}
        	}
    	}
    	return movCMD
	}*/


    
    
    
    
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    
// DXF Drawing
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//James Wigglesworth
//Started 6_1_17
//Updated 9_19_17


////////////////////////////////////////////////////////////////////////////
//DXF drawing utility functions
////////////////////////////////////////////////////////////////////////////

function get_bounds_from_three_positions(J_angles_1, J_angles_2, J_angles_3){
	let points_A, points_B, points_C, UA5, UA4, UB5, UB4, UC5, UC4, U5_ave, U4_ave, U45;
    let point, angleA, angleB, angleC, vector_1, vector_2, x_length, y_length, y_dist_1, y_dist_2;
    
    points_A = Kin.forward_kinematics(J_angles_1)[0];
    points_B = Kin.forward_kinematics(J_angles_2)[0];
    points_C = Kin.forward_kinematics(J_angles_3)[0];
        
    UA5 = points_A[5];
    UA4 = points_A[4];
    UB5 = points_B[5];
    UB4 = points_B[4];
    UC5 = points_C[5];
    UC4 = points_C[4];
        
    U5_ave = Vector.average([UA5, UB5, UC5]);
    U4_ave = Vector.average([UA4, UB4, UC4]);
    U45 = Vector.subtract(U4_ave, U5_ave);
        
    angleA = Vector.angle(Vector.subtract(UB5, UA5), Vector.subtract(UC5, UA5));
    angleB = Vector.angle(Vector.subtract(UA5, UB5), Vector.subtract(UC5, UB5));
    angleC = Vector.angle(Vector.subtract(UB5, UC5), Vector.subtract(UA5, UC5));
        
    switch(Math.max(angleA, angleB, angleC)){
        case angleA:
            point = UA5;
            vector_1 = Vector.subtract(UB5, UA5);
            vector_2 = Vector.subtract(UC5, UA5);
            y_dist_1 = Vector.distance(UC5, point, UB5);
            y_dist_2 = Vector.distance(UB5, point, UC5);
            break
                
        case angleB:
            point = UB5;
            vector_1 = Vector.subtract(UA5, UB5);
            vector_2 = Vector.subtract(UC5, UB5);
            y_dist_1 = Vector.distance(UC5, point, UA5);
            y_dist_2 = Vector.distance(UA5, point, UC5);
            break
                
        case angleC:
            point = UC5;
            vector_1 = Vector.subtract(UB5, UC5);
            vector_2 = Vector.subtract(UA5, UC5);
            y_dist_1 = Vector.distance(UA5, point, UB5);
            y_dist_2 = Vector.distance(UB5, point, UA5);
            break
    }
        
    if(Vector.dot(Vector.cross(vector_1, vector_2), U45) > 0){
    	x_length = Vector.magnitude(vector_1);
        Vector.normalize(vector_1);
        y_length = y_dist_1;
    }else {
    	x_length = Vector.magnitude(vector_2);
        Vector.normalize(vector_2);
        y_length = y_dist_2;
    }
    
    return [x_length, y_length]
}

function move_straight_to(xyz_1, xyz_2, resolution, J5_direction, config, base_xyz, base_plane, base_rotation){
    let movCMD = [];
    let U1 = xyz_1;
    let U2 = xyz_2;
    let U21 = Vector.subtract(U2, U1);
    let v21 = Vector.normalize(U21);
    let mag = Vector.magnitude(U21);
    let div = 1;
    let step = Infinity;
    while(resolution < step){
    	div++;
        step = mag / div;
    }
    let Ui;
    for(let i = 0; i < div+1; i++){
    	Ui = Vector.add(U1, Vector.multiply(i*step, v21));
        movCMD.push(Dexter.move_to(Ui, J5_direction, config, base_xyz, base_plane, base_rotation));
    }
	return movCMD
}

function move_straight(tool_speed, xyz_1, xyz_2, resolution, J5_direction, config, base_xyz, base_plane, base_rotation){
    let movCMD = [];
    let U1 = xyz_1;
    let U2 = xyz_2;
    let U21 = Vector.subtract(U2, U1);
    let v21 = Vector.normalize(U21);
    let mag = Vector.magnitude(U21);
    let div = 1;
    let step = Infinity;
    while(resolution < step){
    	div++;
        step = mag / div;
    }
    let angular_velocity;
    let Ui, new_J_angles;
    let old_J_angles = Kin.xyz_to_J_angles(U1, J5_direction, config, base_xyz, base_plane, base_rotation);
    for(let i = 1; i < div+1; i++){
    	Ui = Vector.add(U1, Vector.multiply(i*step, v21));
        new_J_angles = Kin.xyz_to_J_angles(Ui, J5_direction, config, base_xyz, base_plane, base_rotation);
        angular_velocity = Kin.tip_speed_to_angle_speed(old_J_angles, new_J_angles, tool_speed);
        old_J_angles = new_J_angles;
        movCMD.push(make_ins("S", "MaxSpeed", angular_velocity));
    	movCMD.push(make_ins("S", "StartSpeed", angular_velocity));
        movCMD.push(Dexter.move_to(Ui, J5_direction, config, base_xyz, base_plane, base_rotation));
    }
	return movCMD
}

function my_settings(speed = 20){
	/*
    Dexter.LINK1 = .165100
    Dexter.LINK2 = .327025 
    Dexter.LINK3 = .295425 
    Dexter.LINK4 = tool_height
    Dexter.LINK5 = tool_length
    */
    
	return [
    make_ins("S", "MaxSpeed", speed),
    make_ins("S", "StartSpeed", .5),
    make_ins("S", "Acceleration", 0.000129),
    make_ins("S", "J1BoundryHigh",670000*_arcsec),
    make_ins("S", "J1BoundryLow",-670000*_arcsec),
    make_ins("S", "J2BoundryHigh",330000*_arcsec),
    make_ins("S", "J2BoundryLow",-330000*_arcsec),
    make_ins("S", "J3BoundryHigh",600000*_arcsec),
    make_ins("S", "J3BoundryLow",-600000*_arcsec),
    make_ins("S", "J4BoundryHigh",390000*_arcsec),
    make_ins("S", "J4BoundryLow",-390000*_arcsec),
    make_ins("S", "J5BoundryHigh",680000*_arcsec),
    make_ins("S", "J5BoundryLow",-680000*_arcsec)
    ]
}

function scale_points(points, scale, J_angles){
	let my_edit = [[0,0,0], 1];
    if(typeof(scale) == "number"){
    	my_edit[1] = scale;
    }else {
    	switch(scale){
    		case undefined:
            	my_edit = DXF$1.auto_fit(points, J_angles[0], J_angles[1], J_angles[2]);
            	break
            case "fit": 
        		my_edit = DXF$1.auto_fit(points, J_angles[0], J_angles[1], J_angles[2]);
            	break
        	case "micron": 
        		my_edit[1] = _um;
            	break
        	case "mm": 
        		my_edit[1] = _mm;
            	break
        	case "cm": 
        		my_edit[1] = _cm;
            	break
        	case "in": 
        		my_edit[1] = _in;
            	break
        	default:
        		dde_error("Units of " + units +  " are not supported");
    	}
    }
    return DXF$1.edit(points, my_edit[0], my_edit[1])
}


function find_intersections(object, point_1, point_2){
	let U2a, U2b, A, B, C, alpha, beta, int_point;
    let U1b = point_1;
    let U1a = point_2;
	let dim = Vector.matrix_dimensions(object.lines);
    let result = [];
    for(let i = 0; i < dim[0]; i++){
    	U2b = object.points[object.lines[i][0]];
        U2a = object.points[object.lines[i][1]];
        
        A = (U2b[0]-U1b[0])/(U1a[0]-U1b[0]);
        B = ((U2a[0]-U2b[0])*(U1b[1]-U2b[1]))/((U1a[0]-U1b[0])*(U2a[1]-U2b[1]));
        C = ((U2a[0]-U2b[0])*(U1a[1]-U1b[1]))/((U1a[0]-U1b[0])*(U2a[1]-U2b[1]));
        alpha = (A+B)/(1-C);
        beta = (U1b[1]-U2b[1]+(U1a[1]-U1b[1])*alpha)/(U2a[1]-U2b[1]);
		if(((0 <= alpha) && (alpha <= 1)) && ((0 <= beta) && (beta <= 1))){
        	int_point = Vector.add(U2b, Vector.multiply(beta, Vector.subtract(U2a, U2b)));
        	result.push({point: int_point, alpha: alpha, beta: beta, idx: i});
        }
    }
    return result
}


////////////////////////////////////////////////////////////////////////////
//DXF drawing instruction
////////////////////////////////////////////////////////////////////////////
/*
DXF.dxf_to_instructions()
new Job({name: "Draw",
				show_instructions: false,
         	 	do_list: [DXF.dxf_to_instructions]}
			    )
*/

    this.dxf_to_instructions = function({
                                            dxf_filepath = "choose_file",
                                            three_J_angles = [[0, 45, 90, -45, 0], [0, 30, 120, -60, 0], [-10, 30, 120, -60, 0]],
                                            tool_height = Dexter.LINK4,
                                            tool_length = Dexter.LINK5,
                                            DXF_units,
                                            draw_speed = 1 * _cm/_s,
                                            draw_res = 0.5 * _mm,
                                            lift_height = 1 * _cm,
                                            rapid_speed = 20,
                                            tool_action = false,
                                            tool_action_on_function  = undefined,
                                            tool_action_off_function = undefined,
                                            robot = undefined
                                        } = {}){

    	if (tool_action_on_function === undefined){
    	  tool_action_on_function = function() {
				  let instrs = [ make_ins("w", 64, 2), Dexter.dummy_move()];
				  Instruction.add_robot_to_instructions(instrs, robot);
				  return instrs
		  };
        }

        if (tool_action_off_function === undefined){
            tool_action_off_function = function() {
                let instrs = [ make_ins("w", 64, 0), Dexter.dummy_move()];
                Instruction.add_robot_to_instructions(instrs, robot);
                return instrs
            };
        }

        //correct link lengths for tool geometry:
        DXF$1.orig_link4 = Dexter.LINK4;
        DXF$1.orig_link5 = Dexter.LINK5;
        Dexter.LINK4 = tool_height;
        Dexter.LINK5 = tool_length;

        let dxf_content;
        let my_entities;
        let my_points;
        if(dxf_filepath == "choose_file"){
            let title_string;
            if(tool_action){
                title_string = "Select File with '.dxf' Extension to Apply Tool Action to";
            }else {
                title_string = "Select File with '.dxf' Extension to Draw";
            }
            dxf_filepath = choose_file({title: title_string});
            if(dxf_filepath == undefined){
                out("No file has been selected. Nothing will be drawn.", "blue");
                return
            }
            if(!(dxf_filepath.endsWith(".dxf") || dxf_filepath.endsWith(".DXF"))){
                dde_error("Only DXF's are supported. The following file needs the extension '.dxf': " + dxf_filepath);
            }
        }

        if(typeof(dxf_filepath) == "string" && dxf_filepath.length < 512){
            dxf_content = read_file$1(dxf_filepath);
            my_entities = DXF$1.content_to_entities(dxf_content);
            my_points = DXF$1.entities_to_points(my_entities);
        }else if(Array.isArray(dxf_filepath)){
            my_points = dxf_filepath;
        }else {
            dde_error("Input arg, file_path, to DXF.dxf_to_instructions is incorrect data type");
        }

        /*
        if(tool_action){
            new Job({name: "Action_Off",
                      do_list: [tool_action_off_function]}
                    )
            new Job({name: "Action_On",
                      do_list: [tool_action_on_function]}
                    )
        }
        */


        let J_angles_1 = three_J_angles[0];
        let J_angles_2 = three_J_angles[1];
        let J_angles_3 = three_J_angles[2];

        let my_pose = Kin.three_positions_to_pose(J_angles_1, J_angles_2, J_angles_3);
        let J5_dir = Vector.multiply(-1, Vector.pull(my_pose, [0, 2], 2));
        var work_plane = Coor.Table.create_child(my_pose, "work_plane");
        get_bounds_from_three_positions(J_angles_1, J_angles_2, J_angles_3);

        //let my_entities = DXF.content_to_entities(dxf_content)
        /*
        if(fill == false){
            my_points = DXF.entities_to_points(my_entities)
            my_points = scale_points(my_points, scale, J_angles_A)
        }else{
            let fill_obj = fill_DXF(dxf_file_name, scale, 30, 5)
            my_points = object_to_points(fill_obj)
        }
        */

        my_points = scale_points(my_points, DXF_units, three_J_angles);

        let my_path = DXF$1.points_to_path(my_points, lift_height);

        let path_points = my_path[0];
        let rapid = my_path[1];
        path_points = Coor.move_points_to_coor(path_points, work_plane);
        let dim = Vector.matrix_dimensions(path_points);

        let movCMD = [];
        let temp_mov;
        if(tool_action){movCMD.push(make_ins("w", 64, 0));}
        movCMD.push(make_ins("S", "MaxSpeed", rapid_speed));
        movCMD.push(make_ins("S", "StartSpeed", .5));
        movCMD.push(Dexter.move_to(path_points[0], J5_dir));
        if(tool_action){movCMD.push(tool_action_on_function);}

        for(let i = 1; i < dim[0]; i++){
            if(rapid[i] == 0){
                if(tool_action){movCMD.push(tool_action_on_function);}
                temp_mov = move_straight(draw_speed, path_points[i-1], path_points[i], draw_res, J5_dir, Dexter.RIGHT_UP_OUT);
                for(let j = 0; j < temp_mov.length; j++){
                    movCMD.push(temp_mov[j]);
                }
            }else {
                if(rapid[i+0] == 0){
                    if(tool_action){
                        movCMD.push(tool_action_on_function);
                    }else {
                        temp_mov = move_straight_to(path_points[i-1], path_points[i], draw_res, J5_dir);
                        for(let j = 0; j < temp_mov.length; j++){
                            movCMD.push(temp_mov[j]);
                        }
                    }
                }else {
                    movCMD.push(make_ins("S", "MaxSpeed", rapid_speed));
                    movCMD.push(make_ins("S", "StartSpeed", .5));
                    if(tool_action){movCMD.push(make_ins("w", 64, 0));}
                }

                temp_mov = move_straight_to(path_points[i-1], path_points[i], .2, J5_dir);
                for(let j = 0; j < temp_mov.length; j++){
                    movCMD.push(temp_mov[j]);
                }

            }
        }
        if(tool_action){
            movCMD.push(tool_action_off_function);
        }
        movCMD.push(make_ins("F"));
        movCMD.push(function(){
            Dexter.LINK4 = DXF$1.orig_link4;
            Dexter.LINK5 = DXF$1.orig_link5;
        });
        if(robot){ Instruction.add_robot_to_instructions(movCMD, robot); }
        return movCMD
    };


/*General Setup (these can be done before or after the below instructions):
- Attach drawing end effector such as a pen or laser to Dexter
- On a flat work surface within Dexter's reach place a flat work piece (Paper, cardboard etc.)
- 
*/
/*Instructions:
1. Choose the Jobs menu and click 'DXF.init_drawing...' to define the jobs used to help make DXF drawings
1. Before turning Dexter on, orient all joints to [0, 0, 0, 0, 0]
2. Run the job Cal by clicking the Cal button on the job bar
3. Change the value of the global variable Apoint1 and eval
4. Start Job.A1 by clicking the 'A1' button in the Jobs bar
5. Adjust the value of Apoint1 until laser is in focus or pen is on paper
6. Repeat for A2 and A3
   These points define your plane and bounding box
   Create a right triangle with these points. 
   The corner with approximately 90 degrees will become the origin
7. Set 'filename' to the path from dde_apps to your DXF file.
8. Choose the units that the DXF was drawn in
9. Adjust tooltip location which is relative to the top of the differential cylinder
10. Click Cut_DXF or Draw_DXF to laser cut or draw with a pen.
*/
///////////////////////////////////////////////////////




///////////////////////////////////////////////////////
//USER UNPUT:
//
/*
debugger
DXF.init_drawing()
*/

	this.init_drawing = function({
		dxf_filepath = "choose_file",
		robot = Dexter.dexter0,
		three_points = [[0, .55, 0.05], [0, .4, 0.05], [.15, .4, 0.05]], //(m) 
		plane_normal_guess = [0, 0, 1],
		calc_plane_normal = false,
		tool_height = 5.08 * _cm,
		tool_length = 8.255 * _cm,
		DXF_units,
		draw_speed = 1 * _cm/_s,
		draw_res = 0.5 * _mm,
		lift_height = 1 * _cm,
        lift_speed = 20,
		tool_action = false,
		tool_action_on_function = function(){
		return [
			make_ins("S", "SetIOState",80),
			Dexter.set_parameter("EESpan", 0),
			function(){return Dexter.dummy_move(this)}
        ]
		},
        tool_action_mid_function = function(){
		return [
			make_ins("S", "SetIOState",80),
			Dexter.set_parameter("EESpan", 430),
			function(){return Dexter.dummy_move(this)}
        ]
		},
		tool_action_off_function = function(){
		return [
			make_ins("S", "SetIOState",80),
			Dexter.set_parameter("EESpan", 512),
			function(){return Dexter.dummy_move(this)}
        ]
		}
	} = {}){

//Plane points
var Apoint1 = three_points[0]; //(m)
var Apoint2 = three_points[1]; //(m)
var Apoint3 = three_points[2]; //(m)
var global_inter_do_item_dur = 1*_ms;

var Adir = Vector.multiply(-1, plane_normal_guess);
var J_angles_A = [Kin.xyz_to_J_angles(Apoint1, Adir), Kin.xyz_to_J_angles(Apoint2, Adir), Kin.xyz_to_J_angles(Apoint3, Adir)];

function calc_dir_from_J_angles(J_angles){
	let plane_pose = Kin.three_positions_to_pose(J_angles_A[0], J_angles_A[1], J_angles_A[2]);
	return Vector.multiply(-1, Vector.pull(plane_pose, [0, 2], 2))
}

if(calc_plane_normal){
	Adir = calc_dir_from_J_angles();
}

new Job({name: "Home",
		 robot: robot,
         show_instructions: false,
         do_list: [function(){return my_settings(20)},
         		   function(){return Dexter.move_all_joints([0, 0, 0, 0, 0])}]}
);
new Job({name: "Cal", 
	robot: robot,
    show_instructions: false,
    do_list: [setOpenLoop(),
            		  make_ins("S", "J1BoundryHigh",180),
                      make_ins("S", "J1BoundryLow",-180),
                      make_ins("S", "J2BoundryLow",-90),
                      make_ins("S", "J2BoundryHigh",90),
                      make_ins("S", "J3BoundryLow",-150),
                      make_ins("S", "J3BoundryHigh",150),
                      make_ins("S", "J4BoundryLow",-130),
                      make_ins("S", "J4BoundryHigh",130),
                      make_ins("S", "J5BoundryLow",-185),
                      make_ins("S", "J5BoundryHigh",180),
                      make_ins("a", 0, 0, 0, 0, 0),
                      make_ins("F"),
                      make_ins("w", 42,64),
                      make_ins("w", 42,0),
                      make_ins("w", 42,256),
                      make_ins("w", 42,0),
                      make_ins("S", "MaxSpeed", 30),
                      make_ins("S", "Acceleration", 0.000129),
                      make_ins("S", "StartSpeed", .05),
                      make_ins("w", 79, 50 ^ 200 ),
                      make_ins("w", 80, 50 ^ 200 ),
                      make_ins("w", 81, 50 ^ 200 ),
                      make_ins("a", 187, 0, 0, 0, 0),
                      make_ins("F"),
                      make_ins("S", "MaxSpeed",10),
                      make_ins("w", 42,1),
                      make_ins("a", -187, 0, 0, 0, 0),
                      make_ins("F"),
                      make_ins("w", 42,0),
                      make_ins("S", "MaxSpeed",30),
                      make_ins("a", 0, 0, 0, 0, 0),
                      make_ins("a", 0, 92, 0, 0, 0),
                      make_ins("F"),
                      make_ins("S", "MaxSpeed",10),
                      make_ins("w", 42,4),
                      make_ins("a", 0, -92, 0, 0, 0),
                      make_ins("F"),
                      make_ins("w", 42,0),
                      make_ins("S", "MaxSpeed",30),
                      make_ins("a", 0, 0, 0, 0, 0),
                      make_ins("a", 0, 0, 153, 0, 0),
                      make_ins("F"),
                      make_ins("S", "MaxSpeed",10),
                      make_ins("w", 42,2),
                      make_ins("a", 0, 0, -153, 0, 0),
                      make_ins("F"),
                      make_ins("w", 42,0),
                      make_ins("S", "MaxSpeed",30),
                      make_ins("a", 0, 0, 0, 0, 0),
                      make_ins("S", "MaxSpeed", 10),
                      make_ins("a", 0, 0, 0, 103, 0),
                      make_ins("F"),
                      make_ins("w", 42,1024),
                      make_ins("a", 0, 0, 0, -103, 0),
                      make_ins("F"),
                      make_ins("w", 42,0),
                      make_ins("a", 0, 0, 0, 0, 189),
                      make_ins("F"),
                      make_ins("w", 42,2048),
                      make_ins("a", 0, 0, 0, 0, -189),
                      make_ins("F"),
                      make_ins("w", 42,0),
                      make_ins("a", 0, 0, 0, 0, 0),
                      make_ins("S", "MaxSpeed", 30),
                      make_ins("a", 30, 30, 30, 30, 30),
                      make_ins("a", 0, 0, 0, 0, 0),
                      make_ins("w", 42,12448),
                      make_ins("l"),
                      setKeepPosition()
    ]});

new Job({
	name: "Point1",
	robot: robot,
    show_instructions: false,
    do_list: [
    	function(){return my_settings(20)},
        function(){return Dexter.move_to(Apoint1, Adir, Dexter.RIGHT_UP_OUT)}
	]
});

new Job({
	name: "Point2",
    robot: robot,
    show_instructions: false,
	do_list: [
    	function(){return my_settings(20)},
        function(){return Dexter.move_to(Apoint2, Adir, Dexter.RIGHT_UP_OUT)}
	]
});

new Job({
	name: "Point3",
    robot: robot,
    show_instructions: false,
    do_list: [
    	function(){return my_settings(20)},
        function(){return Dexter.move_to(Apoint3, Adir, Dexter.RIGHT_UP_OUT)}
	]
});

new Job({name: "Out_Rectangle",
		 robot: robot,
		 show_instructions: false,
         do_list: [function(){out("Width: " + Vector.round(Vector.multiply(100, get_bounds_from_three_positions(J_angles_A[0], J_angles_A[1], J_angles_A[2])[0]), 3) + " (cm)   Height: " + Vector.round(Vector.multiply(100, get_bounds_from_three_positions(J_angles_A[0], J_angles_A[1], J_angles_A[2])[1]), 3) + "  (cm)", "blue");}
         		  ]}
);

if(tool_action){
	new Job({
		name: "Action_Off",
    	robot: robot,
        show_instructions: false,
		do_list: [tool_action_off_function]}
	);
    
    new Job({
		name: "Action_Mid",
    	robot: robot,
        show_instructions: false,
		do_list: [tool_action_mid_function]}
	);

	new Job({
		name: "Action_On", 
        robot: robot,
        show_instructions: false,
		do_list: [tool_action_on_function]}
	);

	new Job({
		name: "DXF_Tool",
        robot: robot,
		inter_do_item_dur: global_inter_do_item_dur,
		show_instructions: false,
		do_list: [
    		function(){return my_settings(30)},
			function(){
        		return DXF$1.dxf_to_instructions({
					dxf_filepath: dxf_filepath, 
					three_J_angles: J_angles_A,
					tool_height: tool_height,
					tool_length: tool_length,
					DXF_units: DXF_units,
					draw_speed: draw_speed,
					draw_res: draw_res,
					lift_height: lift_height,
					tool_action: tool_action,
					tool_action_on_function: tool_action_on_function,
					tool_action_off_function: tool_action_off_function
				})
        	}
		]
    });
}else {
	new Job({
		name: "Draw_DXF",
    	robot: robot,
		inter_do_item_dur: global_inter_do_item_dur,
		show_instructions: false,
		do_list: [
    		function(){return my_settings(30)},
			function(){return DXF$1.dxf_to_instructions({
				dxf_filepath: dxf_filepath, 
				three_J_angles: J_angles_A,
				tool_height: tool_height,
				tool_length: tool_length,
				DXF_units: DXF_units,
				draw_speed: draw_speed,
				draw_res: draw_res,
				lift_height: lift_height,
				tool_action: tool_action,
				tool_action_on_function: tool_action_on_function,
				tool_action_off_function: tool_action_off_function
			})}
		]});
}

/*
this.dxf_to_instructions = function({
						dxf_filepath = "choose_file",
						three_J_angles = [[0, 30, 90, -30, 0], [0, 45, 90, -45, 0], [15, 45, 90, -45, 0]],
                        tool_height = 5.08 * _cm,
                        tool_length = 8.255 * _cm,
                        DXF_units,
                        draw_speed = 3 * _cm/_s,
                        draw_res = 0.5 * _mm,
                        lift_height = 1 * _cm,
                        laser_cut = false
                      } = {}){
*/
 
}; // closes DXF.init_drawing
    this.string_to_lines = txt$1.string_to_lines;
}; // closes DXF class

globalThis.DXF = DXF$1;

var DH$1 = {};
globalThis.DH = DH$1;

//J_angles, if it isn't already an array of 5 angles (in degrees)
//will be converted to one, either truncating too long arrays,
//or padding the end with zeros if its too short.
//dh_mat is expected to be an array 6 long.
//this fn does not modify either of its args.
DH$1.forward_kinematics = function(J_angles, dh_mat){
    if(!Array.isArray(J_angles)) { dde_error("DH.forward_kinematics called with first arg of:<br/>" +
                                   J_angles + "<br/> which is not an array.");}
    else if(J_angles.length === 6) ; //ok as is
    else if (J_angles.length < 6) {
        J_angles = J_angles.slice(); //make a copy
        do { J_angles.push(0); }
        while (J_angles.length < 6)
    }
    else { //J_angles length is > 6
        J_angles = J_angles.slice(0, 6);
    }
	let T = [0, 0, 0, 0, 0, 0];
	T[0] = Vector.make_pose();
    let dh = JSON.parse(JSON.stringify(dh_mat)); //deep copy
    
    for(let i = 0; i < J_angles.length; i++){
    	dh[i][1] += J_angles[i] * DH$1.sign_swap[i];
    }
    
    T[0] = Vector.make_pose();
    for(let i = 0; i < dh.length; i++){
    	T[i + 1] = Vector.matrix_multiply(
        	Vector.make_pose([0, 0, dh[i][0]], [-dh[i][1], 0, 0]),
            Vector.make_pose([dh[i][2], 0, 0], [0, 0, -dh[i][3]])
        );
    }
    
	let T_end = T[0];
    let T_global = [];
    for(let i = 0; i < T.length; i++){
    	T_end = Vector.matrix_multiply(T_end, T[i]);
        T_global.push(T_end.slice());
    }

	let xyz_6 = [T_end[0][3], T_end[1][3], T_end[2][3]];
    let dir_6 = [T_end[0][0], T_end[1][0], T_end[2][0]];

    return [xyz_6, dir_6, T_global]
};
/*

var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")
var J_angles = [0, 0, 90, 0, 0, 0]
var fk = DH.forward_kinematics(J_angles, dh_mat)
inspect(fk[2][6])

Vector.multiply([0.004376061498635432, 0.3747559999576882, 0.5220044115252782], 1/_um)

*/

DH$1.get_joint_points = function(J_angles, dh_mat){
	let T = [];
    new Array(12);
	T[0] = Vector.make_pose();
    let dh = JSON.parse(JSON.stringify(dh_mat)); //deep copy
    
    for(let i = 0; i < J_angles.length; i++){
    	dh[i][1] += J_angles[i] * DH$1.sign_swap[i];
    }
    
    //T.push(Vector.make_pose())
    for(let i = 0; i < dh.length; i++){
    	T.push(Vector.make_pose([0, 0, dh[i][0]], [-dh[i][1], 0, 0]));
        T.push(Vector.make_pose([dh[i][2], 0, 0], [0, 0, -dh[i][3]]));
    }
    
	let T_end = T[0];
    let T_global = [];
    for(let i = 0; i < T.length; i++){
    	T_end = Vector.matrix_multiply(T_end, T[i]);
        T_global.push(T_end.slice());
    }

	let xyz_6 = [T_end[0][3], T_end[1][3], T_end[2][3]];
    let dir_6 = [T_end[0][0], T_end[1][0], T_end[2][0]];

    return [xyz_6, dir_6, T_global]
};

/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")

var J_angles = [0, 45, 90, -45, 0, 0]
var T = DH.get_joint_points(J_angles, dh_mat)[2]

var x = []
var y = []
var z = []
var view_plane = [45, 45]
var xyz, proj_xyz
for(let i = 0; i < T.length; i++){
	xyz = [
    	T[i][0][3],
        T[i][1][3],
        T[i][2][3]
    ]
    proj_xyz = Vector.rotate(xyz, [0, 1, 0], view_plane[1])
    proj_xyz = Vector.rotate(proj_xyz, [0, 0, 1], view_plane[0])
    
	//x.push(proj_xyz[1])
    //y.push(proj_xyz[2])
    
    x.push(xyz[0])
    y.push(xyz[1])
    z.push(xyz[2])
}

var plot_data = []

plot_data.push({
	type: "scatter_3d",
    name: "J1",
    mode: "lines+markers", //lines between points and dots (markers) on the points
    x: x,
    y: y,
    z: z
})

Plot.show(
	null,
    plot_data,
    null,
    undefined,
    {
    	title: "Joint Points",
        x_axis: "[X] (meters)",
        y_axis: "[Y] (meters)"
    }
)

*/

DH$1.inverse_kinematics = function(x_e, r_e, dh_mat, angles_guess = [0, 0, 90, 0, 0, 0]){
    let x_precision = 0.01 * _mm;
    let r_precision = 0.001; //quaternion magnitude
    let max_iter = 1000;
    let k = [2.5, 2.5, 2.5, 10.5, 10.5, 10.5];
    let dt = 0.01;
    
    let q_angles = angles_guess.slice(); //shallow copy because q_angles gets modified
    let fk = DH$1.forward_kinematics(angles_guess, dh_mat);
    let x_nominal = fk[0];
    let T_global = fk[2];
    let r_nominal = Vector.pull(T_global[T_global.length -1], [0, 2], [0, 2]);
	
    let count = 0;
    let err = Vector.make_matrix(1, 6, 0)[0];
    let x_d_dot = Vector.make_matrix(1, 6, 0)[0];
    while(
    	(Vector.magnitude(Vector.subtract(x_e, x_nominal)) >= x_precision
        || Vector.magnitude(Vector.max(Vector.magnitude(DH$1.orientation_error_quat(r_e, r_nominal)))) >= r_precision)
        && count < max_iter
    ){
    	err = Vector.subtract(x_e, x_nominal);
        err = [...err, ...DH$1.orientation_error_quat(r_e, r_nominal).slice(0, 3)];
        
        let v_e = Vector.add(x_d_dot, Vector.multiply(k, err));
        let g_jacobian = DH$1.geometric_jacobian(q_angles, dh_mat);
        let q_dot = Vector.transpose(Vector.matrix_multiply(Vector.inverse(g_jacobian), Vector.transpose(v_e)));
        q_dot = Vector.multiply(q_dot, _rad, DH$1.sign_swap); //q_dot is in radians and needs same sign swap
        
        q_angles = Vector.add(
        	q_angles,
        	Vector.multiply(dt, q_dot)
        );
        
    	fk = DH$1.forward_kinematics(q_angles, dh_mat);
        x_nominal = fk[0];
    	T_global = fk[2];
        r_nominal = Vector.pull(T_global[T_global.length -1], [0, 2], [0, 2]);
		count++;
    }
    if(count >= max_iter){
    	out("DH.inverse_kinematics: no solution found, improve initial guess", "red");
        out("quat: " + DH$1.orientation_error_quat(r_e, r_nominal), "red");
        out("q_angles: " + q_angles, "red");
    }
    //out("count: " + count)
    
    
    return q_angles
};
/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
debugger
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")

var J_angles = [0, -30, 90, 0, 0, 0]
var [xyz, dir_6, T_global] = DH.forward_kinematics(J_angles, dh_mat)
var r_e = Vector.pull(T_global[T_global.length -1], [0, 2], [0, 2])

var ik = DH.inverse_kinematics(xyz, r_e, dh_mat)
inspect(ik)

var fk = DH.forward_kinematics(ik, dh_mat)
var xyz_2 = fk[0]
var xyz_error = Vector.subtract(xyz_2, xyz)
var dir_2 = fk[1]
var dir_error = Vector.angle(dir_2, dir_6)
inspect(xyz_error)
inspect(dir_error)


var x_des = [-16.25*_cm, 33.75*_cm, 0.475*_cm]
var r_des = [
	[0, -1, 0],
    [0, 0, 1],
    [-1, 0, 0]
]


for(let a = -1; a < 2; a+=2){
	for(let b = -1; b < 2; b+=2){
    	for(let c = -1; c < 2; c+=2){
        	for(let d = -1; d < 2; d+=2){
            	for(let e = -1; e < 2; e+=2){
                    var guess_angles = Vector.multiply([0.40911, -1.09898, 1.98286, -1.17373, -0.18340, 0], _rad) 
                    var sign_swap = [a, b, c, d, e, 1]
                    out(sign_swap)
                    guess_angles = Vector.multiply(guess_angles, sign_swap)
                    var ik = DH.inverse_kinematics(x_des, r_des, dh_mat, guess_angles)
                }
            }
        }
	}
}


x_nominal: -18.35632557188965,32.785463033390386,0.39063180263509967
[-1, 1, -1, -1, -1, 1]

x_nominal: -17.374478638550297,-34.87208042380309,14.750186873793975
[1, 1, -1, 1, -1, 1]




var x_des = [-16.25*_cm, 33.75*_cm, 0.475*_cm]
var r_des = [
	[0, -1, 0],
    [0, 0, 1],
    [-1, 0, 0]
]
var guess_angles = Vector.multiply([0.40911, -1.09898, 1.98286, -1.17373, -0.18340, 0], _rad) 
//var sign_swap = [-1, -1, 1, 1, -1, 1]
var sign_swap = [-1, -1, 1, 1, -1, 1]
guess_angles = Vector.multiply(guess_angles, sign_swap)
var ik = DH.inverse_kinematics(x_des, r_des, dh_mat, guess_angles)


//x_nominal = [-18.01651, 35.30429, 8.09183]

//var sign_swap = [-1, 1, 1, 1, -1, 1]


var angles = [
    23.440276356597106,
    62.96691576928721,
    113.60950936531042,
    -67.24977528789012,
    -10.508045962699299,
    0
]
debugger
DH.forward_kinematics(angles, dh_mat)[0]


*/

DH$1.sign_swap = [-1, -1, 1, 1, -1, 1];

DH$1.orientation_error_quat = function(r2, r1){
	let e_o = Vector.DCM_to_quaternion(Vector.matrix_multiply(r2, Vector.transpose(r1)));
	return e_o.slice(1, 4)
};

/*
DH.force_to_torque = function(force_vector, J_angles, dh_mat){
	
	let fk = DH.forward_kinematics(J_angles, dh_mat)
    
    let T = fk[2]
	let rotation_axes = []
    let xyzs = []
    for(let i = 0; i < 5; i++){
		rotation_axes.push(Vector.transpose(Vector.pull(T[i], [0, 2], [2, 2])))
        xyzs.push(Vector.transpose(Vector.pull(T[i], [0, 2], [3, 3])))
	}
    let force_xyz = fk[0]
    let moment_arms = []
    for(let i = 0; i < 5; i++){
    	moment_arms.push(Vector.subtract(force_xyz, xyzs[i]))
    }
    let projected_moment_arm
    let torque_vector
    let torques = []
    for(let i = 0; i < 5; i++){
    	torque_vector = Vector.cross(moment_arms[i], force_vector)
        //projected_moment_arm = Vector.project_vector_onto_plane(torque_vector, rotation_axes[i])
        projected_moment_arm = Vector.dot(torque_vector, rotation_axes[i])
        torques.push(Vector.magnitude(projected_moment_arm))
    }
    let torque_sign_swap = [-1, -1, 1, 1, -1]
    torques = Vector.multiply(torques, torque_sign_swap)
	return torques
}
*/

DH$1.parse_dh_mat_file = function(fp, dist_units = _m, ang_units = _deg){
	var dh_content = file_content(fp);
    var dh_mat = dh_content.split('\r\n');
    dh_mat.pop(); //last element is empty
    let units;
    for(let i = 0; i < dh_mat.length; i++){
    	dh_mat[i] = dh_mat[i].split(" ");
        for(let j = 0; j < dh_mat[i].length; j++){
        	if(j %2 == 0){
            	units = _cm / dist_units;
            }else {
            	units = _rad / ang_units;
            }
        	dh_mat[i][j] = Number(dh_mat[i][j]) * units;
        }
    }
    return dh_mat
};

DH$1.add_sixth_axis = function(dh_mat){
	if(dh_mat.length === 6){return dh_mat}
	let dh_6 = Vector.make_matrix(6, 4);
    for(let i = 0; i < dh_mat.length; i++){
    	for(let j = 0; j < dh_mat[i].length; j++){
        	dh_6[i][j] = dh_mat[i][j];
        }
    }
    
    dh_6[4][1] += 90;
    dh_6[4][2] = 0;
    dh_6[4][3] += 90;
    
    dh_6[5][0] = dh_mat[4][2];
    dh_6[5][3] = -90;
    
    return dh_6
};
/*

var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/cal_data_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")
var dh_mat_6 = DH.add_sixth_axis(dh_mat)

DH.mat_to_s_param(dh_mat_6, true)

*/

DH$1.mat_to_s_param = function(dh_mat, print = false){
	var str_array = [];
    for(let i = 0; i < dh_mat.length; i++){
    	str_array.push("S JointDH " + (i + 1) + ", "
        	+ Math.round(dh_mat[i][0]/_um) + ", "
            + Math.round(dh_mat[i][1]/_arcsec) + ", "
            + Math.round(dh_mat[i][2]/_um) + ", "
            + Math.round(dh_mat[i][3]/_arcsec) + ";\n"
        );
        if(print){out(str_array[i]);}
    }
    return str_array
};

DH$1.force_to_torque = function(force_vector, J_angles, dh_mat){
	let jac = DH$1.geometric_jacobian(J_angles, dh_mat);
    let torques; 
    if(force_vector.length === 3){
        torques = Vector.matrix_multiply(
            Vector.transpose(Vector.pull(jac, [0, 2], [0, 5])),
            Vector.transpose(force_vector)
        );
    }else if(force_vector.length === 6){
    	torques = Vector.matrix_multiply(
        	Vector.transpose(jac),
            Vector.transpose(force_vector)
        );
    }
    torques = Vector.transpose(torques);
    torques = Vector.multiply(torques, DH$1.sign_swap);
	return torques
};

DH$1.torque_to_force = function(torques, angles, dh_mat){
    let jac = DH$1.geometric_jacobian(angles, dh_mat);
    let T = Vector.multiply(torques.slice(), DH$1.sign_swap); //t = 1x6 needs to be 6x1 for matrix multiply, sign swap may not be needed 
    let forces = Vector.matrix_multiply(Vector.transpose(Vector.inverse(jac)), Vector.transpose(T));
    return Vector.transpose(forces)
};

/*

var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out", _um*_cm, _arcsec*_rad)

var fp = choose_save_file()
write_file(fp, JSON.stringify(dh_mat))

var dh_mat = [
    [0.2465932006, 93.65331946005284, 0.0038729666, 93.05939542032479],
    [0.0907698793, 91.13789493772651, 0.3380409702, 176.51443339299567],
    [0.06146, -1.8286469423193792, 0.3055877615, -0.36841014339573397],
    [0.0393, 88.92047493197245, 0.0004895402, 89.6277260128728],
    [0.060364807799999996, 89.50574387124725, 0, 90.0000001836389],
    [0.0810977499, 0, 0, -90.0000001836389]
]

L = [
	dh_mat[0][0],
    dh_mat[1][2],
    dh_mat[2][2],
    dh_mat[4][0],
    dh_mat[5][0],
]



var dh_mat_cm = [
    [0.2465932006/_cm, 93.65331946005284, 0.0038729666/_cm, 93.05939542032479],
    [0.0907698793/_cm, 91.13789493772651, 0.3380409702/_cm, 176.51443339299567],
    [0.06146/_cm, -1.8286469423193792, 0.3055877615/_cm, -0.36841014339573397],
    [0.0393/_cm, 88.92047493197245, 0.0004895402/_cm, 89.6277260128728],
    [0.060364807799999996/_cm, 89.50574387124725, 0/_cm, 90.0000001836389],
    [0.0810977499/_cm, 0, 0/_cm, -90.0000001836389]
]


var force = [0, 0, 10, 0, 0, 3]
var J_angles = [0, 45, 90, -45, 0, 0]
//debugger
var torque = DH.force_to_torque(force, J_angles, dh_mat_cm)
inspect(torque)
var force_2 = DH.torque_to_force(torque, J_angles, dh_mat_cm)
inspect(force_2)

*/

DH$1.cart_vel_to_ang_vel = function(cart_vel, J_angles, dh_mat){
	let jac = DH$1.geometric_jacobian(J_angles, dh_mat);
    
    let ang_vels; 
    if(cart_vel.length === 3){
        ang_vels = Vector.matrix_multiply(
            Vector.transpose(Vector.pull(jac, [0, 2], [0, 5])),
            Vector.transpose(cart_vel)
        );
    }else if(cart_vel.length === 6){
    	ang_vels = Vector.matrix_multiply(Vector.transpose(jac), Vector.transpose(cart_vel));
    }
    ang_vels = Vector.transpose(ang_vels);
    ang_vels = Vector.multiply(ang_vels, DH$1.sign_swap, _rad);
	return ang_vels
};
/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")

var J_angles = [0, 0, 90, 0, 0, 0]
var cart_vel = [0.5, 0, 0] // (m/s)
var ang_vel = DH.cart_vel_to_ang_vel(cart_vel, J_angles, dh_mat)
inspect(ang_vel)

var fk = DH.forward_kinematics(J_angles, dh_mat)
var xyz_0 = fk[0]
var r_e = Vector.get_DCM_from_pose(fk[2][6])

var dt = 0.1
var xyz_1 = Vector.add(xyz_0, Vector.multiply(cart_vel, dt))
var J_angles_1 = DH.inverse_kinematics(xyz_1, r_e, dh_mat)
var ang_vel_1 = Vector.divide(Vector.subtract(J_angles_1, J_angles), dt)
inspect(ang_vel)


*/

//Adapted from this Python code written by Karime:
//https://github.com/HaddingtonDynamics/OCADO/blob/deca6a246878f19100aa1afcfcdede735e76c6ae/DDE/ForceControl/PositionalAccuracy/Dexter_simulator/scripts/robotModel.py#L412
DH$1.geometric_jacobian = function(angles, dh_mat){
	let link_n = dh_mat.length;
	Vector.identity_matrix(4);
    let pt_im1 = Vector.make_matrix(4, link_n, 0);
    Vector.transpose([0, 0, 0, 1]);
    Vector.transpose([0, 0, 1]);
    let q_angles = angles.slice();
    
    let [pt_e, dir_6, T_global] = DH$1.forward_kinematics(q_angles, dh_mat);
    
    let g_jacobian = Vector.make_matrix(6, link_n);
    for(let i = 0; i < link_n; i++){
    	for(let j = 0; j < pt_im1.length; j++){
        	pt_im1[j][i] = T_global[i][j][3];
        }
        for(let j = 3; j < 6; j++){
        	g_jacobian[j][i] = T_global[i][j-3][2];
        }
    }
    let a;
    for(let i = 0; i < link_n; i++){
    	a = Vector.cross(
        	Vector.transpose(Vector.pull(g_jacobian, [3, 5], [i, i])),
            [...Vector.subtract(pt_e, Vector.transpose(pt_im1)[i].slice(0, 3)), 1]
        );
    	for(let j = 0; j < 3; j++){
        	g_jacobian[j][i] = a[j];
        }
    }
    return g_jacobian
};
/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")

var J_angles = [30, 30, 30, 30, 30]
debugger
var jac = DH.geometric_jacobian(J_angles, dh_mat)

var pt_0 = Vector.transpose([0, 0, 0, 1])
var A = [
	[1, 2, 3, 4],
    [5, 6, 7, 8],
    [9, 10, 11, 12],
    [13, 14, 15, 16],
]
a = Vector.matrix_multiply(A, pt_0)



*/

DH$1.torques_gravity = function(J_angles, dh_mat, g = [0, 0, -9.81], masses = [1.838, 2.520, 0.288, 0.100, 0.044, 0]){    
    let CoM_local = [
        [0, 182.4*_mm - 246.593*_mm, 37.5*_mm, 1],
        [-61.15*_mm - 339.092*_mm, 0, 100.76*_mm - 90.7698793*_mm, 1],
        [100*_mm - 307.5*_mm, 0, 39.3*_mm - 29.31*_mm, 1],
        [0, 0, 15.59*_mm, 1],
        [0, 0, 30*_mm, 1],
        [0, 0, 0, 1],
    ];
    /*
    let masses = [
        1.838,
        2.520,
        0.288,
        0.100,
        0.044,
        10
    ] // kg
    */
    
    
    
	let fk = DH$1.forward_kinematics(J_angles, dh_mat);
    let hts = fk[2];
    let CoM_global = [];
    for(let i = 0; i < CoM_local.length; i++){
    	CoM_global.push(Vector.transpose(Vector.matrix_multiply(hts[i+1], Vector.transpose(CoM_local[i]))).slice(0, 3));
    }
    
    let J_xyz, moment_arm, rot_axis, force_vector, torque_vector, torque_sum, proj_torque;
    let torques = [];
    for(let i = 0; i < CoM_local.length; i++){
    	J_xyz = Vector.get_xyz_from_pose(hts[i]);
        rot_axis = Vector.transpose(Vector.pull(hts[i], [0, 2], [2, 2]));
        torque_sum = 0;
    	for(let j = i; j < CoM_local.length; j++){
        	moment_arm = Vector.subtract(CoM_global[j], J_xyz);
            force_vector = Vector.multiply(masses[j], g);
        	torque_vector = Vector.cross(moment_arm, force_vector);
        	proj_torque = Vector.dot(torque_vector, rot_axis);
        	torque_sum += proj_torque;
        }
        torques.push(torque_sum);
    }
    let torque_sign_swap = [-1, -1, 1, 1, -1, 1];
    torques = Vector.multiply(torques, torque_sign_swap);
    return [torques, CoM_global]
};

/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")
//var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat_clean.out")
var J_angles = [0, 0, 0, 0, 0, 0]

var T = DH.torques_gravity(J_angles, dh_mat)
//inspect(Vector.multiply(T, 1/_mm))
inspect(T)

?8
8?

*/







/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")

var force = [10, 0, 0] //N
var J_angles = [0, 0, 90, 0, 0]
debugger
var Ts_jac = DH.force_to_torques_jac(force, J_angles, dh_mat)
var Ts = DH.force_to_torques(force, J_angles, dh_mat)
out(Ts)

[
-3.7475600021236835,
0.37318860797607323,
0.20030288429353235,
0.029624905455625065,
-0.8103307408401627
]

*/

DH$1.move_to = function(xyz, dir, roll, dh_mat){
	return function(){
    	if(dh_mat === undefined){
        	//total hack to make my code work:
            var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/";
            var dh_mat = DH$1.parse_dh_mat_file(folder + "dh_mat.out");
        }

        //var r = Vector.make_dcm

        var T = [
            [-1, 0, 0],
            [0, 0, 1],
            [0, 1, 0]
        ];
        
        DH$1.last_angles = DH$1.inverse_kinematics(xyz, T, dh_mat, DH$1.last_angles); //Also kind of a hack to get the code to work
        if(Vector.max(Vector.abs(DH$1.last_angles)) > 180){
        	dde_error("Kinematics Failure");
        }
        return Dexter.move_all_joints(DH$1.last_angles)
    }
};

DH$1.J_angles_to_xyz = function(J_angles, dh_mat){
	let dh_mat_temp = JSON.parse(JSON.stringify(dh_mat));
	let fk = DH$1.forward_kinematics(J_angles, dh_mat_temp);
	return {
    	xyz: [fk[2][6][0][3], fk[2][6][1][3], fk[2][6][2][3]],
		dir: [-fk[2][6][0][1], -fk[2][6][1][1], -fk[2][6][2][1]],
        //dh_mat: dh_mat_temp
    }
};
/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")
var J_angles = [0, 0, 90, 0, 0, 0]
var position = DH.J_angles_to_xyz(J_angles, dh_mat)
inspect(position)
*/

DH$1.xyz_to_J_angles = function(xyz, dir, roll, dh_mat){
	if(dir !== undefined){
    	dde_error("DH.xyz_to_J_angles does not support 'dir' yet, it will default to [0, 0, -1]");
    }
    if(roll !== undefined){
    	dde_error("DH.xyz_to_J_angles does not support 'roll' yet, it will default to 0");
    }
    
    let T = [
        [-1, 0, 0],
        [0, 0, 1],
        [0, 1, 0]
    ];

    DH$1.last_angles = DH$1.inverse_kinematics(xyz, T, dh_mat, DH$1.last_angles); //Kind of a hack, last_angles belongs on robot instance
    if(Vector.max(Vector.abs(DH$1.last_angles)) > 180){
        dde_error("Kinematics Failure");
    }
    return DH$1.last_angles
};

/*
var folder = "C:/Users/james/Documents/dde_apps/2021/Code/MoveWithForce/data_set_HDI_000047/"
var dh_mat = DH.parse_dh_mat_file(folder + "dh_mat.out")
var dh_mat = DH.add_sixth_axis(dh_mat)
var J_angles = DH.xyz_to_J_angles([0, 0.4, 0.5], undefined, undefined, dh_mat).slice(0, 5)
inspect(J_angles)
*/


DH$1.last_angles = undefined;

/*
new Job({
    name: "my_job",
    show_instructions: false,
    do_list: [
        //DH.move_to([(8.5*25)*_mm, 387.5*_mm, 50*_mm])
    ]
})
*/


DH$1.maintain_force = function(job, xyz, goal_force, dh_mat, lin_fits, mag_thresh = 0.05){
    job.user_data.maintain_force_complete = false;
    job.user_data.cur_force_xyz = xyz.slice();
	return Robot.loop(function(){
    	return !job.user_data.maintain_force_complete
    }, function(){
    	let CMD = [];
    	let rs = this.robot.robot_status;
        this.user_data.meas = [
            rs[Dexter.J1_MEASURED_ANGLE],
            rs[Dexter.J2_MEASURED_ANGLE],
            rs[Dexter.J3_MEASURED_ANGLE],
            rs[Dexter.J4_MEASURED_ANGLE],
            rs[Dexter.J5_MEASURED_ANGLE]
        ];
        this.user_data.step_angles = Vector.multiply(JSON.parse(this.user_data.StepAngles), _arcsec);
        let disps = Vector.subtract(this.user_data.meas, this.user_data.step_angles);
        
        this.user_data.torques = DH$1.disps_to_torques(disps, lin_fits);
        this.user_data.torques.push(0);
        this.user_data.meas_force = DH$1.torque_to_force(this.user_data.torques, this.user_data.meas, dh_mat);
        
        let Ps = [-0.1, -0.1, -0.1];
        let force_error = Vector.subtract(goal_force, this.user_data.meas_force.slice(0, 3));
        let d_xyz = Vector.multiply(Ps, force_error, _mm); 
        this.user_data.cur_force_xyz = Vector.add(this.user_data.cur_force_xyz, d_xyz);
        
        //out(Vector.round(this.user_data.meas_force.slice(0, 3), 2), "blue", true)
        let error_mag = Vector.magnitude(force_error);
        
        if(error_mag < mag_thresh){
        	this.user_data.maintain_force_complete = true;
            speak("complete");
            out("maintain_force complete!");
            out("Force error magnitude: " + error_mag);
            return
        }

        CMD.push(DH$1.move_to(this.user_data.cur_force_xyz));
        CMD.push(Dexter.empty_instruction_queue());
        CMD.push(Dexter.read_from_robot("#StepAngles", "StepAngles"));
        CMD.push(Dexter.empty_instruction_queue());
        return CMD
    })
};

DH$1.disps_to_torques = function(disps, lin_fits){
	let torques = [];
	for(let i = 0; i < disps.length; i++){
    	torques.push(lin_fits[i][0][0] * disps[i] + lin_fits[i][1][0]);
    }
    return torques
};

//The following is here to patch a bug in some versions of DDE


/*

var r_des = [
	[0, -1, 0],
    [0, 0, 1],
    [-1, 0, 0]
]
var r_nominal = [
	[-0.85884, -0.28507, -0.42560],
    [-0.47832, 0.14896, 0.86546],
    [-0.18332, 0.94686, -0.26429]
]

debugger
Vector.DCM_to_quaternion(Vector.matrix_multiply(r_des, Vector.transpose(r_nominal)))

should return:
[something, 0.24305, -0.59099, -0.09054]


*/

/*

Vector.euler_angles_to_DCM = function(euler_angles = [0, 0, 0], euler_sequence = "ZYX"){
    	//default could be ZX'Z'
        let dim = Vector.matrix_dimensions(euler_angles)
        if(dim[0] == 2 && dim[1] == 3){
        	euler_sequence = euler_angles[1]
            euler_angles = euler_angles[0]
        }
        
        var result = []
        let elt = ""
        for(let char of euler_sequence){
        	if(elt.length == 1){
            	if(char == "'"){
                	elt += char
                    result.push(elt)
                    elt = ""
                }else{
                	result.push(elt)
                    elt = char
                }
            }else{
            	elt = char
            } 
        }
        if((elt != "'") && (elt.length == 1)){
        	result.push(elt)
        }
          
        
    	let DCM = Vector.identity_matrix(3)
        if(result.length == 3){
        	for(var i = 0; i < 3; i++){
        	DCM = Vector.rotate_DCM(DCM, result[i], euler_angles[i]) 
            }
        }
        //return Vector.transpose(DCM)
        return DCM
    }

*/

/*
       outer_bound_factor = 1.1
       inner_bound_factor = 0.9
       
       move = 180
       outer_boundary = move*outer_bound_factor
       
       inner_boundary = user defined
       inner_boundary = move*inner_bound_factor

  new Job({
	name: "my_job",
	do_list: [calibrate]})new Job({
	name: "my_job",
	do_list: [calibrate]})
       
*/

function calibrate_build_tables({
	J_move_max = [180, 100, 165, 110, 180],
    J_move_min = [-180, -100, -165, -110, -180],
    inner_factor = 1,
    outer_factor = 1.1,
    diff_beta = 5,
    xyz_beta = 5,
    move_speed = 35,
    cal_speed = 30
} = {}){
	
	let DIFF_BETA = 52;
	let XYZ_BETA = 28;
	let J_boundary_max_defaults = [150, 90, 150, 90, 140];
    let J_boundary_min_defaults = [-150, -90, -150, -90, -140];


	let J_move_max_final = [0, 0, 0, 0, 0];
    let J_move_min_final = [0, 0, 0, 0, 0];
	for(let i = 0; i < 5; i++){
        let def_move_max = J_boundary_max_defaults[i];
        let def_move_min = J_boundary_min_defaults[i];
        
        
        if(J_move_max[i] == null){
        	J_move_max_final[i] = def_move_max;
        }else {
        	J_move_max_final[i] = J_move_max[i];
        }
        if(J_move_min[i] == null){
        	J_move_min_final[i] = def_move_min;
        }else {
        	J_move_min_final[i] = J_move_min[i];
        }
        
    }
    
    //Joint 3 moves the opposite direction (2=3)
    J_move_max_final[2] *= -1;
    J_move_min_final[2] *= -1;
    
	let J_outer_max = Vector.multiply(outer_factor, J_move_max_final); 
	let J_outer_min = Vector.multiply(outer_factor, J_move_min_final); 

    let J_inner_max = Vector.multiply(inner_factor, J_move_max_final); 
	let J_inner_min = Vector.multiply(inner_factor, J_move_min_final); 

    
    return [
    	make_ins("w", 42, 832),
        make_ins("w", 42, 512),
        make_ins("w", 79, 50 ^ 100 ),
        make_ins("w", 80, 50 ^ 100 ),
        make_ins("w", 81, 200 ^ 100 ),
        
        //Setting Outer Boundaries. Must be larger than move.
        Dexter.set_parameter("J1BoundryHigh", J_outer_max[0]),
        Dexter.set_parameter("J1BoundryLow", J_outer_min[0]),
        Dexter.set_parameter("J2BoundryHigh", J_outer_max[1]),
        Dexter.set_parameter("J2BoundryLow", J_outer_min[1]),
        Dexter.set_parameter("J3BoundryHigh", J_outer_max[2]),
        Dexter.set_parameter("J3BoundryLow", J_outer_min[2]),
        Dexter.set_parameter("J4BoundryHigh", J_outer_max[3]),
        Dexter.set_parameter("J4BoundryLow", J_outer_min[3]),
        Dexter.set_parameter("J5BoundryHigh", J_outer_max[4]),
        Dexter.set_parameter("J5BoundryLow", J_outer_min[4]),

		//Actual calibration movement:
		make_ins("S", "MaxSpeed", move_speed),
        Dexter.move_all_joints(J_move_max_final),
        make_ins("F"),
        make_ins("S", "MaxSpeed", cal_speed),
        make_ins("w", 42, 3079),
        Dexter.move_all_joints(J_move_min_final),
        make_ins("F"),
        make_ins("w", 42, 0),
        make_ins("S", "MaxSpeed", move_speed),
        make_ins("a", ...[0, 0, 0, 0, 0]),

		//Take a bow, loads tables:
        //make_ins("a", ...[20000,20000,20000,20000,20000].arcsec()),
        make_ins("a", [2, 2, 2, 2, 2]),
        make_ins("a", ...[0, 0, 0, 0, 0]),
        make_ins("F"),

        Dexter.set_parameter("J1BoundryHigh", J_inner_max[0]),
        Dexter.set_parameter("J1BoundryLow", J_inner_min[0]),
        Dexter.set_parameter("J2BoundryHigh", J_inner_max[1]),
        Dexter.set_parameter("J2BoundryLow", J_inner_min[1]),
        Dexter.set_parameter("J3BoundryHigh", J_inner_max[2]),
        Dexter.set_parameter("J3BoundryLow", J_inner_min[2]),
        Dexter.set_parameter("J4BoundryHigh", J_inner_max[3]),
        Dexter.set_parameter("J4BoundryLow", J_inner_min[3]),
        Dexter.set_parameter("J5BoundryHigh", J_inner_max[4]),
        Dexter.set_parameter("J5BoundryLow", J_inner_min[4]),
        make_ins("w", 79, 50 ^ 100 ),
        make_ins("w", 80, 50 ^ 100 ),
        make_ins("w", 81, 200 ^ 100 ),

        make_ins("w", DIFF_BETA, 5),
        make_ins("w", XYZ_BETA, 5),


        Dexter.sleep(1),
        make_ins("w", 42, 12960),
        
        //Set calibration state
        make_ins("F")
    ]
}

globalThis.calibrate_build_tables = calibrate_build_tables;

//__________out  and helper fns_______
//out itself is now defined in je_and_browser_code as it is called in the browser

//require("./je_and_browser_code.js") //don't set SW from this.
function format_text_for_code$1(text, code=null){
    if (code === null) {
        code = DDE_DB.persistent_get("default_out_code");
        if ((code === undefined) || (code === null) || (code == false)) { code = false; }
    }
    if (code) { //cut off timing info: too confusing to see it.
        let timing_index = text.indexOf(" <span style='padding-left:50px;font-size:10px;'>");
        if (timing_index !== -1) { text = text.substring(0, timing_index); }
        text = Utils.replace_substrings(text, "<",   "&lt;");
        text = Utils.replace_substrings(text, ">",   "&gt;");
        text = Utils.replace_substrings(text, "\\\\n", "\n");
        text = "<pre><code>" + text + "</code></pre>";
    }
    return text
}

globalThis.format_text_for_code = format_text_for_code$1;

/*
 StackTrace.get(function(sf){
 return sf.functionName == show_output
 })then(function(sf){
 var lineno = sf.lineNumber
 var colno  = sf.columnNumber
 }catch("errorcb")
 out_aux = function(text, color){
 */

//for use when clicking the "code" checkbox to "redo" the last output
globalThis.prev_out_val   = "";
globalThis.prev_out_color = "black";
globalThis.prev_out_src   = null;
globalThis.prev_src_label = "";

//globalThis.prev_out_temp = false //don't capture temp outputs to redisplay.


//text is a string that represents a result from eval.
// It has been trimmed, and stringified, with <code> </code> wrapped around it probably.
//never passed 'dont_print, always prints <hr/> at end whereas regular output never does
//ui only
globalThis.out_eval_result = function (text, color="#000000", src, src_label="The result of evaling JS"){
    //if(!temp && (val !== undefined) && (val !== "")) {
        globalThis.prev_out_val   = text;
        globalThis.prev_out_color = color;
        globalThis.prev_out_src   = src;
        globalThis.prev_src_label = src_label;
    //}
    if (text != '"dont_print"'){
        //var existing_temp = $("#temp")
        //if (existing_temp.length > 0){
        //    existing_temp.remove()
        //}
        let existing_temp_elts = [];
        if(globalThis["document"]){
            existing_temp_elts = document.querySelectorAll("#temp");
        }
        for(let temp_elt of existing_temp_elts){ temp_elt.remove(); }

        if (Utils.starts_with_one_of(text, ['"<svg ', '"<circle ', '"<ellipse ', '"<foreignObject ', '"<line ', '"<polygon ', '"<polyline ', '"<rect ', '"<text '])) {
            text = text.replace(/\</g, "&lt;"); //so I can debug calls to svg_svg, svg_cirle etc
        }
        if (color && (color != "#000000")){
            text = "<span style='color:" + color + ";'>" + text + "</span>";
        }
        text = format_text_for_code$1(text);
        let src_formatted = "";
        let src_formatted_suffix = ""; //but could be "..."
        if(src) {
            src_formatted = src.trim();
            let src_first_newline = src_formatted.indexOf("\n");
            if (src_first_newline != -1) {
                src_formatted = src_formatted.substring(0, src_first_newline);
                src_formatted_suffix = "...";
            }
            if (src_formatted.length > 55) {
                src_formatted = src_formatted.substring(0, 55);
                src_formatted_suffix = "...";
            }
            src_formatted = Utils.replace_substrings(src_formatted, "<", "&lt;");
            src = Utils.replace_substrings(src, "'", "&apos;");
            src_formatted = " <code title='" + src + "'>&nbsp;" + src_formatted + src_formatted_suffix + "&nbsp;</code>";
        }
        //if (src_formatted == "") { console.log("_____out_eval_result passed src: " + src + " with empty string for src_formatted and text: " + text)}
        let the_html = "<fieldset><legend><i>" + src_label  + " </i>" + src_formatted + " <i>is...</i></legend>" +  text + "</fieldset>";
        SW.append_to_output(the_html);
    }
    //$('#js_textarea_id').focus() fails silently
    if(globalThis["document"]){
        let orig_focus_elt = document.activeElement;
        if(orig_focus_elt.tagName != "BUTTON"){ //if user clicks eval button, it will be BUTTON
           //calling focus on a button draws a rect around it, not good.
           //if user hits return in cmd line, it will be INPUT,
           //Its not clear that this is worth doing at all.
            orig_focus_elt.focus();
        }
    }
};

function get_output(){ //rather uncommon op, used only in SW.append_to_output
    return output_div_id.innerHTML
}

globalThis.get_output = get_output;

//value can either be some single random js type, or a literal object
//with a field of speak_data, in which case we use that.
function stringify_for_speak(value, recursing=false){
    var result;
    if ((typeof(value) == "object") && (value !== null) && value.hasOwnProperty("speak_data")){
        if (recursing) {
            dde_error('speak passed an invalid argument that is a literal object<br/>' +
                'that has a property of "speak_data" (normally valid)<br/>' +
                'but whose value itself is a literal object with a "speak_data" property<br/>' +
                'which can cause infinite recursion.');
        }
        else { return stringify_for_speak(value.speak_data, true) }
    }
    else if (typeof(value) == "string") { result = value; }
    else if (value === undefined)       { result = "undefined"; }
    else if (value instanceof Date){
        var mon   = value.getMonth();
        var day   = value.getDate();
        var year  = value.getFullYear();
        var hours = value.getHours();
        var mins  = value.getMinutes();
        if (mins == 0) { mins = "oclock, exactly"; }
        else if(mins < 10) { mins = "oh " + mins; }
        result    = Utils.month_names[mon] + ", " + day + ", " + year + ", " + hours + ", " + mins;
        //don't say seconds because this is speech after all.
    }
    else if (Array.isArray(value)){
        result = "";
        for (var elt of value){
            result += stringify_for_speak(elt) + ", ";
        }
    }
    else {
        result = JSON.stringify(value, null, 2);
        if (result == undefined){ //as happens at least for functions
            result = value.toString();
        }
    }
    return result
}

globalThis.stringify_for_speak = stringify_for_speak;

function speak$1({speak_data = "hello", volume = 1.0, rate = 1.0, pitch = 1.0, lang = "en_US", voice = 0, callback = null, node_callback = null} = {}){
    if (arguments.length > 0){
        var speak_data = arguments[0]; //, volume = 1.0, rate = 1.0, pitch = 1.0, lang = "en_US", voice = 0, callback = null
    }
    var text = stringify_for_speak(speak_data);
    if(globalThis.platform == "node"){
        let cmd_string = "espeak \"" + text + "\" -a "+ (volume*200) + " -p " + (pitch * 50) + " -s " + (rate * 37 + 130);
        if(node_callback) {
            exec(cmd_string, node_callback); //node_callback passed 3 args,
                                            // 1. an error obj (or null if no error)
                                            // 2. string of stdout
                                            // 3. string of stderr
          //see https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback
        }
        else {
            exec(cmd_string);
        }
    }
    else {
        var msg = new SpeechSynthesisUtterance();
        //var voices = globalThis.speechSynthesis.getVoices();
        //msg.voice = voices[10]; // Note: some voices don't support altering params
        //msg.voiceURI = 'native';
        msg.text   = text;
        msg.volume = volume; // 0 to 1
        msg.rate   = rate;   // 0.1 to 10
        msg.pitch  = pitch;  // 0 to 2
        msg.lang   = lang;
        var voices = globalThis.speechSynthesis.getVoices();
        msg.voice  = voices[voice]; // voice is just an index into the voices array, 0 thru 3
        msg.onend  = callback; //this callback takes 1 arg, an event.
        speechSynthesis.speak(msg);
        }
    return speak_data
}

globalThis.speak = speak$1;

//______show_window_____
//output the "vals" to inspector or stdout.
//this use to be the default show_window callback
//good for debugging
function show_window_values(vals){
    if(platform == "dde") { inspect(vals); }
    else {
        let str = JSON.stringify(vals);
        globalThis.write_to_stdout(str);
    }
}

function show_window$1({content = `<input type="submit" value="Done"/>`,
                      title = "DDE Information",
                      title_bar_height = 25,
                      title_bar_color = "#b8bbff",
                      width = 400, height = 400, //the outer width of the dialog. Content region is smaller
                      x = 200, y = 200,
                      resizable = true,
                      draggable = true,
                      background_color = "rgb(238, 238, 238)",
                      is_modal = false,
                      show_close_button = true,
                      show_collapse_button = true,
                      trim_strings = true,
                      window_class,
                      callback = null, //show_window_values,
                      close_same_titled_windows = true,
                      job_name = null, //this really is a param, but its only used internally with Human instructions and some browser interactions.
                      init_elt_id = null} = {}){
    //callback should be a string of the fn name or anonymous source.
    //onsole.log("top of show_window")
    if ((platform == "dde") && close_same_titled_windows){
        //this attempt to set a window to the loc of the prev window of the same title doesn't work,
        //but worse, sometimes sets the window to very small as it doesn't really find the window
        //sp just don't do it.
        let latest_win = SW.latest_window_of_title(title);
        if(latest_win){
            //x = Math.max(0, latest_win.offset().left) //user might have repositioned the old window. let's preserve that
            //y = Math.max(0, latest_win.offset().top)
            var style = globalThis.getComputedStyle(latest_win, null);
            x = parseInt(style.getPropertyValue("left"), 10);
            y = parseInt(style.getPropertyValue("top"),  10);
            width =  parseInt(style.getPropertyValue("width"), 10); //user might have resized the old window. let's preserve that
            height = parseInt(style.getPropertyValue("height"), 10);
            SW.close_window(title);
        }
    }
    //onsole.log("show_window after close_same_titled_windows")
    if ((arguments.length > 0) && (typeof(arguments[0]) == "string")){
        var content = arguments[0]; //all the rest of the args will be bound to their defaults by the js calling method.
    }
    if (typeof(content) !== "string"){
        content = Utils.stringify_value(content);
    }
    //onsole.log("show_window before callback")
    if (typeof(callback) === "function"){
        let fn_name = callback.name;
        if (fn_name && (fn_name != "")) {
            if(fn_name == "callback") { //careful, might be just JS being clever and not the actual name in the fn def
                fn_name = Utils.function_name(callback.toString()); //extracts real name if any
                if ((fn_name == "") || (fn_name == null)) { //nope, no actual name in fn
                    callback = callback.toString(); //get the src of the anonymous fn
                }
                else { callback = fn_name; }
            }
            else { callback = fn_name; }
        }
        else { callback = callback.toString(); } //using the src of an annonymous fn,
              //or, if callback passed in is a string, then this just sets callback back
              //to that same string.
    }
    if (!job_name){
        let latest_job = Job.job_id_to_job_instance(Job.job_id_base);
        if (latest_job) { job_name = latest_job.name; }
        else { job_name = ""; }
        //note that if there's no job name, that's ok for running a show_window in DDE
        //before you've made the first job. But in the browser, we are always running a job,
        //so the_job_name should never be null in the browser.
    }
    //onsole.log("middle of show_window")
    //var the_instruction_id = null
    //if(arguments[0]) {the_instruction_id =  arguments[0].the_instruction_id}
    //Warning: do not put newlines in the html for show_window as that will result in <br/> tags that
    //replace the newlines and thus screw up the html for the show_window.
    if(SW.window_index === null) { SW.window_index = 0; }
    else { SW.window_index += 1; }
    let the_sw_elt_id = 'show_window_' + SW.window_index + '_id';
    //let content_height = height - title_bar_height -21
    //let content_width  = width - 10
    content = '<div class="show_window_content" contentEditable="false" draggable="false"\n' +
              //'onresize="show_window_content_onresize(event)" ' +
        ' style="' +
        //'width:' + content_width + 'px; height:' + content_height + 'px; ' +
       // 'overflow:' + (resizable? "auto" : "visible") + '; resize:' + (resizable? "both" : "none") + "; " +
        'font-size:15px; padding:5px;\n' +

        'width:'    + width + 'px; height:' + (height - title_bar_height) + 'px;\n' +
        'overflow:' + (resizable? 'auto' : 'visible')                 + ';\n'   +
        'resize:'   + (resizable? 'both' : 'none')                    + ';\n'   +
        '">\n' +
        `<input type="hidden" name="window_callback_string" value='` + callback        + "'/>\n" +
        '<input type="hidden" name="trim_strings"           value="' + trim_strings    + '"/>\n' +
        '<input type="hidden" name="job_name"               value="' + job_name        + '"/>\n' +
        '<input type="hidden" name="show_window_elt_id"     value="' + the_sw_elt_id   + '"/>\n' +
        '<input type="hidden" name="window_index"           value="' + SW.window_index + '"/>\n' +
        content +
        '\n</div>\n'; //to allow selection and copying of window content


    var show_window_html =
        '<dialog class="show_window"' +
        ' data-window_index="' + SW.window_index +
        '" id="' + the_sw_elt_id +
        //'" data-show_window_title="' + title +
        // '" ondragstart="sw_dragstart(event)' +
        '"\nstyle="padding:0px; right:none; margin:0px; position:fixed; z-index:100;' +
         ' left:' + x + 'px; top:' + y + 'px; ' +

        //'width:'    + width + 'px; height:' + height + 'px; ' +
        //'overflow:' + (resizable? "auto" : "visible") + "; " +
        //'resize:'   + (resizable? "both" : "none") + "; " +

        'background-color:' + background_color + //if the content div doesn't take up the whole rest of the window, its good if this covers that extra area below the content
        ';">' +
        sw_make_title_html(title, width, title_bar_height, title_bar_color, show_close_button, show_collapse_button) +
        '<div draggable="false" background-color:' + background_color + ';">\n' + content + '</div>' +
        '</dialog>';
    //onsole.log("show_window produced html: " + show_window_html)
    let props = {job_name: job_name, kind: "show_window", html: show_window_html, draggable: draggable,
                 is_modal: is_modal, init_elt_id: init_elt_id, window_index: SW.window_index,
                 close_same_titled_windows: close_same_titled_windows};
    //Warning: evaling the below will cause 2 copies of the the show_window code to go to the browser.
    //then we get TWO such elements in the browser (one invisible) but that screws up
    //getting the right one and breaks dropping a dragged show_window dialog. Yikes!
    //onsole.log("near bottom of show_window with show_window_html:" + show_window_html)
    if(platform == "dde") {
        SW.render_show_window(props);
    }
    else {
        //onsole.log("bottom of show_window writing to stdout")
        globalThis.write_to_stdout("<for_server>" + JSON.stringify(props) + "</for_server>\n");
    }
    return SW.window_index
}

globalThis.show_window = show_window$1;

//can't get this to work well with shrinking the title bar below orig size.
//function show_window_content_onresize(event){ }
//module.exports.show_window_content_onresize = show_window_content_onresize

//if you change, this, also change get_show_window_title
function sw_make_title_html(title, title_bar_width, title_bar_height,  title_bar_color, show_close_button, show_collapse_button){
    if(title == "") { return "" } // with no title, there are no close nor collapse buttons and you can't drag it.
                                  //so its mostly good for "kiosk mode" type windows.
    else {
        let buttons = "";  // onclick="SW.sw_close(this)"  onclick="SW.sw_toggle(this)"
        if(show_close_button)    { buttons += '<button name="close_button"     title="close this window."                   style="float:right; background-color:#b8bbff; padding:0px; margin-top:0px;margin-left:5px;">X</button>'; }
        if(show_collapse_button) { buttons += '<button onclick="SW.sw_toggle(this)" name="collapse_button"  title="Toggle the shrinking or expanding of this window." style="float:right; background-color:#b8bbff; padding:0px; margin-top:0px;margin-right:5px;">&#8679;</button>'; //double headed updown arrow.
            //'<button onclick="function(event){ SW.sw_toggle(this, event)   }" ' + //"SW.sw_toggle(this)" ' +
            //                                             ' name="collapse_button"  title="toggle shrink/expand of this window." style="float:right; background-color:#b8bbff; padding:0px; margin-top:0px;margin-right:5px;">&#8679;</button>'  //double headed updown arrow.
        }
        if(buttons != "") {
            buttons = '<div style="float:right; position:absolute; right:5px; top:5px;">' + buttons + '</div>';
        }
        return  "<div " + //id='" + id +
                " class='show_window_title' " +
                " style='background-color: " + title_bar_color +
                "; padding:5px; height:" + title_bar_height +
                //"px; width:" + title_bar_width +
                "px; overflow: hidden; " +
                " font-size:20px; white-space:nowrap;'>" +
                title + buttons
                + "</div>" //DON'T DO. the content needs to be INSIDE the title for drag of title to work properly
    }
}

function beeps$1(times=1, callback){
    if (times == 0){
        if (callback){
            callback.call();
        }
    }
    else if (times > 0){
        beep();
        setTimeout(function(){beeps$1(times -1, callback);}, 1000);
    }
}

globalThis.beeps = beeps$1;

var audioCtx;

function beep({dur = 0.5, frequency = 440, volume = 1, waveform = "triangle", callback = null}={}){
    if(globalThis.platform == "node"){
        exec("espeak \"" + "beep" + "\" -a "+ (volume*200) + " -p " + (frequency * 100) + " -s 300",
            callback );//this callback takes 2 args, an err object and a string of the shell output
                       //of calling the command.
    }
    else {
        if(!audioCtx) {  audioCtx = new globalThis.AudioContext(); }
        var oscillator = audioCtx.createOscillator();
        var gainNode = audioCtx.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(audioCtx.destination);

        if (volume){gainNode.gain.value = volume;}        if (frequency){oscillator.frequency.value = frequency;}
        if (waveform){oscillator.type = waveform;}
        if (callback){oscillator.onended = callback;}

        oscillator.start();
        setTimeout(function(){oscillator.stop();}, dur * 1000);
    }
}

globalThis.beep = beep;

var domain; // The domain module is executed on demand
var hasSetImmediate = typeof setImmediate === "function";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including network IO events in Node.js.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
var raw = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Avoids a function call
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory excaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

rawAsap.requestFlush = requestFlush;
function requestFlush() {
    // Ensure flushing is not bound to any domain.
    // It is not sufficient to exit the domain, because domains exist on a stack.
    // To execute code outside of any domain, the following dance is necessary.
    var parentDomain = process.domain;
    if (parentDomain) {
        if (!domain) {
            // Lazy execute the domain module.
            // Only employed if the user elects to use domains.
            domain = require$$0;
        }
        domain.active = process.domain = null;
    }

    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`
    // cannot handle recursion.
    // `requestFlush` will only be called recursively from `asap.js`, to resume
    // flushing after an error is thrown into a domain.
    // Conveniently, `setImmediate` was introduced in the same version
    // `process.nextTick` started throwing recursion errors.
    if (flushing && hasSetImmediate) {
        setImmediate(flush);
    } else {
        process.nextTick(flush);
    }

    if (parentDomain) {
        domain.active = process.domain = parentDomain;
    }
}

var freeTasks = [];

/**
 * Calls a task as soon as possible after returning, in its own event, with
 * priority over IO events. An exception thrown in a task can be handled by
 * `process.on("uncaughtException") or `domain.on("error")`, but will otherwise
 * crash the process. If the error is handled, all subsequent tasks will
 * resume.
 *
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */
var asap_1 = asap;
function asap(task) {
    var rawTask;
    if (freeTasks.length) {
        rawTask = freeTasks.pop();
    } else {
        rawTask = new RawTask();
    }
    rawTask.task = task;
    rawTask.domain = process.domain;
    raw(rawTask);
}

function RawTask() {
    this.task = null;
    this.domain = null;
}

RawTask.prototype.call = function () {
    if (this.domain) {
        this.domain.enter();
    }
    var threw = true;
    try {
        this.task.call();
        threw = false;
        // If the task throws an exception (presumably) Node.js restores the
        // domain stack for the next event.
        if (this.domain) {
            this.domain.exit();
        }
    } finally {
        // We use try/finally and a threw flag to avoid messing up stack traces
        // when we catch and release errors.
        if (threw) {
            // In Node.js, uncaught exceptions are considered fatal errors.
            // Re-throw them to interrupt flushing!
            // Ensure that flushing continues if an uncaught exception is
            // suppressed listening process.on("uncaughtException") or
            // domain.on("error").
            raw.requestFlush();
        }
        // If the task threw an error, we do not want to exit the domain here.
        // Exiting the domain would prevent the domain from catching the error.
        this.task = null;
        this.domain = null;
        freeTasks.push(this);
    }
};

/* Created by Fry on 7/11/16.
//
//On Mac, to see serial ports, open Terminal app and enter: ls /dev/tty.* or ls /dev/cu.*
// https://learn.sparkfun.com/tutorials/terminal-basics/all  geared toward windows, but servicable.
//for devices, mac and linux have both tty and cu for full duplex. windows only has tty.
//Macintosh problems
//sparkfun RedBoard is an arduino Uno, what james loaned me.
//didn't work for uploading programs to the board.
//Arduino Micro and Leonado have something special ie "mouse and kbd support
//that allows them to work on Mac.  I got Arduino Leonardo because
//arduino mciro can't take shields.
//Mike says some ardino boards don't work on mac, get a micro-arduino from Microcenter.
    // http://www.meetup.com/Cambridge-Hackspace/ tues 6:30PM union sq somerville
    //https://www.arduino.cc/en/Reference/Firmata  a Kketch for prototcol
    //that interfaces to javascript via https://github.com/firmata/firmata.js?utm_source=buffer&utm_medium=twitter&utm_campaign=Buffer&utm_content=buffer52691
//firmata provides the sketch for arduino and protolcoe. firmata .js is a way to use it
//from js, johnny 5 and cylon use firmata underneath and build on top of it.
//to make a "compiled" file of a arduino sketch, edit the sketch, then use File menu/Sketch/export compiled binary
//gort: CLI that can upload .hex files into an arduino board. for mac, win. linux
 The ATmega32U4 on the Micro comes preprogrammed with a bootloader that allows you to upload new code to it without the use of an external hardware programmer. It communicates using the AVR109 protocol.
 You can also bypass the bootloader and program the microcontroller through the ICSP (In-Circuit Serial Programming) header using Arduino ISP or similar; see these instructions for details.
temboo IOT js connectivity requires setting up a local js server to use.
// http://www.penvon.com/b/robotics-projects-github-cm596 johnny5 has 3 times the github stars as cylon
    // ie 6K vs 2K July, 2016


//strategy: sandbox never has to know connectionIDs, just paths.
//keep map between them on the UI side
*/


var serial_port_path_to_info_map = {};


//with an arduino connected, this disconnects but then immdiately afterwards,
//a new connection is automatically made with 1 higher port number and same port_path.
/*function serial_disconnect(port_path){
    let info = serial_port_path_to_info_map[port_path]
    if (info){
        if((info.simulate === false) || (info.simulate === "both")) {
            //info.port.close(out)
            //serial_flush(port_path) //perhaps unnecessary
            try { //serial_flush(port_path) //perhaps unnecessary
                  info.port.drain(function(err){
                        try { info.port.close(function(err){out(port_path + " closed. " + err)}) }
                        catch(err) { out("serial port error: " + err.message) }
                  //info.port.close(out)
            }
            catch(err) { out ("serial port already closed.") }
        }
        delete serial_port_path_to_info_map[port_path]
    }
}*/
//James N new version oct 20 , 2020
function serial_disconnect$1(port_path){
    let info = serial_port_path_to_info_map[port_path];
    if (info){
        if((info.simulate === false) || (info.simulate === "both")) {
            //info.port.close(function(err){out("closed"+err)})
            try {
              info.port.drain(function(err){
                    try { info.port.close(function(err){
                                             out(port_path + " closed. " + err);
                                          }); }
                    catch(err) {
                        out("Error closing serial port: " + err.message);
                    }
                });
            }
            catch(err) {
                out ("serial port already closed.");
            }
            out("closing: " + port_path);
        }
        delete serial_port_path_to_info_map[port_path];
        out("deleted: " + port_path);
    }
    else {
        out("no serial port found at " + port_path);
    }
}


function serial_disconnect_all(){
  for(let port_path of Object.keys(serial_port_path_to_info_map)){
      serial_disconnect$1(port_path);
  }
}

/**Created by Fry on 2/5/16. */
//import {Robot, Brain, Dexter, Human, Serial} from './robot.js' //now global
//import {Coor} from '../math/Coor.js' //now global
//import {Instruction, make_ins} from "./instruction.js" //now global

//import {speak} from "./out.js" //dde4 speak is now global
//import {_nbits_cf, _arcsec, _um} from "./units.js" //dde4 now has all units global
//import {linux_error_message} from "./linux_error_message.js" //now global
//import {write_to_stdout, close_readline} from "./stdio.js" //now these are global when in node

class Job$1{
    constructor({name="",
                 robot=Dexter.dexter0,
                 do_list=[],
                 keep_history=true,
                 show_instructions=true,
                 inter_do_item_dur=0.01,
                 user_data={},
                 default_workspace_pose=null,
                 program_counter=0,
                 ending_program_counter="end",
                 initial_instruction=null,
                 data_array_transformer="P",
                 get_dexter_defaults = true, //if true, always get defaults from Defaults.makeins file or error
                                                      //if false, always get idealized values from Dexter.defaults class.
                 start_if_robot_busy=false,
                 if_robot_status_error   = Job$1.prototype.if_robot_status_error_default,
                 if_instruction_error    = Job$1.prototype.if_instruction_error_default,
                 if_dexter_connect_error = Job$1.prototype.if_dexter_connect_error_default,
                 when_do_list_done = "run_when_stopped", //other possible value: "wait" (for another instruction)
                 when_stopped = "stop",
                 when_stopped_conditions = true, //{completed: true,
                                                // errored: true,
                                                //errored_from_dexter: true,
                                                //errored_from_dexter_connect, false, but this is always false and actually its value doesn't matter
                                                                             //but we set it to false just to indicate to users that
                                                                             //dexter_connect errors never run the when_stopped instruction
                                                //interrupted: true,
                                                //interrupted_by_stop_button: true
                                                //},
                 callback_param = "start_object_callback"} = {}){
    if (Job$1[name] && Job$1[name].is_active()) { //we're redefining the job so we want to make sure the
        /*//previous version is stopped.
        //if (Job[name].robot instanceof Dexter) {Job[name].robot.empty_instruction_queue_now() }
        Job[name].stop_for_reason("interrupted", "User is redefining this job.")
        let orig_args = arguments[0]
        setTimeout(function(){ new Job (orig_args) }, 200)
        return ["While attempting to define Job." +  name + ", there already is a Job with that name running<br/>" +
        "It is being stopped. Shortly the new Job will be defined."]
        //note this string must be wrapped in an array, because if a non-object is returned
        //from a JS constructor, it is ignored and an instance of the class is returned instead.
        //horrible JS design. https://javascript.info/constructor-new
        */
        //new, don't stop job algorithm
        warning("You have attempted to redefine the already running Job." + name +
                "<br/>If you want to redefine it, you must first stop it.<br/>" +
                "(click the Job's button)");
        return null //returning null minimizes, but doesn't eliminate, the inspector view of the new job.
                    //we want to minimze the inspector view because the warning ins printed in the out
                    //pane before the inspect of the job and we don't want to "hide" that warning
                    //fron the user.
    }

    for(let key in arguments[0]){
        if(!Job$1.job_default_params.hasOwnProperty(key)) {
            dde_error("Attempt to create a job with an invalid key of: " + key + "<br/>" +
                      "Click on 'Job' to see its valid argument names.");
        }
    }

    //default_workspace_pose=null, //Coor.Table,
    //data_array_transformer="P", //"P" is more efficient than Dexter.pid_move_all_joints, as uses make_ins & 1/2 the do_list items
    //start_if_robot_busy=false,  //if false and robot.is_busy() is true, Job.start is halted early
    //program_counter is the counter of the next instruction that should be executed.
    //so since we're currently "executing" 1 instruction, and after its done,
    //we'll be incrementing the pc, then internally we decriment the
    //passed in program_counter. If its negative, it means
    //compute it from the end, ie -1 means when set_next_do is called,
    //it will set the pc to the length of the do_list, hence we'll be done
    //with the job. -2 means we want to execute the last instruction of the
    //job next, etc.
    //save the args
    if (default_workspace_pose == null) {
          default_workspace_pose=Job$1.job_default_params.default_workspace_pose;
    }
    if (!Array.isArray(do_list)){
        DocCode.open_doc(job_param_do_list_doc_id);
        dde_error("While defining <code style='color:black;'>Job." + name + "</code><br/>" +
                  "the <b style='color:black;'>do_list</b> must be an array, but instead is: <br/>" +
                  "<code style='color:black;'>" + do_list + "</code>");
        return
    }
    try { do_list = Job$1.flatten_do_list_array(do_list); }
    catch(err){
        DocCode.open_doc(job_param_do_list_doc_id);
        dde_error("While defining Job." + name + "<br/>" + err.message);
        return
    }
    if((typeof(data_array_transformer) == "function") ||
        Robot.is_oplet(data_array_transformer)) ; //ok
    else {
        dde_error("Attempt to define Job." + name + " with a data_array_transformer of:<br/>" +
            data_array_transformer +
            "<br/>which not a function or an oplet.");
    }
    if (name === "") ; //ok as a name, it will be computed.
    else if(!Utils.is_string_an_identifier(name)){ //not ok as a name
        dde_error('You have attempted to make a new Job with an invalid name of: "' + name + '".<br/>Job names should start with a letter and be followed by only letters, digits or underscores.');
    }
    if (!Job$1.is_plausible_when_stopped_value(when_stopped)) {
        dde_error("new Job passed: " + when_stopped + " but that isn't a valid value.");
    }
    if(!Job$1.is_when_stopped_conditions_valid(when_stopped_conditions)){
        dde_error("While defining Job." + name + " when_stopped_conditions is not valid.<br/>" +
                   "Valid values are true, false, and a literal object containing one or more of the properties:<br/>" +
                   Job$1.when_stopped_conditions_property_names);
    }
    if (!(robot instanceof Robot)){
        if (!Dexter.dexter0){
            dde_error("Attempt to create Job." + name + " with no valid robot instance.<br/>" +
                " Note that Dexter.dexter0 is not defined<br/> " +
                " but should be in your file: Documents/dde_apps/dde_init.js <br/>" +
                " after setting the default ip_address and port.<br/> " +
                " To generate the default dde_init.js file,<br/>" +
                " rename your existing one and relaunch DDE.");
        }
        else {
            dde_error("Attempt to create Job." + name + " with no valid robot instance.<br/>" +
                "You can let the robot param to new Job default, to get a correct Robot.dexter.0");
        }
    }
    else if(!["run_when_stopped", "wait"].includes(when_do_list_done)){
        dde_error('Attempt to create Job.' + name + ' with invalid value for when_do_list_done of: "' + when_do_list_done +
                 '"<br/>Valid values are: ' + '"run_when_stopped" and "wait".');
    }

    else {
        this.orig_args =   {do_list: do_list,
                            robot: robot,
                            keep_history: keep_history,
                            show_instructions: show_instructions,
                            inter_do_item_dur: inter_do_item_dur,
                            user_data: user_data,
                            default_workspace_pose: default_workspace_pose,
                            program_counter: program_counter,
                            ending_program_counter: ending_program_counter,
                            initial_instruction: initial_instruction,
                            data_array_transformer: data_array_transformer,
                            get_dexter_defaults: get_dexter_defaults,
                            start_if_robot_busy: start_if_robot_busy,
                            if_robot_status_error: if_robot_status_error,
                            if_instruction_error:  if_instruction_error,
                            if_dexter_connect_error: if_dexter_connect_error,
                            when_do_list_done: when_do_list_done,
                            when_stopped: when_stopped,
                            when_stopped_conditions: when_stopped_conditions,
                            callback_param: callback_param};
        //setup name
        Job$1.job_id_base       += 1;
        this.job_id            = Job$1.job_id_base;
        if ((name == null) || (name == "")){ this.name = Job$1.generate_default_name(); }//"job_" + this.job_id }
        else                               { this.name = name; }
        this.robot = robot;
        this.user_data       = user_data; //needed in case we call to_source_code before first start of the job
                                         //this also has the desirable property, that if we define the job,
                                         //then set a user data variable in it ie Job.my_job.user_data.foo = 2,
                                         //that that will get into the org_args.user_data.foo and then
                                         //when we start the job, the "copying out of the user data from orig_args will
                                         //have the user_data.foo2, and start will pick that up and set Job.my_job.user_data
                                         //to the obj with foo = 2 at the start of the job.
                                         //now if during the course of the job,we eval  Job.my_job.user_data.bar=3, ok
                                         //that bar is in the user data for the rest of the job and when it ends.
                                         //NOW if we restart that same job, it will have in user data ONLY foo=2,
                                         //not bar=3. This is good as we want to reinit the job, but foo=2 is really
                                         //"part of the def". (until we redefine the job from its source!
                                         //Messaging.set_variable takes advantage of this if Job is not running when
                                         //Messaging.set_variable is called.
        this.program_counter = program_counter; //this is set in start BUT, if we have an unstarted job, and
                             //instruction_location_to_id needs access to program_counter, this needs to be set
        this.highest_completed_instruction_id = -1; //same comment as for program_counter above.
        this.sent_from_job_instruction_queue  = []; //will be re-inited by start, but needed here
          //just in case some instructions are to be inserted before this job starts.
        Job$1[this.name]         = this; //beware: if we create this job twice, the 2nd version will be bound to the name, not the first.
        Job$1.remember_job_name(this.name);
        this.set_status_code("not_started");//see Job.status_codes for the legal values
                                           //if no button yet, this call doesn't errur
        this.add_job_button_maybe(); //always calls color_job_button, even if a button isn't added
    }
    } //end constructor



    static generate_default_name(){
        for(let i = 2; i < 1000000; i++){
            let candidate = "job" + i;
            if (!Job$1[candidate])  { return candidate }
        }
        dde_error("Job.generate_default_name has found a million job names in use. Seems unlikely.");
    }

    static class_init(){ //inits the Job class as a whole. called by ready
        this.job_default_params =
               {name: null,
                robot: Dexter.dexter0,
                do_list: [],
                keep_history: true,
                show_instructions: true,
                inter_do_item_dur: 0.01,
                user_data:{},
                default_workspace_pose: Coor.Table, //null, //error on loading DDE if I use: Coor.Table, so we init this in Job.constructor
                program_counter:0,
                ending_program_counter:"end",
                initial_instruction: null,
                data_array_transformer: "P",
                get_dexter_defaults: true,
                start_if_robot_busy: false,
                if_robot_status_error: Job$1.prototype.if_robot_status_error_default,
                if_instruction_error: Job$1.prototype.if_instruction_error_default,
                if_dexter_connect_error: Job$1.prototype.if_dexter_connect_error_default,
                when_do_list_done: "run_when_stopped",
                when_stopped: "stop", //also can be any do_list item
                when_stopped_conditions: true,
                callback_param: "start_object_callback"};
    }

    //return an array of job instances that are defined in path_name.
    //warning might be a empty array
    static async instances_in_file(path_name){
        let base_id_before_new_defs = Job$1.job_id_base;
        out("top of instances_in_file passed path_name: " + path_name);
        try{ await DDEFile.load_file(path_name); }
        catch(err) {
            dde_error("In Job.instances_in_file, evaling the content of path name: " + path_name +
                      " errored with: " + err.message + "<br/> " + err.toString());
        }
        let result = [];
        for(let i = base_id_before_new_defs + 1; true; i++){
            let inst_maybe = Job$1.job_id_to_job_instance(i);  //returns null if no exist
            if(inst_maybe) { result.push(inst_maybe); }
            else { break; }
        }
        console.log("instances_in_file made result: " + result);
        return result
    }

    static instances_in_src(src){
        let base_id_before_new_defs = Job$1.job_id_base;
        try{ globalThis.eval(src); }
        catch(err) {
            dde_error("In Job.instances_in_src, evaling the src" +
                " errored with: " + err.message + "<br/> " + err.toString());
        }
        let result = [];
        for(let i = base_id_before_new_defs + 1; true; i++){
            let inst_maybe = Job$1.job_id_to_job_instance(i);  //returns null if no exist
            if(inst_maybe) { result.push(inst_maybe); }
            else { break; }
        }
        return result
    }

    toString() { return "Job." + this.name }

    show_progress_maybe(){
        //out("top of show_progress_maybe for job: " + this.name + " of: " + this.show_instructions)
        if(this.show_instructions === true) { this.show_progress(); }
        else if(typeof(this.show_instructions) === "function") {
            this.show_instructions.call(this);
        }
        //else do nothing
    }

    show_progress(){
        //out("top of show_progress for job: " + this.name + " of: " + this.show_instructions)
        var html_id = this.name + this.start_time.getTime();
        var cur_instr = this.current_instruction();
        if (this.program_counter >= this.do_list.length) { cur_instr = "Done."; }
        else { cur_instr = "Last instruction sent: "  + Instruction.to_string(cur_instr); }
        var content = "Job: " + this.name + " pc: "   + this.program_counter +
            " <progress style='width:100px;' value='" + this.program_counter +
                      "' max='" + this.do_list.length + "'></progress>" +
            " of " +  this.do_list.length + ". " +
            cur_instr +
            "&nbsp;&nbsp;<button onclick='inspect_out(Job." + this.name + ")'>Inspect</button>";

        out(content, "#5808ff", html_id);
    }

    show_progress_and_user_data(){
        //out("top of show_progress_and_user_data for job: " + this.name + " of: " + this.show_instructions)
        var html_id = this.name + this.start_time.getTime();
        var cur_instr = this.current_instruction();
        if (this.program_counter >= this.do_list.length) { cur_instr = "Done."; }
        else { cur_instr = "Last instruction sent: "  + Instruction.to_string(cur_instr); }
        var content = "Job: " + this.name + " pc: "   + this.program_counter +
            " <progress style='width:100px;' value='" + this.program_counter +
            "' max='" + this.do_list.length + "'></progress>" +
            " of " +  this.do_list.length + ". " +
            cur_instr +
            "&nbsp;&nbsp;<button onclick='inspect_out(Job." + this.name + ")'>Inspect</button>" +
            "<br/>";
        let has_user_data = false;
        for(let prop_name in this.user_data){
            if(!has_user_data) { //first iteration only
                content += "<b>user_data: </b> ";
                has_user_data = true;
            }
            content += "<i>" + prop_name + "</i>: " + this.user_data[prop_name] + "&nbsp;&nbsp;";
        }
        if(!has_user_data) { content += "<i>No user data in this job.</i>"; }
        out(content, "#5808ff", html_id);
    }

    /*obsolete version coded before Job.instances_in_file, and
       it starts the LAST job defined in the file, not the first
     static define_and_start_job(job_file_path){
        let starting_job_id_base = Job.job_id_base
        try { load_files(job_file_path)}
        catch(err){
            console.log("Could not find Job file: " + job_file_path + "  " + err.message)
            return
        }
        if(starting_job_id_base == Job.job_id_base){
            console.log("apparently there is no job definition in " + job_file_path)
        }
        else {
            let latest_job = Job.job_id_to_job_instance(Job.job_id_base)
            if(latest_job instanceof Job){
                latest_job.start()
            }
            else {
                console.log(job_file_path + " appears to contain a valid job definition.")
            }
        }
    }*/

    // todo starts the first job defined in the file, if any
    // beware: if all the jobs defined in the file are defined and active, then
    //Job.instances_in_file will return [] because new Job has to shut down
    //same named jobs that are active before redefining the job and that requires
    //a set timeout meaning the initial call to "new Job" won't actually make the
    //new job and thus won't increment the job_id. So Job.instances_in_file fails.
    //So a lously work-around is to make sure all the jobs in the file are
    //non-active. the problem is, the caller of define_and_start_job (and Job.instances_in_file)
    // often doesn't know what jobs are in the file, and that's why they're calling Job.instances_in_file
    //in the first place. So Job.instances_in_file and define_and_start_job really should take
    //a callback, but that causes some problems with where these fns are used. ARGGG
    //relavent in Messaging, dexter_user_interface2, instruction start_job, and maybe a few more places.
    //If job_file_path has a newline in it, its considered to BE the src of
    //a file or at least one or more job defs.
    static async define_and_start_job(job_file_path){
        //if(globalThis.platform === "node"){
        //    init_readline() //if already open, it leaves it alone
        //}
        let job_file_path_is_src = job_file_path.includes("\n");
        out("out: define_and_start_job set job_file_path_is_src: " + job_file_path_is_src);
        let job_instances;
        if(job_file_path_is_src) {
            job_instances = Job$1.instances_in_src(job_file_path);
            }
        else { job_instances = await Job$1.instances_in_file(job_file_path); }
        if(job_instances.length === 0) {
            warning("Could not find a Job definition in the file: " + job_file_path);
            if((platform === "node") && !globalThis.keep_alive_value){
                warning("Closing the process of loading: " + job_file_path +
                        "<br/>If you want to keep the process up,<br/>check <b>keep_alive</b> before clicking the Job button.");
               /// globalThis.close_readline() //causes the process running this job to finish.
            }
        }
        else {
            job_instances[0];
            job_instances[0].start();
        }
    }

    static start_and_monitor_dexter_job(job_src){
        let base_id_before_new_def = Job$1.job_id_base;
        try { globalThis.eval(job_src); }
        catch(err) {dde_error("While evaling the job definition to send to Dexter,<br/>" +
                              "got error: " + err.message);
        }
        if(Job$1.job_id_base == base_id_before_new_def) {
            dde_error("Before transfering Job file to Dexter,<br/>" +
                      "could not find a Job definition in the selected source.");
        }
        else {
            let dde_monitor_job_instance = Job$1.job_id_to_job_instance(base_id_before_new_def + 1);
            //we "hollow out" this job that is being sent to dexter by
            //replacing its do_list with something that monitors the
            //running of the job on Dexter.
            //we use the same name for that dexter-running job as this
            //monitoring job running in DDE.
            //by using start with do_list, we preserve orig_args.do_list
            //in the DDE job instance
            //which will be useful for user to inspect.
            //user_data:job_src set so that RESTARTING this job by clicking its button will use the orig selected src to restart the job
            dde_monitor_job_instance.start({
                user_data: {stop_job_running_on_dexter: false,
                            already_handled_stop_job:false,
                            dexter_log:undefined,
                            job_src:job_src}, //the presence of this user data prop is how we tell that this job is a dde_shadow_job_instance.
                inter_do_item_dur: 0.005, //we don't need to have fast communication with Dexter. Minimize traffic
                do_list:[
                        Dexter.write_file("job/run/" + dde_monitor_job_instance.name + ".dde", job_src),
                        Control.loop(true,
                            function(){
                                if(this.user_data.dexter_log !== undefined) { //got a dexter log meaning the monitored job is over.
                                    return Control.break()
                                }
                                else if ((this.user_data.stop_job_running_on_dexter) &&
                                         (!this.user_data.already_handled_stop_job))  { //set by clicking the job button
                                         this.user_data.already_handled_stop_job = true;
                                         this.user_data.stop_job_running_on_dexter = false;
                                        return Dexter.write_file("job/run/killjobs", "")
                                        //now next time in this loop, the first clause should hit
                                }
                                else { return Dexter.read_file("job/logs/" + dde_monitor_job_instance.name + ".dde.log", "dexter_log")} //the
                                       //log file is only present once the job has stopped
                            }),
                        function(){
                           let content;
                           if(typeof(this.user_data.dexter_log) == "string") { content = this.user_data.dexter_log; }
                           else { content = "Sorry, no log."; }
                           out("Running Job." + this.name + " on Dexter." + this.robot.name + " produced the log of:<br/><pre><code>" +
                                content + "</code></pre>");
                        }
                        ]
            });
        }
    }


    //Called by user to start the job and "reinitialize" a stopped job
    start(options={}){  //sent_from_job = null
        out("Top of Job." + this.name + ".start()");
        /* commented out due to new Waiting scheme
        let the_active_job_with_robot_maybe = Job.active_job_with_robot(this.robot) //could be null.
            //must do this before setting status_code to "starting".
            //there can only be one Job trying to use a Dexter. (at least as the Job's main robot.)
        if((this.robot instanceof Dexter) && the_active_job_with_robot_maybe) {
            this.stop_for_reason("errored", "Dexter." + this.robot.name +
                                 " already running Job." + the_active_job_with_robot_maybe.name)
            dde_error("Attempt to start Job." + this.name + " with Dexter." + this.robot.name +
                      ",<br/>but Dexter." + this.robot.name + " is already the default robot in Job." + the_active_job_with_robot_maybe.name +
                      ",<br/>so Job." + this.name + " was automatically stopped.")
        } */
        if(this.wait_until_this_prop_is_false) { this.wait_until_this_prop_is_false = false; } //just in case previous running errored before it could set this to false, used by start_objects
        if (["starting", "running", "stopping", "running_when_stopped", "suspended", "waiting"].includes(this.status_code)){
            //does not run when_stopped instruction.
            dde_error("Attempt to restart job: "  + this.name +
                      " but it has status code: " + this.status_code +
                      " which doesn't permit restarting.");
        }
        /*else if (["not_started", "completed", "errored", "interrupted"].includes(this.status_code)){
            //Waiting.done_with_job(this) //just makes sure we've cleaned up the Waiting state

            let early_robot = this.orig_args.robot
            if(options.hasOwnProperty("robot")) { early_robot = options.early_robot }
            //if(early_robot instanceof Dexter)   { early_robot.remove_from_busy_job_array(this) }
            Dexter.remove_from_busy_job_arrays(this)
        }*/
        Waiting.clear_all_if_ok(); //just makes sure we've cleaned up the Waiting state
        //active jobs & is_busy checking
        //let early_start_if_robot_busy = this.orig_args.start_if_robot_busy
        //if (options && options.hasOwnProperty("start_if_robot_busy")) { early_start_if_robot_busy = options.start_if_robot_busy }
        /* commented out due to new Waiting scheme
        if((this.robot instanceof Dexter) &&  //can 2 jobs use a Robot.Serial? I assume so for now.
           !early_start_if_robot_busy &&
           this.robot.is_busy()) {
                let one_active_job = this.robot.busy_job_array[0]
                let but_elt = globalThis[one_active_job.name + "_job_button_id"]
                this.stop_for_reason("errored", "Another job: " + one_active_job.name +
                                      " is using robot: " + this.robot.name)
                if(but_elt){
                    let bg = but_elt.style["background-color"]
                    dde_error("Job." + this.name + " attempted to use: Dexter." + this.robot.name +
                        "<br/>but that robot is in use by Job." + one_active_job.name +
                        "<br/>Click the <span style='color:black; background-color:" + bg + ";'> &nbsp;" +
                        one_active_job.name + " </span>&nbsp; Job button to stop it, or<br/>" +
                        "create Job." + this.name + " with <code>start_if_robot_busy=true</code><br/>" +
                        "to permit it to be started.")
                }
                else {
                    dde_error("Job." + this.name + " attempted to use: Dexter." + this.robot.name +
                        "<br/>but that robot is in use by Job." + one_active_job.name + "<br/>" +
                        "Create Job." + this.name + " with <code>start_if_robot_busy=true</code><br/>" +
                        "to permit it to be started.")
                }
                return
        } */
        //init from orig_args
            this.set_status_code("starting"); //before setting it here, it should be "not_started"
            this.wait_until_instruction_id_has_run = null; //needed the 2nd time we run this job, init it just in case it didn't get set to null from previous job run
            //this.init_do_list(options.do_list)
            this.do_list                 = this.orig_args.do_list;
            this.callback_param          = this.orig_args.callback_param;
            this.keep_history            = this.orig_args.keep_history;
            this.show_instructions       = this.orig_args.show_instructions;
            this.inter_do_item_dur       = this.orig_args.inter_do_item_dur;
            this.user_data               = Utils.shallow_copy_lit_obj(this.orig_args.user_data);
            this.default_workspace_pose  = this.orig_args.default_workspace_pose;
            this.program_counter         = this.orig_args.program_counter; //see robot_done_with_instruction as to why this isn't 0,
                                           //its because the robot.start effectively calls set_up_next_do(1), incrementing the PC
            this.ending_program_counter  = this.orig_args.ending_program_counter;
            this.initial_instruction     = this.orig_args.initial_instruction;
            this.data_array_transformer  = this.orig_args.data_array_transformer;
            this.get_dexter_defaults     = this.orig_args.get_dexter_defaults;
            //this.start_if_robot_busy     = this.orig_args.start_if_robot_busy
            this.if_robot_status_error   = this.orig_args.if_robot_status_error;
            this.if_instruction_error    = this.orig_args.if_instruction_error;
            this.if_dexter_connect_error = this.orig_args.if_dexter_connect_error;
            this.when_do_list_done       = this.orig_args.when_do_list_done;
            this.when_stopped            = this.orig_args.when_stopped;
            this.when_stopped_conditions = ((typeof(this.orig_args.when_stopped_conditions) == "boolean") ?
                                             this.orig_args.when_stopped_conditions :
                                             Object.assign({}, this.orig_args.when_stopped_conditions)); //make a copy in case it was munged in the previous running of the job

            //first we set all the orig (above), then we over-ride them with the passed in ones
            for (let key in options){
                if (options.hasOwnProperty(key)){
                    let new_val = options[key];
                    //if (key == "program_counter") { new_val = new_val - 1 } //don't do. You set the pc to the pos just before the first instr to execute.
                    //if      (key == "do_list")    { continue; } //flattening & setting already done by init_do_list
                    if      (key == "user_data")  { new_val = Utils.shallow_copy_lit_obj(new_val); }
                    else if (key == "name")       ; //don't allow renaming of the job
                    else if ((key == "when_stopped") &&
                             !Job$1.is_plausible_when_stopped_value(new_val)) {
                        dde_error("Job.start called with an invalid value for 'when_stopped' of: " +
                                  new_val);
                        return
                    }
                    this[key] = new_val;
                }
                else if (!Job$1.job_default_params.hasOwnProperty(key)){
                    warning("Job.start passed an option: " + key + " that is unknown. This is probably a mistake.");
                }
            }
            this.init_do_list();

            let maybe_symbolic_pc = this.program_counter;
            this.program_counter = 0; //just temporarily so that instruction_location_to_id can start from 0
            const job_in_pc = Job$1.instruction_location_to_job(maybe_symbolic_pc, false);
            if ((job_in_pc != null) && (job_in_pc != this)) {
                dde_error("Job." + this.name + " has a program_counter initialization<br/>" +
                          "of an instruction_location that contains a job that is not the job being started. It shouldn't.");
                return
            }
            this.program_counter = this.instruction_location_to_id(maybe_symbolic_pc);

            //this.robot_status      = []  use this.robot.robot_status instead //only filled in when we have a Dexter robot by Dexter.robot_done_with_instruction or a Serial robot
            this.rs_history        = []; //only filled in when we have a Dexter robot by Dexter.robot_done_with_instruction or a Serial robot
            this.sent_instructions = [];
            this.sent_instructions_strings = [];

            this.start_time        = new Date();
            this.stop_time         = null;
            this.stop_reason       = null;

            this.wait_reason       = null; //not used when waiting for instruction, but used when status_code is "waiting"
            this.wait_until_instruction_id_has_run = null;
            this.highest_completed_instruction_id  = -1;



            //this.iterator_stack    = []
            if (this.sent_from_job_instruction_queue.length > 0) { //if this job hasn't been started when another job
                 // runs a sent_to_job instruction to insert into this job, then that
                 //instruction is stuck in this job's sent_from_job_instruction_queue,
                 //so that it can be inserted into this job when it starts.
                 //(but NOT into its original_do_list, so its only inserted the first time this
                 //job is run.
                Job$1.insert_instruction(this.sent_from_job_instruction_queue, this.sent_from_job_instruction_location);
            }
            this.sent_from_job_instruction_queue = []; //send_to_job uses this. its on the "to_job" instance and only stores instructions when send_to_job has
                                                  //where_to_insert="next_top_level", or when this job has yet to be starter. (see above comment.)
            this.sent_from_job_instruction_location = null;
            if (this.initial_instruction) { //do AFTER the sent_from_job_instruction_queue insertion.
                Job$1.insert_instruction(this.initial_instruction, {job: this, offset: "program_counter"});
            }
            //must be after insert queue and init_instr processing
            if ((this.program_counter == 0) &&
                (this.do_list.length  == 0) &&
                ((this.when_do_list_done == "wait") || (typeof(this.when_stopped) == "function"))) ; //special case to allow an empty do_list if we are waiting for an instruction or have a callback.
            else if (this.do_list.length == 0) {
                warning("While starting job: " + this.name + ", the do_list is empty.<br/>" +
                         "The job still requests the status of Dexter, but does not cause it to move.");
            }
            else if (this.program_counter >= this.do_list.length){ //note that maybe_symbolic_pc can be "end" which is length of do_list which is valid, though no instructions would be executed in that case so we error.
                dde_error("While starting job: " + this.name +
                    "<br/>the program_counter is initialized to: " + this.program_counter +
                    "<br/>but the highest instruction ID in the do_list is: " +  (this.do_list.length - 1));
            }
            Job$1.last_job           = this;
            this.go_state          = true;

            this.already_started_when_stopped = false;
            this.final_status_code = null;
            this.condition_when_stopped = null;

            this.show_progress_maybe();
            console.log('calling robot.start from job.start');
            //out("Bottom of Job." + this.name + ".start() calling " + this.robot.name + ".start()")
            this.robot.start(this); //the only call to robot.start
            return this
    }
    //action for the Eval & start Job  menu item on Jobs menu.
    static start_job_menu_item_action() {
        let full_src               = Editor.get_javascript();
        let selected_src           = Editor.get_javascript(true);
        let sel_start_pos          = Editor.selection_start();
        let sel_end_pos            = Editor.selection_end();
        let start_of_job_maybe     = Editor.find_backwards(full_src, sel_start_pos, "new Job");
        let start_of_job_pos;
        let end_of_job_pos;
        let job_src = null; //if this is not null, we've got a valid job surrounds (or is) the selection.
        let sel_is_instructions = false;
        if(start_of_job_maybe !== null){
            [start_of_job_pos, end_of_job_pos] = Editor.select_call(full_src, start_of_job_maybe);
        }
        if(end_of_job_pos && (end_of_job_pos > sel_start_pos)){ //sel is within a job, but we don't know if its
            //instruction selection or just within the job yet.
            job_src = full_src.substring(start_of_job_pos, end_of_job_pos);
            let do_list_start_pos = full_src.indexOf("do_list:", start_of_job_pos);
            if((do_list_start_pos === -1) || (do_list_start_pos > end_of_job_pos)) ; //weird, looks like Job has no do_list,
              //but ok, we just have the whole Job to execute.
            else if (do_list_start_pos < sel_start_pos) { //our selected_src should be instructions in the do_list
                sel_is_instructions = true;
            }
        }
        if (job_src === null) { //no job def so we're going to make our own.
            //warning("There's no Job definition surrounding the cursor.")
            var selection = Editor.get_javascript(true).trim();
            if (selection.endsWith(",")) { selection = selection.substring(0, selection.length - 1); }
            if (selection.length > 0){
                //if (selection.startsWith("[") && selection.endsWith("]")) {} //perhaps user selected the whole do_list. but
                //bue we can also have a single instr that can be an array.
                //since it's ok for a job to have an extra set of parens wrapped around its do_list,
                //just go ahead and do it.
                //else {
                //plus
                selection = "[" + selection + "]";
                sel_start_pos = sel_start_pos - 1;
                //}
                var eval2_result = eval_js_part2(selection);
                if (eval2_result.error_type) ; //got an error but error message should be displayed in output pane automatmically
                else if (Array.isArray(eval2_result.value)){ //got an array, but is it a do_list of multiple instructions?
                   let do_list;
                   if(!Instruction.is_instructions_array(eval2_result.value)){ //might never hit, but its an precaution
                       do_list = [eval2_result.value];
                   }
                   if (Job$1.j0 && Job$1.j0.is_active()) {
                        Job$1.j0.stop_for_reason("interrupted", "Start Job menu action stopped job.");
                        setTimeout(function() {
                                       Job$1.init_show_instructions_for_insts_only_and_start(sel_start_pos, sel_end_pos,
                                                                                           do_list, selection);},
                                    (Job$1.j0.inter_do_item_dur * 1000 * 2) + 10); //convert from seconds to milliseconds
                    }
                    else {
                        Job$1.init_show_instructions_for_insts_only_and_start(sel_start_pos, sel_end_pos,
                                                                            eval2_result.value, selection);
                    }
                }
                else {
                    shouldnt("Selection for Start job menu item action wasn't an array, even after wrapping [].");
                }
            }
            else {
                warning("When choosing the Eval&Start Job menu item<br/>" +
                        "with no surrounding Job definition,<br/>" +
                        "you must select exactly those instructions you want to run.");
            }
        }
        //we have a job.
        else {
            const eval2_result = eval_js_part2(job_src);
            if (eval2_result.error_type) ; //got an error but error message should be displayed in Output pane automatically
            else {
                let job_instance = eval2_result.value;
                if(!sel_is_instructions){
                    job_instance.start();
                }
                else if (selected_src.length > 0){ //sel is instructions
                    let do_list_result = eval_js_part2("[" + selected_src + "]"); //even if we only have one instr, this is still correct, esp if that one starts with "function().
                           //if this wraps an extra layer of array around the selected_src, that will still work pretty well.
                    if (do_list_result.error_type) ; //got an error but error message should already be displayed
                    else {
                        job_instance.start({do_list: do_list_result.value});
                    }
                }
                else { //no selection, so just start job at do_list item where the cursor is.
                    const [pc, ending_pc]  = job_instance.init_show_instructions(sel_start_pos, sel_end_pos, start_of_job_pos, job_src);
                    job_instance.start({show_instructions: true, inter_do_item_dur: 0.5, program_counter: pc, ending_program_counter: ending_pc});
                }
            }
        }
    }

    //all the below logic about whether to make a job with Dexter.default or a brain
    //is heuristic, and not infallable, but likely to be OK.
    static init_show_instructions_for_insts_only_and_start(start_cursor_pos, end_cursor_pos, do_list_array, selection){
        let has_start_job_instruction = false;
        let start_job_job = null;
        let has_defaulting_dexter_instruction = false;
        for(let instr of do_list_array) {
            if(instr instanceof Instruction.start_job) { //Control.start_job doesn't work here.
                has_start_job_instruction = true; //because its likely (but not guarenteed) that the job being started will have a default robot of a dexter (as in recordings, etc. and we can't have 2 active jobs both using the same dexter.
                if(instr.job_name instanceof Job$1) {
                    start_job_job = instr.job_name;
                }
                else if(typeof(instr.job_name) == "string"){
                    if(Job$1[instr.job_name] instanceof Job$1){
                        start_job_job = Job$1[instr.job_name];
                    }
                }
                else {
                    dde_error("Control.start_job has a name that is not a Job or a string.");
                }
            }
            else if ((instr instanceof Instruction.Dexter) &&
                      !instr.robot) { //meaning use the Job's default robot
                has_defaulting_dexter_instruction = true;
            }
        }
        let rob;
        if(has_start_job_instruction && has_defaulting_dexter_instruction){
                if(start_job_job.robot &&
                  (start_job_job.robot === Dexter.default)){
                    dde_error("You've selected an instruction using the Job's default dexter robot and <br/>" +
                              "a start_job instruction to a Job that uses Dexter.default.<br/>" +
                              "This violates 2 active Jobs both having a robot of the same Dexter.<br/>" +
                              "To separate these, wrap the selected instructions in a Job but<br/>" +
                              "make the Dexter instructions have a subject of a Dexter instance,<br/>" +
                              'such as Dexter.dexter0 and give the Job a <code>new Brain({name: "some_name"})</code> robot.'
                    );
                }
                else { //has as start_job but its not to a job that is using Dexter.default so use Dexter.default
                       //as its needed for the Dexter class instructions
                    rob = Dexter.default;
                }
        }
        else if (has_start_job_instruction) { //does not have has_defaulting_dexter_instruction
                rob = new Brain({name: "b0"});
        }
        else { //maybe has dexter instructions, maybe not, but doesn't have start_job so...
            rob =  Dexter.default;
        }
        const job_instance = new Job$1({name: "j0", robot: rob, do_list: do_list_array});
        //const begin_job_src = 'new Job ({name: "j0", do_list: '
        //const job_src = begin_job_src + selection + "})"
        //const start_of_job = start_cursor_pos - begin_job_src.length//beware, could be < 0
        //job_instance.init_show_instructions(start_cursor_pos, end_cursor_pos, start_of_job, job_src)
        job_instance.start({show_instructions: true});
    }

    init_show_instructions(start_cursor_pos, end_cursor_pos, start_of_job, job_src){
        this.job_source_start_pos = start_of_job; //necessary offset to range positions that are in the syntax tree
        const syntax_tree = esprima.parse(job_src, {range: true});
        const job_props_syntax_array = syntax_tree.body[0].expression.arguments[0].properties;
        for (var prop_syntax of job_props_syntax_array){
            if (prop_syntax.key.name == "do_list"){
                this.do_list_syntax_array = prop_syntax.value.elements;
                return this.instruction_ids_at_selection(start_cursor_pos, end_cursor_pos, start_of_job, syntax_tree)
            }
        }
        dde_error("Job." + this.name + " apparently has no do_list property.");
    }

    //returns pc to set for starting job that cursor is in, or 0, start at begining,
    instruction_ids_at_selection(start_cursor_pos, end_cursor_pos, start_of_job, syntax_tree) {
        var start_cursor_pos_in_job_src = start_cursor_pos - start_of_job;
        var end_cursor_pos_in_job_src   = end_cursor_pos   - start_of_job;
        var result_start = null;
        var result_end   = "end";
        for(let i = 0; i <  this.do_list_syntax_array.length; i++) {
            var do_list_item_syntax = this.do_list_syntax_array[i];
            //var inst_start_pos = do_list_item_syntax.range[0]
            do_list_item_syntax.range[0];
            var inst_end_pos   = do_list_item_syntax.range[1];
            if (result_start === null){
                if (start_cursor_pos_in_job_src <= (inst_end_pos + 1)){ //comma at end still in the instr
                    result_start = i; //first time through, cursor before do_list, just start at 0
                    if (start_cursor_pos == end_cursor_pos) { //no selection
                        result_end = "end";
                        break;
                    }
                    else if (end_cursor_pos_in_job_src <= (inst_end_pos + 1)){ //there's a selection, but it starts and ends in just one instruction
                        result_end = i + 1;
                        break;
                    }
                }
            }
            else { //looking for result_end
                if (end_cursor_pos_in_job_src <= (inst_end_pos + 1)){ //comma at end still in the instr
                    result_end = i + 1;
                    break;
                }
            }
        }
        return [result_start, result_end]
    }

    select_instruction_maybe(cur_do_item){
        if(this.show_instructions && this.do_list_syntax_array){
            console.log("    now processing instruction: " + Utils.stringify_value(cur_do_item));
            const orig_instruction_index = this.orig_args.do_list.indexOf(cur_do_item);
            if(orig_instruction_index != -1){
                const range = this.instruction_text_range(orig_instruction_index);
                Editor.select_javascript(range[0], range[1]);
            }
        }
    }
    instruction_text_range(orig_instruction_index){
        const array_elt_syntax_tree = this.do_list_syntax_array[orig_instruction_index];
        return [array_elt_syntax_tree.range[0] + this.job_source_start_pos,
                array_elt_syntax_tree.range[1] + this.job_source_start_pos]
    }
    //end show_instruction in editor
    //Job BUTTONS______
    get_job_button_id(){ return this.name + "_job_button_id"}

    get_job_button_wrapper_id(){ return this.name + "_job_wrapper_button_id"}

    get_job_button(){
        const the_id = this.get_job_button_id();
        var but_elt = globalThis[the_id];
        return but_elt
    }

    get_job_button_wrapper(){
        const the_id = this.get_job_button_wrapper_id();
        var but_elt = globalThis[the_id];
        return but_elt
    }

    add_job_button_maybe(){
      if(globalThis.platform == "dde") {
        let but_elt = this.get_job_button();
        if (!but_elt){
            const job_name = this.name;
            const the_id = this.get_job_button_id();

            const the_button_html = '<button style="margin-left:0px; vertical-align:50%;cursor:pointer;" id="' + the_id + '">'+ job_name +
                                    '</button>';
            //$("#jobs_button_bar_id").append(the_html)
            let wrapper = document.createElement('div');
            wrapper.id = this.get_job_button_wrapper_id();
            wrapper.style.display = "inline-block";
            let close_on_click_fn_src = "Job." + job_name + ".undefine_job()";
            let inspect_on_click_fn_src =  "inspect(Job." + job_name + ")";
            wrapper.innerHTML = the_button_html +
                                "<div style='display:inline-block;margin-right:10px;'><span style='cursor:pointer;' onclick='" +
                                close_on_click_fn_src +
                                "' title='Undefine this job'>X</span><br/><span style='cursor:help; padding-left:2px;' onclick='" +
                                inspect_on_click_fn_src +
                                "' title='Inspect this job'>&#9432;</span></div>";
            jobs_button_bar_id.append(wrapper); //.firstChild)

            but_elt = globalThis[the_id];
            but_elt.onclick = function(event){
                const job_instance = Job$1[job_name];
                //if(job_instance.status_code === "starting") { return } //user probably "double clicked" on a job
                if(globalThis["Metrics"]) { Metrics.increment_state("Job button clicks"); }
                event.target.blur(); //gets rid of dark border around button and because its
                //not focused, pressing the space or ENTER key doesn't do something strange
                //like an extra button click.

                //onsole.log("Job button clicked when status was: " + job_instance.status_code)
                if (job_instance.status_code == "suspended"){
                    if(but_elt.title.includes("Make Instruction")) { job_instance.stop_for_reason("interrupted", "User stopped job."); }
                    else { job_instance.unsuspend(); }
                }
                else if (job_instance.user_data.stop_job_running_on_dexter !== undefined) { //ie this job is MONITORING a job running on Dexter
                    //if (job_instance.user_data.stop_job_running_on_dexter === false){
                    //    job_instance.user_data.stop_job_running_on_dexter = true
                        job_instance.color_job_button(); //keep this call
                    //}
                    if(job_instance.is_active()){
                        //if (job_instance.robot instanceof Dexter) { job_instance.robot.empty_instruction_queue_now() }
                        job_instance.stop_for_reason("interrupted", "User stopped job", false);
                    }
                    else { //restart this job on Dexter
                        Job$1.start_and_monitor_dexter_job(job_instance.user_data.job_src);
                        return //let the start color the job button as race condition between that and the below color_job_button
                    }
                }
                else if(job_instance.is_active()){
                    if (job_instance.robot instanceof Dexter) {
                         //job_instance.robot.empty_instruction_queue_now() //causes DexRun to error.
                         if (job_instance.robot.waiting_for_flush_ack) {
                             if(job_instance.status_code === "stopping");
                             else { //first time user clicked button while job was running.
                                job_instance.set_status_code("stopping");
                                return //we don't want to call stop_for_reason until the ack for the "F"
                                    // comes back to Dexter.protype.robot_done_with_instruction
                             }
                         }
                    }
                    job_instance.stop_for_reason("interrupted", "User stopped job", false);
                }
                else {
                    job_instance.start();
                }
            };
        }
      }
      this.color_job_button(); //do regardless of dde or node and regardless of
           //whether there's already a button or not becuase if we
           //define a new job of the same name that already has a button,
           //we want to change the buttons' color.
           //add_job_button_maybe is ONLY called by Job constructor.
    }

    //returns the first job name found in the first job definition, or null
    //if it can't find one.
    static source_to_job_name(source){
        let new_job_index = source.indexOf("new Job(");
        if (new_job_index === -1) {
            warning("Could not find <code>new Job(</code> in the Editor.");
            return null
        }
        let name_index = source.indexOf("name:", new_job_index);
        if (name_index === -1) {
            warning("Could not find Job name in the Editor.");
            return null
        }
        let start_of_job_name_index = source.indexOf('"', name_index);
        let name_str_delim = '"';
        if (start_of_job_name_index === -1) {
            start_of_job_name_index = source.indexOf("'", name_index);
            name_str_delim = "'";
        }
        if (start_of_job_name_index === -1) {
            warning("Could not find Job name in the Editor.");
            return null
        }
        let end_of_job_name_index = source.indexOf(name_str_delim, start_of_job_name_index + 1);
        if (end_of_job_name_index === -1) {
            warning("Could not find end of Job name in the Editor.");
            return null
        }
        let job_name = source.substring(start_of_job_name_index + 1, end_of_job_name_index);
        if(job_name.includes("\n")) {
            warning("Found an invalid Job name containing a new line in the Editor: " + job_name);
            return null
        }
        return job_name
    }
    static extract_job_name_from_file_path(file_path){
        let job_name_start_pos = file_path.lastIndexOf("/");
        if (job_name_start_pos == -1) { job_name_start_pos = 0; }
        else { job_name_start_pos += 1; } //move to after the slash
        let job_name_end_pos = file_path.lastIndexOf(".");
        if(job_name_end_pos == -1) { job_name_end_pos = file_path.length; }
        let job_name = file_path.substring(job_name_start_pos, job_name_end_pos);
        return job_name
    }
    //called by httpd.mjs when keep_alive_value == true
    static maybe_define_and_server_job_button_click(job_file_path){
        let job_name = Job$1.extract_job_name_from_file_path(job_file_path);
        let job_instance = Job$1[job_name];
        if(job_instance) {
            job_instance.server_job_button_click(); //might be first time starting job, or stopping running job, or 2nd time starting
        }
        else { //no defined job of that name, so load its file and start it.
           Job$1.define_and_start_job(job_file_path); //starts first Job in file,
           //regardless of its name, but we still expect it to be named the job_name,
           //otherwise, if the job is running, we load it again and redefine it while
           //its running! Not good.
        }
    }
    //similar to the add_job_button_maybe inner job button click function
    server_job_button_click(){
        let job_instance = this;
        if (job_instance.status_code == "suspended"){
           job_instance.unsuspend();
        }
        else if(job_instance.is_active()){
            //if (job_instance.robot instanceof Dexter) { job_instance.robot.empty_instruction_queue_now() }
            job_instance.stop_for_reason("interrupted", "User stopped job", false);
        }
        else {
            job_instance.start();
        }
    }

    remove_job_button(){
        var elt = this.get_job_button_wrapper(); //this.get_job_button()
        if(elt){
            elt.remove();
        }
    }
    //if we're in dde and there's no button, then this does nothing and doesn't error.
    color_job_button(){
        let bg_color = null;
        let tooltip  = "";
        switch(this.status_code){
            case "not_started":
                bg_color = "rgb(204, 204, 204)";
                tooltip  = "This Job has not been started since it was defined.\nClick to start this Job.";
                break; //defined but never started.
            case "starting":
                bg_color = "rgb(210, 255, 190)";
                tooltip  = "This Job is in the process of starting.\nClick to stop it.";
                break;
            case "running":
                if((this.when_do_list_done == "wait") &&
                   (this.program_counter == this.instruction_location_to_id(this.ending_program_counter))) {
                    bg_color = "rgb(255, 255, 102)"; //pale yellow
                    tooltip  = 'This Job is waiting for a new last instruction\nbecause it has when_do_list_done="wait".\nClick to stop this job.';
                }
                else if(this.user_data.stop_job_running_on_dexter === true) {
                    bg_color = "#ffcdb7"; //pale orange
                    tooltip  = "This job is in the process of stopping";
                }
                else {
                    const cur_ins = this.do_list[this.program_counter];
                    let oplet = null;
                    if (Instruction.is_oplet_array(cur_ins)){
                        oplet = cur_ins[Dexter.INSTRUCTION_TYPE];
                    }
                    if(oplet === "z") {
                        let dur_in_seconds = cur_ins[Instruction.INSTRUCTION_ARG0];
                        bg_color = "rgb(255, 255, 102)"; //pale yellow
                        tooltip  = "Now running instruction " + this.program_counter +
                                   ', sleep (oplet "z") for ' + dur_in_seconds + " second(s).";
                    }
                    else {
                        bg_color = "rgb(136, 255, 136)"; //bright green
                        tooltip  = "This Job is running instruction " + this.program_counter +
                                   ".\nClick to stop this job.";
                    }
                }
                break;
            case "stopping":
               bg_color = "rgb(225, 169, 107)"; //"#db8622" //brown
               tooltip = "The job is running a\nDexter.empty_instruction_queue instruction\nand will stop when that's complete.";
               break;
            case "running_when_stopped":
                bg_color = "#00a600"; //dark green
                tooltip = "This job is running its when_stopped instruction.";
                break;
            case "suspended":
                bg_color = "rgb(255, 255, 17)"; //bright yellow
                if(this.wait_reason.includes("Make Instruction")){
                    tooltip  = "This Job is suspended at instruction: " + this.program_counter +
                               " because\n" +
                               this.wait_reason + "\n" +
                               "To stop this Job, click this button.";
                }
                else {
                    tooltip  = "This Job is suspended at instruction: " + this.program_counter +
                               " because\n" +
                               this.wait_reason + "\n" +
                               "Click to unsuspend it.\nAfter it is running, you can click to stop it.";
                }
                break; //yellow
            case "waiting":
                bg_color = "rgb(255, 255, 102)"; //pale yellow
                tooltip  = "This Job is at instruction " + this.program_counter +
                            ", waiting for:\n" + this.wait_reason + "\nClick to stop this job.";
                break; //yellow
            case "completed":
                if((this.program_counter === this.do_list.length) &&
                    (this.when_do_list_done === "wait")){
                    bg_color = "rgb(255, 255, 102)"; //pale yellow
                    tooltip  = 'This Job is waiting for a new last instruction\nbecause it has when_do_list_done="wait".\nClick to stop this job.';
                }
                else {
                    bg_color = "rgb(230, 179, 255)"; // purple. blues best:"#66ccff"  "#33bbff" too dark  //"#99d3ff" too light
                    tooltip  = "This Job has successfully completed.\nClick to restart it.";
                }
                break;
            case "errored":
                bg_color = "rgb(255, 68, 68)";
                let reason = this.stop_reason;
                reason = Utils.replace_substrings(reason, "<br/>", "\n");
                tooltip  = "This Job errored at instruction: " + this.program_counter +
                " with:\n" + reason + "\nClick to restart this Job.";
                break;
            case "interrupted":
                bg_color = "rgb(255, 123, 0)"; //orange
                tooltip  = "This Job was interrupted at instruction " + this.program_counter +
                " by:\n" + this.stop_reason + "\nClick to restart this Job.";
                break;
        }
        if(globalThis.platform == "dde"){
            const but_elt = this.get_job_button();
            if(!but_elt){ return }
            if (but_elt.style.backgroundColor !== bg_color) { //cut down the "jitter" in the culor, don't set unnecessarily
                but_elt.style.backgroundColor = bg_color;
                if((this.name === "rs_update") && globalThis.robot_status_run_update_job_button_id){
                    robot_status_run_update_job_button_id.style.backgroundColor = bg_color;
                }
            }
            if(this.user_data.stop_job_running_on_dexter !== undefined) {
                tooltip  += "\nThis job monitors a job running on Dexter.";
            }
            but_elt.title = tooltip;
        }
        else { //job engine
           let data_obj = {kind: "show_job_button", job_name: this.name, status_code: this.status_code, button_color: bg_color, button_tooltip: tooltip};
           //globalThis.write_to_stdout("<for_server>" + JSON.stringify(data) + "</for_server>\n")
            out("in Job.color_job_button sending: " + JSON.stringify(data_obj));
            process.send(data_obj);
        }
    }
    //end of jobs buttons

    //not passing reason means don't change it.
    //if status_code is "waiting"  or "suspeneded" then reason is for job_instance.wait_reason
    //else if status_code is,"errored", "interrupted", "completed" then reason is for job_instance.stop_reason
    set_status_code(status_code, reason){
        if(status_code === this.status_code) ; //no change, do nothing
        else if (Job$1.status_codes.includes(status_code)){ //valid status code
            this.status_code = status_code;
            if (["waiting", "suspended"].includes(status_code)) {
                if(reason !== undefined){
                    this.wait_reason = reason;
                }
                this.stop_reason = null;
            }
            else if (this.is_done()) {
                if(reason !== undefined){
                    this.wait_reason = null;
                    this.stop_reason = reason;
                }
            }
            else if (status_code === "stopping") ;
            else if (status_code === "running_when_stopped");
            else { //"not_started", "starting", "running"
                   //these status codes don't have reasons so any passed in reason is ignored.
                this.wait_reason = null;
                this.stop_reason = null;
            }
            this.color_job_button(); //the main call to color_job_button
        }
        else {
            shouldnt("set_status_code passed illegal status_code of: " + status_code +
                "<br/>The valid status codes are:</br/>" +
                Job$1.status_codes);
        }
    }

    //the job has run at least once and is now done
    //not quite the opposite of is_active because a job could be
    //not_started and would not qualify as is_active OR is_done
    is_done(){
        return ["completed", "errored", "interrupted"].includes(this.status_code)
    }

    is_active(){
        //return ((this.status_code != "not_started") && (this.stop_reason == null))
       return ["starting", "running", "stopping", "running_when_stopped", "suspended", "waiting"].includes(this.status_code)
    }
    static active_jobs(){
        let result = [];
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                result.push(a_job);
            }
        }
        return result
    }

    static active_job_names(){
        let result = [];
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                result.push(a_job.name);
            }
        }
        return result
    }

    static defined_job_names(){
        let result = [];
        for(let a_job of Job$1.all_jobs()){
            result.push(a_job.name);
        }
        return result
    }

    //returns the active job that has robot as its default robot OR null if none.
    static active_job_with_robot(robot){
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                if(a_job.robot === robot) {
                    return a_job
                }
            }
        }
        return null
    }

    //returns an array of jobs that either have "robot" as their default robot,
    //OR the job's PC is pointing at an instruction that is using "robot".
    static active_jobs_using_robot(robot){
        let result = [];
        let active_jobs = this.active_jobs();
        for(let job_instance of active_jobs){
            if(job_instance.robot === robot) { result.push(job_instance); }
            else {
                let instr = job_instance.do_list[job_instance.program_counter];
                if(instr){
                    let rob = instr.robot; //this is the best we can do if there's a robot indincated in the instr
                    if(rob === robot) {
                        result.push(job_instance);
                    }
                }
            }
        }
        return result
    }

    //called in Utils.stringify_value    used for original_do_list
    static non_hierarchical_do_list_to_html(a_do_list){
        var result = "<table><tr><th title='The instruction_id is the order of the instruction in the do_list.\nSame as the program counter at send time.'>ID</th>" +
                                "<th title='The instruction type and its arguments'>Instruction</th></tr>";
        for(var i = 0; i < a_do_list.length; i++){
            result +=  "<tr><td>" + i + "</td><td>" + Utils.stringify_value(a_do_list[i]) + "</td><td></tr>";
        }
        result += "</table>";
        return "<details><summary>original do_list</summary>" + result + "</details>"
    }

    do_list_to_html(){
        Job$1.do_list_to_html_set_up_onclick();
        return "<details style='display:inline-block'><summary></summary>" +
                this.do_list_to_html_aux(0, 1) +
                "</details>"
    }

    static do_list_to_html_set_up_onclick(){
        if(globalThis.platform == "dde"){
            setTimeout(function(){
                let elts = document.getElementsByClassName("do_list_item");
                for (let i = 0; i < elts.length; i++) { //more clever looping using let elt of elts breaks but only on windows deployed DDE
                    let elt = elts[i];
                    elt.onclick = Job$1.do_list_item_present_robot_status; }
            }, 500);
        }
    }
    //runs in UI
    static do_list_item_present_robot_status(event){
       event.stopPropagation();
            let elt = event.target;
            let [job_name, instruction_id] = elt.dataset.do_list_item.split(" ");
            Job$1.show_robot_status_history_item(job_name, parseInt(instruction_id));
    }

    instruction_id_to_rs_history_item(id){
        for (let item of this.rs_history){
            if (item[Dexter.INSTRUCTION_ID] == id) { return item }
        }
        if (this.keep_history){
            shouldnt("Job.instruction_id_to_rs_history_item passed id: " + id + " but couldn't be found in rs_history: " + this.rs_history);
        }
        else { return null }
    }

    current_instruction(){
        return this.do_list[this.program_counter]
    }

    //warning: this will be wrong if user puts two eq items on do_list, such as a fn
    //or a Instruction instance that was first bound to a var, then that var was used
    //twice on the do_list
    is_top_level_do_item(do_item){
        return this.orig_args.do_list.includes(do_item)
    }

    at_sync_point(sync_point_name){
        let ins = this.current_instruction();
        return ((ins instanceof Instruction.sync_point) &&
                (ins.name == sync_point_name))
    }

    at_or_past_sync_point(sync_point_name){ //presumes that the THIS job HAS an instuction with the named sync point
        if(!this.do_list) { return false} //before this job has started so its definately not past any of its sync points.
        for(let a_pc = this.program_counter; a_pc >= 0; a_pc--){
            let ins = this.do_list[a_pc];
            if ((ins instanceof Instruction.sync_point) &&
                (ins.name == sync_point_name)) { return true }
        }
        return false
    }

    static show_robot_status_history_item(job_name, instruction_id){
        let job_instance    = Job$1[job_name];
        let rs_history_item = job_instance.instruction_id_to_rs_history_item(instruction_id);
        if (rs_history_item) {
            let table_html      = Dexter.robot_status_to_html_table(rs_history_item);
            show_window({content: table_html,
                         title: "Robot status for " + job_name + ", instruction: " + instruction_id,
                         width:  800,
                         height: 380});
        }
        else {
            out("Robot: " + job_instance.robot.name + " in job: " + job_instance.name +
                " has not kept robot_status for instruction: "    + instruction_id + "." +
                "<br/>Job " + job_instance.name + " keep_history is: " + job_instance.keep_history,
                "red");
        }
    }

    do_list_to_html_aux(id_to_start_from = 0, indent_level = 0, sub_item_count){
        if (!sub_item_count) {
            if (this.do_list) { sub_item_count = this.do_list.length;}
            else { sub_item_count = 0; }
        }
        let result = "";
        let sub_sub_items_processed = 0;
        for(let sub_item_index = 0; sub_item_index < sub_item_count; sub_item_index++){
            let id = id_to_start_from + sub_item_index + sub_sub_items_processed;
            if (id >= this.do_list.length) {return result}
            let item = this.do_list[id];
            let new_sub_item_count = this.added_items_count[id];
            let class_html = "class='do_list_item' ";
            let rs_button = "";
            if (Instruction.is_oplet_array(item)) { rs_button = " <button data-do_list_item='" + this.name + " " + id + "' + title='Show the robot status as it was immediately after this instruction was run.'" + class_html + ">RS</button> ";}
            let item_text =  ((id == this.program_counter) ? "<span style='border-style:solid; border-width:2px;'> ": "") +
                             "<span title='instruction_id'>id=" + id +
                             "</span>&nbsp;<span title='Number of sub_instructions&#13;added by this instruction below it.'> si=" + new_sub_item_count + "</span>" +
                             rs_button +
                             "&nbsp;" + Instruction.text_for_do_list_item(item) + //core of the_item
                             ((id == this.program_counter) ? "</span>" : "" );
            let html_indent = 'style="margin-left:' + (indent_level * 20) + 'px; background-color:' + Instruction.instruction_color(item) + ';"';

            let actual_sub_items_grabbed_this_iter;
            if (new_sub_item_count > 0) {
                item_text = "<details " + html_indent + "><summary>" + item_text + "</summary>";
                let sub_items_text = this.do_list_to_html_aux(id + 1, indent_level + 1, new_sub_item_count);
                item_text = item_text + sub_items_text + "</details>";
                actual_sub_items_grabbed_this_iter = (sub_items_text.match(/<div|<details/g) || []).length;
                sub_sub_items_processed += actual_sub_items_grabbed_this_iter;
            }
            else {
                item_text = "<div " + html_indent + ">" + item_text + "</div>";
                actual_sub_items_grabbed_this_iter = 0;
              }

            result += item_text;
        }
        return result
    }
    time_to_string(a_time){
        if (a_time){
            return a_time.getHours() + ":" + a_time.getMinutes() + ":" + a_time.getSeconds()
        }
        else { return "null" }
    }
    stringify(){
        let stat_code = this.status_code;
        if (stat_code == "completed") { stat_code = "<span style='color:#00b300;'>completed</span>"; }
        else if ((stat_code === "errored") || (stat_code === "interrupted")) {
            stat_code = "<span style='color:#cc0000;'>" + stat_code + "</span>";
        }
        let dur_string = Utils.milliseconds_to_human_string(this.stop_time - this.start_time);
        let result = "Job <i>name</i>: "        + this.name                  + ", <i>job_id</i>: " + this.job_id + ", <i>simulate</i>: " + this.robot.simulate + "<br/>" +
                     "<i>start_time</i>: "      + this.time_to_string(this.start_time) +
                     ", <i>stop_time</i>:  "    + this.time_to_string(this.stop_time)  +
                     ", <i>dur</i>: "           + dur_string + "<br/>" +
                     "<i>program_counter</i>: " + this.program_counter       + ", <i>status_code</i>: " + stat_code + ",<br/>" +
                     "<i>stop_reason</i>: "     + this.stop_reason           + ", <i>wait_reason</i>: " + this.wait_reason + "<br/>" +
                     "<i>wait_until_instruction_id_has_run</i>: " + this.wait_until_instruction_id_has_run + "<br/>" +
                     "<i>highest_completed_instruction_id</i>: " + this.highest_completed_instruction_id + "<br/>" +
                     "<i>user_data</i>: " + Utils.stringify_value(this.user_data) + ",<br/>" +
                      Job$1.non_hierarchical_do_list_to_html(this.orig_args.do_list) +
                      this.do_list_to_html() +
                      Dexter.sent_instructions_to_html(this.sent_instructions) +
                      Dexter.make_show_rs_history_button_html(this.job_id)     +
                      "<fieldset style='background-color:#EEEEEE;'><legend>Robot</legend>" + this.robot.stringify() + "</fieldset>";

        return result
    }

    //takes nested items in array and makes flattened list where the elts are
    //a dexter instruction array, a fn, or something else that can be a do_item.
    //removes no_op instructions from the returned array.
    static flatten_do_list_array(arr, result=[]){
       for(let i = 0; i < arr.length; i++){
           let elt = arr[i];
           if      (Instruction.is_no_op_instruction(elt))   ; //get rid of it, including empty nested arrays
           else if (Instruction.is_oplet_array(elt))         { result.push(elt); }
           else if (Instruction.is_data_array(elt))          { result.push(elt); } //do not flatten!
           else if (Array.isArray(elt))                      { Job$1.flatten_do_list_array(elt, result); }
           else if (elt instanceof Instruction)              { result.push(elt); }
           else if (typeof(elt) === "string")                { result.push(elt); }
           else if (typeof(elt) === "function")              { result.push(elt); }
           else if (Utils.is_iterator(elt))                  { result.push(elt); }
           else if (Instruction.is_start_object(elt))        { result.push(elt); }
           else if (elt instanceof Promise)                  { result.push(elt); }
           else { throw(TypeError("Invalid do_list item at index: " + i + "<br/>of: " + elt)) }
       }
       return result
    }

    suspend(reason = "suspended") {
        this.set_status_code("suspended", reason); //makes job button yellow, causes set_up_next_do to just retrunn without calling do_next_item
    }
    //can't be an instruction, must be called from a method
    //unsuspend is like start, ie it calls start_after_connected which calls send get status
    // which calls robot_done_with_instruction which calls set_up_next_do(1)
    //if stop_reason is not false, we "unsuspend but immediately stop the job.
    unsuspend(stop_reason=false){
        if (this.status_code == "suspended"){
            if(stop_reason){
                this.stop_for_reason("interruped", stop_reason);
                this.set_up_next_do(0);
            }
            else {
                this.set_status_code("running");
                this.set_up_next_do(1);
            }
        }
    }

    //returns true if success, false if not, undefined if this.keep_history is false,
    //but no callers care.
    record_sent_instruction_stop_time(ins_id, stop_time){
        if (this.keep_history){
            for(let ins of this.sent_instructions){
                if (typeof(ins) == "string") ; //forget about it. can't store a stop time
                else if(ins[Instruction.INSTRUCTION_ID] === ins_id){
                     ins[Instruction.STOP_TIME] = stop_time;
                     return true
                }
            }
            return false //would happen if the instruction is a string, OR if there's a shouldn't type error, but can't distinguish between the tow so just let it go
                   //shouldnt("a_job.record_sent_instruction_stop_time  passed ins_id: " + ins_id +
                    // " but couldn't find an instruction with that id in Job." + this.name + ".sent_instructions")
        }
    }
}

//used by Job.prototype.to_source_code. Keep in sync with Job.constructor!
Job$1.job_default_params = null;

Job$1.status_codes = [//normal starting up
                    "not_started", "starting", "running",
                    "stopping",  //user clicked button to stop while Job was running Dexter.empty_instruction_queue.
                                 //so wait until the ack for Dexter.empty_instruction_queue comes back to DDE,
                                 //THEN stop the job.
                    "running_when_stopped",
                    //paused while running
                    "suspended", "waiting",   //(wait_until, sync_point)
                    //below mean how runnning the job was stopped.
                    "errored",
                    "interrupted", //user stopped manually,
                    "completed"    //normal OK completion
                    ];

Job$1.global_user_data = {};
Job$1.job_id_base = 0; //only used for making the job_id.
Job$1.all_names = []; //maintained in both UI and sandbox/ used by replacement series job names

//note that once we make 1 job instance with a name, that binding of
//Job.the_name never goes away, and that name will always be in the
//the all_names list. But if you redefine a Job (with the same name)
//the old value of that name is gc'd.
Job$1.remember_job_name = function(job_name){
    if (!Job$1.all_names.includes(job_name)){
        Job$1.all_names.push(job_name);
    }
};

Job$1.forget_job_name = function(job_name){
    let i = Job$1.all_names.indexOf(job_name);
    if (i != -1){
        Job$1.all_names.splice(i, 1);
    }
};

//we can't send to sandbox or UI, this has to work in both.
//that's why we have Job.remember_job_name().
//used by series replacement
Job$1.is_job_name = function(a_string){
    return Job$1.all_names.includes(a_string)
};

Job$1.all_jobs = function(){
    let result = [];
    for(let name of Job$1.all_names){
        result.push(Job$1[name]);
    }
    return result
};

Job$1.job_id_to_job_instance = function(job_id){
    if(typeof(job_id) === "string"){
        job_id = parseInt(job_id);
    }
    for(let name of Job$1.all_names){
        if (Job$1[name].job_id === job_id) {return Job$1[name]}
    }
    return null
};

//returns the latest defined job or null if there are no defined jobs
Job$1.latest_defined_job = function() {
    return Job$1.job_id_to_job_instance(Job$1.job_id_base)
};

/*Job.job_id_to_job_instance = function(job_id){
    let str = job_id.toString()
    let str_of_int = str.substring(0, str.indexOf("."))
    if(str_of_int == -1) { str_of_int = str}
    let the_int = parseInt(str_of_int)
    return Job.job_id_to_job_instance_aux(the_int)
}*/
Job$1.last_job = null;

//called when user clicks the stop button (stop sign button)
Job$1.stop_all_jobs = function(){
    var stopped_job_names = [];
    for(var j of Job$1.all_jobs()){
        //if (j.robot instanceof Dexter) { j.robot.empty_instruction_queue_now() }
        if ((j.stop_reason == null) && (j.status_code !== "not_started")){
            j.stop_for_reason("interrupted_by_stop_button", "User stopped all jobs.", false);
            stopped_job_names.push(j.name);
        }
       // j.robot.close() //does not delete the name of the robot from Robot, ie Robot.mydex will still exist, but does disconnect serial robots
          //this almost is a good idea, but if there's a job that's stopped but for some reason,
          //its serial port is still alive, better to call serial_disconnect_all()
        if (j.robot instanceof Dexter) { j.robot.close_robot(); } //needed when wanting to start up again, exp with dexter0
    }
    serial_disconnect_all();
    if (stopped_job_names.length == 0){
        out("There are no active jobs to stop.");
    }
    else {
       out("Stopped jobs: " + stopped_job_names);
    }
};

Job$1.prototype.undefine_job = function(){
    //if(this.robot instanceof Dexter) { Dexter.remove_from_busy_job_arrays(this) }
    delete Job$1[this.name];
    Job$1.forget_job_name(this.name);
    this.remove_job_button();
};

Job$1.clear_stopped_jobs = function(){
    var cleared_job_names = [];
    for(var j of Job$1.all_jobs()){
        if ((j.stop_reason != null) || (j.status_code == "not_started")){
            j.undefine_job();
            cleared_job_names.push(j.name);
            if (j == Job$1.last_job) { Job$1.last_job = null; }
        }
    }
    if ((Job$1.last_job === null) && (Job$1.all_names.length > 0)){
        Job$1.last_job = last(Job$1.all_names); //not technically the last job created since
        //that was deleted
        //and might not even be the last job "redefined".
        //but its pretty close and the use of last_job isn't really sensitve to
        //being precise so this is pretty good.
    }
    if (cleared_job_names.length == 0){
        out("There are no stopped jobs to clear.");
    }
    else { out("Cleared jobs: " + cleared_job_names); }
};

//used in making robot_status_history window.
/* this functionality doesn't match its name, and its never called so don't have it!
Job.prototype.highest_sent_instruction_id = function(){
    if (this.sent_instructions.length > 0){
        return this.sent_instructions[0]
    }
    else { return null }
}*/

Job$1.report = function(){
        if (Job$1.all_names.length == 0){
            out("Either no jobs have been created in this session,<br/>" +
                "or all the jobs have been cleared.<br/>" +
                "See the <button>Jobs&#9660;</button> <b>Insert example</b> menu item<br/>" +
                "for help in creating a job.");
        }
        else {
            var result  = "<table style='border: 1px solid black;border-collapse: collapse;'><tr style='background-color:white;'><th>Job Name</th><th>ID</th><th>Robot</th><th>Start Time</th><th>Stop Time</th><th>Status</th></tr>";
            for (var j of Job$1.all_jobs()){
                var start_time = "Not started";
                var stop_time = "";
                if (j.start_time){
                    start_time = j.start_time.getHours()   + ":" +
                        j.start_time.getMinutes() + ":" +
                        j.start_time.getSeconds() + ":" +
                        j.start_time.getMilliseconds();
                    stop_time = "ongoing";
                }
                if (j.stop_time){
                    stop_time = j.stop_time.getHours()   + ":" +
                        j.stop_time.getMinutes() + ":" +
                        j.stop_time.getSeconds() + ":" +
                        j.stop_time.getMilliseconds();
                }
                var action = 'Job.print_out_one_job,,' + j.name;
                //var name = "<a href='#' title='Click for details on this job.' class='onclick_via_data' data-onclick='" + action + "'>" + j.name + "</a>"
                var job_name = "<a href='#' title='Click for details on this job.' class='onclick_via_data' data-onclick='" + action + "'>" + j.name + "</a>";

                result += "<tr/><td>" + job_name + "</td><td>" + j.job_id + "</td><td>" + j.robot.name + "</td><td>" + start_time + "</td><td>" + stop_time + "</td><td>" + j.status() + "</td><tr>";
            }
            result += "</table>";
            out(result);
            SW.install_onclick_via_data_fns();
        }
};

//called by make_dde_status_report for emails. Should not contain html.
Job$1.active_jobs_report = function(){
    let jobs = Job$1.active_jobs();
    if(jobs.length == 0) { return "There are no active Jobs." }
    else {
        let result = "";
        for(let job_instance of jobs) {
            let cur_instr = job_instance.do_list[job_instance.program_counter];
            let pc = job_instance.program_counter;
            let instr_src;
            if(pc < 0) { instr_src = "At beginning of job."; }
            else if (pc >= job_instance.do_list.length) {
                         instr_src = "At end of job.";
            }
            else {       instr_src = to_source_code({value: cur_instr}); }
            result += "Name: Job." + job_instance.name +
                      "\nStatus: " + job_instance.status_code +
                      "\nProgram Counter: " + pc;
            result += "\nCurrent Instruction source: " + instr_src + "\n\n";
        }
        return result
    }
};

Job$1.prototype.print_out = function(){
    out(this.stringify());
    //setTimeout(function(){install_onclick_via_data_fns()}, 200) //needs to let the html render.
};

Job$1.print_out_one_job = function(job_name){
        var j = Job$1[job_name];
        j.print_out();
};

Job$1.prototype.status = function (){
    if (this.stop_reason)      { return this.status_code + ": " + this.stop_reason }
    else if (this.wait_reason) { return this.status_code + ": " + this.wait_reason}
    else {
       let len = this.orig_args.do_list.length;
       if ( this.do_list) { len = this.do_list.length; }
       let pc = 0;
       if (this.program_counter) { pc = this.program_counter; }
       return this.status_code + ", pc: " + pc + " of " + len
    }
};

//placed on the do_list if there's a robot status error.
Job$1.prototype.if_robot_status_error_default = function(){
    let robot_status = this.robot.robot_status;
    let msg = this.rs_to_error_message(robot_status);
    warning("Dexter robot_status error: " + msg);
    let rob = this.robot;
    if(rob instanceof Dexter){
        let sim_actual = Robot.get_simulate_actual(rob.simulate);
        if((sim_actual === false) || (sim_actual === "both")){
            try{ let path = "Dexter." + rob.name + ":/srv/samba/share/errors.log";
                 DDEFile.read_file_async(path, function(err, content){
                         if(err) {warning("Could not find: " + path);}
                         else {
                            if((typeof(content) != "string") ||
                                (content.length == 0)){
                                content == "<i>errors.log is empty</i>";
                            }
                            else {
                             content = Utils.replace_substrings(content, "\n", "<br/>");
                             content = "Content of " + path + "<br/><code>" + content + "</code>";
                             setTimeout(function(){DDEFile.write_file_async(path, "");},
                                        400); //give the read_file job a chance to finish properly
                            }
                            out(content);
                        }
                 });
               }
            catch(err) {warning("In Job.prototype.if_robot_status_error_default, could not get the errors.log file<br/>" +
                                  " for " + "Dexter." + rob.name); }
        }
    }
    return Control.error(msg)
    //this default method stops the job but allows the when_stopped instruction to run.
};

Job$1.prototype.if_instruction_error_default = function(error_message){
    let pc_of_error_instruction = this.program_counter - 1;
    let erroring_instruction = this.do_list[pc_of_error_instruction];
    let instr_src = to_source_code(erroring_instruction);
    let msg = "Error: " + error_message + " in instruction of Job." + this.name + " at do_list program counter of: " + pc_of_error_instruction +
              "<br/>" + instr_src;
    //warning(msg) //redundant. Let Control.error print the msg.
    return Control.error(msg)
    //this default method stops the job but allows the when_stopped instruction to run.
};

//unlike the others, the job won't proceed from this.
Job$1.prototype.if_dexter_connect_error_default = function(robot_name){
    let rob = Dexter[robot_name];
    let msg = "Error in connecting to Dexter." + robot_name +
              " at ip_address: " + rob.ip_address +
              " port: "          + rob.port +
              " for Job."        + this.name +
              "<br/>If Dexter."  + robot_name + " is unconnected, you can still use the simulator." +
              "<br/>In the Misc pane header, click the <b>simulate</b> radio button.";
    warning(msg);
    return null // this default method allows the job to proceed, unlike
                // Dexter.stop_job(undefined, msg) or Control.error instruction
};

//from James N
Job$1.prototype.rs_to_error_message = function(robot_status){
    let error_code = robot_status[Dexter.ERROR_CODE];
    let oplet_error_code = error_code & 0xFF; //lower 8 bits
    let msg = "error_code: " + error_code + " ";
    let oplet = robot_status[Dexter.INSTRUCTION_TYPE];
    if (error_code > 0) {
        if((oplet == "r") || (oplet == "w")) {
            let linux_msg = globalThis.linux_error_message(oplet_error_code);
            msg += "Error on oplet 'r' (read_file) with Linux error of: " + linux_msg;
        }
        else {
            if      (oplet_error_code == 1)  {msg += " oplet:"    + oplet + " is unknown to Dexter. Please upgrade Dexter firmware and gateware.<br/>";}
            else if (oplet_error_code == 2)  {msg += " on oplet:" + oplet + " communication error.<br/>";}
            else                             {msg += " on oplet:" + oplet + " Unknown error.<br/>";}
        }
        if(error_code & (1 << 10)) {msg+=" Firmware - Gateware Mismatch. Update system. Fatal error.<br/>";}
        if(error_code & (1 << 27)) {msg+=" SPAN Servo, Joint 7. r 0 errors.log <br/>";}
        if(error_code & (1 << 28)) {msg+=" ROLL Servo, Joint 6. r 0 errors.log <br/>";}
        if(error_code & (1 << 30)) {msg+=" Joint Monitor. r 0 errors.log <br/>";}
    }
    return msg
};


//if the job errored, the robot is a dexter, and the error code is in the 600's,
//and we're not simulating, then try to show the user the Dexter's errors.log file
//in the output pane.
Job$1.prototype.show_error_log_maybe = function(){
    let rob = this.robot;
    if(rob instanceof Dexter){
        const sim_actual = Robot.get_simulate_actual(rob.simulate);
        if ((sim_actual === false) || (sim_actual === "both")) {
            if((this.status_code == "errored") &&
                (rob.rs.error_code() >= 600) &&
                (rob.rs.error_code() < 700)){
            let path = rob.name + ":" + "../errors.log";
            DDEFile.read_file_async(path,
                function(err, content){
                    if(err) {
                        warning("Could not get " + path + "<br/>Error: " + err);
                    }
                    else {
                        content = Utils.replace_substrings(content, "\n", "<br/>");
                        out("<b>" + rob_name + ":/srv/samba/share/errors.log</b> content:<br/>" + content);
                    }
                });
            }
        }
    }
};

//status_code can also be a when_stopped condition, ie
// errored, errored_from_dexter, errored_from_dexter_connect, interrupted, interrupted_by_stop_button. completed
Job$1.prototype.stop_for_reason = function(condition_when_stopped="interrupted", //"errored", "interrupted", "completed"
                                         reason="unknown reason") { //a string
    if(!Job$1.when_stopped_conditions_property_names.includes(condition_when_stopped)){
        shouldnt("Job." + this.name + ".stop_for_reason called with invalid first arg condition_when_stopped of:<br/>" +
            condition_when_stopped + "<br/>Valid values are: " + Job$1.when_stopped_conditions_property_names);
    }
    else {
        this.condition_when_stopped = condition_when_stopped;
        let pos_of_underscore = condition_when_stopped.indexOf("_");
        if(pos_of_underscore > 0) {
            this.set_status_code(condition_when_stopped.substring(0, pos_of_underscore),
                reason);
            this.color_job_button();
        }
        else {
            this.set_status_code(condition_when_stopped, reason);
            this.color_job_button();
        }
        if (this.robot.heartbeat_timeout_obj) { clearTimeout(this.robot.heartbeat_timeout_obj); }
        this.stop_time    = new Date();
        //this.current_instruction().init_instruction() //needed by at least wait_until and loop. now done in Job.start
        if(condition_when_stopped == "errored_from_dexter_connect"){ //the do list isn't running, so we can't simply wait for that to happen
            let fn = this.if_dexter_connect_error;
            if(fn) {
                let job_instance = this;
                setTimeout(function() {
                              fn.call(job_instance, job_instance.robot.name);
                           }, //beware, might be some other robot
                           200); //we give the job a chance to finish. the job is not expected to be running the do_list
            }
        }
        else if((this.name == "dex_read_file") && (this.status_code == "errored") && globalThis.Editor){
            //this special case needed because if we attempt to Dexter.read_file with sim= real and
            // we're not connected to the Dexter, we get a connection error, which
            // will call stop_for_reason but not finish.
            // globalThis.Editor will be undefined in Node, so ok to have this code when running job engine on dexter.
            Editor.set_files_menu_to_path(); //restore files menu to what it was before we tried to get the file off of dexter.
        }
    }
};

Job$1.when_stopped_conditions_property_names = ["completed", "errored", "errored_from_dexter", "errored_from_dexter_connect",
                                               "interrupted", "interrupted_by_stop_button" ];

Job$1.is_when_stopped_conditions_valid = function(when_stopped_conditions){
    if(typeof(when_stopped_conditions) == "boolean") { return true }
    else if(typeof(when_stopped_conditions) == "object") {
       for(let key in when_stopped_conditions){
           if(!Job$1.when_stopped_conditions_property_names.includes(key)){
               return false
           }
           let val = when_stopped_conditions[key];
           if (key == "errored_from_dexter_connect") {
               if (val !== false){
                   warning("The value for Job param when_stopped_conditions, property: errored_from_dexter_connect<br/>" +
                           " is: " + val + " but only a value of false is valid.<br/>" +
                           "Use Job param if_dexter_connect_error to supply a method to call<br/>" +
                           "when there's a dexter connection error.");
                   return false
               }
           }
           else if(typeof(val) !== "boolean") {
               return false
           }
       }
       return true
    }
    else { return false }
};

Job$1.prototype.ok_to_run_when_stopped = function(){
    if(this.when_stopped == "stop") { return false }
    //else if(this.when_do_list_done == "wait") { return false } //whether this val is "wait" or "run_when_stopped" its ok, so this prop isn't a factor in what ok_to_run_when_stopped returns
    else if (this.when_stopped_conditions === true ) { return true }
    else if (this.when_stopped_conditions === false) { return false }
    else {
       let cond = this.when_stopped_conditions[this.condition_when_stopped];
       if(cond === undefined) { return true }
       else if (this.condition_when_stopped == "errored_from_dexter_connect") { return true } //was false, as this usually happens at very beginnig of job  efore its really started, but new  jun 2021 idea is, try hard to always run the when_stopped instruction
       else { return cond } //better be true or false. //this should never arrise as if this.when_stopped_conditions is a boolean, it will be caught above.
    }
};

//adds when_stopped instruction to the do_list if it hasn't already been run,
//and if it has, ends the job.
Job$1.prototype.finish_job = function(){
      if(this.status_code == "errored")  { //todo avoid printing twice but we want to print before starting the when_stopped action
        let failed_instruction = this.do_list[this.program_counter];
        let mess = to_source_code({value: failed_instruction});
        out("Job." + this.name + " failed instruction " + this.program_counter + ": " + mess, "red");
      }
      if (!this.ok_to_run_when_stopped()||     // never run the when_stopped instruction
           this.already_started_when_stopped){ // we've already run the when_stopped instruction
          if(["errored", "interrupted"].includes(this.status_code)); //leave status_code as is, even if there is a final_status_code,
               //because maybe it errored or was interruopted while running the when_stopped fn,
               //in which case we want the final job status to be errored or interrupted regardless
               //of its status upon completed the orig do_list
          else if(this.final_status_code) { //happens when the status_code was set to "running_when_stopped "
              this.status_code = this.final_status_code;
          } //does not hit in the all defaults case
          Waiting.done_with_job(this); //just makes sure we've cleaned up the Waiting state
          this.robot.finish_job();
          //if(this.robot instanceof Dexter) { this.robot.remove_from_busy_job_array(this)} //sometimes a job might be busy and the user clicks its stop button. Let's clean up after that!
          //Dexter.remove_from_busy_job_arrays(this) //remove from ALL Dexters' busy_job_arrays.
          this.color_job_button(); //possibly redundant but maybe not and just called on finishing job so leave it in
          this.show_progress_maybe();
          out("Done with Job." + this.name + ", for reason: " + this.stop_reason +
              " platform: " + globalThis.platform + " keep_alive: " + globalThis.keep_alive_value);
          if(globalThis.platform === "node") { //only calls close_readline to end process, or doesn't
            if(globalThis.keep_alive_value) ; //keep the process alive
            else {
                let the_active_jobs = Job$1.active_jobs();
                //the below a bit tricky as the 'this' job is in the process of finishing
                // and might or might not be "active".
                //onsole.log("In finish_job for job: " + this.name + " id: " + this.job_id)
                //onsole.log("active_jobs length: " + the_active_jobs.length)

                if( (the_active_jobs.length == 0) ||
                   ((the_active_jobs.length == 1) &&
                    (the_active_jobs[0].job_id === this.job_id)
                   )
                ) { //don't close the readline if there's a job that still wants to use it.
                    //as our orig job might have launched a 2nd job, so keep it open
                    //until all are done.
                    out("OUT: finished all jobs");
                    let mess_obj = {kind: "all_jobs_finished"};
                    process.send(mess_obj);
                   /// console.log("finish job, now calling close_readline")
                   /// globalThis.close_readline() //causes the process running this job to finish.
                }
            }
          }
          //this.show_error_log_maybe() //I'm already doing this when
          //a robot_status comes back with a non-zero error code.
      }
      /*else if((this.when_do_list_done === "wait") && (this.status_code === "running")){ //even if we somehow stopped in the middle of the do_list,
        // we are going to wait for a new instruction to be added
        //beware, maybe race condition here with adding a new instruction.
        this.set_status_code("running")
        this.program_counter = this.do_list.length
        this.set_up_next_do(0)
      }*/
      else { //perform the when_stopped action
          this.already_started_when_stopped = true;
          this.final_status_code = this.status_code;
          this.status_code = "running_when_stopped";
          if (Instruction.is_do_list_item(this.when_stopped)){ //careful, it might be an array of instructions. If so, we want to stick that array on the do_list as one item.
              this.program_counter = this.do_list.length - 1; //do before the insert so we insert at the end
              this.insert_single_instruction(this.when_stopped, false); //2nd arg false means Not a sub-instruction
              this.ending_program_counter = "end"; //because we got here due to ending_program_counter being early, and
                 //one way that can happen is if Control.stop_job is run, which sets the ending_program_counter
                 //to get the job to stop at that instruction, but then, we add more instructions
                 //so we have to get rid of that early end and allow the new when_stopped instruction to run
              this.when_do_list_done = "run_when_stopped"; //before setting, this might be "wait", but when finish_job
                 //is called, we are no longer going to wait for an instruction.
              this.when_stopped = "stop"; //ie we've already "used up" the when_stopped instruction, so stop when its done.
              this.set_up_next_do(); //advance to the inserted instruction.
          }
          else if (Job$1.is_plausible_instruction_location(this.when_stopped)){ //obsolete
              this.stop_for_reason("errored",
                                    "You have a job when_stopped value of a location:<br/>" +
                                    to_source_code(this.when_stopped) +
                                    "<br/>but 'when_stopped' can no longer be a location.<br/>" +
                                    'It must be: "stop", or a valid do_list item like a function.');
              this.set_up_next_do(0);
          }
          else {
              this.stop_for_reason("errored",
                  "You have a job when_stopped value of:<br/>" +
                  to_source_code(this.when_stopped) +
                  "<br/>that is invalid<br/>" +
                  'It must be: "stop", or a valid do_list item like a function.');
              this.set_up_next_do(0);
          }
    }
};

Job$1.go_button_state = true;

Job$1.set_go_button_state = function(bool){
    pause_id.checked = !bool;
    Job$1.go_button_state = bool;
};

Job$1.go = function(){
    //if(globalThis.dui2 && dui2.instances.length > 0) { dui2.go_button_click_action()}
    if (Job$1.go_button_state){
        let any_active_jobs = false;
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                any_active_jobs = true;
                if (a_job.go_state) ; //user hit go button with go_button_state true  and a_job go true. let it run
                    //a_job.set_up_next_do(a_job.pause_next_program_counter_increment, false)
                else { //go_button state is true but a_job go_state is false so turn it on an run
                    a_job.go_state = true;
                    a_job.set_up_next_do(a_job.pause_next_program_counter_increment, false);
                }
            }
        }
        if (!any_active_jobs) { warning("There are no active jobs.", true); }
    }
    else { //go_button_state is false
        let any_active_jobs = false;
        for(let a_job of Job$1.all_jobs()){
            if (a_job.is_active()){
                any_active_jobs = true;
            //if (a_job.go_state) {
                a_job.set_up_next_do(a_job.pause_next_program_counter_increment, true); //allow once
            //}
            //else {} //go_button_state is false and a_job go is false, already paused,  do nothing
            }
        }
        if (!any_active_jobs) { warning("There are no active jobs.", true); }
    }
    return "dont_print"
};

//in EVERY call, as of mar 7, 2016 the arg is 1. So probably should just get rid of the arg.
//nope: we need it to be 0 when we have a fn that is "looping" checking for some
//condition to be true, in which case it moves on to increment by 1, like "sleep" or something.
//this is important because send_to_job  might do insert of its instruction "after_pc"
//and we want that to be in a "good" spot, such that the inserted insetruction
//will run next. So we want to keep the incrementing of the PC to be
//in the setTimeout so that when we do a insert "after_pc",
//that inserted instruction is run next.
Job$1.prototype.set_up_next_do = function(program_counter_increment = 1, allow_once=false){ //this was removed as it is never called in DDE, inter_do_item_dur=this.inter_do_item_dur){ //usual arg is 1 but a few control instructions that want to take a breath call it with 0
    //out("set_up_next_do with job: " + this.name)
    var job_instance = this;
    if (this.status_code == "suspended") { return } //don't call do_next_item
    else if (Job$1.go_button_state || allow_once){ //Job.go_button_state being true is the normal case
        if ((this.status_code == "errored") || (this.status_code == "interrupted")){
            program_counter_increment = 0; //don't increment because we want pc and highest_completed_instruction_id
                                          // to be the instruction that errored when the job finishes.
        }
        if ((program_counter_increment > 0) && //if this is 0, it means we haven't completed its associated (PC) instr yet.
                                               //if this is < 0, we're backing up so don't change highest_completed_instruction_id
            (job_instance.program_counter > job_instance.highest_completed_instruction_id) && //if these were the same, setting highest_completed_instruction_id would just bre to its same value
            (job_instance.program_counter < job_instance.do_list.length))   //NEW mar 23, 2019: in case pc goes off the end, we don't want to set highest_completed_instruction_id off the end
            {
            job_instance.highest_completed_instruction_id = job_instance.program_counter;
        }
        if(this.modify_program_counter_increment_fn) { //needs to be after we've set highest_completed_instruction_id for the prev instruction
            program_counter_increment = this.modify_program_counter_increment_fn.call(null, this, program_counter_increment);
            //but be wary. What is the actual subject in the modify_program_counter_increment_fn call???
            //if the method we want is something like someClass.some_meth, can we get someClass to be
            //the "this" of the call?
            if (program_counter_increment === null) { return } //don't keep running these instructions.
                //we're not stopping the job, just effectively suspending it.
            else if (typeof(program_counter_increment) != "number") {
                dde_error("in Job.set_up_next_do,<br/>" +
                    this.modify_program_counter_increment_fn + "<br/> returned: " + program_counter_increment +
                    "<br/>which is invalid because it isn't a number and it isn't null.");
            }
        }
        job_instance.program_counter += program_counter_increment;
        let job_inter_do_item_dur = this.inter_do_item_dur;
        let processed_inter_do_item_dur = job_inter_do_item_dur;
        if(job_instance.do_list.length > job_instance.program_counter){ //there are more instructions
            let next_item = job_instance.do_list[job_instance.program_counter];
            if(Instruction.is_oplet_array(next_item, "S") ||
                (typeof(next_item) == "function") ||
               Control.is_control_instruction(next_item)) {
                processed_inter_do_item_dur = 0;
            }
        }
        //in order from fastests and most dangerous to slowest and most safe.
        if(job_inter_do_item_dur === -3){
            return job_instance.do_next_item()
        }
        else if(job_inter_do_item_dur === -2){
            return asapRaw(function() {
                job_instance.do_next_item();
            })
        }
        else if(job_inter_do_item_dur === -1){
            return asap_1(function() {
                job_instance.do_next_item();
            })
        }
        else {
            setTimeout(function(){
                            job_instance.do_next_item();
                        },
                       processed_inter_do_item_dur * 1000); //convert from seconds to milliseconds
        }
    }
    else { //the stepper output
        job_instance.pause_next_program_counter_increment = program_counter_increment;
        job_instance.go_state = false;
        let suffix = "";
        if          (job_instance.program_counter == -1) { suffix = " (initing robot status)"; }
        else if     (job_instance.program_counter == 0)  { suffix = " (your first instruction)"; }
        else if     (job_instance.program_counter == job_instance.do_list.length - 1) { suffix = " (last instruction)"; }
        else if     (job_instance.program_counter == job_instance.do_list.length - 2) { suffix = " (2nd to last instruction)"; }
        let out_text = job_instance.name + " paused after program_counter=" + job_instance.program_counter + " of " +
                       job_instance.do_list.length + suffix + "<br/>";
        if(job_instance.program_counter >= 0) {
           let instr = this.do_list[job_instance.program_counter];
           if(instr) { //this may be undefined if using dui2 and you check the pause_id checkbox
                out_text +=  "Prev ins: " + Instruction.text_for_do_list_item_for_stepper(instr);
           }
        }
        else { out_text +=  "Prev ins: None"; }
        out_text += "<br/> Next ins: ";
        if ((job_instance.program_counter + 1) >= job_instance.do_list.length){
            out_text +=  "None";
        }
        else {
            out_text +=  Instruction.text_for_do_list_item_for_stepper(this.do_list[job_instance.program_counter + 1]);
        }
        out(out_text, "brown", true);
    }
};

//run the instruction at the pc. The pc has been adjusted by set_up_next_do to normally increment the pc.
//with a bunch of exceptions for determining that the job is over at the top of this method.
Job$1.prototype.do_next_item = function(){ //user calls this when they want the job to start, then this fn calls itself (via set_up_next_do until done
    //this.program_counter += 1 now done in set_up_next_do
    //if (this.show_instructions){ onsole.log("Top of do_next_item in job: " + this.name + " with PC: " + this.program_counter)}
    //onsole.log("top of do_next_item with pc: " + this.program_counter)
    //out(this.name + " do_next_item top ")
    //onsole.log("top of do_next_item 2")
    if(globalThis.js_debugger_checkbox_id && js_debugger_checkbox_id.checked) {
        //the print help statements are here so that they get called both when
        //the user checks the checkbox, AND when Control.debugger instruction is run.
        out("To stop debugging, Eval: <code>undebug_job()</code> in Dev Tools console and click the big blue arrow.");
        debugger; //LEAVE THIS IN RELEASED CODE
        //onsole.log("To stop debugging, Eval:   undebug_job()   and click the big blue arrow, ")
    }
    let ending_pc = this.instruction_location_to_id(this.ending_program_counter); //we end BEFORE executing the ending_pcm we don't execute the instr at the ending pc if any
    //onsole.log("near top of do_next_item with status_code: " + this.status_code)

    if (["completed", "errored", "interrupted"].includes(this.status_code)){//put before the wait until instruction_id because interrupted is the user wanting to halt, regardless of pending instructions.
        //onsole.log("do_next_item about to call finish_job")
        this.finish_job();
        return
    }
    else if (this.stop_reason && (this.status_code !== "running_when_stopped")){ //maybe never hits as one of the above status_codes is pobably set
        this.finish_job();
        return
    }
    else if(Waiting.job_waiting_for_dexter(this)){
        let dexter_instance = Waiting.job_waiting_for_dexter(this);
        if(!Waiting.dexter_now_performing(dexter_instance)){ //the job is waiting, but for no good reason since the dexter is now free, so go ahead
            let instr = Waiting.instruction_to_run_on_job(this);
            Waiting.clear_job_and_dexter(this, dexter_instance);
            this.send(instr);
            return
        }
        else { this.set_up_next_do(0); }
    }
    /*
    else if (this.wait_until_instruction_id_has_run || (this.wait_until_instruction_id_has_run === 0)){ //the ordering of this clause is important. Nothing below has to wait for instructions to complete
        //wait for the wait instruction id to be done
        //the waited for instruction coming back thru robot_done_with_instruction will call set_up_next_do(1)
        //so don't do it here. BUT still have this clause to block doing anything below if we're waiting.
        return
    }*/

    //already got a stop reason, we don't want to keep waiting for another instruction.
    else if (this.wait_until_this_prop_is_false) {
        this.set_up_next_do(0);
        return
    }

    else if (this.instr_and_robot_to_send_when_robot_unbusy) {
        let [inst, robot] = this.instr_and_robot_to_send_when_robot_unbusy;
        //if(robot.is_busy()) { } //loop around again
        //else {
            this.robot_and_instr_to_send_when_robot_unbusy = null;
            this.send(inst, robot);
        //}
        return
    }
    else if (this.hasOwnProperty("insert_last_instruction_index") &&
            (this.when_do_list_done == "wait") &&
            (this.program_counter <= this.insert_last_instruction_index)){
        delete this.insert_last_instruction_index;
        //allow this to fall through to the code after this if...else if
        //unlike all the other clauses
    }

    else if (this.program_counter >= ending_pc) {  //this.do_list.length
        //onsole.log("do_next_item the normal stop case ")
        if (this.when_do_list_done == "wait") { //we're in a loop waiting for the next instruction.
            //this.color_job_button() //too expensive and unnecessary as color set elsewhere
            if((this.status_code === "waiting") &&
               (this.wait_reason === "more instructions.")) ;
            else {
                this.set_status_code("waiting", "more instructions."); //do not call unnecessarily, wastes processor time in dde and really bad for job engine browser interface
            }
            this.set_up_next_do(0);
        }
        else if (ending_pc < this.do_list.length) { //we're ending in the middle of the ob. Don't do the final g cmd, as too confusing
            let stop_reason = "Stopped early due to ending_program_counter of: " + this.ending_program_counter;
            this.stop_for_reason("completed", stop_reason);
            this.finish_job();
        }

        else if (!this.stop_reason){
            let reason = "Finished all " + this.do_list.length + " do_list items.";
            this.stop_for_reason("completed", reason);
            this.finish_job();
        }
        else { this.finish_job(); }
        return
    }
    //onsole.log("in do_next_item top of fn semantic body")
    //body of the fn.
    //regardless of whether we're in an iter or not, do the item at pc. (might or might not
    //have been just inserted by the above).
      if((this.status_code === "waiting") &&
          (this.wait_reason === "more instructions.")){ //we WERE waiting for more instructions, but
            // we must have gotten more because (this.program_counter >= ending_pc)
            //is not true (from "else if" above). So while we have more, set status to running
          this.set_status_code("running");
      }
      let cur_do_item = this.current_instruction();
      //onsole.log("in do_next_item with cur_do_item: " + cur_do_item)
      try {
        //out(this.name + " do_next_item cur_do_item: " + cur_do_item)
        this.show_progress_maybe();
        this.select_instruction_maybe(cur_do_item);
        if (this.program_counter >= this.added_items_count.length) { this.added_items_count.push(0);} //might be overwritten further down in this method
        else if (this.added_items_count[this.program_counter] > 0) { //will only happen if we go_to backwards,
           //in which case we *might* call an instruction twice that makes some items that it adds to the to_do list.
           //so we want to get rid of those items and "start over" with that instruction.
            this.remove_sub_instructions_from_do_list(this.program_counter);
        }

        if (Instruction.is_no_op_instruction(cur_do_item)){ //nothing to do, just skip it.
            this.set_up_next_do(1);
        }
        else if ((this.sent_from_job_instruction_queue.length > 0) &&
                 this.is_top_level_do_item(cur_do_item)){
            //bad, inserts after pc not AT pc this.insert_instructions(this.sent_from_job_instruction_queue) //all items on queue are next_top_level, so just insert them all.
            this.do_list.splice(this.program_counter, 0, ...this.sent_from_job_instruction_queue);
            let added_items_for_insert = new Array(this.sent_from_job_instruction_queue.length);
            added_items_for_insert.fill(0);
            this.added_items_count.splice(this.program_counter, 0, ...added_items_for_insert);


            //note we're inserting sent_from_job instructions, not the REAL instruction we want to execute.
            //that's because in the hierarchical do_list display, we want to see where those REAL instructions came from for debugging purposes.
            this.sent_from_job_instruction_queue = [];

            let is_top_array = new Array(this.sent_from_job_instruction_queue.length);
            is_top_array.fill(true);
            this.is_do_list_item_top_level_array.splice(this.program_counter, 0, ...is_top_array);
            this.set_up_next_do(0);
        }
        else if (typeof(cur_do_item) === "string"){
            //out("<i>Job." + this.name + ", Instruction " + this.program_counter + ":</i> " + cur_do_item)
            this.send(cur_do_item);
        }
        else if (cur_do_item instanceof Instruction.loop){
            let ins = cur_do_item.get_instructions_for_one_iteration(this);
            if (ins === null) { } //done with loop
            else {
                let flatarr = Job$1.flatten_do_list_array(ins);
                this.insert_instructions(flatarr);
            }
            this.set_up_next_do(1);
        }
        else if (cur_do_item instanceof Instruction){
            cur_do_item.do_item(this);
        }
        else if (Instruction.is_oplet_array(cur_do_item)){
            this.wait_until_instruction_id_has_run = this.program_counter;
            this.send(cur_do_item);
        }
        else if (Instruction.is_data_array(cur_do_item)){
            let new_do_item = this.transform_data_array(cur_do_item);
            if(Instruction.is_no_op_instruction(new_do_item)) { this.set_up_next_do(1); }
            else if(Instruction.is_sendable_instruction(new_do_item)){
                this.wait_until_instruction_id_has_run = this.program_counter;
                this.send(new_do_item); //we know we have a sendable, so send it.
            }
            else if(Instruction.is_data_array(new_do_item)){
                    this.stop_for_reason("errored", "The instruction: " + cur_do_item +
                    "<br/>resolved to: " + new_do_item +
                    "<br/>which is a data_array but we've already performed data_array transformation." +
                    "<br/>Fix Job." + this.name + ".data_array_transformer" +
                    "<br/>to not return another data_array or" +
                    "<br/>change: " + JSON.stringify(cur_do_item));
                    this.set_up_next_do(0);
            }
            else if(Instruction.is_do_list_item(new_do_item)){
                    this.insert_single_instruction(new_do_item);
                    this.set_up_next_do(1);
            }
        }
        else if (Array.isArray(cur_do_item)){
            this.handle_function_call_or_gen_next_result(cur_do_item, cur_do_item);
            //note that a user normally wouldn't directly put an array on the do_list,
            //but Job.insert_instruction very likely would to put > 1 instruction on
        }
        else if (Utils.is_iterator(cur_do_item)){ //generator. must be before "function" because an iterator is also of type "function".
            var next_obj = cur_do_item.next();
            var do_items = next_obj.value;
            let have_item_to_insert;
            if      (do_items === null)       { have_item_to_insert = false; }
            else if (do_items === undefined)  { have_item_to_insert = false; }
            else if (Array.isArray(do_items) && (do_items.length == 0)) { have_item_to_insert = false; }
            else have_item_to_insert = true;

            if (have_item_to_insert) {
                if (next_obj.done){ //run the one last instruction from this gen
                    this.insert_single_instruction(do_items);
                    this.set_up_next_do(1);
                }
                else  { //not done so we must insert the cur_do_item
                    if (Instruction.is_oplet_array(do_items) || !Array.isArray(do_items)) {
                       do_items = [do_items, cur_do_item]; }
                    else  { //do_items is already an array
                        do_items = do_items.slice(0); //copy the do_items just in case user is hanging on to that array, we don't want to mung it.
                        do_items.push(cur_do_item);
                    }
                    this.insert_instructions(do_items);
                    this.set_up_next_do(1);

                }
            }
            else { //no items to insert
                if (next_obj.done){ this.set_up_next_do(1); } //done with this generator
                else              { this.set_up_next_do(0); } //keep generator alive
            }
        }
        else if (typeof(cur_do_item) == "function"){
            //try{
                var do_items = cur_do_item.call(this); //the fn is called with "this" of this job
                //onsole.log("do_next_item with function that returned: " + do_items)
                this.handle_function_call_or_gen_next_result(cur_do_item, do_items); //take the result of the fn call and put it on the do_list
            //}
           // catch(err){
            //    warning("Job " + this.name + " errored executing instruction with id: " + this.program_counter + "<br/>" +
            //             cur_do_item.toString() + "<br/>" +
            //             err.message)
            //    this.stop_for_reason("errored", "Calling function at instruction id: " + this.program_counter + " errored.")
            //    this.set_up_next_do(1)
            // }
        }
        else if (Instruction.is_start_object(cur_do_item)){
            this.handle_start_object(cur_do_item);
        }
        else if (cur_do_item instanceof Promise){
            let the_job = this; //for the closure
            cur_do_item.then(function() { //called when the prmise resolves
                //is_resolved = true
                the_job.set_up_next_do(1); //we're done waiting for the promise ot resolve so move on to the next do_list_item
            });
        }
        else {
            this.stop_for_reason("errored", "Job: " + this.name + " got invalid do_item on do_list of: " +
                                 Utils.stringify_value(cur_do_item));
            //It's over, Jim, So don't take a breath, by calling set_up_next_do(0),
            //just kill it quickly before anything else can happen.
            //we don't want to increment the pc,
            this.set_up_next_do(0); //this will cause job to properly finish
        }
    }
    catch(err){ //this can happen when, for instance a fn def on the do_list is called and it contains an unbound var ref
       //this.stop_for_reason("errored", err.message) //let do_next_item loop around and stop normally
       //this.set_up_next_do(0)
        warning("Error running instruction: " + this.program_counter +
            " with source: " + to_source_code({value: cur_do_item}) +
            " in Job." + this.name +
            " of:<br/>" + err.message);
        if(this.if_instruction_error){ //this will hut unless Job author explcitly set if_instruction_error to null or undefined.
            //note if_instruction_error can be a single instruction or an array
            //of instructions. If its an array, we insert it as just one instruction,
            //and that will cause all to be run.
            //it has a default that prints out a message.

            //let the_job = this
            //let fn = function(){
            //    the_job.if_instruction_error(err.message)
            //}
            //this.insert_single_instruction(fn)
            this.insert_single_instruction(this.if_instruction_error);
        }
        this.set_up_next_do();
    }
};

///also called by Make Instruction for creating string to save.
Job$1.prototype.transform_data_array = function(data_array){
        let transformer = this.data_array_transformer;
        if(transformer === undefined) {  //this meth may be called after the job_innstance is defined,
                                         //but before start is called, so it wouldn't have this
                                         //copied over to the instance yet.
            transformer = this.orig_args.data_array_transformer;
        }
        if(Robot.is_oplet(transformer)) { //ie "P"
            let args = data_array.slice(); //make a copy of the data array
            args.unshift(transformer);  //push the oplet on the front of the array
            return make_ins.apply(null, args)  //do the "tranformation" to make a oplet_array
            //this.wait_until_instruction_id_has_run = this.program_counter
            //this.send(new_do_item) //we know we have a sendable, so send it.
        }
        else {
            return transformer.apply(this, data_array)
        }
};



/*cur_do_item is the fn, do_items is the val returned from calling it.
 cur_do_item merely for error message. the real item to do is do_items which might be an array of items

 A do_list function on the do_list can return:
 - an instruction_array (1 letter op_let)  stick it on the do_list and send it.
 - an array of items to stick on the do_list.
 - another function. stick it on the do_list and next time call it.\
 - a generator function
 - an iterator 
 Stick them all (except for iterator) on the do_list and execute them.
 */
Job$1.prototype.handle_function_call_or_gen_next_result = function(cur_do_item, do_items){
    if (do_items == "dont_call_set_up_next_do");
    else if (Instruction.is_no_op_instruction(do_items)){ //ok, just nothing to insert
        this.set_up_next_do(1);
    }
    else if (Array.isArray(do_items)){
        if(Instruction.is_oplet_array(do_items) ||
           Instruction.is_data_array(do_items)){
           this.insert_single_instruction(do_items);
           this.set_up_next_do(1);
        }
        else { //must be an instructions_array
            Job$1.flatten_do_list_array(do_items);
            this.insert_instructions(do_items);
            this.set_up_next_do(1);
        }
    }
    else if (Instruction.is_do_list_item(do_items)){
        this.insert_single_instruction(do_items);
        this.set_up_next_do(1);
    }
    else {
        this.stop_for_reason("errored", "do_item function: " + Utils.stringify_value(cur_do_item) +
            " returned invalid value: "     + Utils.stringify_value(do_items));
        //its over. Don't take a breath with set_up_next_do, kill it off.
        //don't increment pc
        this.do_next_item();
    }
};

//cur_do_item guarenteed to have a start method when this fn is called.
Job$1.prototype.handle_start_object = function(cur_do_item){
        //the below gets around having to require("test_suite.js") because that would
        //violate what the job_engine code has access too, but still allows
        //including a test suite instance in a job that is run in DDE.
        if(cur_do_item.constructor && (cur_do_item.constructor.name == "TestSuite")){
            cur_do_item.constructor.set_state_and_resume({suites: [cur_do_item]});
        }
        else {
            let user_data_variable = cur_do_item.user_data_variable;
            let job_instance = this;
            let the_inst_this = cur_do_item.start_this;
            if (!the_inst_this) { the_inst_this = cur_do_item; }
            else if (the_inst_this == "job_instance") { the_inst_this = job_instance; }
            let start_args = cur_do_item.start_args;
            let cb_param = cur_do_item.callback_param;
            if(cb_param) {
                job_instance.wait_until_this_prop_is_false = "waiting for start object callback to run";
                let cb_fn = function(...args) {
                    if (user_data_variable){
                        job_instance.user_data[user_data_variable] =  args;
                    }
                    job_instance.wait_until_this_prop_is_false = false;
                };
                if(typeof(cb_param) === "number") { //must be a non-neg int
                    if ((start_args === undefined) || (start_args === null)) {start_args = [];}
                    if (Array.isArray(start_args)) {
                         start_args = start_args.slice(); //copy
                         start_args[cb_param] = cb_fn;
                    }
                    else { dde_error("For Job: " + job_instance.name +
                        " pc: " +  job_instance.program_counter +
                        "<br/>got data structure instruction: " + cur_do_item +
                        "<br/> which has a cb_param of a number but the start_args " +
                        "is not an array.");
                    }
                }
                else if (typeof(cb_param) === "string") {
                    if ((start_args === undefined) || (start_args === null)) { start_args = {}; }
                    if (typeof(start_args) == "object") {
                       start_args =  Object.assign({}, start_args); //shallow copy
                       start_args[cb_param] = cb_fn;
                    }
                    else {
                       dde_error("For Job: " + job_instance.name +
                                " pc: " +  job_instance.program_counter +
                                "<br/>got data structure instruction: " + cur_do_item +
                                '<br/> which has a cb_param of a string, "' + cb_param + '", but the start_args ' +
                                "is not an object.");
                    }
                }
            }
            else if(cur_do_item.dur) {
                this.insert_single_instruction(Control.wait_until(cur_do_item.dur));
            }
            if (!start_args)                    { cur_do_item.start.apply(the_inst_this); }
            else if (Array.isArray(start_args)) { cur_do_item.start.apply(the_inst_this, start_args); }
            else                                { cur_do_item.start.call(the_inst_this, start_args); }
        }
        this.set_up_next_do(1);
};

//only ever passed an instrution_array or a "raw" string to send directly to dexter.
//if a raw string, it starts with the oplet and has to have
//the prefix added to it.
Job$1.prototype.send = function(oplet_array_or_string, robot){ //if remember is false, its a heartbeat
    if(typeof(oplet_array_or_string) == "string") {
        //a string can't contain the robot so just use what is passed in to SEND, or the job's robot.
        if(!robot) { robot = this.robot; } //use the job's default robot
    }
    else { //oplet_array_or_string is an oplet_array
        //if there's both a passed in robot, and one in the oplet_array, prefer
        //the one in the oplet array
        let last_elt = last(oplet_array_or_string);
        if (last_elt instanceof Robot) {
            robot = last_elt;
            oplet_array_or_string = oplet_array_or_string.slice(0, oplet_array_or_string.length - 1); //don't use "pop" because
            //we need the orig do list item that contains the robot  because
            //Socket.find_dexter_instance_from_robot_status needs it. So make a COPY of the array,
            //removing that last elt of a robot, as the socket code doesn't want a robot on the end of the array.
        }
        else if (!robot)  { robot = this.robot; } //use the job's default robot
    }
    if(robot instanceof Dexter){
        if(Waiting.dexter_now_performing(robot)){
            Waiting.set_job(this, robot, oplet_array_or_string);
            this.set_up_next_do(0);
            return
        }
        else { //ok to run this instruction now, but hold up this job until dexter_instance.robot_done_with_instruction called
            Waiting.set_job_and_dexter(this, robot, oplet_array_or_string);
        }


       /* if (robot.is_busy()){
        //    this.instr_and_robot_to_send_when_robot_unbusy = [oplet_array_or_string, robot]
        //    return
        //}
         robot.add_to_busy_job_array(this) //the only place this is called (err besides 5 lines below)
         return //we're not sending the instruction, leave the PC on the current instruction
               //Dexter.prototype.robot_done_with_instruction will call set_up to execute it.
        }
        else {
           robot.add_to_busy_job_array(this)  //keep sending this one inst to the dexter.
        }*/
    }
    let instruction_id;
    const oplet = Instruction.extract_instruction_type(oplet_array_or_string);
    if(oplet == "h") { //op_let is first elt UNTIL we stick in the instruction id
        //instruction_id = -1 //heartbeat always has instruction id of -1
        shouldnt('Job.send passed "h" instruction (heartbeat) but that shouldnt happen as heartbeat is handled lower level by Dexter robot');
    }
    else if (this.status_code == "not_started"){ //instuction_array should be a Job.get_robot_status
        instruction_id = -3; //looked at by robot_done_with_instruction
    }
    else if (this.status_code == "starting"){ //instuction_array should be a Job.get_robot_status
        instruction_id = -1; //looked at by robot_done_with_instruction
    }
    else {
        instruction_id = this.program_counter;
    }
    if(typeof(oplet_array_or_string) === "string") {
        let prefix = this.job_id + " " + instruction_id + " " + Date.now() + " undefined ";
        oplet_array_or_string = prefix + oplet_array_or_string;
        if(last(oplet_array_or_string) != ";") { oplet_array_or_string += ";"; }

    }
    else {
        if(oplet_array_or_string[Instruction.JOB_ID] === undefined) {
            oplet_array_or_string[Instruction.JOB_ID] = this.job_id;
        }
        if(oplet_array_or_string[Instruction.INSTRUCTION_ID] === undefined) {
            oplet_array_or_string[Instruction.INSTRUCTION_ID] = instruction_id;
        }
        if(oplet_array_or_string[Instruction.START_TIME] === undefined) {
            oplet_array_or_string[Instruction.START_TIME] = Date.now();
        }
    }

    if (this.keep_history){
        this.sent_instructions.push(oplet_array_or_string); //for debugging mainly
    }
    if(oplet === "z"){
        this.color_job_button(); //colors job button yellow, even though status is "running" because
        //cur instruction is "z"
    }
    //if(oplet === "a") { out("snd J2: " + oplet_array_or_string[6]) } //debugging statement only

    /*if(robot instanceof Dexter){
        this.wait_until_instruction_id_has_run = instruction_id
    }*/
    robot.send(oplet_array_or_string);
};

//"this" is the from_job
// params is the instance of Instruction.send_to_job
//send_to_job_receive_done is kinda like Serial and Dexter.robot_done_with_instruction
//but used only with send_to_job and only when the from_job is waiting for the
//to_job to complete the ins it was sent before allowing the from_job to continue.
Job$1.prototype.send_to_job_receive_done = function(params){
    if (this.wait_until_instruction_id_has_run === params.from_instruction_id){
        this.highest_completed_instruction_id  = params.from_instruction_id;
        this.wait_until_instruction_id_has_run = null;
        //below is done in Instruction.destination_send_to_job_is_done.do_item
        //for (var user_var in params){
        //    if (Instruction.send_to_job.param_names.indexOf(user_var) == -1){
        //        var val = params[user_var]
        //        this.user_data[user_var] = val
        //    }
        //}
        this.user_data[params.status_variable_name] = "done";
        this.set_up_next_do(1);
    }
    else {
        shouldnt("In job: " + this.name + " send_to_job_receive_done got params.from_instruction_id of: " +
            params.from_instruction_id +
            " but wait_until_instruction_id_has_run is: " + this.wait_until_instruction_id_has_run);
    }
};



//used in go_to, wait_until at least.
Job$1.instruction_location_to_job = function (instruction_location, maybe_error=true){
    var the_job_elt = instruction_location;
    if (Array.isArray(instruction_location)){
        if (instruction_location.length === 0){
            if (maybe_error) {
                dde_error("Job.instruction_location_to_job passed empty array.<br/>" +
                          " It must have at least 1 item in it,<br/>" +
                          'with the first of format: {job: "some_job"}');
            }
            else {return null}
        }
        else { the_job_elt = instruction_location[0]; }
    }
    if (the_job_elt){
        if (the_job_elt.job) {
            let the_job = the_job_elt.job;
            if (typeof(the_job) == "string"){
                const the_job_name = the_job;
                the_job = Job$1[the_job];
                if (!the_job) {
                    if (maybe_error) {
                        dde_error("Attempt to find instruction_location: " + instruction_location +
                        "<br/>but the specified job: " + the_job_name +
                        "<br/>isn't a defined job.");
                    }
                    else { //if we get a string, but that's not a defined job, that's kinda suspicious, so I warning
                      warning("instruction_location_to_job passed: " + instruction_location +
                              "<br/>which contains a name for a job: " + the_job_name +
                              "<br/>but a job with that name is not defined.");
                      return null
                    }
                }
            }
            return the_job
        }
        else {
            if (maybe_error) {
                dde_error("Job.instruction_location passed " + instruction_location +
                          '<br/> which does not have an element of format: {job:"some_job"}');
            }
            else { return null }
        }
    }
    else {
        if (maybe_error) {
            dde_error("Job.instruction_location passed a location: " + instruction_location +
                      "<br/> that doesn't have a job in it.");
        }
        else { return null }
    }
};
//instruction_location can be 5, {offset: 5}, [{offset: 5}}, {job: "myjob", offset:5}
// [{job:myjob}, {offset:5}], then throw in process attribute.
//getting a job makes it hold for the rest of the il, any there should be at most
//one job and it should be in the first element.
//offset and process DON'T carry forward to become defaults for later array elts.
//if the first offset is negative, it is added to the job's do_list length to
//get the resulting instruction id.
Job$1.prototype.instruction_location_to_id = function(instruction_location, starting_id=null, orig_instruction_location=null, use_orig_do_list=false){
    let job_instance = this;
    let do_list_length = (use_orig_do_list ?
                            job_instance.orig_args.do_list.length :
                            job_instance.do_list.length);
    if (orig_instruction_location == null) { orig_instruction_location = instruction_location;} //used for error messages
    let inst_loc = instruction_location;
    let process = "forward_then_backward"; //process ignored for integer inst_loc's.
    if ((typeof(inst_loc) == "object") && !Array.isArray(inst_loc)){
        if (instruction_location.job) {
            job_instance = instruction_location.job;
            if (typeof(job_instance) == "string") { job_instance = Job$1[job_instance]; }
            if (!(job_instance instanceof Job$1)) {
                dde_error("instruction_location_to_id passed: " +  orig_instruction_location +
                          "<br/> passed an invalid job of: " + job_instance);
            }
        }
        //an object might have just a job, just an offset, or both
        if(instruction_location.offset || (instruction_location.offset === 0)) {
            inst_loc = instruction_location.offset;
            if (instruction_location.process) {
                process = instruction_location.process;
            }
        }
        else {
            dde_error("In instruction_location_to_id, got an object: " + instruction_location +
                      "<br/>that did not have an offset field,<br/>" +
                      "in the original_instruction_location: " + orig_instruction_location);
        }
    }
    if (Number.isInteger(inst_loc)){
        if (starting_id == null){
            if (inst_loc >= 0) { starting_id = 0; }
            else { starting_id = do_list_length; } // an initial negative inst_loc means count from the end, with -1 pointin at the last instruction
        }
        let result = starting_id + inst_loc;
        if ((result < 0) || (result > do_list_length)){
              dde_error("instruction_location_to_id passed: " + instruction_location +
                        "<br/>but that finds an instruction outside the range of<br/>" +
                        " valid ids: 0 through " + do_list_length +
                        "<br/>in the original_instruction_location: " + orig_instruction_location);

        }
        else { return result }
    }
    else if (typeof(inst_loc) == "string"){
        if      (inst_loc == "program_counter")        { return job_instance.program_counter }
        else if (inst_loc == "before_program_counter") { return job_instance.program_counter - 1 }
        else if (inst_loc == "after_program_counter")  { return job_instance.program_counter + 1 }
        else if (inst_loc == "end")                    { return do_list_length } //bad for go_to but ok for insert instruction, ie a new last instruction
        else if (inst_loc == "next_top_level")         { return "next_top_level" } //used only by insert_instruction
        else if (inst_loc == "highest_completed_instruction") {
            const hci = job_instance.highest_completed_instruction_id;
            if(!hci || (hci <= 0)) { return 0 }
            else { return hci }
        }
        else if (inst_loc == "highest_completed_instruction_or_zero") {
            const hci = job_instance.highest_completed_instruction_id;
            if(!hci || (hci <= 0) || (hci >= (do_list_length - 1)))  { return 0 }
             //for the last cause above: if we completed the job the last time through, then start over again at zero
            else { return hci } //else we are resuming at
              //the highest completed instruction. But beware, you *might* not want
              //to do that instruction twice, in which case the instruction_location should be
              // ["zero_or_highest_completed_instruction", 1]
        }
        else { // a label or a sync_point name search pc, then after, then before pc
           if (starting_id == null) { starting_id = this.program_counter; }
           if      (process == "forward_then_backward") { return job_instance.ilti_forward_then_backward(inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else if (process == "backward_then_forward") { return job_instance.ilti_backward_then_forward(inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else if (process == "forward")               { return job_instance.ilti_forward( inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else if (process == "backward")              { return job_instance.ilti_backward(inst_loc, starting_id, orig_instruction_location, use_orig_do_list) }
           else {
               dde_error("instruction_location_to_id passed process: " + process +
                   "<br/>but the only valid processes are:<br/>" +
                   '"forward_then_backward", "backward_the_forward", "forward", "backward".' +
                   "<br/>in the original_instruction_location: " + orig_instruction_location);
           }
        }
    }
    else if (Array.isArray(inst_loc)){
        let result = starting_id; //will be null on first call
        for(let item of inst_loc){
            if (item.job){
                if(result == null){ //we're on the first elt of the array. so ok for it to have a job
                    job_instance = item.job;
                    if (typeof(job_instance) == "string") {
                        job_instance = Job$1[job_instance];
                        if (!job_instance) { dde_error("In instruction_location_to_id got undefined job name: " + job_inst);}
                    }
                }
                else {
                    dde_error("In instruction_location_to_id got a non-first item<br/>" +
                             " that has job in it, which is invalid. That invalid job is: " + item.job +
                             "<br/>in the original_instruction_location: " + orig_instruction_location);
                }
            }
            result = job_instance.instruction_location_to_id(item, result, orig_instruction_location, use_orig_do_list);
        }
        return result
    }
    else {dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
                    " in the original_instruction_location: " + orig_instruction_location);}
};

Job$1.prototype.ilti_forward_then_backward = function(inst_loc, starting_id, orig_instruction_location, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id; id < the_do_list.length; id++){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //gets label, sync_point and fn name
        else if (ins instanceof Instruction){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction.is_oplet_array(ins)){
            if (ins[Instruction.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    for(let id = starting_id - 1; id >= 0; id--){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //finds both label and sync_point instructions with "name" of inst_loc
        else if (ins instanceof Instruction){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction.is_oplet_array(ins)){
            if (ins[Instruction.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
        "<br/>in the original_instruction_location: " + orig_instruction_location);
};

Job$1.prototype.ilti_backward_then_forward = function(inst_loc, starting_id, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id - 1; id >= 0; id--){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //finds both label and sync_point instructions with "name" of inst_loc
        else if (ins instanceof Instruction){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction.is_oplet_array(ins)){
            if (ins[Instruction.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    for(let id = starting_id; id < the_do_list.length; id++){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //gets label, sync_point and fn name
        else if (ins instanceof Instruction){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction.is_oplet_array(ins)){
            if (ins[Instruction.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
        "<br/>in the original_instruction_location: " + orig_instruction_location);
};

Job$1.prototype.ilti_forward = function(inst_loc, starting_id, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id; id < this.do_list.length; id++){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //gets label, sync_point and fn name
        else if (ins instanceof Instruction){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction.is_oplet_array(ins)){
            if (ins[Instruction.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
        "<br/>in the original_instruction_location: " + orig_instruction_location);
};

Job$1.prototype.ilti_backward = function(inst_loc, starting_id, use_orig_do_list=false){
    let the_do_list = (use_orig_do_list ? this.orig_args.do_list : this.do_list);
    for(let id = starting_id - 1; id >= 0; id--){
        let ins = the_do_list[id];
        if (ins.name === inst_loc) {return id} //finds both label and sync_point instructions with "name" of inst_loc
        else if (ins instanceof Instruction){
            if (ins.constructor.name === inst_loc) { return id }
        }
        else if (Instruction.is_oplet_array(ins)){
            if (ins[Instruction.INSTRUCTION_TYPE] ===  inst_loc) { return id }
        }
    }
    dde_error("Job." + this.name + " doesn't contain a location named: " + inst_loc +
              "<br/>in the original_instruction_location: " + orig_instruction_location);
};

//functions for managing adding and removal from do_list
// (and keeping added_items_count in sync).
//see also Job.insert_instruction and Job.prototype.do_list_to_html_aux

//called by Job.start
Job$1.prototype.init_do_list = function(){
    this.do_list           = Job$1.flatten_do_list_array(this.do_list); //make a copy in case the user passes in an array that they will use elsewhere, which we wouldn't want to mung
    for(let instr of this.do_list) {
        if (instr instanceof Instruction) {
            instr.init_instruction();   //needed for wait_until and loop at least
        }
    }
    this.added_items_count = new Array(this.do_list.length); //This array parallels and should be the same length as the run items on the do_list.
    this.added_items_count.fill(0); //stores the number of items "added" by each do_list item beneath it
    //if the initial pc is > 0, we need to have a place holder for all the instructions before it
    //see total_sub_instruction_count_aux for explanation of added_items_count
    this.is_do_list_item_top_level_array = new Array(this.do_list.length);
    this.is_do_list_item_top_level_array.fill(true);
};

Job$1.prototype.remove_sub_instructions_from_do_list = function(instr_id){
    if(!this.disable_modify_do_list) {
        const sub_items_count = this.total_sub_instruction_count(instr_id);
        this.do_list.splice(instr_id + 1, sub_items_count); //cut out all the sub-instructions under instr_id
        this.added_items_count.splice(instr_id + 1, sub_items_count);
        this.added_items_count[instr_id] = 0; //because we just deleted all of ites subitems and their descendents
        this.is_do_list_item_top_level_array.splice(instr_id + 1, sub_items_count);
    }
};

Job$1.prototype.total_sub_instruction_count = function(id_of_top_ins){
    return total_sub_instruction_count_aux(id_of_top_ins, this.added_items_count)
};

/*
added_items_count is the way in which the do_list can be considered to be a
hierarchy such that an instruction that adds more instuctions under it,
those new insturctions will be considered sub-instrustions.
This is important for presenting the do_list as a hierarchy
(as the Inspect does, but also necessary to remove previous do_list items
from the do_list when we start an loop iteration or perform a backwards go_to.

added_items_count is an array that is maintained to always be the same
length as the do_list, and contains a non-neg integer for each do_list_item saying
how many sub-instructions the instruction at that array index
has beneath it *when they are first added*
If a subinstruction, when it is run, returns more instructions to
insert the orig instruction sub-instruction count is NOT increased,
its just left alone, but the orig subinstrution's item-count is
incremented by the new sub-sub-instructions added.
This makes computing how many actual instructons are underneath
a given instruction tricky, as it may well be more than its
added_items_count indicates.
(If the added_items_count is 0, it has no sub-instructions but
if it is more than 0, it might be that number or more.)
The job of total_sub_instruction_count_aux is to figure out
total sub)instructions. It walks down the  added_items_count
from the given index until it "runs out" of sub-insructions,
and returns the count. The sub-instructions count excludes the
instruction at the given index. See the test suite for
total_sub_instruction_count_aux for examples.
*/

function total_sub_instruction_count_aux(id_of_top_ins, aic_array){
    let result = 0; //this.added_items_count[id_of_top_ins]
    let tally  = 1; //this.added_items_count[id_of_top_ins]
    for(let i = id_of_top_ins; true ; i++){
        let aic_for_i = aic_array[i]; //this.added_items_count[i]
        if (aic_for_i === undefined) {
            shouldnt("total_sub_instruction_count_aux got undefined from aic_array: " + aic_array);
        }
        result += aic_for_i; //often this is adding 0
        tally  += aic_for_i - 1;
        if (tally == 0) { break; }
        else if (tally < 0) { shouldnt("in total_sub_instruction_count got a negative tally"); }
    }
    return result
}

//--------top level do_list item_____
Job$1.prototype.top_level_instruction_id_array = null;

//perform whenever do_list item changes, if you care about
//computing top levelness.
// Warning: expensive to compute the first one after decaching.
Job$1.prototype.decache_top_level_instruction_id_array = function(){
    this.top_level_instruction_id_array = null;
};


//shoves into this.top_level_instruction_id_array, an array that is of the job's do_list length
// (not the orig_args.do_list!
//that has values of true or false. true if the instruction at that index is top level,
//ie was not inserted by running the job.
//You might think that the number of elts in top_level_instruction_id_array that are true should be
//the same as orig_args.do_list.length
//But this is not true due to flattening of arrays on the orig do_list during job.start
//and inserting each elt of an array into the do_list at top level.
//See also comment at: Job.prototype.insert_instructions

/*Obslete with new makae as you go Job.prototyp.is_do_list_item_top_level_array
Job.prototype.make_top_level_instruction_id_array = function(){
    let result = []
    let prev_top_level_accum = 0
    for(let i = 0; i < this.do_list.length; i++){
        if(prev_top_level_accum == 0) {
            result.push(true)
            prev_top_level_accum = this.added_items_count[i]
        }
        else {
            result.push(false)
            prev_top_level_accum += this.added_items_count[i]
            prev_top_level_accum -= 1 //subtract one for yourself
        }
    }
    this.top_level_instruction_id_array = result
}*/

Job$1.prototype.is_top_level_do_list_item = function (id) {
   //if(this.top_level_instruction_id_array == null){
   //    this.make_top_level_instruction_id_array()
  // }
  if(this.is_do_list_item_top_level_array) {
    return this.is_do_list_item_top_level_array[id] //this.top_level_instruction_id_array[id]
  }
  else { return true } //because we're working off orig_args.do_list, all of whose items are top level
};

//returns id itself if id is top level, if not, returns an id less than the passed in id.
//works only on the job's do_list, NOT its orig_args.do_list
Job$1.prototype.find_top_level_instruction_id_for_id = function(id){
    //if(this.top_level_instruction_id_array == null){
    //    this.make_top_level_instruction_id_array()
    //}
    for(let i = id; i >= 0; i--){
        if(this.is_top_level_do_list_item(i)) { return i }
    }
    shouldnt("Job.find_top_level_instruction_id_for_id couldn't find answer for id: " + id);
};

//returns the index of the next top level instruction after the passed in id.
//If id itself is a top level item, doesn't matter.
//Still finds the top level id AFTER the passed in id.
//If id refers to the last instruction in the do_list, returns null,
// i.e. there is no next top level item.
Job$1.prototype.find_next_top_level_instruction_id_for_id = function(id){
    //if(this.top_level_instruction_id_array == null){
    //    this.make_top_level_instruction_id_array()
    //}
    for(let i = id + 1; i < this.do_list.length; i--){
        if(this.is_top_level_do_list_item(i)) { return i }
    }
    return null //happens when i is the last elt in the do_list
};
//-----end of top level do_list item_____


//These 2 fns take care of inserting into added_items_count array,
//slots for the new items they are inserting
//Both of these fns always insert right after the pc
//force_allow is only true when we are adding the final "g" instruction to a job

//note this DOESN'T insert each new item "below" the pc, and boost the added_items_count
//of the pc by array_of_do_items.length. If we did that,
//it would work, and we'd have the hierarchical modularity that would
//help in debugging. BUT, it would add a round_trip to the do_next_item loop,
//and it means that when we're grabbing the "top level" items for job defs to insert for MakeInstruction,
//we would have reduced granularity in what we capture so the "snipets" grbbed would be
//"lower resolution and not as good.
//See also Job.protptype.make_top_level_instruction_id_array()
Job$1.prototype.insert_instructions = function(array_of_do_items, are_sub_instructions=true){
    if(!this.disable_modify_do_list) {
        this.do_list.splice(this.program_counter + 1, 0, ...array_of_do_items);
        let added_items_to_insert = new Array(array_of_do_items.length);
        added_items_to_insert.fill(0);
        this.added_items_count.splice(this.program_counter + 1, 0, ...added_items_to_insert);
        let is_top_array = new Array(array_of_do_items.length);
        if(are_sub_instructions) {
            this.added_items_count[this.program_counter] += added_items_to_insert.length;
            is_top_array.fill(false);
        }
        else { //top level
            is_top_array.fill(true);
        }
        this.is_do_list_item_top_level_array.splice(this.program_counter + 1, 0, ...is_top_array);
    }
};

//insert instruction right after the pc
Job$1.prototype.insert_single_instruction = function(instruction_array, is_sub_instruction=true, force_allow=false){
    if(force_allow || !this.disable_modify_do_list) {
        this.do_list.splice(this.program_counter + 1, 0, instruction_array);
        this.added_items_count.splice(this.program_counter + 1, 0, 0); //added oct 31, 2017
        if (is_sub_instruction) {
            this.added_items_count[this.program_counter] += 1;
            this.is_do_list_item_top_level_array.splice(this.program_counter + 1, 0, false); //false for is NOT top_level
        }
        else {
            this.is_do_list_item_top_level_array.splice(this.program_counter + 1, 0, true); //true for is_top_level
        }
    }
};

//expect to call when job is when_do_list_done: "wait" and
//the job is running and probably waiting for another instruction.
//we want to replace the LAST instruction that we inserted using this fn,
//and any follow on instructions it generated, with a new instruction.
Job$1.prototype.insert_last_instruction_overwrite = function(instruction, force_allow=false){
    if(this.do_list === undefined) {
        dde_error("Job." + this.name + " is not running,<br/>" +
                  " so calling insert_last_instruction_overwrite doesn't make sense.");
    }
    else if(force_allow || !this.disable_modify_do_list) {
        if(this.program_counter === this.do_list.length) { //hopefully the normal case. We're going to replace that last
            //inst (and its generated kids) with the past in instruction so first
            //delete all the ustrictions from the last instr inserted by insert_last_instruction_overwrite
            //thru all kids generated by it.
            if(this.hasOwnProperty("insert_last_instruction_index")){ //get rid of old instruction from insert_last_instruction_index and higher
                this.do_list.splice(this.insert_last_instruction_index); //delete all elts from the given arg to the end. add none
                this.added_items_count.splice(this.insert_last_instruction_index);
                this.is_do_list_item_top_level_array.splice(this.insert_last_instruction_index);
            }
            this.insert_last_instruction_index = this.do_list.length;
            Job$1.insert_instruction(instruction, {job: this, offset: this.insert_last_instruction_index}, false);
            this.program_counter = this.insert_last_instruction_index;
        }
        else if(this.hasOwnProperty("insert_last_instruction_index")) {//we've had this fn called before and had an instruction,
          //but haven't completed the instructions in the last insertion, so just add them to the end.
            Job$1.insert_instruction(instruction, {job: this, offset: this.do_list.length}, false);
        }
        else {//First time this fn is called, but are still running other instructions in the job
              //so initialize insert_last_instruction_index and add the new instruction
              //to the end of the do_list
            this.insert_last_instruction_index = this.do_list.length;
            Job$1.insert_instruction(instruction, {job: this, offset: this.do_list.length}, false);
        }
    }
};

//rarely called. usually call insert_single_instruction
//is_sub_instruction default of "auto" is the behavior before is_sub_instruction was added as a possibility.
//it can also be true, or false. false is what insert_last_instruction_overwrite uses
//to get the new insruction to be at top level.
Job$1.insert_instruction = function(instruction, location, is_sub_instruction="auto"){
    const job_instance = Job$1.instruction_location_to_job(location);
    if (job_instance){
        if(!job_instance.disable_modify_do_list) {
            const index = job_instance.instruction_location_to_id(location);
            if ((index === "next_top_level") ||
                ["not_started", "completed", "errored", "interrupted"].includes(job_instance.status_code)){
                job_instance.sent_from_job_instruction_queue.push(instruction);
                job_instance.sent_from_job_instruction_location = location;
                    //if a job isn't running, then we stick it on the ins queue so that
                    //the next time is DOES run (ie its restarted), this
                    //inserted instruction will make it in to the do_list.
            }
            else { job_instance.do_list.splice(index, 0, instruction);
                   job_instance.added_items_count.splice(index, 0, 0); //added oct 31, 2017
                   //unlike the instance method cousins of this static method,
                        //this meth must do the added_items_count increment because
                        //the caller of this meth doesn't know the index of the instr to increment
                        //the added_items_count of.
                        //job_instance.added_items_count[this.program_counter] += 1 //isn't right that pc has its added_items count incremented. Maybe should be something else, or no increment at all
                   if(location.offset == "end"){ //always at top level
                       job_instance.is_do_list_item_top_level_array.splice(index, 0, true);
                   }
                   else if (is_sub_instruction === "auto") {
                        let did_increment = job_instance.increment_added_items_count_for_parent_instruction_of(index); //false means we're at top level
                        job_instance.is_do_list_item_top_level_array.splice(index, 0, !did_increment);
                   }
                   else {
                       job_instance.is_do_list_item_top_level_array.splice(index, 0, is_sub_instruction);
                   }
            }
        }
    }
    else {
        dde_error("insert_instruction passed location: " + insert_instruction +
                  " which doesn't specify a job. Location should be an array with" +
                  "a first element of a literal object of {job:'some-job'}");
    }
};

//returns true if it did do an increment, false if it didn't
//it doesn't do an increment only if the item inserted is at top level,
//so returning false means the inserted item is inserted at top level.
Job$1.prototype.increment_added_items_count_for_parent_instruction_of = function(instr_id){
    if(instr_id <= 0) { return false } //must be at top level, so there is no parent to increment. This is ok
    else {
        let par_id_maybe = instr_id - 1;
        let par_instr = this.do_list[par_id_maybe];
        if(par_instr instanceof Instruction.go_to) { //below code is hairy but very rarely if ever called
            let location = par_instr.instruction_location;
            let par_loc_job_inst = Job$1.instruction_location_to_job(location);
            let par_loc_index = this.instruction_location_to_id(location);
            if((par_loc_job_inst === this) &&
               (type_of(par_loc_index) == "number") &&
               (par_loc_index < this.program_counter)) { //backwards goto in same job
               let loop_inst_maybe = this.do_list[par_loc_index];
               if(loop_inst_maybe instanceof Control.loop){ //shoot, we can't make the inserted instruction a sub_object of a loop's go_to
                    //so we've got to climb up the tree and increment the next instr that has a positive added_items_count
                    //but that aic must "contain" the instr_id of the added instruction
                   for(let maybe_par_id = par_loc_index - 1; maybe_par_id >= 0; maybe_par_id--){
                       //assumes go_to of a loop instr won't have a positive added_items_count which should be right
                       if(this.added_items_count[maybe_par_id] > 0) {
                           let sub_items_count = this.total_sub_instruction_count(maybe_par_id);
                           let last_instruction_id_under_maybe_par = maybe_par_id + sub_items_count;
                           if (instr_id <= (last_instruction_id_under_maybe_par + 1)){ //even if our new instr is one beyond the current scope of our maybe_par_id, consider that we're adding to the end of that maybe_par's sub_instructions. The alternative is to keep going up but this is good enough.
                               this.added_items_count[maybe_par_id] += 1;
                               return true
                           }
                       }
                   }
                   return false //didn't find a parent that included instr_id so it must be at top level,
                          //in which case, no need to increment any par instr aic
               }
            }
        }
        //the case that applies nearly all of the time
        //do not make this an else as the inner if's above need to fall through to here.
        this.added_items_count[instr_id - 1] += 1; //fairly dumb but usually right. Just make it the sub_instruction of the instruction above it.
        return true
    }
};

//end do_list management fns

//returns true if the argument is the right type to be an
///instruction location. Note it might not actually BE an instruction location,
//but at least it coforms to the bare minimum of a type
//called from Job constructor for use in finish_job
Job$1.is_plausible_instruction_location = function(instruction_location){
    return Number.isInteger(instruction_location) ||
           (typeof(instruction_location) === "string") ||
            //array check must be before object check because typeof([]) => "object"
            (Array.isArray(instruction_location) &&
                (instruction_location.length > 0) &&
                Job$1.is_plausible_instruction_location(instruction_location[0])
            ) ||
           ((typeof(instruction_location) === "object") &&
            (   instruction_location.offset ||
                instruction_location.job    ||
                instruction_location.process
            ))
};

Job$1.is_plausible_when_stopped_value = function(val){
    return ((val === "stop") ||
            Instruction.is_do_list_item(val)
            )
};

//retruns an array of arrays, with the outer array having 3 inner arrays,
//one for x, y and z.
Job$1.prototype.three_d_points_for_plotting = function(which="auto"){ //can also be "orig_do_list" or "sent"
    if((which === "auto") && this.sent_instructions) {
        which = "sent";
    }
    else { which = "orig_do_list"; }
    let xarr=[], yarr=[], zarr=[];
    if(which === "orig_do_list") {
       let do_list = this.orig_args.do_list;
       for(let instr of do_list){
           let xyz = null;
           if((instr instanceof Instruction.Dexter) && instr.array_of_angles) {
              let angs = instr.array_of_angles;
              if(angs.length < 5) { //todo imperfect!
                  angs = angs.slice();
                  for(let i = 0; i < 5; i++){
                      if(i === angs.length) {
                          angs.push(0); //todo hack to get around not having 5 angles because Kin.J_angles_to_xyz will error if we don't
                          //but really less than 5 should mean "keep that angle in its same position
                          //see src for move_all_joints
                      }
                  }
              }
              xyz = Kin.J_angles_to_xyz(angs)[0];
           }
           else if((instr instanceof Instruction.Dexter) && instr.xyz) {
               xyz = instr.xyz;
           }
           else if(Instruction.is_oplet_array(instr, "a")){
               let angs = Instruction.extract_args(instr);
               if(angs.length < 5) { //todo imperfect!
                   angs = angs.slice();
                   for(let i = 0; i < 5; i++){
                       if(i === angs.length) {
                           angs.push(0); //todo hack to get around not having 5 angles because Kin.J_angles_to_xyz will error if we don't
                           //but really less than 5 should mean "keep that angle in its same position
                           //see src for move_all_joints
                       }
                   }
               }
               xyz = Kin.J_angles_to_xyz(angs)[0];
           }
           if(xyz){
               xarr.push(xyz[0]);
               yarr.push(xyz[1]);
               zarr.push(xyz[2]);
           }
       }
    } // end which === "orig_do_list"
    else { //we have which = "sent"
       let instrs = this.sent_instructions;
        for(let instr of instrs){
            let xyz = null;
            if(Instruction.is_oplet_array(instr, "a")){
                let angs = Instruction.extract_args(instr);
                if(angs.length < 5) { //todo imperfect!
                    angs = angs.slice();
                    for(let i = 0; i < 5; i++){
                        if(i === angs.length) {
                            angs.push(0); //todo hack to get around not having 5 angles because Kin.J_angles_to_xyz will error if we don't
                            //but really less than 5 should mean "keep that angle in its same position
                            //see src for move_all_joints
                        }
                    }
                }
                xyz = Kin.J_angles_to_xyz(angs)[0];
            }
            if(xyz){
                xarr.push(xyz[0]);
                yarr.push(xyz[1]);
                zarr.push(xyz[2]);
            }
        }
    } //end which == "sent"
    return [xarr, yarr, zarr]
};

//Note, with no args, it prints the source code of the currently defined Job instance.
//this is used by Inspect as you want to inspect the cur job. BUT
//to get the Orig source, use Job.my_job({job_orig_args: true})
Job$1.prototype.to_source_code = function(args={}){
    if(!args.indent) { args.indent = ""; }
    let props_indent = args.indent + "         ";
    let result = 'new Job({name: "' + this.name + '",\n';
    if (this.robot !== Dexter.dexter0){
        result += props_indent + 'robot: '  + this.robot.to_path() + ',\n';
    }
    let prop_names = [ //name, robot  handled above
                       "keep_history",
                       "show_instructions",
                       "inter_do_item_dur",
                       "user_data",
                       "default_workspace_pose",
                       "program_counter",
                       "ending_program_counter",
                       "initial_instruction",
                       "data_array_transformer",
                       //"start_if_robot_busy",
                       "if_robot_status_error",
                       "if_instruction_error",
                       "if_dexter_connect_error",
                       "when_stopped",
                       "when_stopped_conditions",
                       "callback_param"
                       // do_list  // handled below
                       ];
    let props_container = ((args.job_orig_args || !this.do_list) ? this.orig_args : this);

    for(let prop_name of prop_names){ //if job has never been run, do_list will be undefined,
                                      //in which case use orig_args even if orig_args arg is false
       let prop_val = props_container[prop_name];
       if (!Utils.similar(prop_val, Job$1.job_default_params[prop_name])){ //I could *almost* use == instead pf similar but doesn't work for user_data of an empty lit obj
            let prop_args = Object.assign({}, args);
            prop_args.value = prop_val;
            let user_data_val_prefix = "";
            if (prop_name == "user_data") {
                prop_args.indent = props_indent + "    ";
                user_data_val_prefix = "\n";
            }

            let comma = ",";
            //if (prop_name == last(prop_names)) { comma = "" }
            if (prop_name == "robot") {
                result += props_indent + prop_name + ": " + "Robot." + this.robot.name +
                          comma + "\n";
            }
            else { result += props_indent + prop_name + ": " +
                      user_data_val_prefix + to_source_code(prop_args) +
                      comma + "\n";
            }
       }
    }
    result += props_indent + "do_list: [\n";
    let do_list_val = props_container.do_list;
    for(let i = 0; i < do_list_val.length; i++){
       let on_last = (i == do_list_val.length - 1);
       let prop_args = Object.assign({}, arguments[0]);
       let do_list_item = do_list_val[i];
       prop_args.value = do_list_item;
       props_indent = args.indent + "          ";
       let instr_src;
       if((typeof(prop_args.value) === "function") &&
           do_list_item.simple_command){ //Speechly cmd
           instr_src = 'simple("' + do_list_item.simple_command + '")';
           result += props_indent + instr_src + (on_last ? "" : ",") + "\n";
       }
       else {
           instr_src = to_source_code(prop_args);
           result += props_indent + instr_src + (on_last ? "" : ",") + "\n";
       }
    }
    result += props_indent + "         " + "]\n" + args.indent + "})";
    return result
};

globalThis.Job = Job$1;

let messages = [
"NOERROR 0 No error",
"EPERM 1 Operation not permitted",
"ENOENT 2 No such file or directory",
"ESRCH 3 No such process",
"EINTR 4 Interrupted system call",
"EIO 5 Input/output error",
"ENXIO 6 No such device or address",
"E2BIG 7 Argument list too long",
"ENOEXEC 8 Exec format error",
"EBADF 9 Bad file descriptor",
"ECHILD 10 No child processes",
"EAGAIN 11 Resource temporarily unavailable",
"ENOMEM 12 Cannot allocate memory",
"EACCES 13 Permission denied",
"EFAULT 14 Bad address",
"ENOTBLK 15 Block device required",
"EBUSY 16 Device or resource busy",
"EEXIST 17 File exists",
"EXDEV 18 Invalid cross-device link",
"ENODEV 19 No such device",
"ENOTDIR 20 Not a directory",
"EISDIR 21 Is a directory",
"EINVAL 22 Invalid argument",
"ENFILE 23 Too many open files in system",
"EMFILE 24 Too many open files",
"ENOTTY 25 Inappropriate ioctl for device",
"ETXTBSY 26 Text file busy",
"EFBIG 27 File too large",
"ENOSPC 28 No space left on device",
"ESPIPE 29 Illegal seek",
"EROFS 30 Read-only file system",
"EMLINK 31 Too many links",
"EPIPE 32 Broken pipe",
"EDOM 33 Numerical argument out of domain",
"ERANGE 34 Numerical result out of range",
"EDEADLK 35 Resource deadlock avoided",
"ENAMETOOLONG 36 File name too long",
"ENOLCK 37 No locks available",
"ENOSYS 38 Function not implemented",
"ENOTEMPTY 39 Directory not empty",
"ELOOP 40 Too many levels of symbolic links",
"EWOULDBLOCK 11 Resource temporarily unavailable",
"ENOMSG 42 No message of desired type",
"EIDRM 43 Identifier removed",
"ECHRNG 44 Channel number out of range",
"EL2NSYNC 45 Level 2 not synchronized",
"EL3HLT 46 Level 3 halted",
"EL3RST 47 Level 3 reset",
"ELNRNG 48 Link number out of range",
"EUNATCH 49 Protocol driver not attached",
"ENOCSI 50 No CSI structure available",
"EL2HLT 51 Level 2 halted",
"EBADE 52 Invalid exchange",
"EBADR 53 Invalid request descriptor",
"EXFULL 54 Exchange full",
"ENOANO 55 No anode",
"EBADRQC 56 Invalid request code",
"EBADSLT 57 Invalid slot",
"EDEADLOCK 35 Resource deadlock avoided",
"EBFONT 59 Bad font file format",
"ENOSTR 60 Device not a stream",
"ENODATA 61 No data available",
"ETIME 62 Timer expired",
"ENOSR 63 Out of streams resources",
"ENONET 64 Machine is not on the network",
"ENOPKG 65 Package not installed",
"EREMOTE 66 Object is remote",
"ENOLINK 67 Link has been severed",
"EADV 68 Advertise error",
"EPROTO 71 Protocol error",
"EMULTIHOP 72 Multihop attempted",
"EDOTDOT 73 RFS specific error",
"EBADMSG 74 Bad message",
"EOVERFLOW 75 Value too large for defined data type",
"ENOTUNIQ 76 Name not unique on network",
"EBADFD 77 File descriptor in bad state",
"EREMCHG 78 Remote address changed",
"ELIBACC 79 Can not access a needed shared library",
"ELIBBAD 80 Accessing a corrupted shared library",
"ELIBSCN 81 .lib section in a.out corrupted",
"ELIBMAX 82 Attempting to link in too many shared libraries",
"ELIBEXEC 83 Cannot exec a shared library directly",
"EILSEQ 84 Invalid or incomplete multibyte or wide character",
"ERESTART 85 Interrupted system call should be restarted",
"ESTRPIPE 86 Streams pipe error",
"EUSERS 87 Too many users",
"ENOTSOCK 88 Socket operation on non-socket",
"EDESTADDRREQ 89 Destination address required",
"EMSGSIZE 90 Message too long",
"EPROTOTYPE 91 Protocol wrong type for socket",
"ENOPROTOOPT 92 Protocol not available",
"EPROTONOSUPPORT 93 Protocol not supported",
"ESOCKTNOSUPPORT 94 Socket type not supported",
"EOPNOTSUPP 95 Operation not supported",
"EPFNOSUPPORT 96 Protocol family not supported",
"EAFNOSUPPORT 97 Address family not supported by protocol",
"EADDRINUSE 98 Address already in use",
"EADDRNOTAVAIL 99 Cannot assign requested address",
"ENETDOWN 100 Network is down",
"ENETUNREACH 101 Network is unreachable",
"ENETRESET 102 Network dropped connection on reset",
"ECONNABORTED 103 Software caused connection abort",
"ECONNRESET 104 Connection reset by peer",
"ENOBUFS 105 No buffer space available",
"EISCONN 106 Transport endpoint is already connected",
"ENOTCONN 107 Transport endpoint is not connected",
"ESHUTDOWN 108 Cannot send after transport endpoint shutdown",
"ETOOMANYREFS 109 Too many references: cannot splice",
"ETIMEDOUT 110 Connection timed out",
"ECONNREFUSED 111 Connection refused",
"EHOSTDOWN 112 Host is down",
"EHOSTUNREACH 113 No route to host",
"EALREADY 114 Operation already in progress",
"EINPROGRESS 115 Operation now in progress",
"ESTALE 116 Stale file handle",
"EUCLEAN 117 Structure needs cleaning",
"ENOTNAM 118 Not a XENIX named type file",
"ENAVAIL 119 No XENIX semaphores available",
"EISNAM 120 Is a named type file",
"EREMOTEIO 121 Remote I/O error",
"EDQUOT 122 Disk quota exceeded",
"ENOMEDIUM 123 No medium found",
"EMEDIUMTYPE 124 Wrong medium type",
"ECANCELED 125 Operation canceled",
"ENOKEY 126 Required key not available",
"EKEYEXPIRED 127 Key has expired",
"EKEYREVOKED 128 Key has been revoked",
"EKEYREJECTED 129 Key was rejected by service",
"EOWNERDEAD 130 Owner died",
"ENOTRECOVERABLE 131 State not recoverable",
"ERFKILL 132 Operation not possible due to RF-kill",
"EHWPOISON 133 Memory page has hardware error",
];
function linux_error_message(error_code){
   if((error_code >= 0) && (error_code < messages.length)){
          return messages[error_code]
   }
   else { return "UNKNOWN " + error_code + " unknown linux error." }
}

globalThis.linux_error_message = linux_error_message;

globalThis.Gcode = class Gcode{
    static print_gcode_line_when_run = true
    static state = {
        X: 0,
        Y: 0,
        Z: 0,
        E: 0, //extruder
        F: 0, //feedrate
        G: 0, //type or speed of move
        need_move: false, //boolean
        M: 0, //current index into M array M0=pause, M1=pause_if_enabled, M2=End program
        M_array: [], //array of variables of numbers meaning different things
        S: 0, //value for M_array elements
        need_m_update: false //boolean
    }

    static prepare_gcode(str, the_job){
        let lines = str.split("\n");
        the_job.user_data.gcode_lines = lines;
        the_job.user_data.gcode_pc = 0;
    }

    static line_to_do_list_item(gcode_line){
        let line_tokens = gcode_line.split(" ");
        for(let token of line_tokens){
            if(token !== "") {
                let op = token[0]; //ie G, M, etc.
                op = op.toUpperCase();
                if (!Utils.is_upper_case(op)) {
                    dde_error("In Gcode.line_to_do_list_item got invalid non_upper case first letter of: " + op);
                }
                let val = token.substring(1);
                val = parseFloat(val);
                if (Number.isNaN(val)) {
                    dde_error("In Gcode.line_to_do_list_item got non-number value of: " + val);
                }
                this.state[op] = val;
                let handler_function_name = "handle_" + op;
                let meth = Gcode[handler_function_name];
                if (meth) {
                    meth.call(val);
                }
                if ("EFGXYZ".includes(op)) {
                    this.state.need_move = true;
                }
            }
        }
        return this.do_it() //call at end of every line
    }

    static do_it(){
        if(this.state.need_move){
            let do_list_item = this.move_it();
            this.state.need_move = false;
            return do_list_item
        }
    }

    static move_it(){
        let y_pos = this.state.Y;
        if(y_pos === 0) {
            y_pos = 1e-10; //to avoid singularity
        }
        let xyz = [this.state.X, y_pos, this.state.Z];

        return [ function() { Gcode.extrude();},
                 Dexter.move_to(xyz)
               ]
    }

    static extrude(){
        out("extruding: " + this.state.E + " at feedrate: " + this.state.F);
    }

    //called by Dexter.run_gcode({gcode: "G1 X0 Y5 Z8" ...}
    static gcode_to_instructions({gcode = "",
                                  filepath = null,
                                  workspace_pose = Gcode.gcode_to_instructions_workspace_pose_default,
                                  robot=Dexter,
                                  the_job}){
        return [
            Gcode.prepare_gcode(gcode, the_job),
            Control.loop(function() { return the_job.user_data.gcode_pc <
                    the_job.user_data.gcode_lines.length
                },
                function(){
                    let gcode_pc = the_job.user_data.gcode_pc;
                    let gcode_line = the_job.user_data.gcode_lines[gcode_pc];
                    if(Gcode.print_gcode_line_when_run) { out("Running gcode line number " + gcode_pc + " of " + gcode_line, "green"); }
                    let do_list_item = Gcode.line_to_do_list_item(gcode_line);
                    the_job.user_data.gcode_pc += 1; //get ready for next iteration
                    return do_list_item
                }
            )]

    }

};
/*
new Job( { name: "my_gcode_job",
           do_list: [
            //Gcode.prepare_gcode("foo.gcode"),
            Gcode.prepare_gcode(`g0 1 2 3
                                     m107 true`),
            Control.loop(function() { return this.user_data.gcode_pc <
                    this.user_data.gcode_lines.length
                },
                function(){
                    let gcode_line = this.user_data.gcode_lines[this.user_data.gcode_pc]
                    if(Gcode.print_gcode_line_when_run) { out(gcode_line) }
                    return Gcode.line_to_do_list_item(gcode_line)
                }
            ),
            function(){ out("done")}
        ]
    }
)
*/

//import {Dexter} from "./robot.js" //dde4 Dexter is now global

class FPGA$1 {
    static command_reg_val({
                CapCalibrateBase = false,
                CapCalibrateEnd = false,
                CapCalibratePivot = false,
                MoveEnable = false,
                GoMove = false,
                EnableLoop = false,
                AClrLoop = false,
                CalRun = false,
                ResetMotorPosition = false,
                ResetForce = false,
                CapCalAngle = false,
                CapCalRot = false,
                AngleEnable = false,
                RotEnable = false
            }={}){
        let result = 0;
        if(CapCalibrateBase){   result += 1;}
        if(CapCalibrateEnd){    result += 2;}
        if(CapCalibratePivot){  result += 4;}
        if(MoveEnable){         result += 8;}
        if(GoMove){             result += 16;}
        if(EnableLoop){         result += 32;}
        if(AClrLoop){           result += 64;}
        if(CalRun){             result += 128;}
        if(ResetMotorPosition){ result += 256;}
        if(ResetForce){         result += 512;}
        if(CapCalAngle){        result += 1024;}
        if(CapCalRot){          result += 2048;}
        if(AngleEnable){        result += 4096;}
        if(RotEnable){          result += 8192;}
        return result
    }
    /* not used. We must use FPGA.BASE_POSITION = 0 from below
      and not the series, because FPGA is part of the job engine,
      and that does NOT have series in them.
     */

    static init(){
        for(let i = 0; i < FPGA$1.w_oplet_address_names.length; i++){
            let name = FPGA$1.w_oplet_address_names[i];
            //eval(name + " = " + i)
            FPGA$1[name] = i;
        }
        this.init_fpga_command_reg();
    }

    static init_fpga_command_reg () {
        Dexter.set_fpga_command_reg = function({
                                                   CapCalibrateBase = false,
                                                   CapCalibrateEnd = false,
                                                   CapCalibratePivot = false,
                                                   MoveEnable = false,
                                                   GoMove = false,
                                                   EnableLoop = false,
                                                   AClrLoop = false,
                                                   CalRun = false,
                                                   ResetMotorPosition = false,
                                                   ResetForce = false,
                                                   CapCalAngle = false,
                                                   CapCalRot = false,
                                                   AngleEnable = false,
                                                   RotEnable = false} = {}) {
            let val = FPGA$1.command_reg_val({
                CapCalibrateBase: CapCalibrateBase,
                CapCalibrateEnd: CapCalibrateEnd,
                CapCalibratePivot: CapCalibratePivot,
                MoveEnable: MoveEnable,
                GoMove: GoMove,
                EnableLoop: EnableLoop,
                AClrLoop: AClrLoop,
                CalRun: CalRun,
                ResetMotorPosition: ResetMotorPosition,
                ResetForce: ResetForce,
                CapCalAngle: ResetForce,
                CapCalRot: CapCalRot,
                AngleEnable: AngleEnable,
                RotEnable:RotEnable
            });
            return make_ins("w", FPGA$1.COMMAND_REG, val )
        };
    }
    static w_oplet_address_names = [
        "BASE_POSITION",  // 0
        "END_POSITION",  // 1
        "PIVOT_POSITION",  // 2
        "ANGLE_POSITION",  // 3
        "ROT_POSITION",  // 4
        "ACCELERATION_MAXSPEED",  // 5
        "BASE_SIN_CENTER",  // 6
        "BASE_COS_CENTER",  // 7
        "END_SIN_CENTER",  // 8
        "END_COS_CENTER",  // 9
        "PIVOT_SIN_CENTER",  // 10
        "PIVOT_COS_CENTER",  // 11
        "ANGLE_SIN_CENTER",  // 12
        "ANGLE_COS_CENTER",  // 13
        "ROT_SIN_CENTER",  // 14
        "ROT_COS_CENTER",  // 15
        "PID_DELTATNOT",  // 16
        "PID_DELTAT",  // 17
        "PID_D",  // 18
        "PID_I",  // 19
        "PID_P",  // 20
        "PID_ADDRESS",  // 21
        "BOUNDRY_BASE",  // 22
        "BOUNDRY_END",  // 23
        "BOUNDRY_PIVOT",  // 24
        "BOUNDRY_ANGLE",  // 25
        "BOUNDRY_ROT",  // 26
        "SPEED_FACTORA",  // 27
        "SPEED_FACTORB",  // 28
        "FRICTION_BASE",  // 29
        "FRICTION_END",  // 30
        "FRICTION_PIVOT",  // 31
        "FRICTION_ANGLE",  // 32
        "FRICTION_ROT",  // 33
        "MOVE_TRHESHOLD",  // 34
        "F_FACTOR",  // 35
        "MAX_ERROR",  // 36
        "FORCE_BIAS_BASE",  // 37
        "FORCE_BIAS_END",  // 38
        "FORCE_BIAS_PIVOT",  // 39
        "FORCE_BIAS_ANGLE",  // 40
        "FORCE_BIAS_ROT",  // 41
        "COMMAND_REG",  // 42
        "DMA_CONTROL",  // 43
        "DMA_WRITE_DATA",  // 44
        "DMA_WRITE_PARAMS",  // 45
        "DMA_WRITE_ADDRESS",  // 46
        "DMA_READ_PARAMS",  // 47
        "DMA_READ_ADDRESS",  // 48
        "REC_PLAY_CMD",  // 49
        "REC_PLAY_TIMEBASE",  // 50
        "MAXSPEED_XYZ",  // 51
        "DIFF_FORCE_BETA",  // 52
        "DIFF_FORCE_MOVE_THRESHOLD",  // 53
        "DIFF_FORCE_MAX_SPEED",  // 54
        "DIFF_FORCE_SPEED_FACTOR_ANGLE",  // 55
        "DIFF_FORCE_SPEED_FACTOR_ROT",  // 56
        "DIFF_FORCE_ANGLE_COMPENSATE",  // 57
        "FINE_ADJUST_BASE",  // 58
        "FINE_ADJUST_END",  // 59
        "FINE_ADJUST_PIVOT",  // 60
        "FINE_ADJUST_ANGLE",  // 61
        "FINE_ADJUST_ROT",  // 62
        "RECORD_LENGTH",  // 63
        "END_EFFECTOR_IO",  // 64
        "SERVO_SETPOINT_A",  // 65
        "SERVO_SETPOINT_B",  // 66
        "BASE_FORCE_DECAY",  // 67
        "END_FORCE_DECAY",  // 68
        "PIVOT_FORCE_DECAY",  // 69
        "ANGLE_FORCE_DECAY",  // 70
        "ROTATE_FORCE_DECAY",  // 71
        "PID_SCHEDULE_INDEX",  // 72
        "GRIPPER_MOTOR_CONTROL",  // 73
        "GRIPPER_MOTOR_OFF_WIDTH",  // 74
        "GRIPPER_MOTOR_ON_WIDTH",  // 75
        "START_SPEED",  // 76
        "ANGLE_END_RATIO",  // 77
        "RESET_PID_AND_FLUSH_QUEUE",  // 78
        "XYZ_FORCE_TIMEBASE",  // 79
        "DIFFERENTIAL_FORCE_TIMEBASE",  // 80
        "PID_TIMEBASE"
    ]

} //end FPGA class

/* obsolete, now down by FPGA.init()
FPGA.BASE_POSITION = 0
FPGA.END_POSITION = 1
FPGA.PIVOT_POSITION = 2
FPGA.ANGLE_POSITION = 3
FPGA.ROT_POSITION = 4
FPGA.ACCELERATION_MAXSPEED = 5
FPGA.BASE_SIN_CENTER = 6
FPGA.BASE_COS_CENTER = 7
FPGA.END_SIN_CENTER = 8
FPGA.END_COS_CENTER = 9
FPGA.PIVOT_SIN_CENTER = 10
FPGA.PIVOT_COS_CENTER = 11
FPGA.ANGLE_SIN_CENTER = 12
FPGA.ANGLE_COS_CENTER = 13
FPGA.ROT_SIN_CENTER = 14
FPGA.ROT_COS_CENTER = 15
FPGA.PID_DELTATNOT = 16
FPGA.PID_DELTAT = 17
FPGA.PID_D = 18
FPGA.PID_I = 19
FPGA.PID_P = 20
FPGA.PID_ADDRESS = 21
FPGA.BOUNDRY_BASE = 22
FPGA.BOUNDRY_END = 23
FPGA.BOUNDRY_PIVOT = 24
FPGA.BOUNDRY_ANGLE = 25
FPGA.BOUNDRY_ROT = 26
FPGA.SPEED_FACTORA = 27
FPGA.SPEED_FACTORB = 28
FPGA.FRICTION_BASE = 29
FPGA.FRICTION_END = 30
FPGA.FRICTION_PIVOT = 31
FPGA.FRICTION_ANGLE = 32
FPGA.FRICTION_ROT = 33
FPGA.MOVE_TRHESHOLD = 34
FPGA.F_FACTOR = 35
FPGA.MAX_ERROR = 36
FPGA.FORCE_BIAS_BASE = 37
FPGA.FORCE_BIAS_END = 38
FPGA.FORCE_BIAS_PIVOT = 39
FPGA.FORCE_BIAS_ANGLE = 40
FPGA.FORCE_BIAS_ROT = 41
FPGA.COMMAND_REG = 42
FPGA.DMA_CONTROL = 43
FPGA.DMA_WRITE_DATA = 44
FPGA.DMA_WRITE_PARAMS = 45
FPGA.DMA_WRITE_ADDRESS = 46
FPGA.DMA_READ_PARAMS = 47
FPGA.DMA_READ_ADDRESS = 48
FPGA.REC_PLAY_CMD = 49
FPGA.REC_PLAY_TIMEBASE = 50
FPGA.MAXSPEED_XYZ = 51
FPGA.DIFF_FORCE_BETA = 52
FPGA.DIFF_FORCE_MOVE_THRESHOLD = 53
FPGA.DIFF_FORCE_MAX_SPEED = 54
FPGA.DIFF_FORCE_SPEED_FACTOR_ANGLE = 55
FPGA.DIFF_FORCE_SPEED_FACTOR_ROT = 56
FPGA.DIFF_FORCE_ANGLE_COMPENSATE = 57
FPGA.FINE_ADJUST_BASE = 58
FPGA.FINE_ADJUST_END = 59
FPGA.FINE_ADJUST_PIVOT = 60
FPGA.FINE_ADJUST_ANGLE = 61
FPGA.FINE_ADJUST_ROT = 62
FPGA.RECORD_LENGTH = 63
FPGA.END_EFFECTOR_IO = 64
FPGA.SERVO_SETPOINT_A = 65
FPGA.SERVO_SETPOINT_B = 66
FPGA.BASE_FORCE_DECAY = 67
FPGA.END_FORCE_DECAY = 68
FPGA.PIVOT_FORCE_DECAY = 69
FPGA.ANGLE_FORCE_DECAY = 70
FPGA.ROTATE_FORCE_DECAY = 71
FPGA.PID_SCHEDULE_INDEX = 72
FPGA.GRIPPER_MOTOR_CONTROL = 73
FPGA.GRIPPER_MOTOR_OFF_WIDTH = 74
FPGA.GRIPPER_MOTOR_ON_WIDTH = 75
FPGA.START_SPEED = 76
FPGA.ANGLE_END_RATIO = 77
FPGA.RESET_PID_AND_FLUSH_QUEUE = 78
FPGA.XYZ_FORCE_TIMEBASE = 79
FPGA.DIFFERENTIAL_FORCE_TIMEBASE = 80
FPGA.PID_TIMEBASE = 81

*/


globalThis.FPGA = FPGA$1;

/*
Example use:
    make_ins('w', FPGA.COMMAND_REG, FPGA.command_reg_val({
        EnableLoop: true,
        CAL_RUN: true,
        ResetForce: true,
        AngleEnable: true,
        RotEnable: true
    }))
*/

/** Created by Fry on 3/5/16. */

//import  {Robot, Brain, Dexter, Human, Serial} from './robot.js' now global
//import  {Job}     from './job.js' //now global
//import  {Kin}     from "../math/Kin.js" //now global

//import  {to_source_code} from "./to_source_code.js" //now to_source_code is global //for debugging only


class Instruction$1 {
    init_instruction(){} //shadowed by at least wait_until and loop

    static to_string(instr){
       if(instr === undefined) { return "undefined"} //a valid instr but a no-op
       else if(instr === null) { return "null"}      //a valid instr but a no-op
       else if(instr instanceof Instruction$1) { return instr.toString() }
       else if (Instruction$1.is_oplet_array(instr)) {
           var oplet   = instr[Dexter.INSTRUCTION_TYPE];
           var fn_name = Dexter.instruction_type_to_function_name(oplet);
           var args    = instr.slice(Instruction$1.INSTRUCTION_ARG0);
           return fn_name + " " + args
       }
       else if (Array.isArray(instr)) { return "Array of " + instr.length + " instructions" }
       else if (typeof(instr) == "function") {
           let name = instr.name;
           if(name && name !== "") { return "function " + name }
           else { return "anonymous function" }
       }
       else { return instr.toString() }
    }
    toString(){
        return "{instanceof: " + Utils.stringify_value_aux(this.constructor) + "}"
    }

    static oplet_array_to_source_code(instr_arr){
        let result = "make_ins(";
        for(let i = Dexter.INSTRUCTION_TYPE;  //skip over job_id, datetimes
                i < instr_arr.length;
                i++){
            let elt = instr_arr[i];
            if(i === (instr_arr.length - 1)) { //the last instr
                if(elt instanceof Dexter){
                    result += "Dexter." + elt.name;
                }
                else {
                    result += to_source_code({value: elt}); //no comma after last element
                }
            }
            else {
                result += to_source_code({value: elt}) + ", ";
            }
        }
        return result + ")"
    }

    //excludes at_sign instructions but includes "a" and "a!
    //if first elt is a 2 char string , the 2nd char must be !
    /*
    static is_short_instruction(obj) {
        if(!Array.isArray(obj))     { return false }
        if (obj.length == 0)        { return false }
        return Instruction.is_short_instruction_name(obj[0])
    }

    //used by Job def to verify at_sign_function
    static is_short_instruction_name(a_string){
        if(this.is_short_instruction_name_no_convert(a_string)) { return true } //the only permissible 2 char string
        if(typeof(a_string) != "string")  { return false }
        if(a_string.length != 1)          { return false }
        if(a_string == "@")               { return false }
        else                              { return true  }
    }

    //called from socket.js
    static is_short_instruction_name_no_convert(a_string){
        if(typeof(a_string) != "string")  { return false }
        else if(a_string.length != 2)     { return false }
        else                              { return a_string[1] == "!" }
    }

    static is_at_sign_instruction(item) {
        return (Array.isArray(item) && (item[0] == "@"))
    }
    */

    //if oplet is null, returns true for any oplet. if its a one char string.
    //only returns true if the oplet in obj is that one char string
    static is_oplet_array(obj, oplet=null){
        //since we're making the instruction arrays by our fn calls, ie Job.move,
        //the user isn't making up the arrays, so we assume all arrays that start
        //with a first elt of a string or length 1 are legitimate. But
        //we COULD check that the first char is legal and
        //the length and types of the rest of the elts matched what that op-let needs.
        if (Array.isArray(obj) && (obj.length > 0)){
            var oplet_maybe = obj[Instruction$1.INSTRUCTION_TYPE];
            if(typeof(oplet) === "string") {
                return oplet_maybe === oplet
            }
            else {
                return Robot.is_oplet(oplet_maybe)//true for any 1 char strings. There's an arg for is_oplet to make it more restrictive=, but Kent likes the flexibility for creating new oplets
            }
        }
        return false
    }

    static is_instructions_array(obj){
        if(!Array.isArray(obj))                                  { return false }
        else if (Instruction$1.is_oplet_array(obj))                { return false }
        else if (Instruction$1.is_empty_nested_array(obj))         { return false }
        else {
            for(let elt of obj) {
                if(Instruction$1.is_non_instructions_array_do_list_item(elt)) ; //ok, might still be an instructions array
                else if(!Instruction$1.is_instructions_array(elt)) { return false }
            }
            return true
        }
    }

    static is_data_array(obj){
        if(!Array.isArray(obj))                   { return false }
        else if (Instruction$1.is_oplet_array(obj)) { return false }
        else if (this.is_instructions_array(obj)) { return false }
        else                                      { return true }
    }

    static is_start_object(obj){
        return ((typeof(obj) == "object") &&
                (typeof(obj.start) == "function") &&
                 !(obj instanceof Robot))
    }

    //If the instruction *could* insert into the do_list, return true.
    //else return false
    //the following instructions insert as of Mar 6, 2019
    //Instruction.Dexter.read_file
    //Instruction.human_enter_choice
    //Instruction.human_enter_instruction
    //Instruction.human_enter_position
    //Instruction.if_any_errors
    //Instruction.include_job
    //Instruction.loop
    //Instruction.send_to_job
    //Instruction.sent_from_job
    //SOMETIMES:
    //   Instruction.Dexter.move_to_straight
    //   Instruction.wait_for
    static is_inserting_instruction(item, job_instance){
       if      (item == undefined)         {return false}
       else if (item == null)              {return false}
       else if (typeof(item) === "string") {return false}
       else if (Array.isArray(item) && (item.length == 0)) { return false }
       else if (Instruction$1.is_data_array(item)){
           if(!job_instance) { return true } //we can't resolve the data_array so be conservative as it *might* return an inserting instruction depending on the job data_array_transformer
           else {
               let fn = job_instance.data_array_transformer;
               if(Robot.oplet(fn)) { return false }
               else if (Instruction$1.is_inserting_instruction(fn)) { return true }
               else { return false } //don't know what it is so be conservative and return false
           }
       }
       else if (typeof(item) === "function")        { return true }
       else if (Array.isArray(item))                { return true }
       else if(Instruction$1.is_oplet_array(item))    { return false }
       else if (Utils.is_iterator(item))            { return true }
       else if (item instanceof Instruction$1){
           if(item.inserting_instruction)           { return true }
           else                                     { return false }
       }
       else if (item instanceof Promise)             { return false }
       else { shouldnt("Instruction.is_inserting_instruction passed unhandled instruction: " + item); }
    }

    static array_has_only_non_inserting_instructions(a_do_list, job_instance){
        for(let item of a_do_list){
            if(this.is_inserting_instruction(item, job_instance)) {return false}
        }
        return true
    }

    //used by do_next_item to determine if the return value of
    //calling the data_array_transformer can be directly sent.
    //a data_array is not sendable because it has to be transformed first.
    static is_sendable_instruction(item){
        return (Instruction$1.is_oplet_array(item) ||
                (typeof(item) == "string"))
    }

    static is_no_op_instruction(item){
       return ((item === undefined) ||
               (item === null)      ||
                Instruction$1.is_empty_nested_array(item)
       )
    }

    static is_empty_nested_array(array_maybe){
        if(!Array.isArray(array_maybe)) { return false }
        else {
            for(let elt of array_maybe) {
                if(!Instruction$1.is_empty_nested_array(elt)) {
                    return false
                }

            }
            return true
        }
    }

    static is_non_instructions_array_do_list_item(item){
       return ( Instruction$1.is_no_op_instruction(item) ||
                (item instanceof Instruction$1) ||
                Instruction$1.is_oplet_array(item) ||
                Utils.is_iterator(item) ||
                (typeof(item) === "string") ||
                (typeof(item) === "function") ||
                Instruction$1.is_start_object(item) ||
                (item instanceof Promise)
                )
    }

    //a valid item to put on a do_list
    //mirrors Job.do_next_item ordering
    static is_do_list_item(item){
        return ( Array.isArray(item) ||   //accept data_arrays too. //Instruction.is_instructions_array(item)
                 Instruction$1.is_non_instructions_array_do_list_item(item)
               )
    }

    static is_F_instruction_string(str){
        return ((typeof(str) === "string") && str.endsWith(" F;"))
    }

    static extract_job_id(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str= oplet_array_or_string[Instruction$1.JOB_ID];
        return parseInt(str)
    }

    static extract_instruction_id(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str= oplet_array_or_string[Instruction$1.INSTRUCTION_ID];
        return parseInt(str)
    }

    static extract_start_time(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str= oplet_array_or_string[Instruction$1.START_TIME];
        if (str == "undefined") { return undefined } //probably should never happen
        else { return parseInt(str) }
    }

    static extract_stop_time(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") { oplet_array_or_string = oplet_array_or_string.split(" "); }
        let str = oplet_array_or_string[Instruction$1.STOP_TIME];
        if (str == "undefined") { return undefined } //will happen for all string instructions
        else { return parseInt(str) }
    }

    static extract_instruction_type(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") {
            oplet_array_or_string = oplet_array_or_string.substring(0, oplet_array_or_string.length - 1); //cut the ending semicolon
            oplet_array_or_string = oplet_array_or_string.split(" ");
        }
        return oplet_array_or_string[Instruction$1.INSTRUCTION_TYPE]
    }

    static extract_args(oplet_array_or_string){
        if(typeof(oplet_array_or_string) == "string") {
            oplet_array_or_string = oplet_array_or_string.substring(0, oplet_array_or_string.length - 1); //cut the ending semicolon
            oplet_array_or_string = oplet_array_or_string.split(" ");
            let arg_strings = oplet_array_or_string.slice(Instruction$1.INSTRUCTION_ARG0);
            let result = [];
            for(let substr of arg_strings) {
                let num_maybe = parseFloat(substr); //on the last arg, it probably ends with semicolon. that's ok
                if(Number.isNaN(num_maybe)) { result.push(substr); } //assume its just a string
                else { result.push(num_maybe); }
            }
            return result
        }
        else {
            return oplet_array_or_string.slice(Instruction$1.INSTRUCTION_ARG0)
        }
    }

    //return an array of the instruction args
    static args(ins_array){
        return ins_array.slice(Instruction$1.INSTRUCTION_ARG0)
    }

    static job_of_instruction_array(ins_array){
        var job_id = ins_array[Instruction$1.JOB_ID];
        return Job.job_id_to_job_instance(job_id)
    }

    static instruction_color(ins){
        if(Instruction$1.is_no_op_instruction(ins))        { return "#aaaaaa" } //gray
        if(Instruction$1.is_oplet_array(ins))              { return "#FFFFFF" } //white
        else if(Instruction$1.is_data_array(ins))          { return "#FFFFFF" } //white
        else if(typeof(ins) == "string")                 { return "#DDEEFF" } //light blue
        else if (ins instanceof Instruction$1) {
            if(ins.constructor.name.startsWith("human"))  { return "#ffb3d1" }//pink
            else if (ins instanceof Instruction$1.break)    { return "red" }    //red
            else if (ins instanceof Instruction$1.debugger) { return "red" }    //red
            else                                          { return "#e6b3ff" }//lavender
        }
        else if (Utils.is_generator_function(ins))        { return "#ccffcc" } //green
        else if (Utils.is_iterator(ins))                  { return "#aaffaa" } //lighter green
        else if (typeof(ins) == "function")               { return "#b3e6ff" } //blue
        else if (Instruction$1.is_start_object(ins))        { return "#ffd492"}  //tan

        else if (Array.isArray(ins))                      { return "#aaaaaa" } //gray
        else if (ins instanceof Promise)                  { return "yellow"}
        else { shouldnt("Instruction.instruction_color got invalid instruction type: " + ins); }
    }
    static text_for_do_list_item(ins){
        if (ins === undefined)            { return 'undefined' }
        else if (ins == null)             { return 'null' }
        else if (typeof(ins) == "string") { return '"' + ins + '"' }
        else if (Instruction$1.is_data_array(ins)){
            let text = JSON.stringify(ins);
            let title = "data_array instructions use\ntheir Job's data_array_transformer for functionality,\n which is, by default: Dexter.pid_move_all_joints";
            return "<span title='" + title + "'>" + text + "</span>"
        }
        else if(Instruction$1.is_oplet_array(ins)) {
            let text;
            try { text  = JSON.stringify(ins); } //we want 1 line here, not the multi-lines that stringify_value(ins) puts out
            catch(err) { //happens for instructions like Dexter.dexter0.sleep(2) where the dexeter instance is circular, so just do something cheaper.
                text = ins.toString();
            }
            return "<span title='" + Robot.instruction_type_to_function_name(ins[Instruction$1.INSTRUCTION_TYPE]) + "'>" + text + "</span>"
        }
        else if (ins instanceof Instruction$1) {
            let name = ins.constructor.name;
            let props = "";
            for(let prop_name of Object.keys(ins)){
                props += "<i>" + prop_name + "</i>: " + ins[prop_name] + "; ";
            }
            return name + " with " + props
        }
        else if (Utils.is_generator_function(ins)) {
            return "generator function " + ins.toString().substring(0, 70)
        }
        else if (Utils.is_iterator(ins)){
            return "iterator " + ins.toString().substring(0, 70)
        }
        else if (typeof(ins)  == "function")       { return ins.toString().substring(0, 80) }
        else if (Instruction$1.is_start_object(ins)) {
            if(ins.to_source_code) { return ins.to_source_code() } //hits for Note and Phrase
            else { return ins.toString().substring(0, 80)  }
        }

        else if (Array.isArray(ins))        { return Utils.stringify_value(ins) }
        else if (ins instanceof Promise)    { return "A Promise"}
        else { shouldnt("Instruction.text_for_do_list_item got unknown instruction type: " + ins); }
    }
    static text_for_do_list_item_for_stepper(ins){
        if(Instruction$1.is_oplet_array(ins)) {
            let text = JSON.stringify(ins.slice(4)); //we want 1 line here, not the multi-lines that Utils.stringify_value(ins) puts out
            return "<span title='" + Robot.instruction_type_to_function_name(ins[Instruction$1.INSTRUCTION_TYPE]) + "'>" + text + "</span>"
        }
        else if (ins instanceof Instruction$1) {
            let name = ins.constructor.name;
            let props = "";
            for(let prop_name of Object.keys(ins)){
                props += "<i>" + prop_name + "</i>: " + ins[prop_name] + "; ";
            }
            return name + " with " + props
        }
        else if (Utils.is_generator_function(ins)) {
            return "generator function " + ins.toString().substring(0, 70)
        }
        else if (Utils.is_iterator(ins)){
            return "iterator " + ins.toString().substring(0, 70)
        }
        else if (typeof(ins) == "function") { return ins.toString().substring(0, 80) }
        else if (ins == null)               { return 'null' }
        else if (ins == undefined)          { return 'undefined' }
        else if (Array.isArray(ins))        { return Utils.stringify_value(ins) }
        else if (ins instanceof Promise)    { return "A Promise"}
        else { shouldnt("Instruction.text_for_do_list_item_for_stepper got unknown instruction type: " + ins); }
    }

    //side effects instr (if it can take a robot) and returns it.
    static add_robot_to_instruction(instr, robot){
        if (robot === undefined) ;
        else if (instr instanceof Instruction$1){
            if(instr.hasOwnProperty("robot")) { instr.robot = robot; }
            return instr
        }
        else if (Instruction$1.is_oplet_array(instr)) {
            let last_elt = last(instr);
            if (last_elt instanceof Robot) { instr[instr.length - 1] = robot; }
            else { instr.push(robot); }
        }
        else if (Array.isArray(instr)) { Instruction$1.add_robot_to_instructions(instr, robot);}
        return instr
    }

    //instr is an array of any kind of job instruction.
    //side effects each instr in instrs (if it can take a robot) and returns it.
    static add_robot_to_instructions(instrs=[], robot){
        for (let instr of instrs){
            Instruction$1.add_robot_to_instruction(instr, robot);
        }
        return instrs
    }

    //this helps catch mismatches of instruction robot and job robot quickly with
    //a good error message.
    set_instruction_robot_from_job(job_instance){
        let error_mess_or_true = Instruction$1.can_instruction_run_on_robot(this, job_instance.robot);
        if (typeof(error_mess_or_true) == "string") {
            error_mess_or_true = "In Job: " + job_instance.name + ",<br/>" + error_mess_or_true;
            dde_error(error_mess_or_true);
        }
        else { this.robot = job_instance.robot; }
    }
    //returns true or a string of an error message
    static can_instruction_run_on_robot(instruction, robot_instance){
        if(!this.is_do_list_item(instruction)) {
           return instruction + " is not a valid instruction.<br/>It can't run on any robot."
        }
        else if((instruction == null) || (instruction == undefined)) { return true }
        else if (instruction instanceof Instruction$1){
            let job_robot_class_name  = robot_instance.constructor.name;
            let instruction_class_name = Object.getPrototypeOf(instruction).constructor.name;
            if(instruction_class_name == "Instruction") { return true } //can run on any robot
            let instruction_superclass_name = Object.getPrototypeOf(Object.getPrototypeOf(instruction)).constructor.name; //often "Control"
            if(instruction_superclass_name === job_robot_class_name) { //ie "Dexter", "Serial"
                return true
            }
            //added cause for dde4 because job_robot_class_name can be "Dexter$1"
            //wben instruction_superclass_name is "Dexter"
            else if((instruction_superclass_name.length === (job_robot_class_name.length - 2)) &&
                    job_robot_class_name.startsWith(instruction_superclass_name)){
                return true
            }
            else {
                return "attempt to run instruction: " + instruction_superclass_name + "." + instruction_class_name + "<br/>" +
                       "on Robot of class: " + job_robot_class_name + "<br/>" +
                       "but that Robot can't handle instructions of class: " + instruction_superclass_name
            }
        }
        else { return true }
    }
}

globalThis.Instruction = Instruction$1;

Instruction$1.labels = [
"JOB_ID",             // 0
"INSTRUCTION_ID",     // 1
"START_TIME",         // 2
"STOP_TIME",          // 3 //END_TIME is better in this context BUT stop_time, stop_reason is used in Jobs and I wanted to be consistent with that.
"INSTRUCTION_TYPE",   // 4 //ie "oplet"
"INSTRUCTION_ARG0",   // 5
"INSTRUCTION_ARG1",   // 6
"INSTRUCTION_ARG2",   // 7
"INSTRUCTION_ARG3",   // 8
"INSTRUCTION_ARG4",   // 9
"INSTRUCTION_ARG5",   // 10
"INSTRUCTION_ARG6",   // 11
"INSTRUCTION_ARG7",   // 12
"INSTRUCTION_ARG8",   // 13
"INSTRUCTION_ARG9",   // 14
"INSTRUCTION_ARG10",  // 15
"INSTRUCTION_ARG11",  // 16
"INSTRUCTION_ARG12"   // 17 //used in Socket.js instruction_array_degrees_to_arcseconds_maybe for "T"
]; // and after those come the args to the instruction.

for (let i = 0; i < Instruction$1.labels.length; i++){
    Instruction$1[Instruction$1.labels[i]] = i;
}

/* correct as of ap 2020 BUT we decidd to allow any non-neg integer
Instruction.valid_w_addresses = [5,
                                20, 21, 26, 27, 28,
                                31, 32, 33, 34, 35, 36, 39,
                                40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
                                50, 51, 52, 53, 54, 55, 56,
                                61, 62, 64, 66, 67, 68, 69,
                                70, 71, 73, 74, 75, 78, 79,
                                80, 81]
*/

Instruction$1.is_valid_w_address = function(addr) {
  return Utils.is_non_neg_integer(addr)
};

Instruction$1.w_address_names = [
    "BASE_POSITION", //"0"
    "END_POSITION", //"1"
    "PIVOT_POSITION", //"2"
    "ANGLE_POSITION", //"3"
    "ROT_POSITION", //"4"
    "ACCELERATION_MAXSPEED", //"5"
    "BASE_SIN_CENTER", //"6"
    "BASE_COS_CENTER", //"7"
    "END_SIN_CENTER", //"8"
    "END_COS_CENTER", //"9"
    "PIVOT_SIN_CENTER", //"10"
    "PIVOT_COS_CENTER", //"11"
    "ANGLE_SIN_CENTER", //"12"
    "ANGLE_COS_CENTER", //"13"
    "ROT_SIN_CENTER", //"14"
    "ROT_COS_CENTER", //"15"
    "PID_DELTATNOT", //"16"
    "PID_DELTAT", //"17"
    "PID_D", //"18"
    "PID_I", //"19"
    "PID_P", //"20"
    "PID_ADDRESS", //"21"
    "BOUNDRY_BASE", //"22"
    "BOUNDRY_END", //"23"
    "BOUNDRY_PIVOT", //"24"
    "BOUNDRY_ANGLE", //"25"
    "BOUNDRY_ROT", //"26"
    "SPEED_FACTORA", //"27"
    "SPEED_FACTORB", //"28"
    "FRICTION_BASE", //"29"
    "FRICTION_END", //"30"
    "FRICTION_PIVOT", //"31"
    "FRICTION_ANGLE", //"32"
    "FRICTION_ROT", //"33"
    "MOVE_TRHESHOLD", //"34"
    "F_FACTOR", //"35"
    "MAX_ERROR", //"36"
    "FORCE_BIAS_BASE", //"37"
    "FORCE_BIAS_END", //"38"
    "FORCE_BIAS_PIVOT", //"39"
    "FORCE_BIAS_ANGLE", //"40"
    "FORCE_BIAS_ROT", //"41"
    "COMMAND_REG", //"42"
    "DMA_CONTROL", //"43"
    "DMA_WRITE_DATA", //"44"
    "DMA_WRITE_PARAMS", //"45"
    "DMA_WRITE_ADDRESS", //"46"
    "DMA_READ_PARAMS", //"47"
    "DMA_READ_ADDRESS", //"48"
    "REC_PLAY_CMD", //"49"
    "REC_PLAY_TIMEBASE", //"50"
    "MAXSPEED_XYZ", //"51"
    "DIFF_FORCE_BETA", //"52"
    "DIFF_FORCE_MOVE_THRESHOLD", //"53"
    "DIFF_FORCE_MAX_SPEED", //"54"
    "DIFF_FORCE_SPEED_FACTOR_ANGLE", //"55"
    "DIFF_FORCE_SPEED_FACTOR_ROT", //"56"
    "DIFF_FORCE_ANGLE_COMPENSATE", //"57"
    "FINE_ADJUST_BASE", //"58"
    "FINE_ADJUST_END", //"59"
    "FINE_ADJUST_PIVOT", //"60"
    "FINE_ADJUST_ANGLE", //"61"
    "FINE_ADJUST_ROT", //"62"
    "RECORD_LENGTH", //"63"
    "END_EFFECTOR_IO", //"64"
    "SERVO_SETPOINT_A", //"65"
    "SERVO_SETPOINT_B", //"66"
    "BASE_FORCE_DECAY", //"67"
    "END_FORCE_DECAY", //"68"
    "PIVOT_FORCE_DECAY", //"69"
    "ANGLE_FORCE_DECAY", //"70"
    "ROTATE_FORCE_DECAY", //"71"
    "PID_SCHEDULE_INDEX", //"72"
    "GRIPPER_MOTOR_CONTROL", //"73"
    "GRIPPER_MOTOR_OFF_WIDTH", //"74"
    "GRIPPER_MOTOR_ON_WIDTH", //"75"
    "START_SPEED", //"76"
    "ANGLE_END_RATIO", //"77"
    "RESET_PID_AND_FLUSH_QUEUE", //"78"
    "XYZ_FORCE_TIMEBASE", //"79"
    "DIFFERENTIAL_FORCE_TIMEBASE", //"80"
    "PID_TIMEBASE" //"81"
];
/*Instruction.w_address_number_to_name = function(num){
    if(!Instruction.is_valid_w_address(num)) { return "unknown" }
    let w_address_names = Series.id_to_series("series_w_oplet_address_id").array
    if (num >= w_address_names.length) { return "unknown" }
    else { return w_address_names[num] }
}*/

//returns undefined for invalid nums
Instruction$1.w_address_number_to_name = function(num){
    return Instruction$1.w_address_names[num]
};

//beware: will return -1 if name is invalid
/*Instruction.w_address_name_to_number = function(name){
    let w_address_names = Series.id_to_series("series_w_oplet_address_id").array
    return w_address_names.indexOf(name)
}*/

//beware: will return -1 if name is invalid
Instruction$1.w_address_name_to_number = function(name){
    return Instruction$1.w_address_names.indexOf(name)
};

//user might call this at top level in a do_list so make it's name short.
//the last arg can be a Dexter robot, but if not, the robot comes from the
//default robot for the job that this instruction is in.
function make_ins$1(instruction_type, ...args){
    /*if(!Dexter.instruction_type_to_function_name_map[instruction_type] &&
       !Serial.instruction_type_to_function_name_map[instruction_type]){
        warning("make_ins called with an invalid instruction_type: " + instruction_type +
                "<br/>make_ins still returning an array using: " + instruction_type)
    }*/
    //let first_arg = args[0]
    /*if((instruction_type == "w") && !Instruction.is_valid_w_address(first_arg)){
        dde_error('make_ins("w" ...) does not support an address of ' + first_arg +
                  '.<br/>Valid addresses are non-negative integers. ' +
                  '.<br/>See <a target="_blank" href="https://github.com/HaddingtonDynamics/Dexter/wiki/oplet-write">oplet_write doc</a>. for details.')
    }*/
    let result = new Array(Instruction$1.INSTRUCTION_TYPE);
    result.push(instruction_type);
    if (args.length === 0) { return result } //avoids generating the garbage that concat with an arg of an empty list would for this common case, ie for "g" ahd "h" instructions
    else                   { return result.concat(args) }
}

globalThis.make_ins = make_ins$1;

//to_source_code_insruction_array(isntr_array) //inplemented in to_source_code.js

//now Instruction.INSTRUCTION_TYPE == 4, and some_ins_array[Instruction.INSTRUCTION_TYPE] will return the oplet
//make_ins("a", 1, 2, 3, 4, 5) works
//make_ins("a", ...[1, 2, 3, 4, 5]) works

//use to be just the inner async fn put directly on the do_list.
//But that made it hard or impossible to support to_source_code
//This version is slower because it makes an extra do_list item,
//and that item is made at job run time, not job definition time.
//we could also speed this up if we guarenteed that Pthon was inited
//before this do_list_item was run, but its nice for the user
//to not have to even know that Py.init needs to be called.
Instruction$1.eval_python = class eval_python extends Instruction$1{
    constructor(python_source, user_data_variable){
        super();
        this.python_source = python_source;
        this.user_data_variable = user_data_variable;
        this.inserting_instruction = true;
    }
    do_item(job_instance){
        let the_python_source      = this.python_source;       //for closure
        let the_user_data_variable = this.user_data_variable;  //for closure
        let async_fn = (async function() {
                            await Py.init();
                            job_instance.user_data[the_user_data_variable + "_python_source"] = the_python_source;
                            let result = Py.eval(the_python_source);
                            job_instance.user_data[the_user_data_variable] = result;
        });
        job_instance.insert_single_instruction(async_fn);
        job_instance.set_up_next_do(1);
    }
    toString(){ return "eval_python" }
    to_source_code(args){ return args.indent + 'Brain.eval_python("' + this.python_source +
                                 '", "' + this.user_data_variable + '")'
                        }

};

Instruction$1.break = class Break extends Instruction$1{ //class name must be upper case because lower case conflicts with js break
    constructor () { super(); }
    do_item (job_instance){
        let loop_pc = Instruction$1.loop.pc_of_enclosing_loop(job_instance);
        if (loop_pc === null) {
            warning("Job " + job_instance.name + ' has a Control.break instruction at pc: ' + job_instance.program_counter +
                "<br/> but there is no Control.loop instruction above it.");
            job_instance.set_up_next_do(1);
        }
        else {
            let loop_ins = job_instance.do_list[loop_pc];
            loop_ins.init_instruction(); //just in case this loop is nested in another loop
            //or we "go_to backwards" to it, we want its next "first_call" to initialize
            //the loop so set this prop to null
            let items_within_loop = job_instance.total_sub_instruction_count(loop_pc); //job_instance.added_items_count[loop_pc]
            job_instance.program_counter = loop_pc + items_within_loop; //now pc is pointing at last inst of loop iteration instrs
            job_instance.set_up_next_do(1); //skip past the last inst in the loop iteration, as we're done with the loop
        }
    }
    toString(){ return "break" }
    to_source_code(args){ return args.indent + "Control.break()" }
};

//like JS continue but in a dde LOOP instruction
//very similar to Instruction.break, but without loop_ins.init_instruction()
Instruction$1.continue = class Continue extends Instruction$1{ //class name must be upper case because lower case conflicts with js continue
    constructor () { super(); }
    do_item (job_instance){
        let loop_pc = Instruction$1.loop.pc_of_enclosing_loop(job_instance);
        if (loop_pc === null) {
            dde_error("Job " + job_instance.name + ' has a Control.Continue instruction at pc: ' + job_instance.program_counter +
                "<br/> but there is no Control.loop instruction above it.");
            job_instance.set_up_next_do(1);
        }
        else {
            job_instance.do_list[loop_pc];
            job_instance.program_counter = loop_pc;
            job_instance.set_up_next_do(0);
        }
    }
    toString(){ return "continue" }
    to_source_code(args){ return args.indent + "Control.continue()" }
};


Instruction$1.debugger = class Debugger extends Instruction$1{ //class name must be upper case because lower case conflicts with js debugger
    constructor () {
        super();
        this.time_dev_tools_was_opened = null;
    }
    do_item (job_instance){
        if(this.time_dev_tools_was_opened === null){
            open_dev_tools();
            this.time_dev_tools_was_opened = Date.now(); //in milliseconds
            job_instance.set_up_next_do(0);
        }
        else if((Date.now() - this.time_dev_tools_was_opened) < 1000) {
            job_instance.set_up_next_do(0); //give open_dev_tools() a chance to ipen up.
                                           //otherwise it won't break when executing debugger
                                           //in do_next_item
        }
        else {
            js_debugger_checkbox_id.checked = true; //this is here and not in the first clause
            //because we really don't want to waste time and pause during execution
            //of the debugger instruction itself while looping in clause 2,
            //we just want to skip ahead to the next instruction and debug from there.
            job_instance.set_up_next_do(1); } //ready to move on and break in do_next_item
    }
    toString(){ return "debugger" }
    to_source_code(args){ return args.indent + "Control.debugger()" }
};

Instruction$1.step_instructions = class step_instructions extends Instruction$1{ //class name must be upper case because lower case conflicts with js debugger
    constructor () { super(); }
    do_item (job_instance){
        Job.set_go_button_state(false);
        job_instance.set_up_next_do(1, true);
    }
    toString(){ return "step_instructions" }
    to_source_code(args){ return args.indent + "Control.step_instructions()" }
};

Instruction$1.error = class error extends Instruction$1{
    constructor (reason="Job stopped due to executing a Control.error instruction.", perform_when_stopped=true) {
        super();
        if(typeof(perform_when_stopped) !== "boolean") {
          dde_error("Instruction Control.error passed perform_when_stopped of: " + perform_when_stopped +
                    "<br/>but it should be true or false.");
        }
        this.reason = reason;
        this.perform_when_stopped=perform_when_stopped;
    }
    do_item (job_instance){
        job_instance.when_stopped_conditions = this.perform_when_stopped;
        job_instance.when_do_list_done = "run_when_stopped";
        if(!this.perform_when_stopped) {
            job_instance.when_stopped = "stop";
        }
        job_instance.stop_for_reason("errored",  "Instruction Control.error run with reason: " + this.reason);
        job_instance.set_up_next_do(0);
    }
    toString(){
        return "error: " + this.reason
    }
    to_source_code(args){
        let this_indent = args.indent;
        args        = Object.assign({}, arguments[0]);
        args.value  = this.reason;
        args.indent = "";
        return this_indent + "Control.error(" + to_source_code(args) + ")"
    }
};

//upper case G to avoid a conflict, but the user instruction is spelled IO.get_page
Instruction$1.Get_page = class Get_page extends Instruction$1{
    constructor (url_or_options, response_variable_name="http_response") {
        super();
        this.url_or_options = url_or_options;
        this.response_variable_name = response_variable_name;
        this.sent = false;
    }
    do_item (job_instance){
        var the_var_name = this.response_variable_name;  //for the closures
        if (this.sent == false){ //hits first time only
            job_instance.user_data[the_var_name] = undefined; //must do in case there was some other
            //http_request for this var name, esp likely if its default is used.
            let url_or_options = this.url_or_options; //for closure
            DDEFile.get_page_async(this.url_or_options, //note I *could* simplify here and use get_page (syncrhonos), but this doesn't freeze up UI while getting the page so a little safer.
                function(err, body) {
                    //console.log("gp top of cb with the_var_name: " + the_var_name)
                    //console.log("gp got err: " + err)
                    //console.log("ojb inst: "   + job_instance)
                    //console.log("response: "    + response)
                    if(err) { //bug err is not null when bad url
                        // be sure to prefix the err_mess with "Error:" so user can
                        //distinguish it from valid content
                        let err_mess = "Error: " + " Instruction IO.get_page with url: " + url_or_options + "<br/> had error: " + err.message;
                        job_instance.user_data[the_var_name] = err_mess;
                        warning(err_mess);
                    }
                    else {
                        //console.log("gp in good: ")
                        job_instance.user_data[the_var_name] = body;
                        //console.log("gp after good: ")
                    }
                });
            this.sent = true;
            job_instance.set_up_next_do(0);
        }
        else if (job_instance.user_data[the_var_name] === undefined){ //still waiting for the response
            job_instance.set_up_next_do(0);
        }
        else { job_instance.set_up_next_do(1);} //got the response, move to next instruction
    }
    to_source_code(args){
        return args.indent + "IO.get_page(" +
            to_source_code({value: this.url_or_options}) +
            ((this.response_variable_name == "http_response") ? "" : (", " + to_source_code({value: this.response_variable_name})))  +
            ")"
    }
};

Instruction$1.go_to = class go_to extends Instruction$1{
    constructor (instruction_location) {
        super();
        if (instruction_location === undefined){
            dde_error("go_to has not been passed an instruction_location.");
        }
        this.instruction_location = instruction_location;
    }
    do_item (job_instance){
        let id = job_instance.instruction_location_to_id(this.instruction_location);
        if (id == job_instance.program_counter){
            job_instance.stop_for_reason("errored", "In job." + job_instance.name +
                        "<br/>with a go_to instruction whose instruction_location: " + this.instruction_location +
                        "<br/>points to id: " + id +
                        "<br/>that is the same as this go_to instruction," +
                        "<br/>which would cause an infinite loop.");
            job_instance.set_up_next_do(0);

        }
        else {
            job_instance.program_counter = id;
            job_instance.set_up_next_do(0);
        }
    }
    toString(){ return "Control.go_to instruction_location: " + this.instruction_location }

    to_source_code(args){
        let this_indent = args.indent;
        args        = Object.assign({}, arguments[0]);
        args.value  = this.instruction_location;
        args.indent = "";
        return this_indent + "Control.go_to(" + to_source_code(args) + ")"
    }
};

Instruction$1.grab_robot_status = class grab_robot_status extends Instruction$1{
    constructor (user_data_variable = "grabbed_robot_status", //a string
                 start_index = Serial.DATA0, //integer, but can also be "all"
                 end_index=null,  //if integer and same as start_index,
                                //makes a vector of the start_index value,
                                //otherwise makes array of the start_index THROUGH
                                //end_index. OR can be the string "end" meaning
                                //grab through the end of the array
                 robot=null)
                 {
        super();
        this.user_data_variable = user_data_variable;
        this.start_index        = start_index;
        this.end_index          = end_index;
        this.robot = robot;
    }
    do_item (job_instance){
        let robot = (this.robot ? this.robot : job_instance.robot);
        let rs = robot.robot_status;
        let val;
        if (this.start_index == "data_array") {
            this.start_index = Serial.DATA0;
            this.end_index   = "end";
        }
        //set val
        if (this.start_index == "all") { val = rs; }
        else if (this.end_index) {
            if (this.end_index === "end") { this.end_index = rs.length - 1; }
            else if (this.start_index > this.end_index ) {
                job_instance.stop_for_reason("errored", "instruction: grab_robot_status passed end_index: " + this.end_index +
                          " that is less than start_index: " + this.start_index);
                job_instance.set_up_next_do(0);
                return
            }
            else { val = rs.slice(this.start_index, this.end_index + 1); }
        }
        else { val = rs[this.start_index]; } //the one case that val is not an array
        job_instance.user_data[this.user_data_variable] = val;
        job_instance.set_up_next_do(1);
    }
    toString(){
        return "grab_robot_status: " + this.user_data_variable
    }
    to_source_code(args){
        let this_indent = args.indent;
        args        = Object.assign({}, args);
        args.value  = this.user_data_variable;
        args.indent = "";
        let ud_src  = to_source_code(args);
        args        = Object.assign({}, args);
        args.value  = this.start_index;
        args.indent = "";
        let si_src  = to_source_code(args);
        args        = Object.assign({}, args);
        args.value  = this.end_index;
        args.indent = "";
        let ei_src  = to_source_code(args);
        return this_indent + "IO.grab_robot_status(" +
               ud_src + ", " + si_src + ", " + ei_src + ")"
    }
};

/*
Instruction.human_recognize_speech = class human_recognize_speech extends Instruction{
    constructor (args){
        super()
        this.args = args
    }
    do_item (job_instance){
        let the_instruction = this
        this.args.callback = function(reco) {
            job_instance.user_data[the_instruction.args.user_data_variable_name] = reco
            inspect(reco)
            job_instance.set_up_next_do(1)
        }
        //this.args.job_instance = job_instance
        recognize_speech(this.args)
    }
    static finished(job_instance, reco){
        let the_instruction = job_instance.current_instruction()
        job_instance.user_data[the_instruction.args.user_data_variable_name] = reco
        inspect(reco)
        job_instance.set_up_next_do(1)
    }
    to_source_code(args){
        let this_indent = args.indent
        args        = Object.assign({}, arguments[0])
        args.indent = ""
        args.value = this.args
        return this_indent + "Human.recognize_speech(" + to_source_code(args) + ")"
    }
}*/

Instruction$1.human_speak = class human_speak extends Instruction$1{
    constructor (args){
        super();
        this.args = args;
    }
    do_item (job_instance){
       //delete this.args.wait //don't do because in case user has backwards go_to. Probably the extra arg
       //in this.args won't matter
       if (this.args.wait){
           this.args.callback = function (){
                job_instance.set_up_next_do(1);
           };
           speak(this.args);
           return
       }
       else { //don't wait for speak to be done to call the next instruction
           speak(this.args);
           job_instance.set_up_next_do(1);
       }
    }
    to_source_code(args){
        return args.indent + "Human.speak({"  +
            ((this.task == "") ? "" : ("task: " + to_source_code({value: this.task}) + ", ")) +
            ((this.title === undefined) ? "" : ("title: " + to_source_code({value: this.title})  + ", ")) +
            ((this.add_stop_button == true)         ? "" : ("add_stop_button: "     + this.add_stop_button  + ", ")) +
            ((this.dependent_job_names.length == 0) ? "" : ("dependent_job_names: " + to_source_code({value: this.dependent_job_names}) + ", ")) +
            ((this.x      == 200) ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200) ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400) ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400) ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

Instruction$1.human_task = class human_task extends Instruction$1{
    constructor ({task="",
                  title, //don't give this default of "" because we reserve that for when you want NO title.
                         //without passing this, or passing "undefined", you get a smart default including the job name and "Human Task"
                  add_stop_button=true,
                  dependent_job_names=[],
                  x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}) {
        super();
        this.task    = task;
        this.add_stop_button     = add_stop_button;
        this.dependent_job_names = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>";
        var buttons = '<center><input type="submit" value="Continue Job" title="Signify you are done with this task which\ncloses this dialog box and\ncontinues this job"/>&nbsp;';
        if (this.add_stop_button) { buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>'; }
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Task";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.task interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<p/>" + buttons + hidden,
                    callback: human_task_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }
    to_source_code(args){
        return args.indent + "Human.task({"  +
               ((this.task == "") ? "" : ("task: " + to_source_code({value: this.task}) + ", ")) +
               ((this.title === undefined) ? "" : ("title: " + to_source_code({value: this.title})  + ", ")) +
               ((this.add_stop_button == true)         ? "" : ("add_stop_button: "     + this.add_stop_button  + ", ")) +
               ((this.dependent_job_names.length == 0) ? "" : ("dependent_job_names: " + to_source_code({value: this.dependent_job_names}) + ", ")) +
               ((this.x      == 200) ? "" : ("x: " + this.x       + ", "   )) +
               ((this.y      == 200) ? "" : ("y: " + this.y       + ", "   )) +
               ((this.width  == 400) ? "" : ("width: "  + this.width   + ", "   )) +
               ((this.height == 400) ? "" : ("height: " + this.height  + ", "   )) +
               ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
               "})"
    }
};

function human_task_handler (vals){
    var job_instance = Job[vals.job_name];
    if(vals.clicked_button_value == "Continue Job") ; //the dialog closes automatically
    else if (vals.clicked_button_value == "Stop Job"){
        job_instance.stop_for_reason("interrupted", "In human_task, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
                    //creating the human_job, dep_job_names will now be [] so the below if hits but
                    //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && //if j_inst doesn't exist, just forget about it as it doesn't need to be stopped.
                              //without this check we'd pointlessly error.
                    !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_task, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                }
            }
        }
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
     //this lets the do_next_item handle finishing the job properly
}

globalThis.human_task_handler = human_task_handler;

Instruction$1.human_enter_choice = class human_enter_choice extends Instruction$1{
    constructor ({task="",
                  choices=[["Yes", true], ["No", false]],
                  show_choices_as_buttons=false,
                  one_button_per_line=false,
                  user_data_variable_name="choice",
                  dependent_job_names=[],
                  add_stop_button=true,
                  title, x=200, y=200, width=400, height=400,
                  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task    = task;
        this.user_data_variable_name = user_data_variable_name;
        //this.choices                 = choices
        this.show_choices_as_buttons = show_choices_as_buttons;
        this.one_button_per_line     = one_button_per_line;
        this.add_stop_button         = add_stop_button;
        this.dependent_job_names     = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
        this.choices = [];
        for (let choice of choices){  //put each choice into an array. If already an array. leave it as is.
            if (typeof(choice) == "string") { choice = [choice]; }
            if (Array.isArray(choice)) {  this.choices.push(choice); }
            else {dde_error("Human.enter_choice passed a choice that is not a string and not an array: " + choice);}
        }
        this.inserting_instruction = true;
    }
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>\n" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>\n" +
                      "<input type='hidden' name='choices_string' value='" + JSON.stringify(this.choices)                  + "'/>\n";
        let select = "";
        let buttons;
        if (this.show_choices_as_buttons){
            for (var item of this.choices){
                select += "<input type='submit' style='background-color:#FFACB6;margin:4px;' value='" + item[0] + "'/> ";
                if (this.one_button_per_line) { select += "<br/>"; }
            }
            if(this.add_stop_button) {
                buttons = ' <center> <input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/> </center>';
            }
        }
        else { //show as menu items,the default because we can have more of them.
            select  = "<center><select name='choice'>";
            for (var item of this.choices){ select += "<option>" + item[0] + "</option>"; }
            select += "</select></center>";
            buttons = '<center><input type="submit" value="Continue Job" title="Close dialog box and\ncontinue this job"/>&nbsp;';
            if(this.add_stop_button) {
                buttons += ' <input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
            }
            buttons += "</center>";
        }
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Choice";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.enter_choice interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + select + "<br/>" + buttons  + hidden,
                    callback: human_enter_choice_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }

    to_source_code(args){
        return args.indent + "Human.enter_choice({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.user_data_variable_name == "choice")      ? "" : ("user_data_variable_name: " + to_source_code({value: this.user_data_variable_name}) + ", ")) +
            ((this.show_choices_as_buttons == false)         ? "" : ("show_choices_as_buttons: " + this.show_choices_as_buttons                          + ", ")) +
            ((this.one_button_per_line == false)             ? "" : ("one_button_per_line: "     + this.one_button_per_line                              + ", ")) +
            ((this.choices.length == 0)                      ? "" : ("choices: "                 + to_source_code({value: this.choices})                 + ", ")) +
            ((this.add_stop_button == true)                  ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_enter_choice_handler(vals){
    var job_instance = Job[vals.job_name];
    if(vals.clicked_button_value == "Continue Job") { //means the choices are in a menu, not individual buttons
        //job_instance.user_data[vals.user_data_variable_name] = vals.choice
        human_enter_choice_set_var(job_instance, vals.choice, vals.choices_string, vals.user_data_variable_name);
    }
    else if (vals.clicked_button_value == "Stop Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_choice, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_choice, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
    }
    else { //individual choices are in buttons and the user clicked on one of them
        //job_instance.user_data[vals.user_data_variable_name] = vals.clicked_button_value
        human_enter_choice_set_var(job_instance, vals.clicked_button_value, vals.choices_string, vals.user_data_variable_name);
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
}
globalThis.human_enter_choice_handler = human_enter_choice_handler;


function human_enter_choice_set_var(job_instance, choice_string, choices_string, user_data_variable_name){
    let choices = JSON.parse(choices_string);
    let choice_array;
    for(let a_choice_array of choices) {
        if (a_choice_array[0] == choice_string) {
            choice_array = a_choice_array;
            break;
        }
    }
    if (!choice_array) { shouldnt("human_enter_choice got choice_string of: " + choice_string +
        " that isn't in: " + choices);}
    if (choice_array.length == 1) { job_instance.user_data[user_data_variable_name] = choice_array[0]; }
    else {
        let val_src = choice_array[1];
        let val;
        if(typeof(val_src == "string")) {
            let fn = new Function("return (" + val_src + ")"); //create a new fn with no args and body of val_src
            val = fn.call(job_instance);
        }
        else { val = val_src; }
        if (!choice_array[2]) {
            job_instance.user_data[user_data_variable_name] = val;
        }
        else {
            Job.insert_instruction(val, {job: job_instance.name, offset:"after_program_counter"});
        }
    }
}

Instruction$1.human_enter_filepath = class human_filepath extends Instruction$1{
    constructor ({task="",
                  user_data_variable_name="a_filepath",
                  initial_value="",
                  add_stop_button = true,
                  dependent_job_names=[],
                  title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task = task;
        this.user_data_variable_name = user_data_variable_name;
        this.initial_value           = initial_value;
        this.add_stop_button         = add_stop_button;
        this.dependent_job_names     = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }

    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";
        var text_html = "<input type='file' name='choice' style='font-size:14px;'/>";

        var buttons = '<center><input type="submit" value="Continue Job" title="Close dialog box and\\ncontinue this job"/>&nbsp;';
        if (this.add_stop_button) buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Filepath";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        job_instance.set_status_code("waiting", "user on Human.enter_filepath interaction." );
        show_window({ job_name: job_instance.name,
                    content: this.task + "<br/>" + text_html + "<br/><br/>" + buttons + hidden,
                    callback: human_enter_filepath_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color}
        );
    }
    to_source_code(args){
        return args.indent + "Human.enter_file_path({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.initial_value == "")                      ? "" : ("initial_value: "           + to_source_code({value: this.initial_value})           + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_enter_filepath_handler(vals){
    var job_instance = Job[vals.job_name];
    if(vals.clicked_button_value == "Continue Job") { //means the choices are in a menu, not individual buttons
        job_instance.user_data[vals.user_data_variable_name] = vals.choice;
    }
    else if (vals.clicked_button_value == "Stop Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_filepath, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_filepath, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
}

globalThis.human_enter_filepath_handler = human_enter_filepath_handler;


Instruction$1.human_enter_instruction = class human_enter_instruction extends Instruction$1{
    constructor ({task = "Enter a next instruction for this Job.",
                  instruction_type = "Dexter.move_all_joints",
                  instruction_args = "0, 0, 0, 0, 0",
                  add_stop_button = true,
                  dependent_job_names = [],
                  title, x=300, y=200, width=420, height=400,  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task = task;
        this.instruction_type    = instruction_type;
        this.instruction_args    = instruction_args;
        this.dependent_job_names = dependent_job_names;
        this.add_stop_button     = add_stop_button;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
        this.inserting_instruction = true;
    }

    make_instruction_options(){
        let result = "";
        let key_value_pairs = []; //Object.keys(Dexter.instruction_type_to_function_name_map).sort()
        for(let oplet of Object.keys(Dexter.instruction_type_to_function_name_map)){
           key_value_pairs.push([oplet, Robot.instruction_type_to_function_name(oplet)]);
        }
        key_value_pairs.sort(function(a, b){ return ((a[1] < b[1])? -1 : 1 ) });
        for (let pair of key_value_pairs){
            let oplet = pair[0];
            let name  = pair[1];
            let label    = name + " (" + oplet + ")";
            let sel_html = ((name == this.instruction_type) ? "selected" : "");
            let the_html = "<option " + sel_html + ">" + label + "</option>";
            result      += the_html;
        }
        return result
    }

    do_item (job_instance){
        if (!job_instance.enter_instruction_recording) { //don't always init as might have instructions from prev dialog in this set
             job_instance.enter_instruction_recording = [];
        }
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>";

        var type_html = '<span id="instruction_type" class="combo_box" style="display:inline-block;vertical-align:middle;width:235px;">' +
                        this.make_instruction_options() +
                        '</span>';
        let rs = job_instance.robot.robot_status;
        var immediate_do = '<b><i>&nbsp;or</i></b><fieldset style="margin-bottom:10px;margin-top:10px;background-color:#DDDDDD">' +
                           '<div style="margin-bottom:10px;"> <i title="'    +
                           'Find valid oplet letters at end of&#013;'        +
                           'each item in the Instruction type menu.&#013;'   +
                           "Type 'space' to create an 'a' instruction&#013;" +
                           "with joint angles from Dexter's current angles." +
                           '">Immediately do & record typed-in oplet</i>: ' +
                           '<input id="immediate_do_id" autofocus name="immediate_do" data-oninput="true" style="width:30px;"/></div>' +
                           '<span title="' + "Each letter you type into&#013;the above type-in box is recorded." +
                           '"><span style="font-size:12px;">Recorded instructions: ' +
                           '</span><span id="recorded_instructions_count_id">' + job_instance.enter_instruction_recording.length + '</span>' +
                           "</span>&nbsp;&nbsp;" +
                            '<input type="button" value="Save" title="Inserts the recorded instructions&#013;into the editor at the cursor,&#013;wrapped in a Job definition.&#013;Also erases (clears) the recording."/> &nbsp;'  +
                            '<input type="button" value="Clear" title="Erases all the instructions in the recording."/> &nbsp;' +
                            '<input type="button" value="Erase last" title="Erases just the last instruction recorded."/><br/>'   +
                            '<span style="font-size:12px;">' + job_instance.robot.name + " current angles: " +
                            rs[Dexter.J1_ANGLE] + ", " +
                            rs[Dexter.J2_ANGLE] + ", " +
                            rs[Dexter.J3_ANGLE] + ", " +
                            rs[Dexter.J4_ANGLE] + ", " +
                            rs[Dexter.J5_ANGLE] + "</span>" +
                           '</fieldset>';

        var args_html = "<input name='args' style='width:290px;' value='" + this.instruction_args + "'/>";
        var buttons =   '<input type="submit" value="Run instruction & reprompt"/><p/>' +
                        '<input type="submit" value="Continue this job without reprompting" title="Close dialog box and\ncontinue this job"/><p/>' +
            (this.add_stop_button ? '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>' : "");
        if (this.title === undefined) {
            this.title = "Job: " + job_instance.name + ", Human Enter Instruction";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        if(job_instance.robot instanceof Dexter){
            out(Dexter.robot_status_to_html(job_instance.robot.robot_status, "on job: " + job_instance.name), "black", true);
        }
        job_instance.set_status_code("waiting", "user on Human.enter_instruction interaction.");
        show_window({job_name: job_instance.name,
                    content: "<div style='margin-bottom:10px;'><i>" + this.task + "</i></div>" +
                              "Instruction type: " + type_html +
                              immediate_do +
                              "<div style='padding-left:95px;font-size:12px'><i>Separate args with a comma.</i></div>"  +
                              "Arguments: " + args_html + "<p/>"  +
                              buttons +
                              hidden ,
                    callback: human_enter_instruction_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color //having larger than 350 does not increase the number of combo box menu items shown.
                    });
        //setTimeout(function(){immediate_do_id.focus()}, 100) //always focus on immediate_do_id id because if user is in a loop using it, we might as well focus on it. No other widgets where focus would matter in this dialog
        //above line can't work because we're in sandbox where immediate_do_id is unbound
        immediate_do_id.focus();
    }

    to_source_code(args){
        return args.indent + "Human.enter_instruction({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.instruction_type == "Dexter.move_all_joints") ? "" : ("instruction_type: "    + to_source_code({value: this.instruction_type}) + ", ")) +
            ((this.instruction_args  == "0, 0, 0, 0, 0")     ? "" : ("instruction_args: "        + to_source_code({value: this.instruction_args}) + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_enter_instruction_handler(vals){
    var job_instance = Job[vals.job_name];
    var hei_instance = job_instance.do_list[job_instance.program_counter];
    if(vals.clicked_button_value == "Stop Job"){
        job_instance.enter_instruction_recording = [];
        job_instance.stop_for_reason("interrupted", "In human_enter_instruction, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                let j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_instruction, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
        //close_window(vals.window_index) //not needed. this is a submit button
    }
    else if (vals.clicked_button_value == "Continue this job without reprompting") {
        job_instance.enter_instruction_recording = [];
        //close_window(vals.window_index) //not needed. this is a submit button
    }
    else if (vals.clicked_button_value == "Save") {
        let job_source_to_save = human_enter_instruction_job_source_to_save(job_instance);
        Editor.insert(job_source_to_save, "selection_end");
        job_instance.enter_instruction_recording = [];
        recorded_instructions_count_id.innerHTML =  "0";
        out("Human.enter_instruction: recorded instructions saved and cleared.", "purple", true);
        immediate_do_id.focus();
        return
    }
    else if (vals.clicked_button_value == "Clear") {
        job_instance.enter_instruction_recording = [];
        recorded_instructions_count_id.innerHTML =  "0";
        out("Human.enter_instruction cleared all recorded instructions.", "purple");
        immediate_do_id.focus();
        return
    }
    else if (vals.clicked_button_value == "Erase last") {
        let last_ins = job_instance.enter_instruction_recording.pop();
        if (last_ins){
            recorded_instructions_count_id.innerHTML = "" + job_instance.enter_instruction_recording.length;
            out("Human.enter_instruction erased the last previously recorded instruction of:<br/>" + Utils.stringify_value(last_ins),
                "purple");
        }
        else {
            out("There are no instructions in the recording to erase.", "red", true);
        }
        immediate_do_id.focus();
        return
    }

    else { //Run ins & reprompt" or "immediate_do
      let oplet, ins_type;
      if (vals.clicked_button_value == "immediate_do"){
          if (vals.immediate_do == "") {
              oplet = "a";
          }
          else {
              oplet = last(vals.immediate_do);
          }
          ins_type = oplet; //probably won't do any good as its hard to init the combo box to something other than one of its already named items.
          SW.close_window(vals.window_index);
          //console.log("in human_enter_instruction_handler after close_window")
      }
      else { //user clicked a submit button so don't need to close the window.
          ins_type = vals.instruction_type.trim();
          if (ins_type.length == 1){ oplet = ins_type; }
          else {
             oplet = ins_type.split("(")[1];
             oplet = oplet[0];
          }
      }
      let args = vals.args;
      let args_array = args.split(/,s*/); //the s* doesn't soak up the whitespace unfortunately
      if ((vals.clicked_button_value == "immediate_do") && (vals.immediate_do == "")){
          let rs = job_instance.robot.robot_status;
          args_array = make_ins$1(oplet, rs[Dexter.J1_ANGLE], rs[Dexter.J2_ANGLE],
                                rs[Dexter.J3_ANGLE], rs[Dexter.J4_ANGLE], rs[Dexter.J5_ANGLE]);
      }
      else {
          let new_array = make_ins$1(oplet);
          for (let i = 0; i < args_array.length; i++){
              new_array.push(parseFloat(args_array[i]));
          }
          args_array = new_array;
      }
      if (vals.clicked_button_value == "immediate_do"){
          let prefix = "Human.enter_instruction made instruction:";
          if (vals.immediate_do == ""){
              prefix = "Human.enter_instruction captured Dexter's joint angles for instruction:";
          }
          out(prefix + "<br/>" + Utils.stringify_value(args_array), "purple");
          job_instance.enter_instruction_recording.push(args_array);
          //don't to the above set_in_ui because the win is now closed, but the new count will show up when the window redisplays
      }
      let ins_name = ins_type.split(" ")[0];
      let new_human_instruction = Human.enter_instruction({task: hei_instance.task, instruction_type: ins_name, instruction_args: args, dependent_job_names: hei_instance.dependent_job_names});
      let new_ins_array = [args_array, new_human_instruction];
      job_instance.insert_instructions(new_ins_array);
      //job_instance.added_items_count[job_instance.program_counter] = 2 //now performed by insert_instructions
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
}

globalThis.human_enter_instruction_handler = human_enter_instruction_handler;


var human_enter_instruction_job_source_to_save = function(job_instance){
    let instructions_src = "";
    let prefix = "";
    for (let ins of job_instance.enter_instruction_recording){
        let ins_src = "make_ins(";
        for (let i = Dexter.INSTRUCTION_TYPE; i < ins.length; i++){
            let val = Utils.stringify_value_sans_html(ins[i]);
            let arg_prefix = ((i == Dexter.INSTRUCTION_TYPE) ? "" : ", ");
            ins_src += arg_prefix + val;

        }
        ins_src += ")";
        instructions_src += prefix + ins_src;
        prefix = ",\n                   ";
    }
    let new_job_name = "recorded_from_" + job_instance.name;
    let result = '\n' +
'new Job({name: "' + new_job_name + '",\n' +
'         robot: Robot.' + job_instance.robot.name + ',\n' +
'         do_list: [' + instructions_src +
'\n                  ]})\n';
    return result + "Job." + new_job_name + ".start()\n"
};

Instruction$1.human_enter_number = class human_enter_number extends Instruction$1{
    constructor (  {task="",
                    user_data_variable_name="a_number",
                    initial_value=0,
                    min=0,
                    max=100,
                    step=1,
                    add_stop_button = true,
                    dependent_job_names=[],
                    title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}){
        if (initial_value < min) {
            dde_error("Human.enter_number passed an initial value: " + initial_value +
                      "<br/> that is less than the min value of: " + min);
        }
        else if (initial_value > max) {
            dde_error("Human.enter_number passed an initial value: " + initial_value +
                      "<br/> that is more than the max value of: " + max);
        }
        else {
            super();
            this.task = task;
            this.user_data_variable_name = user_data_variable_name;
            this.initial_value=initial_value;
            this.min = min;
            this.max = max;
            this.step = step;
            this.add_stop_button = add_stop_button;
            this.dependent_job_names = dependent_job_names;
            this.title   = title;
            this.x       = x;
            this.y       = y;
            this.width   = width;
            this.height  = height;
            this.background_color = background_color;
        }
    }
    
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";

        var number_html  = "<table  style='border:none';border-collapse:collapse;>" +
                           "<tr><td style='border:none;float:right;'>max: </td><td>" + this.max + "</td></tr>" +
                           "<tr><td style='border:none;'>" + this.user_data_variable_name + " = </td><td>" +
                           "<input type='number' name='choice' style='width:100px;font-size:16px;' " +
                           "' value='" + this.initial_value +
                           "' min='"   + this.min +
                           "' max='"   + this.max +
                           "' step='"  + this.step +
                           "'/></td></tr>" +
                           "<tr><td style='border:none;float:right;'>min: </td><td>" + this.min + "</td></tr>" +
                           "</table>";
        var buttons = '<center><input type="submit" value="Continue Job" title="Close dialog box and\ncontinue this job"/>&nbsp;';
        if (this.add_stop_button) { buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>'; }
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Number";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.enter_number interaction." );
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + number_html + "<br/>" + buttons + hidden,
                    callback: human_enter_number_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }
    to_source_code(args){
        return args.indent + "Human.enter_number({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.initial_value == 0)                       ? "" : ("initial_value: "           + to_source_code({value: this.initial_value})           + ", ")) +
            ((this.min           == 0)                       ? "" : ("min: "                     + to_source_code({value: this.min})                     + ", ")) +
            ((this.max           == 1000)                    ? "" : ("max: "                     + to_source_code({value: this.max})                     + ", ")) +
            ((this.step          == 1)                       ? "" : ("step: "                    + to_source_code({value: this.step})                    + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_enter_number_handler(vals){
    var job_instance = Job[vals.job_name];
    if (vals.clicked_button_value != "Continue Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_number, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_number, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
        job_instance.set_up_next_do(1); //we're stopping this job as it has a stop_reason so let it stop normally
    }
    else { //Done if the_choice is in range
        let the_choice = parseFloat(vals.choice);
        let instruction_instance = job_instance.current_instruction();
        if(the_choice > instruction_instance.max) {
            alert("Job: " + job_instance.name + "\nhas a Human.enter_number instruction\nwhose entered value: " + the_choice +
                  ",\n is more than the maximum: " + instruction_instance.max + ".\nPlease pick a lower value.");
        job_instance.set_up_next_do(0);
        }
        else if(the_choice < instruction_instance.min) {
            alert("Job: " + job_instance.name + "\nhas a Human.enter_number instruction\nwhose entered value: " + the_choice +
                ",\n is less than the minimum: " + instruction_instance.min + ".\n Please pick a higher value.");
            job_instance.set_up_next_do(0);
        }
        else {
            job_instance.user_data[vals.user_data_variable_name] = the_choice;
            job_instance.set_up_next_do(1);
        }
    }
}

globalThis.human_enter_number_handler = human_enter_number_handler;


//beware: Human.enter_position returns an array of Dexter.follow_me AND an instance of this class.
Instruction$1.human_enter_position = class human_enter_position extends Instruction$1{
    constructor (  {task="Position Dexter&apos;s end effector<br/>to the position that you want to record,<br/>and click <b>Continue Job</b>.",
                    user_data_variable_name="a_position",
                    add_stop_button = true,
                    dependent_job_names=[],
                    title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}){
            super();
            this.task = task;
            this.user_data_variable_name = user_data_variable_name;
            this.add_stop_button = add_stop_button;
            this.dependent_job_names = dependent_job_names;
            this.title   = title;
            this.x       = x;
            this.y       = y;
            this.width   = width;
            this.height  = height;
            this.background_color = background_color;
            this.status = "not started";
            this.inserting_instruction = true;
    }

    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";

        var buttons = '<center><input type="submit" value="Continue Job" title="Capture position,\nclose dialog box and\ncontinue this job"/>&nbsp;';
        if (this.add_stop_button) { buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>'; }
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Position";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        job_instance.set_status_code("waiting", "user on Human.enter_position interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + buttons + hidden,
                    callback: human_enter_position_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color});
    }
    to_source_code(args){
        return args.indent + "Human.enter_position({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_enter_position_handler(vals){
    var job_instance = Job[vals.job_name];
    if (vals.clicked_button_value != "Continue Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_position, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_position, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                    return
                }
            }
        }
        job_instance.set_up_next_do(1); //we're stopping this job as it has a stop_reason so let it stop normally
    }
    else {
        let new_ins =
            [Dexter.get_robot_status,
             function(){
                 let xyz = job_instance.robot.joint_xyz();
                 job_instance.user_data[vals.user_data_variable_name] = xyz;
             },
             Dexter.set_keep_position
             ];
        job_instance.insert_instructions(new_ins);
        job_instance.set_up_next_do(1);
    }
}

globalThis.human_enter_position_handler = human_enter_position_handler;


Instruction$1.human_enter_text = class human_enter_text extends Instruction$1{
    constructor ({task="",
                    user_data_variable_name="a_text",
                    initial_value="",
                    line_count=1, //if 1, makes an input type=text. If > 1 makes a resizeable text area
                    add_stop_button = true,
                    dependent_job_names=[],
                    title, x=200, y=200, width=400, height=400,  background_color="rgb(238, 238, 238)"}={}) {
        super();
        this.task = task;
        this.user_data_variable_name = user_data_variable_name;
        this.initial_value = initial_value;
        this.line_count = line_count;
        this.add_stop_button = add_stop_button;
        this.dependent_job_names = dependent_job_names;
        this.title   = title;
        this.x       = x;
        this.y       = y;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }
    
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>" +
                      "<input type='hidden' name='user_data_variable_name' value='" + this.user_data_variable_name         + "'/>";
        var text_html;
        if(this.line_count == 1){
            text_html = "<br/><input type='text' name='choice" +
                        "' size='50" +
                        "' value='" + this.initial_value +
                        "'style='font-size:14px;" +
                        "'/>";
        }
        else {
            text_html = "<br/><textarea name='choice" +
                        "' rows='" + this.line_count +
                        "' cols='50' style='font-size:14px;'>" +
                         this.initial_value +
                         "</textarea>";
        }
        var buttons = '<center><input type="submit" value="Continue Job"/>&nbsp;';
        if (this.add_stop_button) buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
        buttons += '</center>';
        if (this.title === undefined){
            this.title = "Job: " + job_instance.name + ", Human Enter Text";
            if (job_instance.robot instanceof Human){
                this.title = job_instance.name + " task for: " +  job_instance.robot.name;
            }
        }
        job_instance.set_status_code("waiting", "user on Human.enter_text interaction.");
        show_window({job_name: job_instance.name,
                    content: this.task + "<br/>" + text_html + "<br/><br/>" + buttons + hidden,
                    callback: human_enter_text_handler,
                    title: this.title,
                    x: this.x,
                    y: this.y,
                    width: this.width,
                    height: this.height,
                    background_color: this.background_color}
                    );
    }
    to_source_code(args){
        return args.indent + "Human.enter_text({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.initial_value == "")                      ? "" : ("initial_value: "           + to_source_code({value: this.initial_value})           + ", ")) +
            ((this.line_count    == 1)                       ? "" : ("line_count: "              + this.line_count                                       + ", ")) +
            ((this.add_stop_button  == true)                 ? "" : ("add_stop_button: "         + this.add_stop_button                                  + ", ")) +
            ((this.dependent_job_names.length == 0)          ? "" : ("dependent_job_names: "     + to_source_code({value: this.dependent_job_names})     + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x       + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y       + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width   + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height  + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_enter_text_handler(vals){
    var job_instance = Job[vals.job_name];
    if (vals.clicked_button_value != "Continue Job"){
        job_instance.stop_for_reason("interrupted", "In human_enter_text, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_enter_text, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                }
            }
        }
    }
    else { //Done
        var the_choice = vals.choice;
        job_instance.user_data[vals.user_data_variable_name] = the_choice;
    }
    job_instance.set_up_next_do(1); //even for the case where we're stopping the job,
    //this lets the do_next_item handle finishing the job properly
}

globalThis.human_enter_text_handler = human_enter_text_handler;


Instruction$1.human_notify = class human_notify extends Instruction$1{
    constructor ({task="",
                  window=true,
                  output_pane=true,
                  beep_count=0,
                  speak=false,
                  add_stop_button=true,
                  dependent_job_names = [],
                  //does not have x and y because those are automatically set to make
                  //multiple notify windows visible.
                  title,
                  close_same_titled_windows = false,
                  width=400, height=400,  background_color="rgb(238, 238, 238)"}={}) {

        super();
        this.task=task,
        this.window=window,
        this.output_pane=output_pane,
        this.beep_count=beep_count,
        this.add_stop_button = add_stop_button;
        this.dependent_job_names = dependent_job_names;
        this.speak=speak;
        this.title   = title;
        this.close_same_titled_windows = close_same_titled_windows;
        this.width   = width;
        this.height  = height;
        this.background_color = background_color;
    }
    
    do_item (job_instance){
        var hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.dependent_job_names) + "'/>";
        if (this.title === undefined){
            this.title = job_instance.name + ", Notification";
            if (job_instance.robot instanceof Human){
                this.title += " for: " +  job_instance.robot.name;
            }
        }
        else if (this.title == "") { this.title = "<span style='height:25px;'>&nbsp;</span>"; }
        var prefix = "<div style='font-size:11px;'>Presented at: " + new Date() + "<br/>" +
            "Instruction " + job_instance.program_counter +
            " of " + job_instance.do_list.length + "</div>";
        let buttons = "";
        if(this.add_stop_button) {
            buttons += '<center><input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/></center>';
        }
        if (this.window){
            show_window({job_name: job_instance.name,
                         content: prefix + "<br/>" + this.task + "<p/>" + buttons + hidden,
                         y: human_notify.get_window_y(), //do y first since it might cause reset of positions
                         x: human_notify.get_window_x(),
                         title:  this.title,
                         width:  this.width,
                         height: this.height,
                         background_color: this.background_color,
                         close_same_titled_windows: this.close_same_titled_windows,
                         callback: human_notify_handler
            });
        }
        if (this.output_pane){
            out(this.title + "<br/>" + prefix + this.task, "#951616");
        }
        var the_notifiy = this;
        beeps(this.beep_count,
             function(){if (the_notifiy.speak){
                             speak({speak_data: the_notifiy.title + ", " + the_notifiy.task});
             }});
        job_instance.set_up_next_do(1);
    }
    static get_window_x(){
        human_notify.window_x += 40;
        return globalThis.outerWidth - 370 - human_notify.window_x
    }
    static get_window_y(){
        human_notify.window_y += 40;
        if (human_notify.window_y > (globalThis.outerHeight - 300)){
            human_notify.window_x = 0;
            human_notify.window_y = 40;
        }
        return human_notify.window_y
    }
    to_source_code(args){
        return args.indent + "Human.notify({" +
            ((this.task == "")                               ? "" : ("task: "                    + to_source_code({value: this.task})                    + ", ")) +
            ((this.title === undefined)                      ? "" : ("title: "                   + to_source_code({value: this.title})                   + ", ")) +
            ((this.window      == true)                      ? "" : ("window: "                  + this.window                                           + ", ")) +
            ((this.output_pane == true)                      ? "" : ("output_pane: "             + this.output_pane                                      + ", ")) +
            ((this.beep_count  == 0)                         ? "" : ("beep_count: "              + this.beep_count                                       + ", ")) +
            ((this.speak       == false)                     ? "" : ("speak: "                   + this.speak                                            + ", ")) +
            ((this.x      == 200)                            ? "" : ("x: " + this.x              + ", "   )) +
            ((this.y      == 200)                            ? "" : ("y: " + this.y              + ", "   )) +
            ((this.width  == 400)                            ? "" : ("width: "  + this.width     + ", "   )) +
            ((this.height == 400)                            ? "" : ("height: " + this.height    + ", "   )) +
            ((this.background_color == "rgb(238, 238, 238)") ? "" : ("background_color: " + to_source_code({value: this.background_color}))) +
            "})"
    }
};

function human_notify_handler(vals){
    let job_instance = Job[vals.job_name];
    if ((vals.clicked_button_value === "Stop Job") && job_instance.is_active()){
        job_instance.stop_for_reason("interrupted", "In human_notify, user stopped this job.");
        var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
        //creating the human_job, dep_job_names will now be [] so the below if hits but
        //the for loop has nothing to loop over so nothing will be done.
        if (dep_job_names && Array.isArray(dep_job_names)){
            for (let j_name of dep_job_names){
                var j_inst = Job[j_name];
                if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                    j_inst.stop_for_reason("interrupted", "In human_notify, user stopped this job which is dependent on job: " + job_instance.name);
                    j_inst.set_up_next_do(0);
                }
            }
        }
    }
}

globalThis.human_notify_handler = human_notify_handler;


Instruction$1.human_notify.window_x = 0;
Instruction$1.human_notify.window_y = 0;

Instruction$1.human_show_window = class human_show_window extends Instruction$1{
    constructor (sw_lit_obj_args = {}) {
        super();
        this.win_index = null;
        this.sw_lit_obj_args = sw_lit_obj_args;
        this.user_data_variable_name = sw_lit_obj_args.user_data_variable_name;
        this.orig_callback = sw_lit_obj_args.callback;
    }

    do_item (job_instance){ //only gets called once, the first time this instr is run
        //this.sw_lit_obj_args.the_instruction_id = job_instance.do_list.indexOf(this)
        this.sw_lit_obj_args.job_name = job_instance.name;
        let hidden  = "<input type='hidden' name='dependent_job_names' value='" + JSON.stringify(this.sw_lit_obj_args.dependent_job_names) + "'/>";
        job_instance.set_status_code("waiting", "user on Human.show_window interaction.");
        //can't use a closure here bevause if its an anonymous fn, then it gets src code
        //saved in the show-window dom, and that has to get evaled in an env
        //that's not this one so closed over vars won't work.
        let content = this.sw_lit_obj_args.content;
        let buttons = '<center><input type="submit" value="Continue Job"/>&nbsp;';
        if (this.sw_lit_obj_args.add_stop_button) buttons += '<input type="submit" value="Stop Job" title="Close dialog box,\nstop this job and all dependent jobs."/>';
        buttons += '</center>';
        if(!content.includes("Continue Job")) { content += buttons + hidden; } //if I don't check, we'll add the buttons each time the job is restarted
        this.sw_lit_obj_args.content = content;
        this.sw_lit_obj_args.callback = human_show_window_handler;
        this.win_index = show_window(this.sw_lit_obj_args);
    }
    to_source_code(args){
        let extra_indent = ' '.repeat(37);
        return args.indent + "Human.show_window(\n" +
               to_source_code({indent: args.indent + extra_indent, value: this.sw_lit_obj_args}) + ")"
    }
};

function human_show_window_handler(vals){
    console.log("top of human_show_window_handler with is_submit of: " + vals.is_submit);
    const job_instance  = Job[vals.job_name];
    //delete vals.the_job_name
    const hsw_inst = job_instance.current_instruction(); //job_instance.do_list[vals.the_instruction_id]
    const cb = hsw_inst.orig_callback;
    if (cb) { cb.call(job_instance, vals); }
    if(vals.is_submit //|| //useful when running this job in the browser, and user clicks a submit button.
      //!SW.is_window_shown(vals.window_index) //too hard to support right now for browser
      //as requires finding out about browser state. todo  when more support for
      //modifying and discovering browser state is available.
      ){
        if (vals.clicked_button_value === "Stop Job"){
            job_instance.stop_for_reason("interrupted", "In human_show_window, user stopped this job.");
            var dep_job_names = JSON.parse(vals.dependent_job_names); //If the user did not pass in a dependent_job_names arg when
            //creating the human_job, dep_job_names will now be [] so the below if hits but
            //the for loop has nothing to loop over so nothing will be done.
            if (dep_job_names && Array.isArray(dep_job_names)){
                for (let j_name of dep_job_names){
                    var j_inst = Job[j_name];
                    if (j_inst && !j_inst.stop_reason){ //if j_inst is still going, stop it.
                        j_inst.stop_for_reason("interrupted", "In human_show_window, user stopped this job which is dependent on job: " + job_instance.name);
                        j_inst.set_up_next_do(0);
                    }
                }
            }
        }
        else { //continue the job
            //if windows is not shown, that means time to save its values in the job an let the job go to its next instruction
            job_instance.user_data[hsw_inst.sw_lit_obj_args.user_data_variable_name] = vals;
            job_instance.set_status_code("running");
            job_instance.set_up_next_do(1);
        }
    }
}

globalThis.human_show_window_handler = human_show_window_handler;


Instruction$1.if_any_errors = class if_any_errors extends Instruction$1{
    constructor (job_names=[], instruction_if_error=null) {
        super();
        this.job_names = job_names;
        this.instruction_if_error = instruction_if_error;
        this.inserting_instruction = true;
    }
    do_item (job_instance){
        for(let job_name of this.job_names){
            let j_inst = Job[job_name];
            if (j_inst){
                if ((j_inst.status_code == "errored") ||
                    (j_inst.status_code == "interrupted")){
                    let the_error_ins = this.instruction_if_error;
                    if (the_error_ins == null){
                        let message = "In job: " + job_instance.name +
                                      ", an instruction of type: Control.if_any_errors, " +
                                      "discovered that job: " + job_name + " has errored.";
                        the_error_ins =  Control.error(message);
                    }
                    job_instance.insert_single_instruction(the_error_ins);
                    break;
                }
            }
            else {
                job_instance.stop_for_reason("errored", "In job: " + job_instance.name +
                             ", an instruction of type: Control.if_any_errors<br/> " +
                             "was passed a job name of:  " + job_name + "<br/> that doesn't exist.");
                job_instance.set_up_next_do(0);
                return
            }
        }
        job_instance.set_up_next_do(1);
    }
    to_source_code(args){
        return args.indent + "Control.if_any_errors(" +
                              to_source_code({value: this.job_names}) + ", " +
                              to_source_code({value: this.instruction_if_error}) + ")"
    }
};

Instruction$1.include_job = class include_job extends Instruction$1{
    constructor (job_name, start_loc, end_loc) {
        super();
        if(job_name === undefined){
            dde_error("Control.include_job was not passed a <b>job_name</b> which is required.");
        }
        this.job_name = job_name;
        //It *might* be good to permit job_name to be a job obj, but
        //usually better to have it be a string and evaled at instruction executing time
        //to permit order of job defs in file to not matter.
        //MakeInstruction insertion of jobs depends on instruction executing time
        //for resolving of job_name
        this.start_loc = start_loc;
        this.end_loc = end_loc;
        this.inserting_instruction = true;
        }
    do_item (job_instance){
        let first_arg = this.job_name;
        let resolved_first_arg; //could be a job or an array of instructions
        let do_list_array_to_use;
        if(first_arg instanceof Job) {
            resolved_first_arg   = first_arg;
            do_list_array_to_use = first_arg.orig_args.do_list;
        }
        else if (Array.isArray(first_arg)) {
            resolved_first_arg   = first_arg;
            do_list_array_to_use = first_arg;
        }
        else if (typeof(first_arg == "string")){  // "Job.job_name"
            if(first_arg.startsWith("Job.")) {
                resolved_first_arg   = value_of_path(first_arg);
                if(!(resolved_first_arg instanceof Job)){
                    dde_error("Control.include_job's first argument: " + first_arg +
                              "<br/>resolved to: " + resolved_first_arg +
                              "<br/>but was expected to resolve to a Job instance.");
                }
                do_list_array_to_use = resolved_first_arg.orig_args.do_list;
            }
            else if (Job[first_arg]) { // "job name"
                resolved_first_arg   = Job[first_arg];
                do_list_array_to_use = resolved_first_arg.orig_args.do_list;
            }
            else if (first_arg.includes(".")){ //got a file path with an extension.
                if(file_exists(first_arg)){
                    let job_instances_in_file = Job.instances_in_file(first_arg);
                    if(job_instances_in_file.length > 0) {
                        resolved_first_arg   = job_instances_in_file[0];
                        do_list_array_to_use = resolved_first_arg.orig_args.do_list;
                    }
                    else { //maybe file src starts with var foo = an_array_of_instructions
                        let file_src = read_file(first_arg);
                        let result_obj = eval_js_part2(file_src, false); // warning: calling straight eval often doesn't return the value of the last expr in the src, but my eval_js_part2 usually does. //globalThis.eval(file_src)
                        if(result_obj.error_message){
                           dde_error("Control.include_job's first argument: " + first_arg +
                                     "<br/>refers to an existing file but<br/>" +
                                     "that file contains the JavaScript error of:<br/>" +
                                     err.message);
                        }
                        let file_value = result_obj.value;
                        if (Array.isArray(file_value)) {
                            resolved_first_arg   = file_value;
                            do_list_array_to_use = file_value;
                        }
                        else if (file_value === undefined){ // if first expr in file is var foo = arrayof_instructions, use that
                            file_src = Utils.trim_comments_from_front(file_src);
                            if(file_src.startsWith("var ")){
                                let equal_sign_pos = file_src.indexOf("=");
                                if(equal_sign_pos == -1){
                                    dde_error("Control.include_job's first argument: " + first_arg +
                                              "<br/>refers to an existing file containing variable: " + var_name + ".<br/>" +
                                             "However, their is no equal sign after 'var'");
                                }
                                let var_name = file_src.substring(4, equal_sign_pos).trim();
                                let var_val = globalThis[var_name];
                                if(Array.isArray(var_val)){
                                    resolved_first_arg   = var_val;
                                    do_list_array_to_use = var_val;
                                }
                                else {
                                    dde_error("Control.include_job's first argument: " + first_arg +
                                            "<br/>refers to an existing file containing variable: " + var_name + ".<br/>" +
                                            "However, the value is not an array of instructions, but rather:<br/>" +
                                            var_val);
                                }
                            }
                        }
                    }
                }
                else {
                    dde_error("Control.include_job's first argument: " + first_arg + " has a dot in it<br/>" +
                               "so it is presumed to be a file path<br/>" +
                               "but no such file exists.");
                }
            }
            else if (globalThis[first_arg]) {
                resolved_first_arg = globalThis[first_arg];
                if(!Array.isArray(resolved_first_arg)) {
                    dde_error("Control.include_job's first argument: " + first_arg + " is a variable<br/>" +
                              "but the value of the variable is not an array:<br/>" +
                               resolved_first_arg);
                }
                else {
                    do_list_array_to_use = resolved_first_arg;
                }
            }
            else {
                dde_error("Control.include_job, got a first argument of: " + first_arg +
                          "<br/>which is invalid because, although it is a string,<br/>" +
                          "it isn't a Job name, file name, nor variable name.");
            }
        } //end of first_arg is a string processing
        else {
            dde_error("Control.include_job, got a first argument of: " + first_arg +
                      "<br/>which is invalid because its not a Job, array, or string.");
        }
        //at this point either the above code errored, or we have
        //resolved_first_arg   set to a Job or a do_list array and
        //do_list_array_to_use set to an array
        if(Instruction$1.is_oplet_array(do_list_array_to_use)){
            dde_error("Control.include_job, got a first argument of: " + first_arg +
                      "<br/>but that resolved to an oplet array: " + do_list_array_to_use +
                      "<br/>which is not a valid array of instruction.<br/>" +
                      "If you wrap this oplet array in an outer array, it will be valid.");
        }
        else {//the base do list instructions to use are ready to go!
            let the_start_loc;
            let the_end_loc;
            if(resolved_first_arg instanceof Job){
                the_start_loc = ((this.start_loc === null) ? resolved_first_arg.orig_args.program_counter        : this.start_loc);
                the_end_loc   = ((this.end_loc   === null) ? resolved_first_arg.orig_args.ending_program_counter : this.end_loc);

                the_start_loc = resolved_first_arg.instruction_location_to_id(
                                         the_start_loc, undefined, undefined, true); //use orig do_list
                the_end_loc = resolved_first_arg.instruction_location_to_id(
                                         the_end_loc,   undefined, undefined, true); //use orig do_list
            }
            else {
                if(the_start_loc == null) { the_start_loc = 0; }
                if(the_end_loc   == null) { the_end_loc   = do_list_array_to_use.length; }
            }
            if(!Utils.is_non_neg_integer(the_start_loc)){
                dde_error("Control.include_job passed start_loc of: " + this.start_loc +
                          "<br/>but that resolved to: " +  the_start_loc +
                          "<br/>which is not a non-negative integer.");
            }
            else if(!Utils.is_non_neg_integer(the_end_loc)){
                dde_error("Control.include_job passed end_loc of: " + this.end_loc +
                          "<br/>but that resolved to: " +  the_end_loc +
                          "<br/>which is not a non-negative integer.");
            }
            else { //finally ready to do the actual work
                let instrs_to_insert = do_list_array_to_use.slice(the_start_loc, the_end_loc); //excludes the_end_loc
                job_instance.insert_instructions(instrs_to_insert);
                job_instance.set_up_next_do(1);
            }
        }
    }

    to_source_code(args){
        return args.indent + "Control.include_job(" +
            to_source_code({value: this.job_name}) + ")"
    }
};

Instruction$1.label = class label extends Instruction$1{
    //also job_names may or may not contain the name of the current job. It doesn't matter.
    constructor (name) {
        super();
        if (!name){
            dde_error("Instruction label has not been passed a name.");
        }
        this.name = name;
    }
    do_item (job_instance){
        job_instance.set_up_next_do(1);
    }
    toString(){ return this.name }
    to_source_code(args){
        return args.indent + "Control.label(" +
              to_source_code({value: this.name})  + ")"
    }
};

Instruction$1.loop = class loop extends Instruction$1{
    constructor (times_to_loop, body_fn) {
        super();
        this.times_to_loop          = times_to_loop;
        this.body_fn                = body_fn;
        this.iter_index             = -1;
        this.iter_total             = Infinity;
        this.times_to_loop_object   = null; //only used when times_to_loop is an object.
                                           //in that case, we use resolved_times_to_loop to hold
                                           //the array of own property names of the object,
                                           //and thus can use its length for iter_total,
                                           //and index into it to get the cur prop name
                                           //which we then use to llok up in times_to_loop_object
                                           //for the iter_val
        this.inserting_instruction = true;
        this.init_instruction();
    }
    //there is no do_items for loop. But this is similar. It does not call set_up_next_do,
    //which is done only in the Job.prototype.do_next_item section that handles loop
    //Returns an array of instructions to do for one iteration.
    //If on a normal iteration with more to come, the last inst returned will be a
    //go_to to this loop instruction. (and that go_to might be the ONLY instruction in the returned array)
    //else if null is returned, we're done with this loop.
    //the returned instruction array may contain a Control.break instruction that
    //ends this loop. That ending is handled in Job.prototype.do_next_item section that handles loop
    get_instructions_for_one_iteration(job_instance){ //strategy: compute:
        //1. iter_index, 2. iter_total,3. iter_val & iter_key, 4. instructions for this iteration & return them
        let fn_result = null;
        //compute  this.iter_total and this.resolved_time_to_loop
        if(this.resolved_times_to_loop === null){ //first time only
            this.iter_index = -1;
            if      (typeof(this.times_to_loop) == "boolean")  { this.resolved_times_to_loop = this.times_to_loop;} //leave iter_total at Infinity
            else if (Utils.is_non_neg_integer(this.times_to_loop))   { this.resolved_times_to_loop = this.times_to_loop; this.iter_total = this.resolved_times_to_loop;}
            else if (Array.isArray(this.times_to_loop))        { this.resolved_times_to_loop = this.times_to_loop; this.iter_total = this.resolved_times_to_loop.length;}
            else if (typeof(this.times_to_loop) == "object")   {
                this.times_to_loop_object = this.times_to_loop;
                this.resolved_times_to_loop = Object.getOwnPropertyNames(this.times_to_loop_object);
                this.iter_total = this.resolved_times_to_loop.length;
            }
            else if (typeof(this.times_to_loop) == "function"){
               fn_result = this.times_to_loop.call(job_instance, this.iter_index, undefined, undefined, undefined);
               if      (typeof(fn_result) == "boolean")        { this.resolved_times_to_loop = this.times_to_loop; } //leave iter_total at Infinity
               else if (typeof(fn_result) == "number"){
                   if(Utils.is_non_neg_integer(fn_result))           { this.resolved_times_to_loop = fn_result; this.iter_total = this.resolved_times_to_loop;}
                   else {
                       job_instance.stop_for_reason("errored", "Control.loop passed times_to_loop that returned a number: " +  fn_result +
                                                       "\n but it isn't a non-negative integer.");
                       return null
                   }
               }
               else if (Array.isArray(fn_result))              { this.resolved_times_to_loop = fn_result; this.iter_total = this.resolved_times_to_loop.length;}
               else if (typeof(fn_result) == "object")         {
                   this.times_to_loop_object = fn_result;
                   this.resolved_times_to_loop = Object.getOwnPropertyNames(this.times_to_loop_object);
                   this.iter_total = this.resolved_times_to_loop.length;
               }
               else if (typeof(fn_result) == "function")       { this.resolved_times_to_loop = fn_result;} //rare but possible. //leave iter_total at Infinity
               else { job_instance.stop_for_reason("errored", "Control.loop passed function for boolean_int_array_number but that function" +
                                "\n returned an invalid type: " + fn_result +
                                "\n It must return a boolean, non-negative integer, array, or function");
                      return null
               }
           }
           else { job_instance.stop_for_reason("errored", "Control.loop passed times_to_loop of:\n " +
                  this.times_to_loop +
                "\n but that is not one of the valid types of:\n boolean, non-negative integer, array, or function.");
                return null
           }
        } //end of special processing for first iteration.
          // the below code is run for all iterations including the first iteration.
        this.iter_index++; //First compute iter_index. no changes to iter_index after this.
        //compute iter_val & iter_key.  iter_index is computed at the top of this fn, iter_total computed just above
        let iter_val = undefined;
        let iter_key = this.iter_index; //valid for all times_to_loop types except object.
        if (this.resolved_times_to_loop === false) { //no iterations of this loop will happen
            this.init_instruction(); //ready for next start of this job
            return null
        }
        else if (this.resolved_times_to_loop === true){ iter_val = true; } //loop forever or until body_fn returns Control.break instruction
        else if(Utils.is_non_neg_integer(this.resolved_times_to_loop)){
            iter_val = this.iter_index;
        }
        else if (this.times_to_loop_object){ //must be before Array.isArray(this.resolved_times_to_loop)
            iter_key = this.resolved_times_to_loop[this.iter_index];
            iter_val = this.times_to_loop_object[iter_key];
        }
        else if (Array.isArray(this.resolved_times_to_loop)) {
             iter_val = this.resolved_times_to_loop[this.iter_index];
        }
        else if (typeof(this.resolved_times_to_loop) == "function"){
           if      (this.iter_index > 0) { fn_result = this.resolved_times_to_loop.call(job_instance, this.iter_index, this.iter_index, this.iter_total);}
           if      (fn_result === false) { //looping is over, Jim
               this.init_instruction(); //ready for next start of this job
               return null
           }
           else if (fn_result === true)  { iter_val = true; }
           else {
               job_instance.stop_for_reason("errored", "Control.loop passed a function to call to determine if another iteration should occur" +
                         "\n but that function returned: " + fn_result +
                         "\n however, only true and false are valid results.");
               return null
           }
       }
       else { shouldnt("Control.loop has an invalid this.resolved_times_to_loop of: " + this.resolved_times_to_loop);}
       if(this.iter_index >= this.iter_total) { //done looping but initialize so if the job is restarted, the loop will restart
            this.init_instruction(); //ready for next time this whole loop might be called.
            return null
       }
       else {//ok, finally compute instructions for this iteration
           let body_fn_result = this.body_fn.call(job_instance, this.iter_index, iter_val, this.iter_total, iter_key);
           if((body_fn_result === undefined) ||  (body_fn_result === null)){ //slight optimization
               body_fn_result = [];
           }
           else if(!Array.isArray(body_fn_result) ||
              Instruction$1.is_oplet_array(body_fn_result) ||
              Instruction$1.is_data_array(body_fn_result)
              ){
               body_fn_result = [body_fn_result]; //we must return a real array of instructions from this fn.
                                                 //below we add the go_to at the end.
           }
           //body_fn_result can legitimately be the empty array at this point.
           //it might also contain a Control.break instruction.
           let go_to_ins = new Instruction$1.go_to(job_instance.program_counter);
           body_fn_result.push(go_to_ins);
           return body_fn_result
       }
    }
    init_instruction(){
        this.resolved_times_to_loop = null;
    }
    //when called, pc of job_instance will (as of apr 2020 ) be to a Control.break instruction
    //Just search backwards for the first loop instruction and return its pc.
    //If job_instance.program_counter happens to be pointing at a loop,
    //its just returned.
    static pc_of_enclosing_loop(job_instance){
        let break_instr_id = job_instance.program_counter;
        for(let a_pc = break_instr_id; a_pc >=0; a_pc--){
            let a_ins = job_instance.do_list[a_pc];
            if(a_ins instanceof Instruction$1.loop) {
                let sub_instructions_under_loop = job_instance.total_sub_instruction_count(a_pc);
                let last_sub_instr_id = a_pc + sub_instructions_under_loop;
                if(break_instr_id <= last_sub_instr_id) { //then the break inst is a sub_ins of the loop at a_pc
                    return a_pc
                }
                //else we keep searching back up for the next loop up the do_list
            }
        }
        return null // not good. we didn't find an enclosing loop. this will become a warning.
    }
    to_source_code(args){
        return args.indent + "Control.loop(" +
            to_source_code({value: this.times_to_loop})  + ",\n" +
            to_source_code({value: this.body_fn}) +
            ")"
    }
};

Instruction$1.out = class Out extends Instruction$1{
    constructor (val="", color="black", temp=false, print_job_info=false) {
        super();
        this.val   = val;
        this.color = color;
        this.temp  = temp;
        this.print_job_info = print_job_info;
    }
    do_item (job_instance){
        let prefix = (this.print_job_info ? "Job: " + job_instance.name + ", instruction ID: " + job_instance.program_counter + ", Instruction type: IO.out<br/>" : "");
        let message = prefix + this.val;
        out(message, this.color, this.temp);
        job_instance.set_up_next_do(1);
    }
    toString() { return "IO.out of: " + this.val }
    to_source_code(args){
        return args.indent + "IO.out(" +
                to_source_code({value: this.val})  +
                ((this.color == "black") ? "" : (", " + to_source_code({value: this.color}))) +
                (this.temp ? (", " + to_source_code({value: this.temp})) : "") +
                ")"
    }
};

/*Obsoleted by just putting a phrase directly on the do_list
Instruction.play_notes = class play_notes extends Instruction{
    constructor (note_or_phrase) {
        super()
        if (typeof(note_or_phrase) == "string"){
            note_or_phrase = note_or_phrase.trim()
            if(note_or_phrase.includes(" ")){ //phrase
                   note_or_phrase = new Phrase({notes: note_or_phrase})
            }
            else { note_or_phrase = Note.n(note_or_phrase) }
        }
        this.note_or_phrase = note_or_phrase
    }
    do_item(job_instance){ //send all the notes on first call, then do a set_timeout of the overall dur to setup_next
        //works when note_or_phrase is either a note or a phrase
        this.note_or_phrase.play()
        //setTimeout(function(){
              job_instance.set_up_next_do(1, false, this.note_or_phrase.dur_in_seconds())
           // },
           // this.note_or_phrase.dur_in_ms())
    }
}*/

Instruction$1.send_to_job = class send_to_job extends Instruction$1{
    constructor ({//to_job_name     = "required",
                  do_list_item    = null, //can be null, a single instruction, or an array of instructions
                  where_to_insert = "required", //"next_top_level",
                  wait_until_done = false,
                  start           = false,
                  unsuspend       = false,
                  status_variable_name = null} = {}) {
        super();
        this.do_list_item    = do_list_item;
        this.where_to_insert = where_to_insert;
        this.wait_until_done = wait_until_done;
        this.start           = start;
        this.unsuspend       = unsuspend;
        this.status_variable_name = status_variable_name;
        this.already_sent_instruction = false; //used internally
        let params = arguments[0];
        if (!params.where_to_insert || (params.where_to_insert == "required")) { //the defaults listed above don't actually work
            //params.where_to_insert = "next_top_level"
            dde_error("Instruction send_to_job was not supplied with a 'where_to_insert' instruction location.");
        }
        Utils.copy_missing_fields(params, this);
        this.inserting_instruction = true;
    }

    do_item (job_instance){ //job_instance is the "from" job
        this.from_job_name       = job_instance.name;
        this.from_instruction_id = job_instance.program_counter;
        if (!this.already_sent_instruction) { //only excute this code once per send_to_job instance
            if (this.status_variable_name){
             job_instance.user_data[this.status_variable_name] = "sent";
            }
            this.destination_do_send_to_job(job_instance); //this COULD be just a json obj of name value pairs. Don't really need the whole instance here.
                                                         //if we need to send to a job on another computer, convert to that json obj.
            this.already_sent_instruction = true;
        }
        if(this.wait_until_done){
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            //don't do the below because the to_job will, when its inserted instr is done,
            //call from_job.send_to_job_receive_done which will call set_up_next_do(1)
           // job_instance.set_up_next_do(0) //a rare place I pass 0 here!
                      //since this is not going through robot_done_with_instruction
        }
        else {
            job_instance.set_up_next_do(1);
        }
    }
    to_source_code(args){
        return args.indent + "Control.send_to_job({" +
            ((this.do_list_item == null)          ? "" :  ("do_list_item: "         + to_source_code({value: this.do_list_item})                 + ", ")) +
            ((this.where_to_insert === undefined) ? "" :  ("where_to_insert: "      + to_source_code({value: this.where_to_insert})      + ", ")) +
            ((this.wait_until_done === false)     ? "" :  ("wait_until_done: "      + to_source_code({value: this.wait_until_done})      + ", ")) +
            ((this.start === false)               ? "" :  ("start: "                + to_source_code({value: this.start})                + ", ")) +
            ((this.unsuspend === false)           ? "" :  ("unsuspend: "            + to_source_code({value: this.unsuspend})            + ", ")) +
            ((this.status_variable_name == null)  ? "" :  ("status_variable_name: " + to_source_code({value: this.status_variable_name}) )) +
            "})"
    }

            //fns prefixed with destination are run on the to_job.
//"this" is the send_to_job instruction instance
//This fn is not a user fn and is not an instruction for a do_list.
    destination_do_send_to_job(from_job_instance){
        let params = this;
        var to_job_instance = Job.instruction_location_to_job(params.where_to_insert, false);
        if (!to_job_instance) { to_job_instance = from_job_instance; }
        if (to_job_instance === from_job_instance) { this.wait_until_done = false; } //when a job is inserting code into itself,//we don't want it to hang waiting for itself.

        //first, add destination_send_to_job_is_done to do_items if need be.
        let do_items = params.do_list_item;
        var notify_item = null;
        if (params.wait_until_done){
            //var send_back_obj = {from_job_name:        params.from_job_name,
            //                     from_instruction_id:  params.from_instruction_id,
            //                     status_variable_name: params.status_variable_name
            //                    }
            var notify_item = new Instruction$1.destination_send_to_job_is_done(params);
            //notify_item is appeneded to the end of do_items, and the whole array of instructions
            //stuck into the destination job's do_list
            if (do_items == null){
                do_items = notify_item;
            }
            else if (Instruction$1.is_oplet_array(do_items)){
                if(notify_item){
                    do_items = [do_items,  notify_item];
                }
            }
            else if (Instruction$1.is_instructions_array(do_items)){
                if(notify_item){
                    do_items = do_items.slice(0).push(notify_item);
                }
            }
            else { //typically a function.
                if(notify_item){
                    do_items = [do_items,  notify_item];
                }
            }
        }
        // next, bundle do_items into a sent_from_job instruction and stick it on the to_job
        let sfj_ins = new Instruction$1.sent_from_job({do_list_item: do_items,
                                                     from_job_name: from_job_instance.name,
                                                     from_instruction_id: from_job_instance.program_counter,
                                                     where_to_insert: params.where_to_insert, //just for debugging
                                                     wait_until_done: params.wait_until_done //just for debugging
                                                    });
        Job.insert_instruction(sfj_ins, params.where_to_insert); //must do before starting or unsuspending
        if (to_job_instance.status_code == "not_started"){
            if(params.start){
                to_job_instance.start(); //{initial_instruction: sfj_ins} //commented out because its redunant with insert_instruction and would put sfj_ins on to_job twice

            }
        }
        if (to_job_instance.status_code == "suspended"){
            if(params.unsuspend){
                to_job_instance.unsuspend();
                //this.set_up_next_do(1) //don't do this because unsuspend does it.
            }
        }
        //don't do this as to_job should already be running.
        //else{
        //    to_job_instance.set_up_next_do(1)
        //}
    }
};

Instruction$1.send_to_job.param_names = ["do_list_item",    "where_to_insert",
                                               "wait_until_done", "start",
                                               "unsuspend",       "status_variable_name",
                                               "from_job_name",   "from_instruction_id",
                                                "already_sent_instruction"];

//user's never create this directly, but an instance of this is created by destination_do_send_to_job
//and stuck on the to_job do_list.
Instruction$1.destination_send_to_job_is_done = class destination_send_to_job_is_done extends Instruction$1{
    constructor (params){
        super();
        this.params = params;
    }
    do_item(job_instance){ //job_instance is the "to" job
        var from_job_instance = Job[this.params.from_job_name];
        for (var user_var of Object.getOwnPropertyNames(this.params)){ //we can have multiple user_data vars that we set. The vars arae set in the sending job
            if(Instruction$1.send_to_job.param_names.indexOf(user_var) == -1){ //if its not one of the regular paranms. that means its the name of a user_data var to set in the from_job_instance
                var fn = this.params[user_var];
                if (typeof(fn) == "function"){
                    var val = fn.call(job_instance);
                    from_job_instance.user_data[user_var] = val;  //this.params is really the to_job_instance.
                }
                //else { //just ignore. there's lots of flags.
                //    job_instance.stop_for_reason("errored", "In job: " + job_instance.name +
                //        " Instruction.destination_send_to_job_is_done.do_item got user var: " + user_var +
                //        " whose value: " + fn + " is not a function.")
                //    return
                //}
            }
        }
        from_job_instance.send_to_job_receive_done(this.params);
        job_instance.set_up_next_do(1);
    }
};

//an instance of this instr is stuck on the to_job by instr send_to_job
Instruction$1.sent_from_job = class sent_from_job extends Instruction$1{
    constructor ({do_list_item       = null, //can be null, a single instruction, or an array of instructions
                 from_job_name       = "required",
                 from_instruction_id = "required",
                 where_to_insert     = "next_top_level", //just for debugging
                 wait_until_done     = null //just for debugging
                } = {}) {
        super();
        let params = arguments[0];
        if (!params.where_to_insert) { //the defaults listed above don't actually work
            params.where_to_insert = "next_top_level";
        }
        Utils.copy_missing_fields(params, this);
        this.inserting_instruction = true;
    }

    do_item (job_instance){
        if (Instruction$1.is_oplet_array(this.do_list_item) ||
            !Array.isArray(this.do_list_item)){
            job_instance.insert_single_instruction(this.do_list_item);
        }
        else { //we've got more than 1 instr to insert.
            job_instance.insert_instructions(this.do_list_item);
        }
        job_instance.set_up_next_do(1);
    }
};

Instruction$1.set_inter_do_item_dur = class set_inter_do_item_dur extends Instruction$1{
    constructor ({dur = null, //can be null, a single instruction, or an array of instructions
                  instructions_array = []
                  } = {}) {
        super();
        if(dur == null) ; //ok
        else if(typeof(dur) == "number"){
            if(dur >= 0) ; //ok
            else if([-1. -2, -3].includes(dur)) ; //ok
            else {
                dde_error("Control,.inter_do_item_dur passed invalid dur of: " + dur +
                    "<br/>Valid values are only: null, non-neg number, -1, -2, -3.");
            }
        }
        this.dur = dur;
        this.instructions_array = instructions_array;
    }

    do_item (job_instance){
        if(this.instructions_array.length == 0){
            if(this.dur != null) {
                job_instance.prev_inter_do_item_dur = job_instance.inter_do_item_dur; //cache for when another instance of this insturcgtion is called with dur == null
                job_instance.inter_do_item_dur = this.dur;
            }
            else { //restores the previous inter_do_item_dur if any
                if(job_instance.hasOwnProperty("prev_inter_do_item_dur")) {
                    job_instance.inter_do_item_dur = job_instance.prev_inter_do_item_dur;
                } //just leave whatever the existing inter_do_item_dur.
                        //if this cause is reached, its probably a programmer mistake.
                        //BUT we don't want to error, as errors in this code that
                        //might be running in an intolerant-to-errors mode, aren't good,
                        //so just let it go.
            }
        }
        //we have an instruction array
        else if (this.dur == null) { //unusual and not much point, but allow
            job_instance.insert_instructions(this.instructions_array);
        }
        else { //normal. We have a dur and an instruction array.
            let prev_inter_do_item_dur = job_instance.inter_do_item_dur;
            job_instance.inter_do_item_dur = this.dur;
            this.instructions_array.push(function(){
                                            job_instance.inter_do_item_dur = prev_inter_do_item_dur;
                                         });
            job_instance.insert_instructions(this.instructions_array);
        }
        job_instance.set_up_next_do(1);
    }
};


Instruction$1.start_job = class start_job extends Instruction$1{
    constructor (job_name, start_options={}, if_started="ignore", wait_until_job_done=false) {
        if(!["ignore", "error", "restart"].includes(if_started)){
            dde_error("Control.start_job has invalid value for if_started of: " +
                       if_started +
                       '<br/>Valid values are: "ignore", "error", "restart"');
        }
        if(![true, false].includes(wait_until_job_done)){
            dde_error("Control.start_job has invalid value for wait_until_job_done of: " +
                if_started +
                '<br/>Valid values are: true and false');
        }
        super();
        if(job_name === undefined){
            dde_error("start_job was not passed a <b>job_name</b> which is required.");
        }
        if((typeof(job_name) != "string") && !(job_name instanceof Job)){
            dde_error("start_job was passed an invalid <b>job_name</b> of: " + job_name + "<br/>" +
                      "It must be a Job instance,<br/>the string of a Job name<br/>" +
                      "or the string of a file containing a Job definition.");
        }
        this.job_name      = job_name;
        this.start_options = start_options;
        this.if_started    = if_started;
        this.wait_until_job_done = wait_until_job_done;
        this.job_to_start = null;
        this.on_first_call_to_do_item = true;
    }
    do_item (job_instance){
        if(!this.job_to_start) {
            if (this.job_name instanceof Job) { this.job_to_start = this.job_name; }
            else if(typeof(this.job_name) == "string") {
                if (this.job_name.startsWith("Job.")) { this.job_to_start = value_of_path(this.job_name); }
                else if (Job[this.job_name]) {  this.job_to_start = Job[this.job_name]; }
                else if(file_exists(this.job_name)) {
                    let jobs_in_file = Job.instances_in_file(this.job_name);
                    if(jobs_in_file.length > 0) { this.job_to_start = jobs_in_file[0]; }
                    else {
                        dde_error("Control.start_job has a job_name that's a path to an existing file: " + this.job_name + "<br/>" +
                                  "but that file doesn't define any jobs.");
                    }
                }
                else {
                    dde_error("Control.start_job has a job_name of: " + this.job_name +
                              "<br/>but it doesn't resolve to a Job or a file containing one.");
                }
            }
            if(!(this.job_to_start instanceof Job)){
                job_instance.stop_for_reason("errored", "Control.start_job attempted to start non-existent Job." + this.job_name);
                job_instance.set_up_next_do(0);
            }
        }
        //this.job_to_start has a valid job instance in it
        const stat = this.job_to_start.status_code;
        if (this.wait_until_job_done) {
             if ((stat == "not_started") || ((stat == "completed") && this.on_first_call_to_do_item))   {
                 this.on_first_call_to_do_item = false;
                job_instance.set_status_code("waiting", "This job waiting for " + this.job_to_start.name + " to complete.");
                this.job_to_start.start(this.start_options);
                job_instance.set_up_next_do(0);
                return
             }
             else if (stat == "completed"){ //all done with successful runnning of job_to_start
                 job_instance.wait_reason = null;
                 job_instance.stop_reason = null;
                 this.on_first_call_to_do_item = true; //in case this job is inside a loop, prepare for next iteration
                 job_instance.set_status_code("running");
                 job_instance.set_up_next_do(1);
                 return
             }
             else if(["starting", "running", "stopping", "running_when_stopped"].includes(stat)) {
                let wait_reason = "Control.start_job waiting at instruction " +
                                          job_instance.program_counter + " for " + this.job_to_start.name + " to complete.";
                job_instance.set_status_code("waiting", wait_reason);
                job_instance.set_up_next_do(0);
                return
             }
             else if(stat == "waiting") {
                 let wait_reason = "Control.start_job waiting at instruction " +
                     job_instance.program_counter + " for " + this.job_to_start.name + " to complete,\n" +
                      "but its now waiting for: " + this.job_to_start.wait_reason;
                 job_instance.set_status_code("waiting", wait_reason);
                 job_instance.set_up_next_do(0);
                 return
             }
             else if (stat == "suspended")   {
                    this.job_to_start.unsuspend();
                    let wait_reason = "Control.start_job waiting at instruction " +
                        job_instance.program_counter + " for " + this.job_to_start.name + " to complete.";
                    job_instance.set_status_code("waiting", wait_reason);
                    job_instance.set_up_next_do(0);
                    return
             }
             else if (stat == "errored")   {
                let stop_reason = "This job stopped because the job it is waiting for, " +
                                            this.job_to_start.name + " has errored with: " +
                                            this.job_to_start.stop_reason;
                job_instance.set_status_code("errored", stop_reason);
                job_instance.set_up_next_do(1);
                return
             }
             else if (stat == "interrupted")   {
                let stop_reason = "This job stopped because the job it is waiting for, " +
                                  this.job_to_start.name + " was interrupted with: " +
                                  this.job_to_start.stop_reason;
                job_instance.set_status_code("interrupted", stop_reason);
                job_instance.set_up_next_do(1);
                return
             }
        }
        //below here. we're not waiting until this.job_to_start is done.
        else if (stat == "starting")    { job_instance.set_up_next_do(1); } //just let continue starting
        else if (stat == "suspended")   {
            this.job_to_start.unsuspend();
            job_instance.set_up_next_do(1);
        }
        else if (["running", "waiting", "stopping", "running_when_stopped"].includes(stat)){
           if     (this.if_started == "ignore") {job_instance.set_up_next_do(1);}
           else if(this.if_started == "error") {
               job_instance.stop_for_reason("errored",
                    "Robot_start_job tried to start job: " + this.job_name +
                    " but it was already started.");
               job_instance.set_up_next_do(0);
               return
           }
           else if (this.if_started == "restart"){
               this.job_to_start.stop_for_reason("interrupted",
                  "interrupted by start_job instruction in " + job_instance.name);
               setTimeout(function(){ this.job_to_start.start(this.start_options);   },
                          this.job_to_start.inter_do_item_dur * 2);
               job_instance.set_up_next_do(1);
           }
           else { //if_started is tested for validity in the constructor, but just in case...
               shouldnt("Job." + job_instance.name +
                 " has a Control.start_job instruction with an invalid " +
                 "<br/> if_started value of: " + this.if_started);
           }
        }
        else if (["not_started", "completed", "errored", "interrupted"].includes(stat)) {
           this.job_to_start.start(this.start_options);
            job_instance.set_up_next_do(1);
        }
        else {
            shouldnt("Control.start_job got a status_code from Job." +
                      this.job_to_start.name + " that it doesn't understand.");
        }
    }
    toString(){
        return "start_job: " + this.job_name
    }
    to_source_code(args){
        return args.indent + "Control.start_job(" +
            to_source_code({value: this.job_name})  +
            (Utils.similar(this.start_options, {}) ? "" : (", " + to_source_code({value: this.start_options}))) +
            ((this.if_started == "ignore")   ? "" : (", " + to_source_code({value: this.if_started}))) +
            ")"
    }
};

Instruction$1.stop_job = class stop_job extends Instruction$1{
    constructor (instruction_location="program_counter", //do not make this be able to be a job instance because we want the dynamic lookup of the job to stop by name that's in the instruction_location
                 stop_reason=null,
                 perform_when_stopped=true) {
        super();
        this.instruction_location = instruction_location;
        this.stop_reason = stop_reason;
        this.perform_when_stopped = perform_when_stopped;
    }
    do_item (job_instance){
        //this is not an error or interrupted, its a normal stoppage of the job.
        var job_to_stop = Job.instruction_location_to_job(this.instruction_location, false);
        //job_to_stop might or might not be the same as job_instance
        if (!job_to_stop) { job_to_stop = job_instance; }
        //don't set stop_reason here. Its set in do_next_item from the pc being equal to the ending_program_counter
        //let the_stop_reason
        //if(this.stop_reason) { the_stop_reason = this.stop_reason }
        //else { the_stop_reason = "Stopped by Job." + job_instance.name + "the  instruction: Control.stop_job."s when_stopped instruction
        //job_to_stop.stop_for_reason("completed", the_stop_reason) //don't do as we only want it to stop when it gets to location
        let the_stop_msg = this.stop_reason;
        if(!the_stop_msg) {
            the_stop_msg = "A Control.stop_job instruction was run.";
        }
        warning("Stopping Job." + job_to_stop.name + " for reason: " + the_stop_msg);
        job_to_stop.when_stopped_conditions = this.perform_when_stopped; //the stop_job instruction overrules the job def's when_stopped_conditions
        job_to_stop.ending_program_counter = this.instruction_location;
        job_to_stop.when_do_list_done = "run_when_stopped"; //if I don't do this, and its value is "wait", the job will wait forever.
        if(!this.perform_when_stopped) {
            job_to_stop.when_stopped = "stop";
        }
        job_instance.set_up_next_do(); //continue on with the current job.
            //if the current job is the same as the job_to_stop, fine, it will stop
            //else the job_to_stop will stop of its own accord now that it has a status of "completed",
            // and the current job (job_instance) will continue on to its next instruction.
    }
    toString(){
        var job_to_stop = Job.instruction_location_to_job(this.instruction_location, false);
        if (!job_to_stop) { job_to_stop = " containing this instruction"; }
        else              { job_to_stop = ": Job." + job_to_stop.name; }
        return "stop_job" + job_to_stop + " because: " + this.stop_reason
    }
    to_source_code(args){
        let indent = ((args && args.indent) ? args.indent : "");
        let props_args = args        = Object.assign({}, arguments[0]);
        props_args.indent = "";
        props_args.value = this.instruction_location;
        let loc_src = to_source_code(props_args);
        props_args.value = this.stop_reason;
        let sr_src = to_source_code(props_args);
        props_args.value = this.perform_when_stopped;
        let pws_src = to_source_code(props_args);
        let result = indent +
                     "Control.stop_job(" +
                     loc_src + ", " +
                     sr_src          + ", " +
                     pws_src +
                     ")";
        return result
    }
};

Instruction$1.suspend = class suspend extends Instruction$1{
    constructor (job_name = null, reason = "") {
        super();
        if (job_name instanceof Job) { job_name = job_name.name; }
        this.job_name = job_name;
        this.reason   = reason;
    }
    do_item (job_instance){
        let job_to_suspend = this.job_name;
        if (!job_to_suspend) { job_to_suspend = job_instance; }
        else if (typeof(job_to_suspend) == "string") { job_to_suspend = Job[job_to_suspend]; }
        if (!job_to_suspend instanceof Job) {
           job_instance.stop_for_reason("error", "suspend attempted to suspend job: " + job_to_suspend + " but that isn't a job.");
           job_instance.set_up_next_do(1);
           return
        }
        else {
            job_to_suspend.suspend(this.reason);
            if (job_to_suspend !== job_instance) { job_instance.set_up_next_do(1); }
            //else, it doesn't send a set_up_next_do which causes the job to  be suspended.
        }
    }
    to_source_code(args){
        return args.indent + "Control.suspend(" +
            to_source_code({value: this.job_name}) +
            ((this.reason == "") ? "" : (", " + to_source_code({value: this.reason})))  +
            ")"
    }
};

Instruction$1.unsuspend = class unsuspend extends Instruction$1{
    constructor (job_name = "required", stop_reason=false) {
        super();
        if(job_name == "required"){
            dde_error("unsuspend not given a job name to unsuspend. A job cannot unsuspend itself.");
        }
        if (job_name instanceof Job) { job_name = job_name.name; }
        this.job_name = job_name;
        this.stop_reason = stop_reason;
    }
    do_item (job_instance){
        let job_to_unsuspend = this.job_name;
        if (typeof(job_to_unsuspend) == "string") { job_to_unsuspend = Job[job_to_unsuspend]; }
        if (!(job_to_unsuspend instanceof Job))      {
            job_instance.stop_for_reason("errored", "unsuspend attempted to unsuspend job: " + this.job_name + " but that isn't a job.");
        }
        else if (job_to_unsuspend == job_instance) { shouldnt("unsuspend instruction attempting to unsuspend itself.: " + this.job_name); }
        else if (job_to_unsuspend.status_code == "suspended"){
            job_to_unsuspend.unsuspend(this.stop_reason);
        }
        else ; //if job_to_unsuspend is not suspended, do nothing
        job_instance.set_up_next_do(1);

    }
    to_source_code(args){
        return args.indent + "Control.unsuspend(" +
            to_source_code({value: this.job_name}) +
            ")"
    }
};

Instruction$1.sync_point = class sync_point extends Instruction$1{
        //permit an empty array for job_names. We might be getting such an array from some computation
        //that legitimately has no items. Allow it. Then when this instruction's do_item is called,
        //it will always be in_sync and proceed. Empty job_names also useful for send_to_job
        //where_to_insert labels.
        //also job_names may or may not contain the name of the current job. It doesn't matter.
    constructor (name, job_names=[]) {
        super();
        if (!name){
            dde_error("Instruction sync_point has not been passed a name.");
        }
        this.name = name;
        this.job_names = job_names;
    }
    do_item (job_instance){
        for(let job_name of this.job_names){
            let j_inst = Job[job_name];
            if(!j_inst){
                job_instance.stop_for_reason("errored",
                    "Job." + job_instance.name +
                    " has a sync_point instruction that has a job-to-sync-with named: " + job_name +
                    " which is not defined.");
                return;
            }
            else if(!j_inst.is_active()) { //perhaps not_started, perhaps done (but might be restarted).
                let wait_reason = "Job." + j_inst.name + " to get to sync_point named: " + this.name +
                    "\nbut that Job has status: " + j_inst.status_code;
                job_instance.set_status_code("waiting", wait_reason);
                job_instance.set_up_next_do(0);
                return
            }
            else if (j_inst.at_or_past_sync_point(this.name)); //continue looping
            //Good. j_inst is at the sync point.
            //Will always hit when j_inst.name == job_instance.name as job_instance
            //will be at this sync point.
            //beware that j_inst *could* be at a sync point of a different name, and if so,
            //let's hope there's a 3rd job that it will sync with to get it passed that sync point.
            else { //j_inst didn't get to sync point yet. Pause all synced jobs.
                let wait_reason = "Job." + j_inst.name + " to get to sync_point named: " + this.name;
                job_instance.set_status_code("waiting", wait_reason);
                job_instance.set_up_next_do(0);
                return; //we have not acheived sync, so just pause job_instance, in hopes
                        //that another job will be the last job to reach sync and cause job_instance
                        //to proceed.
            }
        }
        //made it through all job_names, so everybody's in sync, but each job has to unfreeze itself.
        job_instance.set_status_code("running");
        job_instance.set_up_next_do(1);
    }
    to_source_code(args){
        return args.indent + "Control.sync_point("   +
            to_source_code({value: this.name})     + ", " +
            to_source_code({value: this.job_names}) +
            ")"
    }
};

Instruction$1.wait_until = class wait_until extends Instruction$1{
    constructor (fn_date_dur) {
        super();
        this.fn_date_dur = fn_date_dur;
        if      (typeof(this.fn_date_dur) == "function");
        else if (this.fn_date_dur instanceof Date) ;
        else if (typeof(fn_date_dur) == "number")  ;
        else if (fn_date_dur instanceof Duration)  { this.fn_date_dur = fn_date_dur.to_seconds(); }
        else if (this.fn_date_dur == "new_instruction");
        else if (this.fn_date_dur instanceof Job) ;
        else if (Array.isArray(this.fn_date_dur) ||
                 (typeof(this.fn_date_dur) == "object")){
                 if(!Job.instruction_location_to_job(this.fn_date_dur, false)){
                     warning("Control.wait_until passed an array or literal object<br/>" +
                             "for an instruction location but<br/>" +
                             "it does not contain a job.<br/>" +
                             "That implies this job will wait for itself, and thus forever.<br/>" +
                             "However, unusual circumstances could make this ok.");
                 }
        }
        else if (fn_data_dur instanceof Job) ;
        else {
            dde_error("Control.wait_until instruction passed: " + this.fn_date_dur +
                      '<br/> which is not a number, date, function,<br/>' +
                      '"new_instruction" or instruction location array.');
        }
        if((typeof(fn_date_dur) == "number") && (fn_date_dur >= 1)) {
            this.inserting_instruction = true;
        }
        this.init_instruction();
    }
    do_item (job_instance){
        if (typeof(this.fn_date_dur) == "function"){
            if (this.fn_date_dur.call(job_instance)) {
                //console.log("wait_until fn returned true")
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1); //advance the PC
            }
            else {
                job_instance.set_status_code("waiting", "a wait_until function returns true.");
                job_instance.set_up_next_do(0); //loop until its true
            }
        }
        else if (this.fn_date_dur instanceof Date){
            if(Date.now() >= this.fn_date_dur){
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
            else {
                job_instance.set_status_code("waiting", "a wait_until Date of: " +  this.fn_date_dur);
                job_instance.set_up_next_do(0);
            }
        }
        else if (typeof(this.fn_date_dur) == "number"){ //number is seconds
            let the_now_in_ms = Date.now();
            if (this.start_time_in_ms == null) { this.start_time_in_ms = the_now_in_ms; } //hits the first time this do_item is called for an inst
            let dur_from_start_in_ms = the_now_in_ms - this.start_time_in_ms;
            if (dur_from_start_in_ms >= this.fn_date_dur * 1000){ //The wait is over. dur_from_start_in_ms is in ms, fn_date_dur is in seconds
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                this.init_instruction(); //essential for the 2nd thru nth call to start() for this job.
                job_instance.set_up_next_do(1);
            }/* this 'keep alive/ clause should be unnecessary because if the socket times out, the
               //Socket.send method will reconnect the socket when the next send to dexter instruction comes through.
               //We'd need that socket code anyway for other do_lists that have long running sections
               //that don't involve sending instructions to dexter for a long period.
            else if ((job_instance.robot instanceof Dexter) && (dur_from_start_in_ms > 1000)){
                //so that we can keep the tcp connection alive, send a virtual heartbeat
                let new_wait_dur_in_sec = this.fn_date_dur - (dur_from_start_in_ms / 1000)
                let new_instructions = [make_ins("g"), //just a do nothing to get a round trip to Dexter.
                                       Control.wait_until(new_wait_dur_in_sec)] //create new wait_until to wait for the remaining time
                job_instance.insert_instructions(new_instructions)
                this.start_time_in_ms = null //essential for the 2nd thru nth call to start() for this job.
                job_instance.wait_reason = null
                job_instance.set_status_code("running")
                job_instance.set_up_next_do(1)
            }*/
            else {
                job_instance.set_status_code("waiting", "a wait_until duration of: " +  this.fn_date_dur + " seconds");
                job_instance.set_up_next_do(0);
            }
        }
        else if (this.fn_date_dur == "new_instruction"){
            const pc               = job_instance.program_counter;
            const pc_on_last_instr = (pc == (job_instance.do_list.length - 1));
            const next_instruction = (pc_on_last_instr ?
                                       null : job_instance.do_list[pc + 1]);
            if (this.old_instruction === undefined){ //first time through only
                this.old_instruction = next_instruction;
                job_instance.set_status_code("waiting", 'a wait_until gets a "new_instruction"');
                job_instance.set_up_next_do(0);
            }
            else if (this.old_instruction === null){ //started with this instr as the last one
                if (pc_on_last_instr) { job_instance.set_up_next_do(0); }
                else                  {
                   job_instance.set_up_next_do(1);
                } //got a new last instr
            }
            else if (next_instruction == this.old_instruction){//no change so don't advance the pos
                job_instance.set_up_next_do(0);
            }
            else { //got a new instruction since this instruction started running so execute it
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
        }
        else if (this.fn_date_dur instanceof Job) {
            let status_code = this.fn_date_dur.status_code;
            if(status_code == "completed") {
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
            else if(status_code == "errored") {
                job_instance.wait_reason = null;
                let stop_reason = "The job that this job was waiting for to complete, " +
                                   this.fn_date_dur.name + ", errored with: " +
                                   "\n " + this.fn_date_dur.stop_reason;
                job_instance.set_status_code("errored", stop_reason);
                job_instance.set_up_next_do(1);
            }
            else if(status_code == "interrupted") {
                job_instance.wait_reason = null;
                let stop_reason = "The job that this job was waiting for to complete, " +
                                                this.fn_date_dur.name + ", was interrupted with: " +
                                                "\n " + this.fn_date_dur.stop_reason;
                job_instance.set_status_code("interrupted", stop_reason);
                job_instance.set_up_next_do(1);
            }
            else {
               job_instance.set_status_code("waiting", "a wait_until for Job " + this.fn_date_dur.name + " completes.");
               job_instance.set_up_next_do(0);
            }
        }
        else if (Array.isArray(this.fn_date_dur) ||
                 (typeof(this.fn_date_dur) == "object")){ //instruction_location, but not integer and string formats
            var loc_job_instance = Job.instruction_location_to_job(this.fn_date_dur, false);
            if (!loc_job_instance) {
                loc_job_instance = job_instance;
            }
            var loc_pc = loc_job_instance.instruction_location_to_id(this.fn_date_dur);
            if(loc_pc > loc_job_instance.program_counter){ //wait until loc_job_instance advances
                if(loc_job_instance.stop_reason){
                    warning("Control.wait_until is waiting for job: " + loc_job_instance.name +
                            "<br/>but that job is stopped, so it will probably wait forever.");
                }
                job_instance.set_status_code("waiting", "a wait_until instruction_location is reached.");
                job_instance.set_up_next_do(0);
            }
            else { //done waiting, loc_job_instance already at or passe loc_ps
                job_instance.wait_reason = null;
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(1);
            }
        }
        else { //this is checked in the constructor, but just in case ...
            shouldnt("In job: " + job_instance.name +
                      ' in wait_until("new_instruction")<br/>' +
                      " got fn_date_dur of: " + this.fn_date_dur +
                      " which is invalid.<br/>" +
                      ' It should be a function, a date, a number, or "new_instruction".');
        }
    }
    //called by stop_for_reason, in case user terminates job during a wait_until
    init_instruction(){
            this.start_time_in_ms = null; //essential for the 2nd thru nth call to start() for this job.
    }

    to_source_code(args){
        return args.indent + "Control.wait_until("       +
            to_source_code({value: this.fn_date_dur, function_names: true})  +
            ")"
    }

};


//______Picture Instructions
Instruction$1.save_picture = class save_picture extends Instruction$1{
    constructor({canvas_id_or_mat="canvas_id",
                 path="my_pic.png"}){
        super();
        this.canvas_id_or_mat = canvas_id_or_mat;
        this.path = path;
        let width;
        let height;
        let canvas_elt;
        if(canvas_id_or_mat instanceof HTMLElement){
            canvas_elt = canvas_id_or_mat;
        }
        else if (typeof(canvas_id_or_mat) == "string"){
            canvas_elt = value_of_path(canvas_id_or_mat);
        }
        if(canvas_elt) {
            width = canvas_elt.width;
            height = canvas_elt.height;
        }
        else { //its a mat
           width = canvas_id_or_mat.cols;
           height = canvas_id_or_mat.rows;
        }
        Picture.init({width: width, height: height}); //do at job def time
    }
    do_item (job_instance){
        Picture.save_picture({canvas_id_or_mat: this.canvas_id_or_mat,
                              path: this.path});
        job_instance.set_up_next_do(1);
    }
};

Instruction$1.show_picture = class show_picture extends Instruction$1{
    constructor ({canvas_id="canvas_id", //string of a canvas_id or canvasId dom elt
                  content=null, //mat or file_path
                  title=undefined,
                  x=200, y=40, width=320, height=240,
                  rect_to_draw=null}){
        super();
        this.canvas_id = canvas_id;
        this.content = content;
        this.title = title;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.rect_to_draw = rect_to_draw;
        this.first_time = true;
        Picture.init({width: width, height: height});
    }
    do_item (job_instance){
        if(this.first_time){
            let cont = this.content;
            if((typeof(this.content) == "string") &&
                job_instance.user_data[this.content]){
                cont = job_instance.user_data[this.content]; //should be a mat
            }
            Picture.show_picture({canvas_id: this.canvas_id, //string of a canvas_id or canvasId dom elt
                                    content: cont, //mat or file_path
                                    title: this.title,
                                    x: this.x,
                                    y: this.y,
                                    width: this.width,
                                    height: this.height,
                                    rect_to_draw: this.rect_to_draw});
            this.first_time = false;
            job_instance.set_up_next_do(0);
        }
        else if (html_db.is_dom_elt(this.canvas_id)) {
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else if (value_of_path(this.canvas_id)) { //canvas_id is a string
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else { job_instance.set_up_next_do(0); } //wait until picture is up
    }
};

Instruction$1.show_video = class show_video extends Instruction$1{
    constructor ({video_id="video_id", //string of a canvas_id or canvasId dom elt
                     content="webcam", //file_path or "webcam"
                     title=undefined,
                     x=200, y=40, width=320, height=240,
                     play=true,
                     visible=true}){
        super();
        this.video_id = video_id;
        this.content = content;
        this.title = title;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.play = play;
        this.visible = visible;
        this.first_time = true;
        Picture.init({width: width, height: height}); //do at job def time
    }
    do_item (job_instance){
        if(this.first_time){
            Picture.show_video({video_id: this.video_id, //string of a canvas_id or canvasId dom elt
                                content: this.content, //mat or file_path
                                title: this.title,
                                x: this.x,
                                y: this.y,
                                width: this.width,
                                height: this.height,
                                play: this.play,
                                visible: this.visible});
            this.first_time = false;
            job_instance.set_up_next_do(0);
        }
        else if (html_db.is_dom_elt(this.video_id)) {
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else if (value_of_path(this.video_id)) { //video_id is a string
            this.first_time = true; //in case we're in a loop, initialize for next time around
            job_instance.set_up_next_do(1);
        }
        else { job_instance.set_up_next_do(0); } //wait until video is up
    }
};

/*Instruction.take_picture = class take_picture extends Instruction{
    constructor ({video_id="video_id", //string of a canvas_id or canvasId dom elt
                  callback=Picture.show_picture_of_mat}={}){
        super()
        this.video_id = video_id
        this.callback = callback
        this.first_time = true
        this.clock_start = null
        Picture.init() //do at fn def time, not at run time, else, grabbing the pic fails
    }
    do_item (job_instance){
        if(this.clock_start_ms) { //at least close to done. take_picture called and video is up but has the callback been called and is done?
            if ((Date.now() - this.clock_start_ms) > 150){ //Now assume done. Had to give a pause to make sure  the callback got run before moving on to the next instruction, in case it depends upon it.
                //in case we're in a loop, initialize for next time around
                this.clock_start_ms = null
                this.first_time = true
                job_instance.set_up_next_do(1)
            }
            else { job_instance.set_up_next_do(0) } //not done yet
        }
        else if(this.first_time){
            let cb
            if(typeof(this.callback) == "string"){
              let user_data_var_name = this.callback
              cb = function(mat) {
                   job_instance.user_data[user_data_var_name] = mat
                  }
            }
            else { cb = this.callback }
            Picture.take_picture({video_id: this.video_id, //string of a canvas_id or canvasId dom elt
                                  callback: cb})
            this.first_time = false
            job_instance.set_up_next_do(0)
        }

        else if (html_db.is_dom_elt(this.video_id) ||value_of_path(this.video_id)) {
           this.clock_start_ms = Date.now() //start the timer
            job_instance.set_up_next_do(0)
        }
        else { job_instance.set_up_next_do(0) } //take_pciture has been called, but wait until video is up
    }
}*/
Instruction$1.take_picture = class take_picture extends Instruction$1{
    constructor ({video_id="video_id", //string of a canvas_id or canvasId dom elt
                  camera_id=undefined,
                  width=320, height=240,
                  callback=Picture.show_picture_of_mat}={}){
        super();
        this.video_id = video_id;
        this.camera_id = camera_id;
        this.width = width;
        this.height = height;
        this.callback = callback;
        this.first_time = true;
        this.pic_taken = false;
        Picture.init({width: width, height: height}); //do at fn def time, not at run time, else, grabbing the pic fails
    }
    do_item (job_instance){
        if(this.first_time){
            //prepare the callback passed to Picture.take_picture
            let cb;
            let this_instruction = this;
            if(typeof(this.callback) == "string"){
                let user_data_var_name = this.callback;
                cb = function(mat) {
                        job_instance.user_data[user_data_var_name] = mat;
                        this_instruction.pic_taken = true;
                };
            }
            else {
                cb = function(mat) {
                        if (this_instruction.callback) {
                            this_instruction.callback.call(job_instance, mat);
                        }
                        this_instruction.pic_taken = true;
                     };
            }
            Picture.take_picture({video_id: this.video_id, //string of a canvas_id or canvas_id dom elt
                                  camera_id: this.camera_id,
                                  width: this.width, height: this.height,
                                  callback: cb});
            this.first_time = false;
            job_instance.set_up_next_do(0); //loop around.
        }
        else if(this.pic_taken) { //all done
            this.first_time = true; //get ready for next time this instuction may be called in a loop
            this.pic_taken = false;
            job_instance.set_up_next_do(1);
        }
        else { job_instance.set_up_next_do(0); } //take_picture has been called, but its not done yet
    }
};
//______________________________________________________
Instruction$1.Serial = class Serial extends Instruction$1{};

//for Serial.string_instruction when we have a Robot.Serial instance
Instruction$1.Serial.string_instruction = class string_instruction extends Instruction$1.Serial{
    constructor (instruction_string, robot = null //this is a robot instance. spelling of this prop name is important. Used by other methods & classes
    ) {
        super();
        this.inst_array = Serial.string_instruction(instruction_string);
        this.robot = robot;
    }
    do_item (job_instance){
        if (!this.robot) { //this.robot = job_instance.robot
            this.set_instruction_robot_from_job(job_instance); //might error which is good
        }
        //job_instance.wait_until_instruction_id_has_run = job_instance.program_counter// dont
        //do this here because in the case that we have a robot, we might still be
        //in the "connecting" state, ie initing the robot, in which case,
        //we don't want to be waiting for this instruction because that
        //will preclude processing of the instruction by the lower part of do_next_item.
        job_instance.send(this.inst_array, this.robot);
        //don't set up next do. That's handled by the wait_until_instruction_id_has_run code
    }
};

//import {Instruction} from "./instruction.js" //DDE4 Now global

Instruction.Dexter = class Dexter extends Instruction{};

//only used for Dexter.dexter0.get_robot_status() like calls, not for Dexter.get_robot_status() calls.
//this instance is needed because we need the instruction on the do_list to contain
//the robot so that Socket.on_receive and its aux fn, find_dexter_instance_from_robot_status
//know what robot that the on_received robot status belongs to.
Instruction.Dexter.get_robot_status = class get_robot_status extends Instruction.Dexter{
    constructor (status_mode, robot) {
        super();
        this.status_mode = status_mode; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot; //if this is undefined, we will use the default robot of the job.
    }
    do_item (job_instance){
        if(!this.robot) { //this.robot = job_instance.robot
            this.set_instruction_robot_from_job(job_instance); //might error which is good
        }
        if(this.status_mode === null){
            job_instance.send(make_ins("g"), this.robot);
        }
        else {
            job_instance.send(make_ins("g", this.status_mode), this.robot);
        }
    }
    toString(){
        return "{instanceof: get_robot_status " + this.status_mode + "}"
    }
    to_source_code(args){
        let arg_src;
        if(this.status_mode == null) { arg_src = ""; }
        else { arg_src = "" + this.status_mode; }
        args.indent = "";
        return args.indent +
               "Dexter." +
               (args.value.robot ? args.value.robot.name + "." : "") +
               this.robot.name + ".get_robot_status(" + arg_src + ")"
    }
};

Instruction.Dexter.move_all_joints = class move_all_joints extends Instruction.Dexter{
    constructor (array_of_angles, robot) {
        super();
        this.array_of_angles = array_of_angles; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot; //if this is undefined, we will use the default robot of the job.
    }
    do_item (job_instance){
        if(!this.robot) { //this.robot = job_instance.robot
            this.set_instruction_robot_from_job(job_instance); //might error which is good
        }
        let angles = [];
        for (let i = 0; i < 5; i++){
            let ang = this.array_of_angles[i];
            if ((ang === undefined) || //happens when array is less than 5 long
                Number.isNaN(ang)) {
                angles.push(this.robot.angles[i]); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        //angles is now 5 long
        for(let i = 5; i < this.array_of_angles.length; i++) {
            let ang = this.array_of_angles[i];
            if ((ang === undefined) ||
                Number.isNaN(ang) ||
                (Array.isArray(ang) && (ang.length == 1) && (ang[0] == 0))) { //ie [0] means move relative amount of 0. in which case, don't more at all, not even what we THINK is to the same place.
                angles.push(NaN); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        //angles is at least 5 long, could be 6 or 7
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Robot.move_all_joints([" + angles + "])");
            job_instance.set_up_next_do(0);
        }
        else  {
            //this.robot.angles = angles
            for(let i = 0; i < angles.length; i++) { this.robot.angles[i] = angles[i]; }
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //effectively done in robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: move_all_joints " + this.array_of_angles + "}"
    }
    to_source_code(args){
        args = Object.assign({}, args);
        args.indent = "";
        return args.indent +
              "Dexter." +
              (args.value.robot ? args.value.robot.name + "." : "") +
              "move_all_joints(" + to_source_code({value: args.value.array_of_angles}) +
              ")"
    }
};

Instruction.Dexter.pid_move_all_joints = class pid_move_all_joints extends Instruction.Dexter{
    constructor (array_of_angles, robot) {
        super();
        this.array_of_angles = array_of_angles; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let angles = [];
        for (let i = 0; i < 5; i++){
            let ang = this.array_of_angles[i];
            if ((ang === undefined) || //happens when array is less than 5 long
                Number.isNaN(ang)) {
                angles.push(this.robot.pid_angles[i]); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.pid_angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        //angles is now 5 long
        for(let i = 5; i < this.array_of_angles.length; i++) {
            let ang = this.array_of_angles[i];
            if ((ang === undefined) ||
                Number.isNaN(ang)) {
                angles.push(NaN); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                angles.push(this.robot.pid_angles[i] + ang[0]);
            }
            else { angles.push(ang); }
        }
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Robot.pid_move_all_joints([" + angles + "])");
            job_instance.set_up_next_do(0);
        }
        else  {
            for(let i = 0; i < angles.length; i++) { this.robot.pid_angles[i] = angles[i]; }
            //job_instance.insert_single_instruction(make_ins("P", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("P", ...angles), this.robot);
            // job_instance.set_up_next_do(1) //called by robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: pid_move_all_joints " + this.array_of_angles + "}"
    }
    to_source_code(args){
        args        = Object.assign({}, args);
        args.value  = this.array_of_angles;
        args.indent = "";
        return args.indent +
              "Dexter." +
              (args.value.robot ? args.value.robot.name + "." : "") +
              "pid_move_all_joints("  +
              to_source_code({value: args.value.array_of_angles}) +
              ")"
    }
};

Instruction.Dexter.move_all_joints_relative = class move_all_joints_relative extends Instruction.Dexter{
    constructor (delta_angles, robot) {
        super();
        this.delta_angles = delta_angles; //keep for orig 5 angles so to_source_code can use them. May contain nulls
        this.robot = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance);}
        let angles = []; //the absolute angles after the rel has been added in
        for (let i = 0; i < 5; i++){
            let ang = this.delta_angles[i];
            if ((ang === undefined) || //happens when array is less than 5 long
                Number.isNaN(ang)) {
                angles.push(this.robot.angles[i]); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {  //relative move by the first elt of the array
                //angles.push(this.robot.angles[i] + ang[0])
                dde_error("move_all_joints_relative passed an array: " + ang +
                    " but can only accept numbers as these are already relative.");
            }
            else { angles.push(this.robot.angles[i] + ang); }
        }
        //angles is now 5 long
        for(let i = 5; i < this.delta_angles.length; i++) {
            let ang = this.delta_angles[i];
            if ((ang === undefined) ||
                Number.isNaN(ang)) {
                angles.push(NaN); //this.robot_status[Dexter.ds_j0_angle_index + i] //ie don't change angle
            }
            else if (Array.isArray(ang)) {
                dde_error("move_all_joints_relative passed an array: " + ang +
                    " but can only accept numbers as these are already relative.");

            }
            else { angles.push(this.robot.angles[i] + ang); }
        }
        //angles is at least 5 long, could be 6 or 7
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Robot.move_all_joints_relative([" + angles + "])");
            job_instance.set_up_next_do(0);
        }
        else  {
            //this.robot.angles = angles
            for(let i = 0; i < angles.length; i++) { this.robot.angles[i] = angles[i]; }
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //effectively done in robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: move_all_joints_relative " + this.delta_angles + "}"
    }
    to_source_code(args){
        args        = Object.assign({}, args);
        args.value  = this.delta_angles;
        args.indent = "";
        return args.indent +
              "Dexter." +
              (args.value.robot ? args.value.robot.name + "." : "") +
              "pid_move_all_joints("  +
              to_source_code({value: args.value.array_of_angles}) +
              ")"
    }
};

Instruction.Dexter.move_to = class move_to extends Instruction.Dexter{
    constructor (xyz            = [],
                 J5_direction= [0, 0, -1], //pointing down
                 config               = Dexter.RIGHT_UP_OUT,
                 workspace_pose  = null, //default's to the job's default_workspace_pose
                 j6_angle    = [0], //default is to move relatively 0, ie don't change
                 j7_angle    = [0],
                 robot
    ){
        super();
        this.xyz            = xyz;
        this.J5_direction   = J5_direction;
        this.config         = config;
        this.workspace_pose = ((workspace_pose === null) ? undefined : workspace_pose);
        this.j6_angle       = j6_angle;
        this.j7_angle       = j7_angle;
        this.robot          = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let xyz          = this.xyz;
        let J5_direction = this.J5_direction;
        let config       = this.config;
        let pose         = this.workspace_pose;
        if(Dexter.is_position(this.xyz)){
            pose         = J5_direction;
            xyz          = this.xyz[0];
            J5_direction = this.xyz[1];
            config       = this.xyz[2];

        }
        let [existing_xyz, existing_direction, existing_config] = Kin.J_angles_to_xyz(this.robot.angles, this.robot.pose); //just to get defaults.
        if(J5_direction === null) { J5_direction = existing_direction; }
        if(config       === null) { config       = existing_config; }
        if(Array.isArray(J5_direction) &&
            (J5_direction.length == 2) &&
            (Math.abs(J5_direction[0]) == 90) &&
            (Math.abs(J5_direction[1]) == 90)){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to([" + xyz + "], [" + J5_direction + "])\n" +
                "was passed an invalid J5_direction." +
                "\n[90, 90], [-90, 90], [90, -90] and [-90, -90]\n are all invalid.");
        }
        let xyz_copy = xyz.slice(0);
        for(let i = 0; i < 3; i++){
            let new_x_y_or_z = xyz_copy[i];
            if (xyz_copy.length <= i)             { xyz_copy.push(existing_xyz[i]); }
            else if (new_x_y_or_z == null)        { xyz_copy[i] = existing_xyz[i];  } //does not hit if new_x_y_or_z is 0
            else if (Array.isArray(new_x_y_or_z)) { xyz_copy[i] = existing_xyz[i] + new_x_y_or_z[0]; } //relative "new val"
        }
        if(pose == null) { pose = job_instance.default_workspace_pose; }

        if (Object.isNewObject(pose)) { pose = pose.pose; }
        if (Object.isNewObject(J5_direction)) {
            J5_direction = J5_direction.pose;
            config       = undefined;
            pose         = undefined;
        }
        else if (Array.isArray(J5_direction)) {
            if (Array.isArray(J5_direction[0])) { //J5_direciton is a 2d array
                config = undefined;
                pose   = undefined;
            }
            //else its a 1D array, so use config and pose as they are
        }
        else {
            dde_error("Dexter.move_to passed invalid 5_direction of: " + J5_direction);
        }
        let angles;
        try {
            angles = Kin.xyz_to_J_angles(xyz_copy, J5_direction, config, pose); //was: job_instance.robot.pose
            //angles is now 5 long
        }
        catch(err){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to([" + xyz + "], [" + J5_direction + "])" +
                "\nwas passed invalid xyz.\n " +
                err.message);
            job_instance.set_up_next_do(0);
            return
        }
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " +
                job_instance.program_counter +
                "\nin Dexter.move_to([" + xyz + "])" +
                "\nout of range xyz.");
            job_instance.set_up_next_do(0);
        }
        else {
            if(Array.isArray(this.j6_angle)) {
                angles.push(this.robot.angles[5] + this.j6_angle[0]);
            }
            else { angles.push(this.j6_angle); }
            if(Array.isArray(this.j7_angle)) {
                angles.push(this.robot.angles[6] + this.j7_angle[0]);
            }
            else { angles.push(this.j7_angle); }
            this.robot.angles       = angles;
            //Job.insert_instruction(make_ins("a", ...angles), {job: job_instance, offset: "after_program_counter"})
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            this.computed_angles = angles; //for debugging purposes
            if(Array.isArray(this.j7_angle) &&
                (this.j7_angle.length === 1) &&
                (this.j7_angle[0] === 0)){
                if(Array.isArray(this.j6_angle) &&
                    (this.j6_angle.length === 1) &&
                    (this.j6_angle[0] === 0)){
                    angles = angles.slice(0, 5);
                }
                else { //only j7 is [0] so keep j6 in the array
                    angles = angles.slice(0, 6);
                }
            }
            //we're keeping j7, but maybe not j6
            else if (Array.isArray(this.j6_angle) &&
                    (this.j6_angle.length === 1) &&
                    (this.j6_angle[0] === 0)){
                    angles[5] = "N"; //means don't move J6.
            }
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //effectively done in robot_done_with_instruction
        }
    }

    toString(){ return "{instanceof: move_to " + this.xyz + "}" }

    to_source_code(args){
        args        = Object.assign({}, args);
        args.indent = "";
        let rob = args.value.robot;
        args.value  = this.xyz;
        let xyx_src = to_source_code(args);

        args.value  = this.J5_direction;
        let J5_direction_src = to_source_code(args);

        args.value  = this.config;
        let config_src = to_source_code(args);

        args.value  = this.workspace_pose;
        let workspace_pose = to_source_code(args);

        args.value  = this.j6_angle;
        let j6_angle = to_source_code(args);

        args.value  = this.j7_angle;
        let j7_angle = to_source_code(args);


        return args.indent +
              "Dexter." +
               (rob ? rob.name  + "." : "") +
               "move_to("       +
               xyx_src          + ", " +
               J5_direction_src + ", " +
               config_src       + ", " +
               workspace_pose   + ", " +
               j6_angle         + ", " +
               j7_angle         + ", " +
            ")"
    }
};

Instruction.Dexter.pid_move_to = class pid_move_to extends Instruction.Dexter{
    constructor (xyz           = [],
                 J5_direction  = [0, 0, -1],
                 config        = Dexter.RIGHT_UP_OUT,
                 workspace_pose = undefined, //default's to the job's default_workspace_pos
                 j6_angle = [0], //default is to move relatively 0, ie don't change
                 j7_angle = [0],
                 robot
    ){
        super();
        this.xyz            = xyz;
        this.J5_direction   = J5_direction;
        this.config         = config;
        this.workspace_pose = ((workspace_pose === null) ? undefined : workspace_pose);
        this.j6_angle       = j6_angle;
        this.j7_angle       = j7_angle;
        this.robot          = robot;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let xyz          = this.xyz;
        let J5_direction = this.J5_direction;
        let config       = this.config;
        let pose         = this.workspace_pose;
        if(Dexter.is_position(this.xyz)){
            pose         = J5_direction;
            xyz          = this.xyz[0];
            J5_direction = this.xyz[1];
            config       = this.xyz[2];
        }
        let [existing_xyz, existing_direction, existing_config] = Kin.J_angles_to_xyz(this.robot.pid_angles, this.robot.pose); //just to get defaults.
        if(J5_direction === null) { J5_direction = existing_direction; }
        if(config       === null) { config       = existing_config; }
        if(Array.isArray(J5_direction) &&
            (J5_direction.length == 2) &&
            (Math.abs(J5_direction[0]) == 90) &&
            (Math.abs(J5_direction[1]) == 90)){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.pid_move_to([" + xyz + "], [" + J5_direction + "])\n" +
                "was passed an invalid J5_direction." +
                "\n[90, 90], [-90, 90], [90, -90] and [-90, -90]\n are all invalid.");
        }
        let xyz_copy = xyz.slice(0);
        for(let i = 0; i < 3; i++){
            let new_x_y_or_z = xyz_copy[i];
            if      (xyz_copy.length <= i)        { xyz_copy.push(existing_xyz[i]); }
            else if (xyz_copy[i] == null)         { xyz_copy[i] = existing_xyz[i];  }
            else if (Array.isArray(new_x_y_or_z)) { xyz_copy[i] = existing_xyz[i] + new_x_y_or_z[0]; } //relative "new val"
        }
        if(pose == null) { pose = job_instance.default_workspace_pose; }
        if (Object.isNewObject(pose)) { pose = pose.pose; }
        if (Object.isNewObject(J5_direction)) {
            J5_direction = J5_direction.pose;
            config       = undefined;
            pose         = undefined;
        }
        else if (Array.isArray(J5_direction)) {
            if (Array.isArray(J5_direction[0])) { //J5_direciton is a 2d array
                config = undefined;
                pose   = undefined;
            }
            //else its a 1D array, so use config and pose as they are
        }
        else {
            dde_error("Dexter.move_to passed invalid 5_direction of: " + J5_direction);
        }
        let angles;
        try {
            angles = Kin.xyz_to_J_angles(xyz_copy, J5_direction, config, pose); //job_instance.robot.pose
            //angles is now 5 long
        }
        catch(err){
            //job_instance.stop_for_reason("errored",
            //    "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
            //    "\nDexter.pid_move_to([" + xyz + "], [" + J5_direction + "])" +
            //    "\nwas passed invalid xyz.\n " +
            // err.message)
            //job_instance.set_up_next_do(0)
            //return
            throw new Error("in pid_move_to do_item method. Call to Kin.xyz_to_J_angles has errored")
        }
        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Dexter.pid_move_to([" + xyz + "])");
            job_instance.set_up_next_do(0);
        }
        else {
            if(Array.isArray(this.j6_angle)) {
                angles.push(this.robot.pid_angles[5] + this.j6_angle[0]);
            }
            else { angles.push(this.j6_angle); }
            if(Array.isArray(this.j7_angle)) {
                angles.push(this.robot.pid_angles[6] + this.j7_angle[0]);
            }
            else { angles.push(this.j7_angle); }
            this.robot.pid_angles       = angles;  //angles is 7 long
            //Job.insert_instruction(make_ins("P", ...angles), {job: job_instance, offset: "after_program_counter"})
            //job_instance.insert_single_instruction(make_ins("P", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("P", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //called by robot_done_with_instruction
        }
    }

    toString(){ return "{instanceof: pid_move_to " + this.xyz + "}" }

    to_source_code(args){
        args  = Object.assign({}, args);
        args.indent = "";

        let rob = args.value.robot;

        args.value  = this.xyz;
        let xyx_src = to_source_code(args);

        args.value  = this.J5_direction;
        let J5_direction_src = to_source_code(args);

        args.value  = this.config;
        let config_src = to_source_code(args);

        args.value  = this.workspace_pose;
        let workspace_pose = to_source_code(args);

        args.value  = this.j6_angle;
        let j6_angle = to_source_code(args);

        args.value  = this.j7_angle;
        let j7_angle = to_source_code(args);

        return args.indent +
            "Dexter." +
            (rob ? rob.name + "." : "") +
            "pid_move_to(" +
            xyx_src          + ", " +
            J5_direction_src + ", " +
            config_src       + ", " +
            workspace_pose   + ", " +
            j6_angle         + ", " +
            j7_angle         + ", " +
            ")"
    }
};
Instruction.Dexter.move_to_relative = class move_to_relative extends Instruction.Dexter{
    constructor (delta_xyz = [0, 0, 0], workspace_pose=undefined, j6_delta_angle=0, j7_delta_angle=0, robot){
        super();
        if (delta_xyz.length == 1) {
            delta_xyz.push(0);
            delta_xyz.push(0);
        }
        else if (delta_xyz.length == 2) {  delta_xyz.push(0); }
        this.delta_xyz      = delta_xyz;
        this.workspace_pose = ((workspace_pose === null)? undefined : workspace_pose);
        this.j6_delta_angle = j6_delta_angle;
        this.j7_delta_angle = j7_delta_angle;
        this.robot          = robot;
    }
    do_item(job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let [old_xyz, J5_direction, config] = Kin.J_angles_to_xyz(this.robot.angles, this.workspace_pose); //job_instance.robot.pose
        let new_xyz = Vector.add(old_xyz, this.delta_xyz); //makes a new array
        let angles;
        try {
            angles = Kin.xyz_to_J_angles(new_xyz, J5_direction, config, this.workspace_pose); //job_instance.robot.pose)
            //now of length 5
        }
        catch(err){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to_relative([" + this.delta_xyz + "])" +
                "\ncalled with out of range delta_xyz\n" +
                err.message);
            job_instance.set_up_next_do(0);
            return
        }
        angles.push(this.robot.angles[5] + this.j6_delta_angle);
        angles.push(this.robot.angles[6] + this.j7_delta_angle);

        let error_mess = Dexter.joints_out_of_range(angles, this.robot);
        if (error_mess){ // a string like "Joint 1 with angle: 0.01 is less than the minimum: 30
            job_instance.stop_for_reason("errored",
                error_mess + "\nin Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nin Dexter.move_to_relative([" + this.delta_xyz + "])");
            job_instance.set_up_next_do(0);
        }
        else {
            this.robot.angles = angles;
            //return make_ins("a", ...angles) // Dexter.move_all_joints(angles)
            //job_instance.insert_single_instruction(make_ins("a", ...angles))
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(make_ins("a", ...angles), this.robot);
            //job_instance.set_up_next_do(1) //called by robot_done_with_instruction
        }
    }
    toString(){
        return "{instanceof: move_to_relative " + this.delta_xyz + "}"
    }
    to_source_code(args){
        args        = Object.assign({}, args);
        args.indent = "";
        let rob     = args.value.robot;

        args.value = this.delta_xyz;
        let delta_xyz = to_source_code(args);

        args.value = this.workspace_pose;
        let workspace_pose = to_source_code(args);

        args.value = this.j6_delta_angle;
        let j6_delta_angle = to_source_code(args);

        args.value = this.j7_delta_angle;
        let j7_delta_angle = to_source_code(args);

        return args.indent +
               "Dexter." +
               (rob ? rob.name + "." : "") +
               "move_to_relative(" +
                delta_xyz  + ", " +
                workspace_pose + ", " +
                j6_delta_angle + ", " +
                j7_delta_angle + ", " +
            ")"
    }
};

Instruction.Dexter.move_to_straight = class move_to_straight extends Instruction.Dexter{
    constructor ({xyz           = [],
                  J5_direction   = [0, 0, -1],
                  config         = Dexter.RIGHT_UP_OUT,
                  workspace_pose = undefined,
                  tool_speed     = 5*_mm / _s,
                  resolution     = 0.5*_mm,
                  j6_angle       = [0],
                  j7_angle       = [0],
                  single_instruction = false, //false means make up all the make_ins for this here in DDE,
                                                 //true means create just 1 make_ins "T" instruction
                  robot}) {
        super();
        this.xyz            = xyz;
        this.J5_direction   = J5_direction;
        this.config         = config;
        this.workspace_pos  = ((workspace_pose === null) ? undefined : workspace_pose);
        this.tool_speed     = tool_speed;
        this.resolution     = resolution;
        this.j6_angle       = j6_angle;
        this.j7_angle       = j7_angle;
        this.single_instruction = single_instruction;
        this.robot          = robot;
        if(!single_instruction) { this.inserting_instruction = true; }
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        let [existing_xyz, existing_J5_direction, existing_config] =
            Kin.J_angles_to_xyz(this.robot.angles, this.robot.pose);
        let xyz_copy = this.xyz.slice(0);
        for(let i = 0; i < 3; i++){
            let new_x_y_or_z = xyz_copy[i];
            if (xyz_copy.length <= i)             { xyz_copy.push(existing_xyz[i]); }
            else if (new_x_y_or_z == null)        { xyz_copy[i] = existing_xyz[i];  } //does not hit if new_x_y_or_z is 0
            else if (Array.isArray(new_x_y_or_z)) { xyz_copy[i] = existing_xyz[i] + new_x_y_or_z[0]; } //relative "new val"
        }
        let angles;
        try { angles = Kin.xyz_to_J_angles(xyz_copy, this.J5_direction, this.config, this.robot.pose);} //job_instance.robot.pose ?
        catch(err){
            job_instance.stop_for_reason("errored",
                "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                "\nDexter.move_to_straight([" + this.xyz + "])" +
                "\ncalled with out of range xyz\n" +
                err.message);
            job_instance.set_up_next_do(0);
            return
        }
        let new_j6_angle;
        if(Array.isArray(this.j6_angle)) {
            new_j6_angle = this.robot.angles[5] + this.j6_angle[0];
        }
        else {  new_j6_angle = this.j6_angle; }
        angles.push(new_j6_angle);

        let new_j7_angle;
        if(Array.isArray(this.j7_angle)) {
            new_j7_angle =  this.robot.angles[6] + this.j7_angle[0];
        }
        else { new_j7_angle = this.j7_angle; }
        angles.push(new_j7_angle);

        this.robot.angles = angles;
        if(this.single_instruction) {
            let ins = make_ins("T",
                xyz_copy[0], xyz_copy[1], xyz_copy[2], //args 0, 1, 2
                this.J5_direction[0], this.J5_direction[1], this.J5_direction[2],
                this.config[0], this.config[1], this.config[2],
                this.tool_speed, this.resolution,
                new_j6_angle, new_j7_angle); //args 11, 12
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter;
            job_instance.send(ins, this.robot);
            //job_instance.set_up_next_do(1) //will be called by robot_done_with_instruction
        }
        else {
            try {
                let instrs = this.move_to_straight_aux(existing_xyz,
                    xyz_copy,
                    this.J5_direction,
                    this.config,
                    this.robot.pose,
                    this.tool_speed,
                    this.resolution,
                    this.robot);
                //Job.insert_instruction(instrs, {job: job_instance, offset: "after_program_counter"})
                job_instance.insert_instructions(instrs);
                job_instance.set_up_next_do(1);
            }
            catch(err){
                job_instance.stop_for_reason("errored",
                    "In Job." + job_instance.name + " at PC: " + job_instance.program_counter +
                    "Dexter.move_to_straight({xyz: [" + this.xyz + "]})\n" +
                    "passed invalid xyz.\n" +
                    err.message);
            }
        }
    }
    move_to_straight_aux (xyz_1, xyz_2, J5_direction, config,  robot_pose, tool_speed = 5*_mm / _s, resolution = .5*_mm, robot){
        let movCMD = [];
        let U1 = xyz_1;
        let U2 = xyz_2;
        let U21 = Vector.subtract(U2, U1);
        let v21 = Vector.normalize(U21);
        let mag = Vector.magnitude(U21);
        let div = 1;
        let step = Infinity;
        while(resolution < step){
            div++;
            step = mag / div;
        }
        let angular_velocity;
        let Ui, new_J_angles;
        let old_J_angles = Kin.xyz_to_J_angles(U1, J5_direction, config, robot_pose);
        for(let i = 1; i < div+1; i++){
            Ui = Vector.add(U1, Vector.multiply(i*step, v21));
            new_J_angles = Kin.xyz_to_J_angles(Ui, J5_direction, config, robot_pose);
            angular_velocity = Kin.tip_speed_to_angle_speed(old_J_angles, new_J_angles, tool_speed);
            old_J_angles = new_J_angles;
            movCMD.push(robot.make_ins("S", "MaxSpeed", angular_velocity));
            movCMD.push(robot.make_ins("S", "StartSpeed", angular_velocity));
            movCMD.push(robot.move_to(Ui, J5_direction, config, robot_pose));
        }
        return movCMD
    }
    toString(){
        return "{instanceof: move_to_straignt " + this.xyz + "}"
    }
    to_source_code(args){
        args        = Object.assign({}, args);
        args.indent = "";

        let rob = args.value.robot;

        args.value  = this.xyz;
        to_source_code(args);

        args.value  = this.J5_direction;
        let J5_direction = to_source_code(args);

        args.value  = this.config;
        let config = to_source_code(args);

        args.value  = this.workspace_pose;
        let workspace_pose = to_source_code(args);

        args.value  = this.tool_speed;
        let tool_speed = to_source_code(args);

        args.value  = this.resolution;
        let resolution = to_source_code(args);

        args.value  = this.j6_angle;
        let j6_angle = to_source_code(args);

        args.value  = this.j7_angle;
        let j7_angle = to_source_code(args);

        args.value  = this.single_instruction;
        let single_instruction = to_source_code(args);

        return args.indent +
            "Dexter." +
            (rob ? rob.name + "." : "") +
            "move_to_straight({"  +
            "xyx: "                + xyz                + ", " +
            "J5_direction: "       + J5_direction       + ", " +
            "config: "             + config             + ", " +
            "workspace_pose: "     + workspace_pose     + ", " +
            "tool_speed: "         + tool_speed         + ", " +
            "resolution: "         + resolution         + ", " +
            "j6_angle: "           + j6_angle           + ", " +
            "j7_angle: "           + j7_angle           + ", " +
            "single_instruction: " + single_instruction +
            ")"
    }
};

Instruction.Dexter.read_file = class read_file extends Instruction.Dexter{
    constructor (source        , //a file name path string
                 destination   = "read_file_content", //user data variable
                 robot         = null //null means use the default robot of the job.
    ){
        if (typeof(source) != "string") {
            dde_error("Dexter.read_file passed non-string for 'source' of: " + source);
        }
        if (typeof(destination) != "string") {
            dde_error("Dexter.read_file passed non-string for 'destination' of: " + destination);
        }
        super();
        this.source = source; //Instruction.Dexter.read_file.add_default_file_prefix_maybe(source)
              //add_default no longer used. We pass teh users path straight thru.
              //if it starts with a letter (not slash or special char like *)
              //it gets file from /srv/samba/share
        this.destination = destination;
        this.first_do_item_call = true;
        this.is_done = false;
        this.processing_r_instruction = false;
        this.robot = robot;
        this.inserting_instruction = true;
    }
    do_item (job_instance){
        if(!this.robot) { this.set_instruction_robot_from_job(job_instance); }
        if (this.first_do_item_call) {
            const sim_actual = Robot.get_simulate_actual(this.robot.simulate);
            //have to check for dexter_file_systems or else the 2nd time I run the job, it will
            //have a double length path with 2 dexter_file_systems parts
            if (!this.source.startsWith("/") && (sim_actual === true) && !this.source.startsWith("dexter_file_systems")) {
                this.fuller_source = "dexter_file_systems/" + this.robot.name + "/" + this.source;
            }
            else { this.fuller_source = this.source; }
            job_instance.user_data[this.destination] = "";
            this.first_do_item_call = false;
            this.is_done = false;
            this.processing_r_instruction = false;
        }
        //the below can never happen
        //if (this.is_done) {
        //    this.processing_r_instruction = false
        //    return Control.break()
        //}
        let read_file_instance = this;
        let robot = this.robot; //closed over
        job_instance.insert_single_instruction(Control.loop(true, function(content_hunk_index){
                if (read_file_instance.is_done) {
                    //init this inst just in case it gets used again
                    read_file_instance.is_done = false;
                    read_file_instance.first_do_item_call = true;
                    read_file_instance.processing_r_instruction = false;
                    return Control.break()
                }
                else {
                    read_file_instance.processing_r_instruction = true;
                    return [make_ins("r", content_hunk_index, read_file_instance.fuller_source, robot),
                            Control.wait_until(function(){
                                return !read_file_instance.processing_r_instruction
                             })
                           ]
                }
            })
        );
        job_instance.set_up_next_do(1);
    }

    //back up over dolist and return the first Instruction.Dexter.read_file found
    //called from got_content_hunk AND Dexter.done_with_instruction
    static find_read_file_instance_on_do_list(job_instance, starting_ins_id){
        for (let i = starting_ins_id; i >= 0; i--){
            let an_instruction = job_instance.do_list[i];
            if(an_instruction instanceof Instruction.Dexter.read_file){
                    return an_instruction
            }
        }
        shouldnt("find_read_file_instance_on_do_list failed to find<br/>" +
            "an instance of Dexter.read_file on Job." + job_instance.name + ".do_list<br/>" +
            "at or before instruction: " + starting_ins_id);
    }

    //called from socket.js
    //payload_string_maybe is a string or an error code (an int > 0)
    static got_content_hunk(job_id, ins_id, payload_string_maybe){
        let job_instance = Job.job_id_to_job_instance(job_id);
        if (job_instance == null){
            throw new Error("Dexter.robot_done_with_instruction passed job_id: " + job_id +
                " but couldn't find a Job instance with that job_id.")
        }
        let read_file_instance = this.find_read_file_instance_on_do_list(job_instance, ins_id);
        read_file_instance.processing_r_instruction = false;
        if(typeof(payload_string_maybe) == "string"){ //do the usual
            job_instance.user_data[read_file_instance.destination] += payload_string_maybe;
            if(payload_string_maybe.length < Instruction.Dexter.read_file.payload_max_chars){
                read_file_instance.is_done = true;
            }
            //if we get exactly payload_max_chars, we probably have more chars to come from the robot,
            //but its possible we're running the sim and we just so happened to have exactly
            //payload_max_chars
            else {//payload_string_maybe is probably more than payload_max_chars meaning it probably came
                //from the simulator, therefore we're done as we get all chars in one fell swoop from
                //the simulator.
                let rob = read_file_instance.robot;
                const sim_actual = Robot.get_simulate_actual(rob.simulate);
                if(sim_actual === true) { //definitely simulating so we're done.
                    read_file_instance.is_done = true;
                }
                //else we are not in sim and more chars to come from the robot.
            }
        }
        else if(typeof(payload_string_maybe) == "number"){ //an error number.
            job_instance.user_data[read_file_instance.destination] = payload_string_maybe; //set, don't append
            read_file_instance.is_done = true;
        }
    }

    //used by Dexter.write_file to prepare path for passing it to make_ins("W" ...)
    //because the path used for write_file defaults to "srv/samba/share/dde_apps",
    //whereas the path for make_ins("W" ...) defaults to srv/samba/share
    //see Dexter.srv_samba_share_default_to_absolute_path to do the opposite
    //no longer used.
    /*static add_default_file_prefix_maybe(path){
        if      (path.startsWith("/"))   { return path }
        else if (path.startsWith("#"))   { return path }
        else if (path.startsWith("./"))  { return "dde_apps/" + path.substring(2) }
        else if (path.startsWith("../")) { return path.substring(3) } //will go to dexrun's default folder, ie /srv/samba/share/
        else                             { return "dde_apps/" + path }
    }*/

    to_source_code(args){
        let rob = args.value.robot;
        return args.indent +
               "Dexter." +
               (rob ? rob.name + "." : "") +
               "read_file(" +
               to_source_code({value: this.source}) + ", " +
               to_source_code({value: this.destination}) +
               ")"
    }
};
Instruction.Dexter.read_file.payload_max_chars = 62;

/* Created by Fry on 3/29/16. */


class Robot$1 {
    constructor (args){
       if(!Utils.is_string_an_identifier(args.name)) {
           dde_error('You have attempted to make a new Robot with an invalid name of: "' + args.name +
                     '".<br/>Robot names should start with a letter and be followed only by letters, digits, or underscores.');
       }
    }
    /*static robot_names(){
        var result = []
        for(var name in Robot){
            if (Robot[name] instanceof Robot){
                result.push(name)
            }
        }
        return result
    }
    */
    static all_robots(){
        let result = [];
        for(let robot_name of Robot$1.all_names) { result.push(Robot$1[robot_name]); }
        return result
    }
    //superclass can be a string name like "Dexter" or "Serial", OR it can be the class object.
    //returns true or false
    static is_valid_robot_class_name(robot_class_name) {
        return ["Brain", "Dexter", "Human", "Serial"].includes(robot_class_name)
    }
    static robot_instances_exist_for_running_instructions_of_superclass(superclass){
        let rob_class = ((typeof(superclass) == "string") ? value_of_path(superclass) : superclass);
        if ([Robot$1, Human$1].includes(rob_class)) { return true } //Robot and Human instructions can be run on any class of robot
        else { return rob_class.all_names.length > 0 }
    }

    //put the new item on the end, even if you have to remove it from the middle,
    //because we want the latest on the end for default_robot_name
    static set_robot_name(name, robot_instance){
        Robot$1[name] = robot_instance; //for some reason I don't understand, doing this causes,
        // for a dexter, Dexter.[name] = robot_instance to happen
        //Attempting to step through the above assignment does nothing special
        //Still this is so bizare, I set Dexter.[name] = robot_instance where
        //just after set_robot_name is called, just to make sure.

        //ensure name is on end of all_names
        let i = Robot$1.all_names.indexOf(name);
        if (i != -1){ Robot$1.all_names.splice(i, 1); }
        Robot$1.all_names.push(name);
        //for Make Instance dialog
        if ((i == -1) &&
            globalThis.DexterUtils &&
            (robot_instance instanceof Dexter$1)) {
            DexterUtils.add_dexter_to_dexter_default_menu(robot_instance);
        }
    }

    static get_simulate_actual(simulate_val){
        if(platform === "node") {
            return false //because now when in job engine, never attempt to run simulator
        }
        else if      (simulate_val === true)   { return true   }
        else if (simulate_val === false)  { return false  }
        else if (simulate_val === "both") { return "both" }
        else if (simulate_val === null)   {
            let result;
            if(globalThis.DDE_DB) {
                result = DDE_DB.persistent_get("default_dexter_simulate");
            }
            else {
                result = false; //don't simulate
            }
            //console.log("in get_simulate_actual passed, simulate_val: " + simulate_val + " returning: " + result)
            return result
        }
        else { shouldnt("get_simulate_actual passed illegal value: " + simulate_val); }
    }

    static simulate_or_both_selected(){
        if(globalThis.DDE_DB && DDE_DB.persistent_get("default_dexter_simulate")) { return true} //persistent_get call returns true or "both"
        else { return false } //DDE_DB.persistent_get call returns false
    }

    to_path(){ return "Robot." + this.name }

    jobs_using_this_robot(){
        let result = [];
        for (let j of Job.all_jobs()){
            if (j.robot === this){ result.push(j); }
        }
        return result
    }

    active_jobs_using_this_robot(){
        let result = [];
        for (let j of Job.all_jobs()){
            if ((j.robot === this) &&
                 j.is_active()){
                result.push(j);
            }
        }
        return result
    }

    //this is shadowed by Dexter, but all other robots are never busy.
    /*is_busy(){ return false }

    add_to_busy_job_array(a_job){ } //no-op. shadowed by Dexter.

    remove_from_busy_job_array(a_job){} //no-op. shadowed by Dexter.
    */
    is_initialized(){ return true }

    //pretty weak. Only will work as long as Robots don't overlap in oplets
    //used in robot_history_status
    static instruction_type_to_function_name(ins_type){
        let fn_name = Dexter$1.instruction_type_to_function_name_map[ins_type];
        if (fn_name) {return "Dexter." + fn_name}
        fn_name = Serial$1.instruction_type_to_function_name_map[ins_type];
        if (fn_name) {return "Serial." + fn_name}
        return null
    }

    static is_oplet(oplet, known_oplet=false){
        if((typeof(oplet) === "string") && (oplet.length == 1)){
            if(known_oplet){
                if(Dexter$1.instruction_type_to_function_name_map[oplet]) {
                    return true
                }
                else { return false }
            }
            else { return true }
        }
        else { return false }
    }

    //Control Instructions
    static break(){ //stop a Control.loop
        return new Instruction.break()
    }
    static continue(){ //start next iteration of a Control.loop
        return new Instruction.continue()
    }
    static debugger(){
        return new Instruction.debugger()
    }
    static step_instructions(){
        return new Instruction.step_instructions()
    }
    static error(reason="Job stopped due to executing a Control.error instruction.",
                 perform_when_stopped=true){ //declare that an error happened. This will cause the job to stop.
        return new Instruction.error(reason, perform_when_stopped)
    }

    static go_to(instruction_location){
        return new Instruction.go_to(instruction_location)
    }

    static grab_robot_status(user_data_variable = "grabbed_robot_status",
                             starting_index = Serial$1.DATA0,
                             ending_index=null){
        return new Instruction.grab_robot_status(user_data_variable,
                                                         starting_index,
                                                         ending_index)
    }
    //very useful for grabbing rs from a preceeding instr in the do_list of my_serial.string_instruction("foo")
    grab_robot_status(user_data_variable = "grabbed_robot_status",
                      starting_index = Serial$1.DATA0,
                      ending_index=null){
        return new Instruction.grab_robot_status(user_data_variable,
                                                         starting_index,
                                                         ending_index,
                                                         this)
    }

    static if_any_errors(job_names=[], instruction_if_error=null){
        return new Instruction.if_any_errors(job_names, instruction_if_error)
    }
    static label(name="my_label"){
        return new Instruction.label(name)
    }

    static loop(boolean_int_array_fn=2, body_fn){
        return new Instruction.loop(boolean_int_array_fn, body_fn)
    }

    static out(val="", color="black", temp=false, print_job_info=false){
        return new Instruction.out(val, color, temp, print_job_info)
    }

    /* Warning the below is at least somewhat obsolete as of new arch Aug 25, 2016
    The workflow for sent_to_job.
     job.sent_to_job calls Instruction.Contol.sent_to_job as for all control instructions.
     That creates an instance to sent_to_job and sticks it on the source_job do_list.
     When that instruction is run, its do_item calls
     to_job_instance.destination_do_send_to_job(this) which sticks the
     do_list_item onto the destination job's do list,
     and, if the source job is going to wait for the instruction to be done,
     an additonal control instruction of type
     Instruction.destination_send_to_job_is_done is stuck on the do_list
     of the desitination job.
     Then the destination job runs those items
     and when the instruction destination_send_to_job_is_done is run,
     it calls the fns to get the values for the vars to set in from_instance,
     and calls from_job_instance.send_to_job_receive_done(this.params)
     passing those values to the from_instance.
     Then send_to_job_receive_done sets the user_data vars in the from job.
     */

    static send_to_job({do_list_item    = null,
                        where_to_insert = null,
                        wait_until_done = false, //if true, a_job.send_to_job_receive_done will be called when the do_list_item is done by the to_job
                        start           = false,
                        unsuspend       = false,
                        status_variable_name = null} = {}){
        return new Instruction.send_to_job(arguments[0])
    }

    //rarely used, but can be used to customize a job with additional do_list items at the start.
    static sent_from_job ({do_list_item        = null, //can be null, a single instruction, or an array of instructions
                           from_job_name       = null,
                           from_instruction_id = null,
                           where_to_insert     = "next_top_level", //just for debugging
                           wait_until_done     = false} = {}){
        return new Instruction.sent_from_job(arguments[0])
    }

    static set_inter_do_item_dur(dur, instructions_array){
        return new Instruction.set_inter_do_item_dur({dur: dur, instructions_array: instructions_array})
    }

    static start_job(job_name, start_options={}, if_started="ignore", wait_until_job_done=false){
        return new Instruction.start_job(job_name, start_options, if_started, wait_until_job_done)
    }

    static stop_job(instruction_location, reason, perform_when_stopped = true){
        return new Instruction.stop_job(instruction_location, reason, perform_when_stopped)
    }

    static include_job(job_name, start_loc=null, end_loc=null){
        return new Instruction.include_job(job_name, start_loc, end_loc)
    }

    static suspend(job_name = null, reason = ""){
        return new Instruction.suspend(job_name, reason)
    }
    //unsuspend is also instance meth on Job and should be!
    static unsuspend(job_name = "required", stop_reason=false){
        return new Instruction.unsuspend(job_name, stop_reason)
    }

    static sync_point(name, job_names=[]){
        return new Instruction.sync_point(name, job_names)
    }

    static wait_until(fn_date_dur=1){
        return new Instruction.wait_until(fn_date_dur)
    }

    //arg order is a bit odd because the headers come after the response_variable_name.
    //but the response_variable_name is takes the place of the primary callback,
    //and that's the order I have for get_page (headers on end) which very often
    //default to undefined.
    static get_page(url_or_options, response_variable_name="http_response"){
        if(url_or_options === undefined){
            dde_error("IO.get_page called with no <b>url_or_options</b> argument<br/>" +
                      "which is typically the string of a url.");
        }
        return new Instruction.Get_page(url_or_options, response_variable_name)
    }
    //static play(note_or_phrase){
    //    return new Instruction.play_notes(note_or_phrase)
    //}
    close_robot(){ //overridden in Serial and Dexter
    }

    static save_picture({canvas_id_or_mat="canvas_id",
                         path="my_pic.png"}={}) {
        return new Instruction.save_picture({canvas_id_or_mat: canvas_id_or_mat,
                                             path: path})
    }

    static show_picture({canvas_id="canvas_id", //string of a canvas_id or canvasId dom elt
                            content=null, //mat or file_path
                            title=undefined,
                            x=200, y=40, width=320, height=240,
                            rect_to_draw=null}={}) {
        return new Instruction.show_picture({canvas_id: canvas_id, //string of a canvas_id or canvas dom elt
                                                     content: content, //mat or file_path
                                                     title: title,
                                                     x: x,
                                                     y: y,
                                                     width: width,
                                                     height: height,
                                                     rect_to_draw: rect_to_draw})
    }

    static show_video({video_id="video_id", //string of a video_id or video dom elt
                        content="webcam", //"webcam" or file_path
                        title=undefined,
                        x=200, y=40, width=320, height=240,
                        play=true,
                        visible=true}={}) {
        return new Instruction.show_video({video_id: video_id, //string of a video_id or video dom elt
                                                    content: content, //mat or file_path
                                                    title: title,
                                                    x: x,
                                                    y: y,
                                                    width: width,
                                                    height: height,
                                                    play: play,
                                                    visible: visible})
    }
    static take_picture({video_id="video_id", //string of a video_id or video dom elt
                         camera_id=undefined,
                         width=320, height=240,
                         callback=Picture.show_picture_of_mat}={}) {
        return new Instruction.take_picture({video_id: video_id, //string of a video_id or video dom elt
                                             camera_id: camera_id,
                                             width: width,
                                             height: height,
                                             callback: callback})
    }
}
globalThis.Robot = Robot$1;
Robot$1.all_names = [];

Robot$1.robot_status_labels = []; //overridden by Serial and Dexter, needed by Show robot status history button

/*simulate vs non-simulate makes no difference so set simulate to false */
class Brain$1 extends Robot$1 { /*no associated hardware */
    constructor({name = "b1"}={}){
        super(arguments[0]);
        this.name = name;
        Robot$1.set_robot_name(this.name, this);
        let i = Brain$1.all_names.indexOf(this.name);
        if (i != -1) {  Brain$1.all_names.splice(i, 1); }
        Brain$1.all_names.push(this.name); //ensures the last name on the list is the latest with no redundancy
        Brain$1.last_robot = this;
        this.simulate = false;
        //the_job //a Robot can have at most 1 current job associated with it.
    }
    toString(){ return "Brain." + this.name }

    stringify(){
        return "Brain: <i>name</i>: " + this.name
    }
    start(job_instance) {
        job_instance.set_status_code("running");
        job_instance.set_up_next_do(0);
    }
    finish_job() {}

    //Brain
    send(inst_array_with_inst_id) {
        let job_id = inst_array_with_inst_id[Instruction.JOB_ID];
        var job_instance = Job.job_id_to_job_instance(job_id);
        var reason = "An instruction intended for a physical robot: " + inst_array_with_inst_id + "<br/>was sent to a Robot.Brain: " + this.name + ",<br/> which has no physical robot.";
        job_instance.stop_for_reason("errored", reason);
        out(reason, "red");
        throw new Error("send called on Robot.Brain, which has no physical robot.")
    }

    static eval_python(python_source, user_data_variable="python_value") {
        return new Instruction.eval_python(python_source, user_data_variable)
    }
        /* //faster than using Instruction.eval_python but can't support to_source_code method.
           return (async function() {
                  await Py.init()
                  this.user_data[user_data_variable + "_python_source"] = python_source
                  let result = Py.eval(python_source)
                  this.user_data[user_data_variable] = result
                })

         */
            //very old
            //Control.wait_until(function() {
                      //out("this.user_data." + user_data_variable = ": " + this.user_data.[user_data_variable])
            //          return this.user_data[user_data_variable] !== undefined})
            //]
       //}
}

globalThis.Brain = Brain$1;

Brain$1.all_names = [];

class Human$1 extends Brain$1 { /*no associated hardware */
    constructor({name = "h1"}={}){
        super(arguments[0]);
        this.name = name;
        Robot$1.set_robot_name(this.name, this);
        let i = Human$1.all_names.indexOf(this.name);
        if (i != -1) {  Human$1.all_names.splice(i, 1); }
        Human$1.all_names.push(this.name); //ensures the last name on the list is the latest with no redundancy
        Human$1.last_robot = this;
        this.simulate = false;
        //the_job //a Robot can have at most 1 current job associated with it.
    }
    toString(){ return "Human." + this.name }

    stringify(){
        return "Human: <i>name</i>: " + this.name
    }
    start(job_instance) {
        job_instance.set_status_code("running");
        job_instance.set_up_next_do(0);
    }
    finish_job() {}
    //Human
    send(inst_array_with_inst_id) {
        let job_id = inst_array_with_inst_id[Instruction.JOB_ID];
        var job_instance = Job.job_id_to_job_instance(job_id);
        var reason = "An instruction intended for a physical robot: " + inst_array_with_inst_id + "<br/>was sent to a Robot.Human: " + this.name + ",<br/> which has no physical robot.";
        job_instance.stop_for_reason("errored", reason);
        out(reason, "red");
        throw new Error("send called on Robot.Human, which has no physical robot.")
    }

    //the human instructions
    /*
    static recognize_speech ({title="Recognize Speech", prompt="",
                             only_once=true, click_to_talk=true,
                             width=430, height=270, x=400, y=200,
                             background_color="rgb(238, 238, 238)",
                             phrase_callback=recognize_speech_default_phrase_callback,
                             finish_callback=null,
                             finish_phrase="finish", //unused if only_once=true
                             user_data_variable_name="recognized_speech"
                             } = {}){ //
        let args = {title: title, prompt: prompt, only_once:only_once, click_to_talk: click_to_talk,
                    width:width, height: height, x: x, y: y,
                    background_color: background_color,  phrase_callback:  phrase_callback,
                    //finish_callback=null,   //unused if only_once=true does not have calLback on purpose
                    finish_phrase:"finish",
                    finish_callback: finish_callback,
                    user_data_variable_name: user_data_variable_name}
        return new Instruction.human_recognize_speech(args)
    }*/

    static speak ({speak_data = "hello", volume = 1.0, rate = 1.0, pitch = 1.0,
                     lang = "en_US", voice = 0, wait = true} = {}){ //does not have calLback on purpose
        if (arguments[0].length > 0){ speak_data = arguments[0]; }
        let args = {speak_data: speak_data, volume: volume, rate: rate, pitch: pitch,
                    lang: lang, voice: voice, wait: wait};
        return new Instruction.human_speak(args)
    }


    static task({task = "", dependent_job_names=[],
                 title, x=200, y=200, width=400, height=400,
                 background_color = "rgb(238, 238, 238)",
                 add_stop_button=true} = {}){
        return new Instruction.human_task(arguments[0])
    }

    static enter_choice({
        task = "",
        choices=[["Yes", true], ["No", false]],
        show_choices_as_buttons=false,
        one_button_per_line=false,
        user_data_variable_name="a_choice",
        dependent_job_names=[],
        add_stop_button=true,
        title,
        x=200, y=200, width=400, height=400,
        background_color = "rgb(238, 238, 238)"} = {}){
        return new Instruction.human_enter_choice(arguments[0])
    }

    static enter_filepath({task = "",
                           user_data_variable_name="a_filepath",
                           initial_value="",
                           add_stop_button = true,
                           dependent_job_names=[],
                           title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"} = {}){
        return new Instruction.human_enter_filepath(arguments[0])
    }

    static enter_instruction({task = "Enter a next instruction for this Job.",
        instruction_type = "Dexter.move_all_joints",
        instruction_args = "5000, 5000, 5000, 5000, 5000",
        add_stop_button=true,
        dependent_job_names = [],
        title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}){
        return new Instruction.human_enter_instruction(arguments[0])
    }

    static enter_number({task="",
        user_data_variable_name="a_number",
        initial_value=0,
        min=0,
        max=100,
        step=1,
        add_stop_button = true,
        dependent_job_names=[],
        title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}) {
        return new Instruction.human_enter_number(arguments[0])
    }

    static enter_position({task="Position Dexter&apos;s end effector<br/>to the position that you want to record,<br/>and click <b>Continue Job</b>.",
                           user_data_variable_name="a_position",
                           add_stop_button = true,
                           dependent_job_names=[],
                           title, x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}) {
        return [Dexter$1.empty_instruction_queue,
               Dexter$1.set_follow_me,
               new Instruction.human_enter_position(arguments[0])
              ]
    }

    static enter_text({task="",
        user_data_variable_name="a_text",
        add_stop_button = true,
        initial_value="OK",
        line_count=1, //if 1, makes an input type=text. If > 1 makes a resizeable text area.
        dependent_job_names=[],
        title,
        close_same_titled_windows = false,
        x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"}={}){
        return new Instruction.human_enter_text(arguments[0])
    }

    static notify({task="",
        window=true,
        output_pane=true,
        beep_count=0,
        speak=false,
        add_stop_button=true,
        dependent_job_names=[],
        title,
        close_same_titled_windows = false,
        x=200, y=200, width=400, height=400,  background_color = "rgb(238, 238, 238)"
    }={}){
        return new Instruction.human_notify(arguments[0])
    }
    static show_window({content=`<input type="submit" value="Done"/>`,
                        title="DDE Information",
                        x=200, y=200, width=400, height=400,
                        background_color = "rgb(238, 238, 238)",
                        is_modal = false,
                        show_close_button = true,
                        show_collapse_button = true,
                        trim_strings = true,
                        add_stop_button=true,
                        callback = show_window_values,
                        user_data_variable_name="show_window_vals",
                        dependent_job_names=[]
    }={}){
        return new Instruction.human_show_window({
            content: content,
            title: title,
            x: x, y: y, width: width, height: height,
            background_color:        background_color,
            is_modal:                is_modal,
            show_close_button:       show_close_button,
            show_collapse_button:    show_collapse_button,
            trim_strings:            trim_strings,
            add_stop_button:         add_stop_button,
            callback:                callback,
            user_data_variable_name: user_data_variable_name,
            dependent_job_names:     dependent_job_names
    })
    }
}
globalThis.Human = Human$1;

Human$1.all_names = [];

class Serial$1 extends Robot$1 {
    constructor({name = "s1", simulate = null, //get sim val from Jobs menu item check box.
                 sim_fun = Utils.return_first_arg, path = "required", connect_options={},
                 capture_n_items = 1, item_delimiter="\n", trim_whitespace=true,
                 parse_items = true, capture_extras = "error", /*"ignore", "capture", "error"*/
                 instruction_callback = Job.prototype.set_up_next_do }={}){
        super(arguments[0]);
        let keyword_args = {name: name, simulate: simulate, sim_fun: sim_fun, path: path, connect_options: connect_options,
                            capture_n_items: capture_n_items, item_delimiter: item_delimiter, trim_whitespace: trim_whitespace,
                            parse_items: parse_items, capture_extras: capture_extras,
                            instruction_callback: instruction_callback};
        this.make_new_robot_1(keyword_args);
        let old_same_named_robot = Robot$1[name];
        let old_same_path_robot  = Serial$1.get_robot_with_path(path);
        if (old_same_named_robot){
            if (old_same_named_robot.active_jobs_using_this_robot().length > 0){
                if(Serial$1.robots_equivalent(old_same_named_robot, this)){
                    warning("There's already a robot with the name: " + name +
                            ",<br/>that is a serial robot that has an active job " +
                            "<br/>so that's being used instead of a new Robot.Serial instance.<br/>" +
                            "Stop a job by clicking on its button in the Output pane's header.");
                    return old_same_named_robot
                }
                else { //same name, active jobs, different robot characteristics
                    dde_error("Attempt to create Robot.Serial with name: " + name +
                              "<br/>but there is already a robot with that name with different properties " +
                              "that is active.<br/>" +
                              "Stop a job by clicking on its button in the Output pane's header."
                              );
                }
            }
            else { //same name but no active jobs
                old_same_named_robot.close_robot();
                return this.make_new_robot_2()
            }
        }
        else if(old_same_path_robot) {
            if (old_same_path_robot.active_jobs_using_this_robot().length > 0){
                dde_error("There's already a robot named: " +  old_same_path_robot.name +
                        " that has an active job.");
            }
            else {
                old_same_path_robot.close_robot();
                return this.make_new_robot_2()
            }
        }
        else { //no same named or same pathed robot
            return this.make_new_robot_2()
        }
    }
    toString(){ return "Serial." + this.name }

    make_new_robot_1(keyword_args){
        this.name                  = keyword_args.name;
        this.path                  = keyword_args.path;
        this.connect_options       = keyword_args.connect_options;
        this.capture_n_items       = keyword_args.capture_n_items;
        this.item_delimiter        = keyword_args.item_delimiter;
        this.trim_whitespace       = keyword_args.trim_whitespace;
        this.parse_items           = keyword_args.parse_items;
        this.capture_extras        = keyword_args.capture_extras;
        this.simulate              = keyword_args.simulate;
        this.sim_fun               = keyword_args.sim_fun;
        this.instruction_callback  = keyword_args.instruction_callback;
    }
    make_new_robot_2(){
        this.is_connected          = false;
        this.connecting            = false;
        this.robot_status          = null;
        Robot$1.set_robot_name(this.name, this);
        let i = Serial$1.all_names.indexOf(this.name);
        if (i != -1) {  Serial$1.all_names.splice(i, 1); }
        Serial$1.all_names.push(this.name); //ensures the last name on the list is the latest with no redundancy
        Serial$1.last_robot = this;
        //if (this.simulate){
        //    let callback_number = cbr.store_callback(this.sim_fun)
        //    this.sim_fun_number  = callback_number
        //}
        return this
    }

    static robots_equivalent(rob1, rob2){
        if (rob1.constructor != rob2.constructor)          { return false }
        if (rob1.name            != rob2.name)             { return false }
        if (rob1.simulate        != rob2.simulate)         { return false }
        if (rob1.path            != rob2.path)             { return false }
        if (!Utils.similar(rob1.connect_options, rob2.connect_options))  { return false }
        if (rob1.capture_n_items != rob2.capture_n_items)  { return false }
        if (rob1.item_delimiter  != rob2.item_delimiter)   { return false }
        if (rob1.trim_whitespace != rob2.trim_whitespace)  { return false }
        if (rob1.parse_items     != rob2.parse_items)      { return false }
        if (rob1.capture_extras  != rob2.capture_extras)   { return false }
        if (!Utils.similar(rob1.instruction_callback, rob2.instruction_callback)) { return false }
        if (!Utils.similar(rob1.sim_fun, rob2.sim_fun))            { return false }
        return true
    }

    static get_robot_with_path(path){
        for(let robot_name of Serial$1.all_names){
            let rob = Robot$1[robot_name];
            if (rob.path == path) { return rob} //there should be at most 1
        }
        return null
    }

    static get_job_with_robot_path(path){
        for(let job_name of Job.all_names){
            let job_instance = Job[job_name];
            if (job_instance.robot.path == path) { return job_instance} //there should be at most 1
        }
        return null
    }

    is_initialized(){ return this.is_connected }

    start(job_instance) { //fill in initial robot_status
        if (this.is_initialized()) {
            //unlike the other set_a_robot_instance_socket_id methods, we must pass job_instance
            //as a 2nd arg.
            Serial$1.set_a_robot_instance_socket_id(this.path, job_instance); //we don't now actually use socket_id outside of serial.js
        }
        else {
            serial_connect(this.path, this.connect_options, this.simulate, this.capture_n_items, this.item_delimiter, this.trim_whitespace, this.parse_items, this.capture_extras, job_instance);
        }
    }

    init(job_instance){
            this.connecting = true;
            serial_connect(this.path, this.connect_options, this.simulate, this.capture_n_items, this.item_delimiter, this.trim_whitespace, this.parse_items, this.capture_extras, job_instance);
        /*serial_init_one_info_map_item(this.path,
                                        this.options,
                                        this.simulate,
                                        this.capture_n_items,
                                        this.item_delimiter,
                                        this.trim_whitespace,
                                        this.parse_items,
                                        this.capture_extras)*/
        //this.is_connected = true //do this only in set_a_robot_instance_socket_id
    }

    ///called from Serial.start
    static set_a_robot_instance_socket_id(path, job_instance){ //do I really need the socket_id of a serial?
        let rob          = Serial$1.get_robot_with_path(path);
        //rob.socket_id    = socket_id
        rob.connecting   = false; //connection and is_connected will never both be true
        rob.is_connected = true;
        out("Connected to serial port at: " + rob.path, undefined, true);
        //let job_instance = Serial.get_job_with_robot_path(path) //beware, this means only 1 job can use this robot!
        if(job_instance) {
            if (job_instance.status_code === "starting") {
                job_instance.set_status_code("running");
                job_instance.set_up_next_do(0); //we don't want to increment because PC is at 0, so we just want to do the next instruction, ie 0.
            }
            //before setting it should be "starting"
            else if (job_instance.status_code === "running") {
                rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do() //initial pc value is 0.
            }
        }
    }
    //Serial
    send(ins_array){
        Robot$1.get_simulate_actual(this.simulate);
        let job_id       = ins_array[Serial$1.JOB_ID];
        let job_instance = Job.job_id_to_job_instance(job_id);
        if (this.connecting) {
            job_instance.set_up_next_do(0);
            out("Connecting to serial port at: " + this.path, undefined, true);
        }
        else if (!this.is_connected){
            //this.start(job_instance)
            out("Initializing serial port at: " + this.path, undefined, true);
            this.init(job_instance);
            job_instance.set_up_next_do(0);
        }
        else if (this.is_connected) { // || (sim_actual === true) || (sim_actual === "both"))  {
            job_instance.wait_until_instruction_id_has_run = job_instance.program_counter; //we don't want to continue the job until this instr is done.
            serial_send(ins_array, this.path, this.simulate, this.sim_fun); //ok time to finally run the instruction!
        }
        else {
            const job_inst = Instruction.job_of_instruction_array(ins_array);
            job_inst.stop_for_reason("errored",
                                     "Series Robot: " + this.name +
                                     " was sent an instruction to execute on path: " + this.path +
                                     " but this robot is not connected");
        }
    }

    perform_instruction_callback(job_instance){
        if (this.instruction_callback) { this.instruction_callback.call(job_instance); }
    }

    robot_done_with_instruction(robot_status){ //called from UI sockets
        let stop_time    = Date.now(); //the DDE stop time for the instruction, NOT Dexter's stop time for the rs.
        let job_id       = robot_status[Serial$1.JOB_ID];
        let job_instance = Job.job_id_to_job_instance(job_id);
        if (job_instance == null){
            job_instance.stop_for_reason("errored",
                      "Serial.robot_done_with_instruction passed job_id: " + job_id +
                      " but couldn't find a Job instance with that job_id.");

        }
        robot_status[Serial$1.INSTRUCTION_TYPE];
        let ins_id = robot_status[Serial$1.INSTRUCTION_ID]; //-1 means the initiating status get, before the first od_list instruction
        //let ins = ((ins_id >= 0) ? job_instance.do_list[ins_id] : null)
        let rob = this;
        //if (ins && ins.robot) { rob = ins.robot } //used when instruction src code has a subject of a robot isntance
       // else                  { rob = job_instance.robot } //get the default robot for the job
        //let op_let = String.fromCharCode(op_let_number)
        job_instance.record_sent_instruction_stop_time(ins_id, stop_time);
        if (!rob.is_connected) ; //ignore any residual stuff coming back from Serial robot
        //we don't want to change robot_status for instance because that will confuse
        //debugging in the case that we've had an error and want to close.
        //on the other hand, we want accurate info. Hmm, maybe the "residual" is
        //only comming for simulation and not from read dexter.
        //else if (ins_id == -1) {}
        else if (!(Array.isArray(robot_status))) {
            job_instance.stop_for_reason("errored",
                              "Serial.robot_done_with_instruction received a robot_status array: " +
                               robot_status + " that is not an array.");
            if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
            }
            rob.perform_instruction_callback(job_instance);
            return
        }
        else if (robot_status.length < Serial$1.DATA0){
            job_instance.stop_for_reason("errored",
                "Serial.robot_done_with_instruction received a robot_status array: " +
                robot_status + "<br/> of length: " + robot_status.length +
                " that is less than the : " + (Serial$1.DATA0 - 1) + " required.<br/>" + Utils.stringify_value(robot_status));
            if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
            }
            rob.perform_instruction_callback(job_instance);
            return
        }
        else {
            //job_instance.highest_completed_instruction_id = ins_id //now always done by set_up_next_do
            //job_instance.robot_status = robot_status
            rob.robot_status          = robot_status; //thus rob.robot_status always has the latest rs we got from Dexter.
            if (job_instance.keep_history){
                job_instance.rs_history.push(robot_status);
            }
            var error_code = robot_status[Serial$1.ERROR_CODE];
            if (error_code != 0){ //we've got an error
                job_instance.stop_for_reason("errored", "Robot status got error: " + error_code);
                if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                    job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
                }
                rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do()
            }
            else { //the normal, no error, not initial case
                if (job_instance.wait_until_instruction_id_has_run === ins_id){ //we've done it!
                    job_instance.wait_until_instruction_id_has_run = null;
                    if (ins_id == job_instance.program_counter) {
                        rob.perform_instruction_callback(job_instance);// job_instance.set_up_next_do() //note before doing this, pc might be on last do_list item.
                        //but that's ok. increment pc and call do_next_item.
                    }
                    else {
                        shouldnt("In job: " + job_instance.name +
                            " \n robot_done_with_instruction got ins_id: " + ins_id +
                            " \n which matched wait_until_instruction_id_has_run " +
                            " \n but the PC wasn't the same. Its: "  + job_instance.program_counter);
                    }
                }
                else { //instr coming back is not a wait for,
                    // so its just a non-last instr in a group, so we shouldn't call do_next_item for it
                    //and don't even set robot_status from it. May 2016 decided to set robot status
                    //and history ... see above. status and history should be consistent
                    //but still status can get into a race condition with user code so
                    //am not fond of setting it. ask kent.
                    rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do() //calling this is mostly a no-op, because
                    //job_instance.wait_until_instruction_id_has_run should be set to
                    //something higher than this instr coming back.
                    //BUT in case the user has stopped the job or another job does so,
                    //then calling do_next_item here would actually stop the job.
                    //so this call to do_next_item will at most get down to the
                    //this.wait_until_instruction_id_has_run clause but never further.
                }
            }
        }
    }

    close_robot(){
        serial_disconnect(this.path);
        this.is_connected = false;
    }

    //called when a job is finished.
    //returns true if no jobs are connected to this robot, false otherwise
    finish_job(){
        if(this.active_jobs_using_this_robot().length == 0) {
            this.close_robot(); //don't do as we may want to use this serial robot for some other job.
            return true        //nope. close_robot just like Dexter robot does.
                               //starting a job with this robot will reconnect the serial port
        }
        else { return false }
    }

    stringify(){
        return "Serial: <i>name</i>: "  + this.name           + ", " +
            ", <i>path</i>: "  + this.path  + ", <i>is_connected</i>: " + this.is_connected +
            Serial$1.robot_status_to_html(this.robot_status, " on robot: " + this.name)
    }

    static robot_status_to_html(rs, where_from){
        return where_from + " robot_status: " + rs
    }



} //end Serial class
globalThis.Serial = Serial$1;
Serial$1.all_names = [];
Serial$1.last_name = null;

Serial$1.robot_status_labels = [
    "JOB_ID",              // 0
    "INSTRUCTION_ID",      // 1
    "START_TIME",          // 2 //ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           // 3 //ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    // 4 //"oplet"

    "ERROR_CODE",          // 5   0 means no error.
    "DATA0",               // 6  data coming back from the board
    "DATA1",
    "DATA2",
    "DATA3",
    "DATA4",
    "DATA5",
    "DATA6",
    "DATA7",
    "DATA8",
    "DATA9"
];

Serial$1.robot_status_index_labels = [];
//its inefficient to have effectively 3 lists, but the sans-index list is good for
//short labels used in tables, and the index is nice and explicit
//for robot.robot_status[Dexter.foo_index] access
//The explicit Dexter.robot_status_index_labels is needed for a series.
Serial$1.make_robot_status_indices = function(){
    for(var i = 0; i < Serial$1.robot_status_labels.length; i++){
        var label = Serial$1.robot_status_labels[i];
        var index_label = "Series." + label; //+ "_INDEX"
        Serial$1[label] = i;
        Serial$1.robot_status_index_labels.push(index_label);
    }
};

Serial$1.make_robot_status_indices();

Serial$1.instruction_type_to_function_name_map = {
    I:"string_instruction" // "S" is used by Dexter and I isn't so use I just in case it helps in debugging.
};

Serial$1.string_instruction = function(instruction_string){
    if (typeof(instruction_string) != "string") {
        instruction_string = JSON.stringify(instruction_string);
    }
    return make_ins("I", instruction_string)
};

Serial$1.prototype.string_instruction = function(instruction_string){
    return new Instruction.Serial.string_instruction(instruction_string, this)
};

/*anticipate classes for Dexter2, etc.
//the pose matrix includes info on position and orientation
* */
class Dexter$1 extends Robot$1 {
    constructor({name = null,
                 simulate = null,
                 ip_address = null,
                 port = globalThis.default_default_dexter_port,
                 pose = Vector.identity_matrix(4),
                 enable_heartbeat=true,
                 instruction_callback = Job.prototype.set_up_next_do}={}){
        for(let key in arguments[0]){
            if(!["name", "simulate", "ip_address", "port", "pose", "enable_heartbeat", "instruction_callback"].includes(key)){
                dde_error("Attempt to create a Dexter with an invalid argument of: " + key +
                          "<br/>Click on 'Dexter' to see its valid argument names.");
            }
        }
        if(!name) {
            name = Dexter$1.generate_default_name();
        }
        if((name.length == 1) && (name >= "A") && (name <= "Z")){
           dde_error("While construction a Dexter robot named: " + name +
                     "<br/>Sorry, you can't name a Dexter with a single upper case letter.");
        }
        //on the job engine, ip_address is always localhost.
        //otherwise, its one ip number, even when node_server is localhost
        if(!ip_address) {
            ip_address = Dexter$1.compute_default_ip_address();
        }
        //ip_address = (globalThis.DDE_DB ? DDE_DB.persistent_get("default_dexter_ip_address") : globalThis.default_default_dexter_ip_address) }
        if(!port)       { port       = (globalThis.DDE_DB ? DDE_DB.persistent_get("default_dexter_port")       : globalThis.default_default_dexter_port); }

        let keyword_args = {name: name,
                            simulate: simulate,
                            ip_address: ip_address,
                            port: port,
                            pose: pose,
                            enable_heartbeat: enable_heartbeat,
                            instruction_callback: instruction_callback };
        let old_same_named_robot = Robot$1[name];
        if (old_same_named_robot){
           if ((old_same_named_robot.ip_address === ip_address) &&
               (old_same_named_robot.port       === port)){
               if (old_same_named_robot.active_jobs_using_this_robot().length > 0){
                    warning("There's already a robot with the name: " + name +
                             ", with same ip_address and port that has active jobs " +
                             " so that's being used instead of a new Dexter instance.");
                    return old_same_named_robot
               }
               else {
                   old_same_named_robot.close_robot();
                   super(keyword_args //arguments[0]
                   );
                   return this.make_new_robot(keyword_args)
               }
            }
            else {//old_same_named_robot is same_named but has different ip address
               if (old_same_named_robot.active_jobs_using_this_robot().length > 0){
                   dde_error("Attempt to create a robot named: " + name +
                            " but there is already robot with that name that has active jobs " +
                             " but a different ip_address and/or port.");
               }
               else {
                   old_same_named_robot.close_robot();
                   super(keyword_args //arguments[0]
                   );
                   return this.make_new_robot(keyword_args)
               }
           }
        }
        else {//there's no same-named robot
            let old_same_ip_address_robot = Dexter$1.get_robot_with_ip_address_and_port(ip_address, port);
            if (old_same_ip_address_robot){
                if (old_same_ip_address_robot.active_jobs_using_this_robot().length > 0){
                    dde_error("Attempt to create a robot named: " + name +
                            " but a robot named: " + old_same_ip_address_robot.name +
                            " is already using that ip_address and port and has active jobs.");
                }
                else {
                    old_same_ip_address_robot.close_robot();
                    super(keyword_args //arguments[0]
                     );
                    return this.make_new_robot(keyword_args)
                }
            }
            else {//different name, unused ip_address and port
                super(arguments[0]);
                return this.make_new_robot(keyword_args)
            }
        }
    }

    //used by Dexter constructor, ready.js and ready_je.js,
    // i.e. all the places that a Dexter's ip_address is defaulted.
    static compute_default_ip_address(){
        if (globalThis.platform === "node") {
            return "localhost"
        }
        else if (dde_running_in_cloud()) {
            return "192.168.1.142"
        }
        else if (globalThis.location && (globalThis.location.host === "localhost")) {
            let ip_addr = DDE_DB.persistent_get("default_dexter_ip_address");
            if (ip_addr) {
                return ip_addr
            }
            else {
                return "192.168.1.142"
            }
        }
        else { //not in job engine but node server is on dexter
            return globalThis.location.host
        }
    }

    static generate_default_name(){
        for(let i = 1; i < 1000000; i++) {
           let candidate_name = "dexter" + i;
           if(!Dexter$1[candidate_name]) {
                return candidate_name
           }
        }
        dde_error("When making an instance of Dexter,<br/>the first million default names are used.<br/> Probably something wrong.");
    }

    static class_init(){  //inits Dexter class as a whole. called by ready
        this.dexter_default_params =
            {name: "dex1",
             simulate: null,
             ip_address: null,
             port: null,
             pose: Vector.identity_matrix(4),
             enable_heartbeat: true,
             instruction_callback: Job.prototype.set_up_next_do
        };
    }

    toString(){ return "Dexter." + this.name }

    dexter_filepath(){
        if (operating_system == "win"){
            return "//" + this.ip_address + "/share"
        }
        else if (operating_system == "mac"){
            return "//" + this.ip_address + "/share" //probably wrong
        }
        else { //presume linux
            return "//" + this.ip_address + "/share" //probably wrong
         }
    }

    make_new_robot(keyword_args){
        this.name                  = keyword_args.name;
        this.ip_address            = keyword_args.ip_address;
        this.port                  = keyword_args.port;
        this.pose                  = keyword_args.pose;

        this.simulate              = keyword_args.simulate;
        this.instruction_callback  = keyword_args.instruction_callback;
        this.robot_status          = null; //now contains the heartbeat rs
        this.is_connected          = false;

        this.enable_heartbeat      = keyword_args.enable_heartbeat;
        this.waiting_for_heartbeat = false;
        this.heartbeat_timeout_obj = null;

        this.angles     = [0, 0, 0, 0, 0, 0, 0]; //used by move_to_relative, set by move_all_joints, move_to, and move_to_relative
        this.pid_angles = [0, 0, 0, 0, 0, 0, 0];
        //this.processing_flush = false //primarily used as a check. a_robot.send shouldn't get called while this var is true
        //this.busy_job_array = []
        Robot$1.set_robot_name(this.name, this);
        Dexter$1[this.name] = this; //see comment in Robot.set_robot_name
         //ensures the last name on the list is the latest with no redundancy
        let i = Dexter$1.all_names.indexOf(this.name);
        if (i != -1) {  Dexter$1.all_names.splice(i, 1); }
        Dexter$1.all_names.push(this.name);
        Dexter$1.last_robot = this;
        return this
    }

    start(job_instance){
        console.log("top of Dexter.start() for "+ job_instance.name);
        //let sim_actual = Robot.get_simulate_actual(this.simulate)
        //let this_robot = this
        //let this_job   = job_instance
        //if ([false, "both"].includes(sim_actual)){ //runnig in "real" not simulated.
              /*let ping = require('ping') //https://www.npmjs.com/package/ping
                ping.sys.probe(this.ip_address,
                                function(isAlive, err){
                                    if (isAlive) {
                                        if(job_instance.name == "set_link_lengths") { //don't attempt to set link lengths again!
                                            this_robot.start_aux(job_instance)
                                        }
                                        else { setTimeout(function(){
                                                            this_robot.set_link_lengths(this_job)
                                                          },
                                                          500)} //in case dexster is booting up, give it a chance to complete boot cycle
                                        //this_robot.use_ping_proxy(job_instance)
                                    }
                                    else if (err){
                                        this_job.stop_for_reason("errored_from_dexter_connect", "Ping on robot: " + this_robot.name + " errored with: " + err.message)
                                    }
                                    else {
                                        this_job.stop_for_reason("errored_from_dexter_connect", "Could not connect to Dexter.\nIf it is because Dexter is initializing,\ntry again in a minute,\nor click Misc pane 'simulate' button.", true)
                                        //3rd arg is true so that we will run the stop method for dex_read_file job,
                                        //so that this error of "not connected" will reset the orig editor files menu item.
                                    }
                                },
                               {timeout: 10}
                               )*/
          //new strategy: just let the socket interface test Dexter connectivity because ping fails on Linux
          //run same code for sim and real
        if(job_instance.name === "set_link_lengths") { //don't attempt to set link lengths again!
            this.start_aux(job_instance);
        }
        else {
            this.set_link_lengths(job_instance); //eventually calls start_aux
        }
        /*}
        else { //running in simulation
            if(job_instance.name == "set_link_lengths") { //don't attempt to set link lengths again!
                this_robot.start_aux(job_instance)
            }
            else {
                this_robot.set_link_lengths(this_job)
            }
        } //no actual connection to Dexter needed as we're only simulating, BUT
                                 //to keep similation as much like non-sim. due the same timeout.
       */
    }

    start_aux(job_instance) { //fill in initial robot_status
        console.log("top of Dexter.start_aux() for "+ job_instance.name);
        //give it a bit of time in case its in the process of initializing
        /*let connect_success_cb = function(){ //give robot a chance to get its socket before doing the initial "g" send.
                        const sim_actual = Robot.get_simulate_actual(this_robot.simulate)
                        if(!this_robot.is_initialized()){ //bad. stop the job
                            if (this_robot.simulate === true){
                                this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                    "<br/>\nwith simulate=true, but could not connect with the Dexter simulator.")
                            }
                            else if ((this_robot.simulate === false) || (this_robot.simulate === "both")){
                                this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                "<br/>but could not connect with a Dexter robot at: " +
                                this_robot.ip_address + " port: " + this_robot.port +
                                "<br/>You can change this robot to <code>simulate=true</code> and run it.")
                            }
                            else if (this_robot.simulate === null){
                                if ((sim_actual === false) || (sim_actual === "both")){
                                    this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                    '<br/>with the Misc Pane "Simulate?" radio button being: ' + sim_actual  +
                                    "<br/>but could not connect with Dexter." +
                                    "<br/>You can use the simulator by clicking 'simulate' in the Misc Pane header. ")
                                    out("Could not connect to Dexter.", "red")
                                }
                                else {
                                    this_job.stop_for_reason("errored_from_dexter_connect", "The job: " + this_job.name + " is using robot: " + this_robot.name +
                                              "<br/>\nwith a Jobs menu, 'Simulate?' value of 'true', " +
                                              "<br/>\nbut could not connect with the Dexter simulator.")
                                }
                            }
                            else {
                                shouldnt("Dexter.start got invalid simulate value of: " + this_robot.simulate +
                                         '.<br/>\nThe value values are: true, false, "both" and null.')
                            }

                        }
                        else { //good. normal case
                            //this_job.send(Dexter.get_robot_status(), this_robot)
                        } //the initial g stareting off the job
        }*/
        /* not needed if pass job_instance into Socket.init
             let connect_error_cb = function(){
             this_job.stop_for_reason("errored_from_dexter_connect",
                 "The job: " + this_job.name + " could not connect to Dexter." + this_robot.name)
        }
        this_robot.connect_error_cb = connect_error_cb*/
        let instruction_to_send_on_connect = Dexter$1.get_robot_status(); //the initial g instr
        instruction_to_send_on_connect[Instruction.JOB_ID]         = job_instance.job_id;
        instruction_to_send_on_connect[Instruction.INSTRUCTION_ID] = -1;
        instruction_to_send_on_connect[Instruction.START_TIME]     = Date.now();
        Socket.init(this.name, job_instance, instruction_to_send_on_connect);
    }

    static get_robot_with_ip_address_and_port(ip_address, port){
        for(let robot_name of Dexter$1.all_names){
            let dex = Robot$1[robot_name];
            if (dex.ip_address && //note: if we have 2 Dexter instances that have the default ip_address of null and port of 5000, then we DON'T want to call them "at the same ip_address"
               (dex.ip_address == ip_address) &&
               (dex.port == port)){
                return dex //there should be at most 1
            }
        }
        return null
    }

    //return true if it is, false if it isn't and null if can't tell
    is_calibrated(){
        let sim_actual = Robot$1.get_simulate_actual(this.simulate);
        if(sim_actual === true) { return true } //simulation is always calibrated
        else if(this.rs === undefined) { return null } //calibration unknown
        else if (this.rs.supports_measured_angles()) {
                for(let j_deg of this.rs.measured_angles()){ //gets joint angles 1 through 5
                    if(j_deg != 0) { return true } //is calibrated
                }
                return false //not calibrated, ie all joint angles are 0
        }
        else { return null }
    }

    //returns null if don't know (because no job yet run,
    //otherwise gets the latest robot status run on this dexter,
    //and sees if its pointing down and returns true or false.
    //so null (don't know) is presumed to be false,
    //which is good for Dexter UI's call to this fn.
    /*is_pointing_down(){
        if(!this.rs) { return null }
        let measured_angles = this.rs.measured_angles(7)
        let angles_to_make_dexter_point_down = Kin.point_down(measured_angles)
        for(let j = 0; j < 5; j++){
            if(measured_angles[j] !== angles_to_make_dexter_point_down[j]){
                return false
            }
        }
        return true
    }*/

    //returns null if don't know (because no job yet run,
    //otherwise gets the latest robot status run on this dexter,
    //and sees if its pointing in "direction" and returns true or false.
    is_direction(direction=[0, 0, -1], //pointing down
                 tolerance_in_deg=0.01){
        if(!this.rs) { return null } //meaning we don't know what direction its pointing
        else { return Kin.is_direction(this.rs.measured_angles(5)) }
    }

    //______phui_button processing
    is_phui_button_down(){
        if(!this.robot_status) { return false }
        else {
            return ((this.robot_status[Dexter$1.END_EFFECTOR_IO_IN] & 1) === 1)
        }
    }

    /* changed to an instance variable on Dexter instances, may 18, 2021
    waiting_for_flush_ack(){
        let rob = this
        let instr = rob.instruction_to_send_on_connect
        if(instr) {
            if(Array.isArray(instr)){
                if(instr[Instruction.INSTRUCTION_TYPE] === "F"){
                    return true }
                else { return false }
            }
            else if (typeof(instr) === "string") { //we have a string, pull the "F" out of the string.
               let str_parts = instr.split(" ")
               let oplet = str_parts[4]
               if(oplet.startsWith("F")) { //might have a semicolon in the oplet.
                    return true
               }
               else { return false }
            }
            else { return false }
        }
        else { return false }
    }*/

    set_robot_status(robot_status) {
        let old_robot_status_button_down = this.is_phui_button_down(); //do this first before setting robot_status
        this.robot_status = robot_status; //thus rob.robot_status always has the latest rs we got from Dexter.
        //the below use to happen only in dde, but may 2, 2022 changed it to happen always (on node/job_engine as well)
        if(this.rs) { this.rs.robot_status = robot_status; }
        else {
            this.rs = new RobotStatus({robot_status: robot_status});
        }
        //out("In set_robot_status for Job." + Job.job_id_to_job_instance(robot_status[Dexter.JOB_ID]).name +
        //    " Dexter." + this.name +
        //    " oplet: " + robot_status[Dexter.INSTRUCTION_TYPE] +
        //    " J1 angle: " + robot_status[Dexter.J1_MEASURED_ANGLE] +
        //    " measured_angles in rs: " + this.rs.measured_angles())
        let new_robot_status_button_down = this.is_phui_button_down(); //tricky. Not the same as 2 lines up!
        if((!old_robot_status_button_down) &&
            new_robot_status_button_down) {
            this.time_of_last_phui_button_click_ms = Date.now();
        }
    }
    clear_time_of_last_phui_button_click_ms(){
        this.time_of_last_phui_button_click_ms = null;
    }

    /*candidate names:
    //phui_button_clicked
    //was_phui_button_clicked
    //was_phui_button_down
    //phui_button_clicked_but_not_processed
    This is the main fn called by job authors.
    It returns true if the phui button was pressed down since the
    last time this fn was called. THUS its an async input,
    so that the job author doesn't "miss" calling is_phui_button_down
    by not calling it at exactly the right time.
    */
    was_phui_button_down(){
        if(this.time_of_last_phui_button_click_ms) {
            this.clear_time_of_last_phui_button_click_ms();
            return true
        }
        else { return false }
    }
    seconds_since_phui_button_clicked(){
        if(!this.time_of_last_phui_button_click_ms) {
            return null
        }
        else {
            return (Date.now() - this.time_of_last_phui_button_click_ms) / 1000
        }
    }
    //end phui button processing

    run_heartbeat(){
        let this_dex = this;
        this.heartbeat_timeout_obj =
          setTimeout(function(){
            if (this_dex.finish_job()) ;
            else if (this_dex.waiting_for_heartbeat){ //stop recursive timeout
                //out("Dexter " + this_dex.name + " did not receive a response to the heartbeat. Stopping Job.")
                //this_dex.is_connected      = false //should be done by stop_for_reaason and next item
                //this_dex.socket_id         = null  //should be done by stop_for_reaason and next item
                for (let job_instance of this.active_jobs_using_this_robot()){
                    job_instance.stop_for_reason("errored_from_dexter", "No heartbeat response from dexter hardware.");
                    job_instance.do_next_item();
                }
            }
            else if (this_dex.enable_heartbeat) { //everything ok. Note: user might disable heartbeat during a job so check here.
                let h_ins = Dexter$1.get_robot_status_heartbeat();
                let job_instance = this_dex.active_jobs_using_this_robot()[0];
                h_ins[Instruction.JOB_ID] = job_instance.job_id;
                h_ins[Instruction.INSTRUCTION_ID] = -4;
                this_dex.send(h_ins); //heartbeat associated with the last job created using this robot as its robot.
                this.waiting_for_heartbeat = true;
                this_dex.run_heartbeat();
            }
        }, Dexter$1.heartbeat_dur);
    }

    //called when a job is finished.
    //returns true if no jobs are connected to this robot, false otherwise
    finish_job(){
        if(this.active_jobs_using_this_robot().length == 0) {
            this.close_robot();
            return true
        }
        else { return false }
    }

    close_robot(){
        //out("top of Dexter.close_robot")
        //setTimeout(function(){
        //out("top of timeout fn Dexter.close_robot")
        clearTimeout(this.heartbeat_timeout_obj); //looks like not working
        this.waiting_for_heartbeat = false;
        this.heartbeat_timeout_obj = null;
        this.is_connected          = false;
        Socket.close(this.name, false); //must be before setting socket_id to null
        // delete Dexter[this.name] //don't do this. If the robot is still part of a Job,
        //and that job is inactive, then we can still "restart" the job,
        //and as such we want that binding of Robot.this_name to still be around.
        //}, 5000)
    }

    /* causes DexRun to crash. re-inswtate when FPGA code rewriten to support this
    empty_instruction_queue_now(){
        Socket.empty_instruction_queue_now(this.name)
    }*/

    //Dexter  ins_array can be an oplet array or a raw string
    send(oplet_array_or_string){
        //var is_heartbeat = ins_array[Instruction.INSTRUCTION_TYPE] == "h"
        //let oplet = Instruction.extract_instruction_type(oplet_array_or_string)
        /*if (oplet === "F") { this.processing_flush = true } //ok even if flush is already true. We can send 2 flushes in a row if we like, that's ok. essentially only 1 matters
        if (this.processing_flush && (oplet !== "F")) {
            shouldnt(this.name + ".send called with oplet: " + oplet +
                     ", but " + this.name + ".processing_flush is true so send shouldn't have been called.")
        }*/
        //note: we send F instructions through the below.
        Socket.send(this.name, oplet_array_or_string);
    }

    perform_instruction_callback(job_instance){
        if (this.instruction_callback) { this.instruction_callback.call(job_instance); }
    }
    stringify(){
        return "Dexter: <i>name</i>: "  + this.name           +
               ", <i>ip_address</i>: "  + this.ip_address     + ", <i>port</i>: "         + this.port         + ",<br/>" +
               "<i>connectivity</i> "   + ", <i>is_connected</i>: " + this.is_connected + ", <i>waiting_for_heartbeat</i>: " + this.waiting_for_heartbeat +
               Dexter$1.robot_status_to_html(this.robot_status, " on robot: " + this.name)
    }

    ///called from Socket in ui
    static set_a_robot_instance_socket_id(robot_name){
        let rob          = Dexter$1[robot_name];
        //rob.socket_id    = socket_id
        rob.is_connected = true;
        //out("bottom of set_a_robot_instance_socket_id with rob.name: " + rob.name + " rob.is_connected: " + rob.is_connected)
    }

    //is_initialized(){ return ((this.socket_id || (this.socket_id === 0)) ? true : false ) }

    is_initialized(){
        //out("is_initialized() returning: " + this.is_connected)
       return this.is_connected
    }

    //Class: Dexter
    //beware, robot_status could be an ack, can could be called by sim or real
    //but if sim is "both", will only be called by real (from socket)
    robot_done_with_instruction(robot_status){ //called from UI sockets
        let job_id       = robot_status[Dexter$1.JOB_ID];
        let job_instance = Job.job_id_to_job_instance(job_id);
        let ins_id       = robot_status[Dexter$1.INSTRUCTION_ID]; //-1 means the initiating status get, before the first od_list instruction
        let oplet        = robot_status[Dexter$1.INSTRUCTION_TYPE];
        let error_code   = robot_status[Dexter$1.ERROR_CODE];
        let rob          = this; //job_instance.robot
        if(oplet === "F") {
            rob.waiting_for_flush_ack = false;
        }
        if (!(Array.isArray(robot_status))) { //note: we have to error here because we can't get the job
            //so we can't call stop_for_reason
            job_instance.stop_for_reason("errored_from_dexter",
                                 "Dexter.robot_done_with_instruction received a robot_status array: " +
                                  robot_status + " that is not an array.");
            job_instance.wait_until_instruction_id_has_run = null;
            //this.remove_from_busy_job_array(job_instance)
            job_instance.set_up_next_do(0);
            return
        }
        //rob.robot_status = robot_status //beware, is possibly the wrong length, but if so we're going to error, so might as well have that bad robot_status accessible for debugging
        rob.set_robot_status(robot_status); //makes RobotStatus updated too
        if (job_instance == null){
            shouldnt("In robot_done_with_instruction, got job_id: " + job_id +
                     " which does not refer to a valid Job instance.<br/>" +
                     "robot_status: " + robot_status);
        }
        else if (robot_status.length < Dexter$1.robot_status_labels.length){ //allows when_stopped action to run if any
            //if its longer than 60, ie 120, then we got 2 robot status's back.
            //just use the first 60 from the array.
            job_instance.condition_when_stopped = "errored_from_dexter";
            job_instance.stop_for_reason("errored_from_dexter",
                "Dexter.robot_done_with_instruction received a robot_status array: " +
                robot_status + "<br/> of length: " + robot_status.length +
                " that is not the proper length of: " + Dexter$1.robot_status_labels.length);
            job_instance.wait_until_instruction_id_has_run = null;
            job_instance.set_up_next_do(0);
            return
        }
        /*else if (job_instance.wait_until_instruction_id_has_run !== ins_id){
            job_instance.stop_for_reason("errored_from_dexter",
                "Dexter.robot_done_with_instruction received a robot_status array with an instruction_id of: " + ins_id +
                "<br/> but expected: " + job_instance.wait_until_instruction_id_has_run)
            job_instance.wait_until_instruction_id_has_run = null
            job_instance.set_up_next_do(0)
            return
        }*/
        else if((error_code !== 0) && (oplet !== "r")){ //we've got an error
                //job_instance.stop_for_reason("errored", "Robot status got error: " + error_code)
            job_instance.wait_until_instruction_id_has_run = null; //but don't increment PC
            //let busy_job_array_copy = rob.busy_job_array.slice()
            //rob.clear_busy_job_array() //so that the other jobs that I call set_up_next_do, won't hang up because they are busy,
            //because they no longer should be busy, because we got back our ack from Dexter that was keeping them busy,
            /*for(let busy_job of busy_job_array_copy){
                if(busy_job === job_instance) {} //let this pass through to the below as the passed in robot_status is from this instrr and this job_instance
                else {
                    busy_job.set_up_next_do(0) //now execute the instr at the PC in an OTHER job, without advancing it.
                    return
                }
            }*/
            let instruction_to_run_when_error = job_instance.if_robot_status_error; //.call(job_instance, robot_status)
            if(instruction_to_run_when_error){
                //note instruction_to_run_when_error can be a single instruction or an array
                //of instructions. If its an array, we insert it as just one instruction,
                //and that will cause all to be run.
                job_instance.insert_single_instruction(instruction_to_run_when_error);
            }
            rob.perform_instruction_callback(job_instance); //job_instance.set_up_next_do()
            return
        }

        if(Waiting.is_job_waiting_for_dexter(job_instance, this)){
            Waiting.clear_job_and_dexter(job_instance, this);
        }
        else {
            shouldnt("In Dexter.robot_done_with_instruction, recieved job: " +
                      job_instance.name + " and robot: " + this.name + " and oplet: " + oplet +
                      " that were unexpected.");
        }
        /*
        job_instance.wait_until_instruction_id_has_run = null
        let busy_job_array_copy = rob.busy_job_array.slice()
        rob.clear_busy_job_array() //so that the other jobs that I call set_up_next_do, won't hang up because they are busy,
         //because they no longer should be busy, because we got back our ack from Dexter that was keeping them busy,
        for(let busy_job of busy_job_array_copy){
            if(busy_job === job_instance) {} //let this pass through to the below as the passed in robot_status is from this instr and this job_instance
            else {
               busy_job.set_up_next_do(0) //now execute the instr at the PC in an OTHER job, without advancing it.
               return
            }
        }*/
        if ((error_code !== 0) && (oplet === "r")){ //we have an error but its "file not found" handled specially
             //Dexter.read_file errored, assuming its "file not found" so end the rfr loop and set the "content read" as null, meaning file not found
                //the below setting of the user data already done by got_content_hunk
                //let rfr_instance = Instruction.Dexter.read_file.find_read_file_instance_on_do_list(job_instance, ins_id)
                // job_instance.user_data[ins.destination] = null //usually means "file not found"
                //rfr_instance.is_done = true
                this.perform_instruction_callback(job_instance); //calls set_up_next_do(1) but we want 0, because we want to give the Dexter.read_file instance code a chance to clean up before ending its loop
                //job_instance.set_up_next_do(0)
                return
        }
        if (oplet === "h") { //we got heartbeat acknowledgement of reciept by phys or sim so now no longer waiting for that acknowledgement
            rob.waiting_for_heartbeat = false;
            return
        }
        let stop_time    = Date.now(); //the DDE stop time for the instruction, NOT Dexter's stop time for the rs.
        job_instance.record_sent_instruction_stop_time(ins_id, stop_time);
       // if (!rob.is_connected) {} //ignore any residual stuff coming back from dexter
        //we don't want to change robot_status for instance because that will confuse
        //debugging in the case that we've had an error and want to close.
        //on the other hand, we want accurate info. Hmm, maybe the "residual" is
        //only comming for simulation and not from read dexter.
        //else if (ins_id == -1) {}
     // else {
        if (job_instance.keep_history &&
            ((oplet === "g") || //don't do it for oplet "G", get_robot_status_immediate
              (oplet === "F")   //added in dde4
            )){
                job_instance.rs_history.push(robot_status);
        }
        if(globalThis.platform === "dde"){
            RobotStatusDialog.update_robot_status_table_maybe(rob); //if the dialog isn't up, this does nothing
        }

        if (job_instance.status_code === "starting") { //at least usually ins_id is -1
            job_instance.set_status_code("running");
            //pass robot_status because we *might* not be keeping it in the history
            //rob.perform_instruction_callback(job_instance)
            //if(job_instance.dont_proceed_after_initial_g) {//used by MakeInstruction
            //    MiRecord.start_is_done_with_initial_g_and_paused(job_instance)
            //}
            job_instance.set_up_next_do(0);//we've just done the initial g instr, so now do the first real instr. PC is already pointing at it, so don't increment it.
        }
        else if ((job_instance.status_code === "stopping") && (oplet === "F")){
            job_instance.stop_for_reason("interrupted", "Completed Dexter.empty_instruction_queue after user stopped the Job.");
            rob.perform_instruction_callback(job_instance);
        }
        else if (ins_id === job_instance.program_counter) { //the normal case.
            rob.perform_instruction_callback(job_instance);// job_instance.set_up_next_do() //note before doing this, pc might be on last do_list item.
                    //but that's ok. increment pc and call do_next_item.
        }
        else {
            shouldnt("In job: " + job_instance.name +
                " \n robot_done_with_instruction got ins_id: " + ins_id +
                " \n which matched wait_until_instruction_id_has_run " +
                " \n but the PC wasn't the same. Its: "  + job_instance.program_counter);
        }
    }

    //Dexter busy
    /*clean_up_busy_job_array(){
       let result = []
       for(let a_job of this.busy_job_array){
            if(a_job.is_active()) { //remove inactive jobs from busy_job_array by preserviong the still active ones
                if(!result.includes(a_job)) { //remove duplicates
                    result.push(a_job)
                }
            }
       }
       this.busy_job_array = result
    }

    //returns true or false
    is_busy(){
        this.clean_up_busy_job_array()
        return (this.busy_job_array.length > 0)
    }

    add_to_busy_job_array(a_job){
        if(!this.busy_job_array.includes(a_job)){
            this.busy_job_array.push(a_job)
        }
    }

    remove_from_busy_job_array(a_job){
        let i = this.busy_job_array.indexOf(a_job)
        if(i >= 0) { this.busy_job_array.splice(i, 1) }
    }

    //called when a job is finished. Note that we might have a
    //job that has, say a brain default robot but has instructions that are sent to a Dexter,
    //and Job.send still adds its Job to the busy_job_array of a Dexter,
    //so we better remove it from all Dexters' busy_job_array
    static remove_from_busy_job_arrays(a_job) {
        for(let dex_name of Dexter.all_names){
            let dex = Dexter[dex_name]
            dex.remove_from_busy_job_array(a_job)
        }
    }

    clear_busy_job_array(){
        this.busy_job_array = []
    }*/
    //end robot_busy

    //Robot status accessors (read only for users)
    joint_angle(joint_number=1){
        switch(joint_number){
            case 1: return this.robot_status[Dexter$1.J1_MEASURED_ANGLE]
            case 2: return this.robot_status[Dexter$1.J2_MEASURED_ANGLE]
            case 3: return this.robot_status[Dexter$1.J3_MEASURED_ANGLE]
            case 4: return this.robot_status[Dexter$1.J4_MEASURED_ANGLE]
            case 5: return this.robot_status[Dexter$1.J5_MEASURED_ANGLE]
            default:
                dde_error("You called Robot." + this.name + ".joint_angle(" + joint_number + ")" +
                          " but joint_number must be 1, 2, 3, 4, or 5.");
        }
    }

    joint_angles(){
        let rs = this.robot_status;
        return [rs[Dexter$1.J1_MEASURED_ANGLE], rs[Dexter$1.J2_MEASURED_ANGLE], rs[Dexter$1.J3_MEASURED_ANGLE], rs[Dexter$1.J4_MEASURED_ANGLE], rs[Dexter$1.J5_MEASURED_ANGLE]]
    }

    joint_xyz(joint_number=5){
        let xyzs = this.joint_xyzs(); //note the first elt is the pos of the base, defaulting to 0,0,0
        return xyzs[joint_number]
    }
    joint_xyzs(){ //todo ask James about this
        return Kin.forward_kinematics(this.joint_angles(), this.pose)[0]
    }

    move_all_joints_fn(angle_array=Dexter$1.HOME_ANGLES, set_default_speed_first = true){
        let is_home_angles = Utils.similar(angle_array, Dexter$1.HOME_ANGLES);
        let do_list = [];
        if(set_default_speed_first) { do_list.push(make_ins("S", "MaxSpeed", 25)); }
        do_list.push(Dexter$1.move_all_joints(angle_array));
        if(is_home_angles) {
            do_list.push(Dexter$1.pid_move_all_joints([0, 0, 0, 0, 0])); //only do 5 joints here. let the angle_array's version of j6 and j7 dictate their movvement.
            do_list.push(Dexter$1.empty_instruction_queue());
        }
        new Job({name: "job_00", robot: this,
                 do_list: do_list}).start();
    }

    move_to_fn(xyz=[0,0,0], set_default_speed_first = true){
        let job_00;
        if (set_default_speed_first) {
            job_00 = new Job({name: "job_00", robot: this,
                              do_list: [make_ins("S", "MaxSpeed", 25),
                                        Dexter$1.move_to(xyz)
                                        ]
                     });
        }
         else {
            job_00 = new Job({name: "job_00", robot: this,
                              do_list: [Dexter$1.move_to(xyz)]
                     });
         }
        job_00.start();
    }
    run_instruction_fn(instr){
        if(Job.run_instruction && Job.run_instruction.is_active()){
            Job.run_instruction.stop_for_reason("interrupted", "run_instruction_fn is redefining this job.");
        }
        new Job({name: "run_instruction",
            robot: this,
            do_list: [instr]
        });
        Job.run_instruction.start();
    }
    /* The below is a smarter version of run_instruction_fn that just defines job_00 once,
       leaves it running and just adds the instruction to it the 2nd through nth times
       its called. BUT this screws up if you are toggleing between
       running an instruction and running a regular job because the job_oo uses up the robot.
       So to avoid that interferance, I've gone back to just
       defining job_00 each time this fn is called and starting the job as above.
    run_instruction_fn(instr){
        let the_job = Job.job_00
        if (!the_job) { //job has yet to be defined in this session of dde, so define it
            the_job = new Job({name: "job_00",
                               robot: this,
                               when_do_list_done: "wait"})
        }
        if (!the_job.is_active()) { //job is defined but is not running so start it. Might be brand new or might have just stopped
            the_job.start()
        }
        Job.insert_instruction(instr, //finally add in the instr to run.
                               {job: "job_00",
                                offset: "end"})
        //now job_00 is just waiting for another instruction to be passed to it.
    }*/
}
globalThis.Dexter = Dexter$1;

Dexter$1.all_names = [];
Dexter$1.last_robot = null; //last Dexter defined.

Dexter$1.heartbeat_dur = 100; //milliseconds

//_______series robot_config ______
Dexter$1.LEFT            = [0, null, null];
Dexter$1.LEFT_DOWN       = [0, 0,    null];
Dexter$1.LEFT_UP         = [0, 1,    null];
Dexter$1.LEFT_IN         = [0, null, 0];
Dexter$1.LEFT_OUT        = [0, null, 1];
Dexter$1.LEFT_DOWN_IN    = [0, 0,    0];
Dexter$1.LEFT_DOWN_OUT   = [0, 0,    1];
Dexter$1.LEFT_UP_IN      = [0, 1,    0];
Dexter$1.LEFT_UP_OUT     = [0, 1,    1];

Dexter$1.RIGHT           = [1, null, null];
Dexter$1.RIGHT_DOWN      = [1, 0,    null];
Dexter$1.RIGHT_UP        = [1, 1,    null];
Dexter$1.RIGHT_IN        = [1, null, 0];
Dexter$1.RIGHT_OUT       = [1, null, 1];
Dexter$1.RIGHT_DOWN_IN   = [1, 0,    0];
Dexter$1.RIGHT_DOWN_OUT  = [1, 0,    1];
Dexter$1.RIGHT_UP_IN     = [1, 1,    0];
Dexter$1.RIGHT_UP_OUT    = [1, 1,    1];

Dexter$1.DOWN            = [null, 0, null];
Dexter$1.DOWN_IN         = [null, 0, 0];
Dexter$1.DOWN_OUT        = [null, 0, 1];
Dexter$1.UP              = [null, 1, null];
Dexter$1.UP_IN           = [null, 1, 0];
Dexter$1.UP_OUT          = [null, 1, 1];

Dexter$1.IN              = [null, null, 0];
Dexter$1.OUT             = [null, null, 1];


//__________INSTRUCTIONS______________

//Dexter.make_ins = make_ins //now inited by on_ready
Dexter$1.capture_ad               = function(...args){ return make_ins("c", ...args) };
Dexter$1.prototype.capture_ad     = function(...args){ args.push(this); return Dexter$1.capture_ad(...args) };

Dexter$1.capture_points           = function(...args){ return make_ins("i", ...args) };
Dexter$1.prototype.capture_points = function(...args){ args.push(this); return Dexter$1.capture_points(...args) };

Dexter$1.cause_error              = function(error_code=1){ return make_ins("e", error_code) }; //fry made up. useful for testing
Dexter$1.prototype.cause_error    = function(error_code=1){ return make_ins("e", error_code, this) };

Dexter$1.draw_dxf;   //set to DXF.dxf_to_instructions in ready.js
Dexter$1.prototype.draw_dxf; //set in ready.js

Dexter$1.dummy_move = function(){
    let CMD = [];
    CMD.push(function(){return Dexter$1.get_robot_status()});
    CMD.push(function(){
        let rs = this.robot.robot_status; //Dexter.my_dex.robot_status
        let J_angles = [rs[Dexter$1.J1_MEASURED_ANGLE], rs[Dexter$1.J2_MEASURED_ANGLE], rs[Dexter$1.J3_MEASURED_ANGLE], rs[Dexter$1.J4_MEASURED_ANGLE], rs[Dexter$1.J5_MEASURED_ANGLE]];
        return Dexter$1.move_all_joints(J_angles)
    });
    return CMD
};

Dexter$1.prototype.dummy_move = function(){
    let robot = this;
    let CMD = [];
    CMD.push(function(){return robot.get_robot_status()});
    CMD.push(function(){
        let rs = robot.robot_status; //Dexter.my_dex.robot_status
        let J_angles = [rs[Dexter$1.J1_MEASURED_ANGLE], rs[Dexter$1.J2_MEASURED_ANGLE], rs[Dexter$1.J3_MEASURED_ANGLE], rs[Dexter$1.J4_MEASURED_ANGLE], rs[Dexter$1.J5_MEASURED_ANGLE]];
        return robot.move_all_joints(J_angles)
    });
    return CMD
};

//Dexter.run_gcode_workspace_pose_default = Vector.make_pose([0, 0.5, 0.1], [0, 0, 0], _mm)

Dexter$1.prototype.run_gcode = function({gcode = "",
                                       filepath = null,
                                       workspace_pose = Vector.make_pose([0, 0.5, 0.1], [0, 0, 0], _mm)}){
    return Dexter$1.run_gcode({gcode: gcode,
                             filepath:filepath,
                             workspace_pose: workspace_pose,
                             robot: this})
};

Dexter$1.run_gcode      = function({gcode = "", filepath = null, workspace_pose = Vector.make_pose([0, 0.5, 0.1], [0, 0, 0], _mm), robot=Dexter$1}){
                             return function(){
                                return Gcode.gcode_to_instructions({gcode: gcode,
                                                                    filepath: filepath,
                                                                    workspace_pose: workspace_pose,
                                                                    robot: robot,
                                                                    the_job: this})
                            }
                        };

Dexter$1.dma_read           = function(...args){ return make_ins("d", ...args) };
Dexter$1.prototype.dma_read = function(...args){ args.push(this); return Dexter$1.dma_read(...args) };

Dexter$1.dma_write           = function(...args){ return make_ins("t", ...args) };
Dexter$1.prototype.dma_write = function(...args){ args.push(this); return Dexter$1.dma_write(...args) };

Dexter$1.exit           = function(...args){ return make_ins("x", ...args) };
Dexter$1.prototype.exit = function(...args){ args.push(this); return Dexter$1.exit(...args) };


Dexter$1.empty_instruction_queue_immediately = function(){
        //return make_ins("E")
        let num = Instruction.w_address_name_to_number("RESET_PID_AND_FLUSH_QUEUE");
        if(num >= 0) {
            return [ Dexter$1.write_fpga(num, 1), //this flushes the queue
                     Dexter$1.write_fpga(num, 0)  //this resets the ode to normal so Dexter can accept new instructions
                   ]
        }
        else {
            shouldnt("Dexter.empty_instruction_queue_immediately could not find w name: RESET_PID_AND_FLUSH_QUEUE.");
        }
};
Dexter$1.prototype.empty_instruction_queue_immediately = function(...args){ args.push(this); return Dexter$1.empty_instruction_queue_immediately(...args) };

Dexter$1.empty_instruction_queue = function(...args) {
    return make_ins("F", ...args)
};
Dexter$1.prototype.empty_instruction_queue = function(){  return Dexter$1.empty_instruction_queue(this) };

Dexter$1.find_index           = function(...args){ return make_ins("n", ...args) };
Dexter$1.prototype.find_index = function(...args){ args.push(this); return Dexter$1.find_index(...args) };


//dec 6, 2020: this gives us backwards compatibility of
//Dexter.get_robot_status()
//Dexter.get_robot_status(rob)
//and also allows for
//Dexter.get_robot_status(1)
//Dexter.get_robot_status(rob)
//Dexter.get_robot_status(1, rob)
//Dexter.get_robot_status(null, rob)
Dexter$1.get_robot_status = function(status_mode = null){
                                if(typeof(status_mode) === "number") {
                                    return make_ins("g", status_mode)
                                }
                                else if((status_mode === null) || (status_mode === undefined)) {
                                    return make_ins("g")
                                }
                                else {
                                    dde_error("Dexter.get_robot_status called with invalid status mode: " +
                                               status_mode +
                                               "<br/>The valid status_modes are null or non-negative integers, usually 0 or 1.");
                                }
};

//must be different from Dexter.get_robot_status. See commment in Instruction.Dexter.get_robot_statu
Dexter$1.prototype.get_robot_status = function(status_mode = null){
                                        if((typeof(status_mode) != "number") &&
                                            (status_mode !== null)){
                                            dde_error("Dexter.get_robot_status called with invalid status mode: " +
                                                       status_mode +
                                                       "<br/>The valid status_modes are null or non-negative integers, usually 0 or 1.");
                                        }
                                        else {
                                            return new Instruction.Dexter.get_robot_status(status_mode, this)
                                        }
};


    //this forces do_next_item to wait until robot_status is
    //updated before it runs any more do list items.
Dexter$1.get_robot_status_heartbeat           = function(){ return make_ins("h") };//never called by user do_list items. Only called by system
Dexter$1.prototype.get_robot_status_heartbeat = function(){ return Dexter$1.get_robot_status_heartbeat(this) };

Dexter$1.get_robot_status_immediately           = function(){ return make_ins("G") }; //deprecated
Dexter$1.prototype.get_robot_status_immediately = function(){ return Dexter$1.get_robot_status_immediately(this) }; //deprecated

//pass in an array of up to 5 elts OR up to 5 separate args.
//If an arg is not present or null, keep the value now in dexter_status unchanged.
//EXCEPT if no args passed in, set to home position.
Dexter$1.load_tables     = function(...args){ return make_ins("l", ...args) }; //
//loads the data created from calibration onto the SD card for persistent storage.
Dexter$1.prototype.load_tables = function(...args){ args.push(this); return Dexter$1.load_tables(...args) };


Dexter$1.joint_to_servo_number_map = {6: 3, 7: 1};
Dexter$1.joint_to_servo_number = function(joint_number){
    return Dexter$1.joint_to_servo_number_map[joint_number]
};
Dexter$1.servo_to_joint_number = function(servo_number){
    for(let a_joint_number in Dexter$1.joint_to_servo_number_map){
       let a_servo_number = Dexter$1.joint_to_servo_number_map[a_joint_number];
       if(a_servo_number === servo_number) { return parseInt(a_joint_number) }
    }
    return undefined
};
//the instruction
Dexter$1.reboot_joints = function(joint_number_array="all"){
   if(joint_number_array === "all") {
       joint_number_array = Object.getOwnPropertyNames(Dexter$1.joint_to_servo_number_map);
       for(let i = 0; i < joint_number_array.length; i++){
           joint_number_array[i] =  parseInt(joint_number_array[i]);
       }
   }
   let instrs = [];
   for(let joint_number of joint_number_array){
       instrs.push(
            Dexter$1.set_parameter("RebootServo", Dexter$1.joint_to_servo_number(joint_number)));
       instrs.push(Dexter$1.sleep(1)); //sleep for 1 sec to allow dynamixel bus to settle
   }
   return instrs
};

Dexter$1.prototype.reboot_joints = function(joint_number_array="all"){
    if(joint_number_array === "all"){
        joint_number_array = Object.getOwnPropertyNames(Dexter$1.joint_to_servo_number_map);
        for(let i = 0; i < joint_number_array.length; i++){
            joint_number_array[i] =  parseInt(joint_number_array[i]);
        }
    }
    let instrs = [];
    for(let joint_number of joint_number_array){
        instrs.push(
            this.set_parameter("RebootServo", Dexter$1.joint_to_servo_number(joint_number)));
        instrs.push(this.sleep(1)); //sleep for 1 sec to allow dynamixel bus to settle
    }
    return instrs
};

//the function
Dexter$1.prototype.reboot_joints_fn = function (){
    new Job({name: "reboot_joints",
        robot: new Brain$1({name: "brain_reboot_joints"}),
        do_list: [
            //Dexter.set_parameter("RebootServo", 1), //reset J7 SPAN
            //Dexter.sleep(1), //give the servo time to reset.
            //Dexter.set_parameter("RebootServo", 3), //reset J6 ROLL
            //Dexter.sleep(1) //give the servo time to reset.
            this.reboot_joints()
        ]
    }).start();
};

Dexter$1.reboot_dexter_default_cb = function(){
    Job.reboot_dexter.stop_for_reason("completed", "Dexter done rebooting.");
    out("Dexter." + Dexter$1.default.name + " rebooted.");
};

//the job will "hang" on running because the make_ins instruction will
//not get a robot status back.
Dexter$1.prototype.reboot_dexter = function(callback=Dexter$1.reboot_dexter_default_cb) {
    new Job({name: "reboot_dexter",
        robot: this,
        do_list: [
            function() { setTimeout(callback, (3 * 60 * 1000)); }, //3 minutes timeout to start next job
            make_ins("r 0 ` reboot")
        ]
    }).start();
};


//Dexter.make_ins = make_ins this is below due to loading order issues

Dexter$1.prototype.make_ins = function(instruction_type, ...args){
    args = new Array(...args);
    args.unshift(instruction_type);
    args.push(this);
    return make_ins.apply(null, args)
};

Dexter$1.move_home = function(){ //move straight up
    return Dexter$1.move_all_joints(Dexter$1.HOME_ANGLES)
};
Dexter$1.prototype.move_home = function(){
    return this.move_all_joints(Dexter$1.HOME_ANGLES)
};

Dexter$1.check_joint_limits = false;

//similar to Kin.check_J_ranges except returns string if out of range,
//and false if in range whereas Kin.check_J_ranges returns true if
//in range and false otherwise.
Dexter$1.joints_out_of_range = function(J_angles, dexter_inst){
    if (!Dexter$1.check_joint_limits) { return false }
    else {
        let lower_limit;
        let upper_limit;
        if(dexter_inst instanceof Dexter$1) {
            lower_limit = [dexter_inst.J1_angle_min, dexter_inst.J2_angle_min, dexter_inst.J3_angle_min, dexter_inst.J4_angle_min, dexter_inst.J5_angle_min];
            upper_limit = [dexter_inst.J1_angle_max, dexter_inst.J2_angle_max, dexter_inst.J3_angle_max, dexter_inst.J4_angle_max, dexter_inst.J5_angle_max];
        }
        else {
            lower_limit = [Dexter$1.J1_ANGLE_MIN, Dexter$1.J2_ANGLE_MIN, Dexter$1.J3_ANGLE_MIN, Dexter$1.J4_ANGLE_MIN, Dexter$1.J5_ANGLE_MIN];
            upper_limit = [Dexter$1.J1_ANGLE_MAX, Dexter$1.J2_ANGLE_MAX, Dexter$1.J3_ANGLE_MAX, Dexter$1.J4_ANGLE_MAX, Dexter$1.J5_ANGLE_MAX];
        }
        for(var i = 0; i < J_angles.length; i++){
            let angle = J_angles[i];
            if(angle == null) ;
            else if (angle < lower_limit[i]){
                return "Joint " + (i + 1) + " with angle: " + angle + "\nis less than the minimum: " + lower_limit[i]
            }
            else if (angle > upper_limit[i]){
                return "Joint " + (i + 1) + " with angle: " + angle + "\nis more than the maximun: " + upper_limit[i]
            }
        }
        return false
    }
};

//take the actual args passed to maj (sans a possible robot at the end) and
//convert them into an array for further processing
//this always returns an array, and it is an array of angles (or nested array of 1 number for rel angle.
//array will be between 1 and  7 long inclusive.
//elts can be number or NaN
Dexter$1.convert_maj_angles = function(args_array, instruction_name=""){
      let result;
      if(args_array.length == 1){ //user is only setting J1.
          let first_elt = args_array[0];
          if(Array.isArray(first_elt)){ //This could POSSIBLY be user intending to pass one *relative* joint angle for j1
                                        //but lets presume not.
                                        //but if first_elt is a number or an array of 1 number,
                                        //that's ok, return turn it
              result = first_elt; //user passed in an array, use it as the array for the angles.
          }
          else { //only one arg and its not an array, (probably a number) so stick it in an array and we're done.
              result = [first_elt];
          }
      }
      else { // > 1 elt, so all those elts are in an array
          result =  args_array;
      }
      //get rid of undefineds and NaN's on the end down to joint 5.
      for(let i = result.length - 1; i > 4; i--){
            let ang = result[i];
            if ((ang === undefined) || Number.isNaN(ang)) {
                result.pop();
            }
       }
       if (result.length > 7){
          warning("You are creating a " + instruction_name + " instruction with more than 7 angles:<br/>" +
                   args_array + "<br/>" +
                  "Usually 7 is the maximum.");
       }
       return result
};

Dexter$1.prototype.move_all_joints = function(...array_of_angles) {
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "move_all_joints");
    return new Instruction.Dexter.move_all_joints(array_to_use, this)
};

Dexter$1.move_all_joints = function(...array_of_angles){
    let robot = null;
    if (last(array_of_angles) instanceof Dexter$1) {robot = pop(array_of_angles);}
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "move_all_joints");
    return new Instruction.Dexter.move_all_joints(array_to_use, robot)
};

//the same as move_all_joints but generates a "P" oplet

Dexter$1.prototype.pid_move_all_joints = function(...array_of_angles) {
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "pid_move_all_joints");
    return new Instruction.Dexter.pid_move_all_joints(array_to_use, this)
};

Dexter$1.pid_move_all_joints = function(...array_of_angles){
    let robot;
    if (last(array_of_angles) instanceof Dexter$1) {robot = pop(array_of_angles);}
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "pid_move_all_joints");
    return new Instruction.Dexter.pid_move_all_joints(array_to_use, robot)
};

Dexter$1.prototype.move_all_joints_relative = function(...array_of_angles) {
    let array_to_use = Dexter$1.convert_maj_angles(array_of_angles, "move_all_joints_relative");
    return new Instruction.Dexter.move_all_joints_relative(array_to_use, this)
};
Dexter$1.move_all_joints_relative = function(...delta_angles){
    let robot;
    if (last(delta_angles) instanceof Dexter$1) {robot = pop(delta_angles);}
    let array_to_use = Dexter$1.convert_maj_angles(delta_angles, "move_all_joints_relative");
    return new Instruction.Dexter.move_all_joints_relative(array_to_use, robot)
};



Dexter$1.is_position = function(an_array){
    return (Array.isArray(an_array)     &&
             (an_array.length == 3)     &&

             Array.isArray(an_array[0]) &&
            (an_array[0].length == 3)   &&

            Array.isArray(an_array[1])  &&
            (an_array[1].length == 3)   &&

             Array.isArray(an_array[2]) &&
            (an_array[2].length == 3)
    )
};
//warning: calling with no args to default everything will be out-of-reach because JS_direction is not straight up,
//params info:
// xyz New defaults are the cur pos, not straight up.
// J5_direction  = [0, 0, -1], //end effector pointing down
//warning: soe valid xyz locations won't be valid with the default J5_direction and config.
Dexter$1.prototype.move_to = function(xyz            = [],
                                    J5_direction   = [0, 0, -1],
                                    config         = Dexter$1.RIGHT_UP_OUT,
                                    workspace_pose = null, //will default to the job's default workspace_pose
                                    j6_angle       = [0],
                                    j7_angle       = [0]) {
    return Dexter$1.move_to(xyz,
                         J5_direction,
                         config,
                         workspace_pose,
                         j6_angle,
                         j7_angle,
                         this)
};

//note that a workspace_pose = null, will default to the job's default workspace_pose
Dexter$1.move_to = function(xyz            = [],
                          J5_direction   = [0, 0, -1],
                          config         = Dexter$1.RIGHT_UP_OUT,
                          workspace_pose = null,
                          j6_angle       = [0],
                          j7_angle       = [0],
                          robot
                         ){
       return new Instruction.Dexter.move_to(xyz, J5_direction, config, workspace_pose, j6_angle, j7_angle, robot)
};

//the same as move_to but generates a "P" oplet
Dexter$1.prototype.pid_move_to = function(xyz        = [],
                                    J5_direction   = [0, 0, -1],
                                    config         = Dexter$1.RIGHT_UP_OUT,
                                    workspace_pose = null, //will default to the job's default workspace_pose
                                    j6_angle       = [0],
                                    j7_angle       = [0]) {
    return Dexter$1.pid_move_to(xyz,
                              J5_direction,
                              config,
                              workspace_pose,
                              j6_angle,
                              j7_angle,
                              this)
};

Dexter$1.pid_move_to = function(xyz            = [],
                              J5_direction   = [0, 0, -1],
                              config         = Dexter$1.RIGHT_UP_OUT,
                              workspace_pose = null, //will default to the job's default workspace_pose
                              j6_angle       = [0],
                              j7_angle       = [0],
                              robot
                              ){
    return new Instruction.Dexter.pid_move_to(xyz, J5_direction, config, workspace_pose, j6_angle, j7_angle, robot)
};

Dexter$1.prototype.move_to_relative = function(delta_xyz = [0, 0, 0], workspace_pose=null,
                                             j6_delta_angle = 0, j7_delta_angle = 0){
    return Dexter$1.move_to_relative(delta_xyz, workspace_pose, j6_delta_angle, j7_delta_angle, this)
};
Dexter$1.move_to_relative = function(delta_xyz = [0, 0, 0], workspace_pose=null, j6_delta_angle=0, j7_delta_angle=0, robot){
    return new Instruction.Dexter.move_to_relative(delta_xyz, workspace_pose, j6_delta_angle, j7_delta_angle,  robot)
};

Dexter$1.prototype.move_to_straight = function({xyz           = "required",
                                             J5_direction   = [0, 0, -1],
                                             config         = Dexter$1.RIGHT_UP_OUT,
                                             workspace_pose = null,
                                             tool_speed     = 5*_mm / _s,
                                             resolution     = 0.5*_mm,
                                             j6_angle       = [0],
                                             j7_angle       = [0],
                                             single_instruction = false}) {
    return Dexter$1.move_to_straight({xyz: xyz,
                                    J5_direction: J5_direction,
                                    config: config,
                                    workspace_pose: workspace_pose,
                                    tool_speed: tool_speed,
                                    resolution: resolution,
                                    j6_angle: j6_angle,
                                    j7_angle: j7_angle,
                                    single_instruction: single_instruction,
                                    robot: this})
                            };

Dexter$1.move_to_straight = function({xyz          = "required",
                                   J5_direction  = [0, 0, -1],
                                   config        = Dexter$1.RIGHT_UP_OUT,
                                   workspace_pose = null,
                                   tool_speed    = 5*_mm / _s,
                                   resolution    = 0.5*_mm,
                                   j6_angle      = [0],
                                   j7_angle      = [0],
                                   single_instruction = false,
                                   robot}){
    if(xyz == "required") { dde_error("Dexter.move_to_straight was not passed the required 'xyz' arg.<br/>move_to_straight takes keyword args."); }
    return new Instruction.Dexter.move_to_straight({xyz: xyz,
                                                    J5_direction: J5_direction,
                                                    config: config,
                                                    workspace_pose: workspace_pose,
                                                    tool_speed: tool_speed,
                                                    resolution: resolution,
                                                    j6_angle: j6_angle,
                                                    j7_angle: j7_angle,
                                                    single_instruction: single_instruction,
                                                    robot: robot})
};

Dexter$1.reboot_robot           = function(){ return make_ins("r", 0, "`reboot") };
Dexter$1.prototype.reboot_robot = function(){ return make_ins("r", 0, "`reboot", this) };
Dexter$1.is_reboot_instruction  = function (inst){
    return Array.isArray(inst) &&
           inst.length === 7 &&
           inst[Instruction.INSTRUCTION_TYPE] === "r" &&
           inst[Instruction.INSTRUCTION_ARG0] === 0 &&
           inst[Instruction.INSTRUCTION_ARG1].endsWith("reboot") &&
           inst[Instruction.INSTRUCTION_ARG1].startsWith("`")
};

make_ins("r", 0, "`reboot");

Dexter$1.record_movement           = function(...args){ return make_ins("m", ...args) };
Dexter$1.prototype.record_movement = function(...args){ args.push(this); return Dexter$1.record_movement(...args) };


Dexter$1.replay_movement           = function(...args){ return make_ins("o", ...args) };
Dexter$1.prototype.replay_movement = function(...args){ args.push(this); return Dexter$1.replay_movement(...args) };


Dexter$1.set_parameter   = function(name="Acceleration", ...values){
                              let first_arg = values[0];
                              if (name == "StartSpeed") {
                                  if (first_arg < 0){
                                      dde_error("Dexter.set_parameter called with StartSpeed of: " + first_arg +
                                                " but it must be greater than or equal to zero.");
                                  }
                              }
                              else if (name == "MaxSpeed") {
                                  if (first_arg <= 0){
                                      dde_error("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                                " but it must be greater than zero.");
                                  }
                                  else if (first_arg < (1 / _nbits_cf)){
                                      warning("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                      " which is too low.<br/>MaxSpeed set to the minimum permissible speed of: " + (1 / _nbits_cf));
                                  }
                              }
                              return make_ins("S", name, ...values)
                         };
Dexter$1.prototype.set_parameter = function(name="Acceleration", ...values){
                                    let first_arg = values[0];
                                    if (name == "StartSpeed") {
                                        if (first_arg < 0){
                                            dde_error("Dexter.set_parameter called with StartSpeed of: " + first_arg +
                                                " but it must be greater than or equal to zero.");
                                        }
                                    }
                                    else if (name == "MaxSpeed") {
                                        if (first_arg <= 0){
                                            dde_error("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                                " but it must be greater than zero.");
                                        }
                                        else if (first_arg < (1 / _nbits_cf)){
                                            warning("Dexter.set_parameter called with MaxSpeed of: " + first_arg +
                                                " which is too low.<br/>MaxSpeed set to the minimum permissible speed of: " + (1 / _nbits_cf));
                                        }
                                    }
                                    return make_ins("S", name, ...values, this)
                                };


Dexter$1.sleep           = function(seconds){ return make_ins("z", seconds) };
Dexter$1.prototype.sleep = function(seconds){ return make_ins("z", seconds, this) };

Dexter$1.slow_move           = function(...args){ return make_ins("s", ...args) };
Dexter$1.prototype.slow_move = function(...args){ args.push(this); return Dexter$1.slow_move(...args) };

//address is a non-neg integer, probably below 82, value is an integer
Dexter$1.write_fpga           = function(address, value){ return make_ins("w", address, value) };
Dexter$1.prototype.write_fpga = function(address, value){ return make_ins("w", address, value, this) };

Dexter$1.socket_encode = function(char){
    let code = char.charCodeAt(0);
    if((0x00 == code) || (0x3B == code) || (0x25 == code)){
        return "%" + code.toString(16).toUpperCase()
    }
    else { return char }
};

Dexter$1.write_file = function(file_name=null, content=""){
    let max_content_chars = 62; //244 //252 //ie 256 - 4 for (instruction_id, oplet, suboplet, length
    //payload can be max_contect_chars + 2 long if last character is escaped
    let payload = "";
    let instrs = [];
    if (file_name){
        instrs.push(make_ins("W", "f", 0, file_name));
    }
    for(let char of content) {
        payload += Dexter$1.socket_encode(char);
        if (payload.length >= max_content_chars) {
            instrs.push(make_ins("W", "m", payload.length, payload));
            payload = "";
        }
    }
    instrs.push(make_ins("W", "e", payload.length, payload)); //close the file
    return instrs
};

//deprecated. Note reversed args from Dexter.write_file and default path adjustment
Dexter$1.write_to_robot = function(content="", file_name=null){
    file_name = Dexter$1.srv_samba_share_default_to_absolute_path(file_name);
    return Dexter$1.write_file(file_name, content)
};

Dexter$1.prototype.write_file = function(file_name=null, content=""){
    let max_content_chars = 62; //244 //252 //ie 256 - 4 for (instruction_id, oplet, suboplet, length
    //payload can be max_contect_chars + 2 long if last character is escaped
    let payload = "";
    let instrs = [];
    if (file_name){
        instrs.push(make_ins("W", "f", 0, file_name, this));
    }
    for(let char of content) {
        payload += Dexter$1.socket_encode(char);
        if (payload.length >= max_content_chars) {
            instrs.push(make_ins("W", "m", payload.length, payload, this));
            payload = "";
        }
    }
    instrs.push(make_ins("W", "e", payload.length, payload, this)); //close the file
    return instrs
};

//deprecated. Note reversed args from Dexter.write_file
Dexter$1.prototype.write_to_robot = function(content="", file_name=null){
    return this.write_file(file_name, content)
};

/*testing code
    var data = ""
//for (var i = 255; i > 0; i--) { //top to bottom
for (var i = 0; i < 256; i++) {  //bottom to top
    data += String.fromCharCode(i)
}

//out(data);
out(data.length)

new Job({name: "my_job",
    do_list: [out(Dexter.write_file(data, "/srv/samba/share/test.txt"))]})
*/

Dexter$1.read_file = function(source, destination="read_file_content"){
    return new Instruction.Dexter.read_file(source, destination)
};
//examples pf path input:
//  ./foo.txt =>  /srv/samba/share/foo.txt
// ../foo.txt =>  /srv/samba/foo.txt
//    foo.txt => /srv/samba/share/foo.txt
Dexter$1.srv_samba_share_default_to_absolute_path = function(path){
    if      (path.startsWith("/"))   { return path }
    else if (path.startsWith("#"))   { return path }
    else if (path.startsWith("./"))  { return "/srv/samba/share/" + path.substring(2) }
    else if (path.startsWith("../")) { return "/srv/samba/"       + path.substring(3) }
    else                             { return "/srv/samba/share/" + path }
};

Dexter$1.read_from_robot =  function (source, destination="read_file_content"){ //deprecated. simlar to read_file but differs in that srv_sama_share is the default folder
    source = Dexter$1.srv_samba_share_default_to_absolute_path(source);
    return Dexter$1.read_file(source, destination)
};

Dexter$1.prototype.read_file = function (source, destination="read_file_content"){
    return new Instruction.Dexter.read_file(source, destination, this)
};

Dexter$1.prototype.read_from_robot = Dexter$1.prototype.read_file;


//See James N email Jul 14, 2021
Dexter$1.turn_off_j6_and_j7_torque  = function(){
    return [Dexter$1.set_parameter("ServoSet", 3, 24, 0), //J6, for XL-320 motors
            Dexter$1.set_parameter("ServoSet", 1, 24, 0)] //J7, for XL-320 motors
};

Dexter$1.prototype.turn_off_j6_and_j7_torque  = function(){
    return [this.set_parameter("ServoSet", 3, 24, 0), //J6, for XL-320 motors
            this.set_parameter("ServoSet", 1, 24, 0)] //J7, for XL-320 motors
};

Dexter$1.turn_on_j6_and_j7_torque  = function(){
    return [Dexter$1.set_parameter("ServoSet", 3, 24, 1), //J6, for XL-320 motors
            Dexter$1.set_parameter("ServoSet", 1, 24, 1)] //J7, for XL-320 motors
};

Dexter$1.prototype.turn_on_j6_and_j7_torque  = function(){
    return [this.set_parameter("ServoSet", 3, 24, 1), //J6, for XL-320 motors
            this.set_parameter("ServoSet", 1, 24, 1)] //J7, for XL-320 motors
};


//from Dexter_Modes.js (these are instructions. The fns return an array of instructions
Dexter$1.set_follow_me                = function(){ return make_ins("S", "RunFile", "setFollowMeMode.make_ins")
                                        //Dexter.turn_off_j6_and_j7_torque()]
                                        };
Dexter$1.prototype.set_follow_me      = function(){ return make_ins("S", "RunFile", "setFollowMeMode.make_ins", this)
                                        //this.turn_off_j6_and_j7_torque()]
                                        };

Dexter$1.set_force_protect            = function(){ return make_ins("S", "RunFile", "setForceProtectMode.make_ins")
                                         //Dexter.turn_on_j6_and_j7_torque()]
                                        };
Dexter$1.prototype.set_force_protect  = function(){ return make_ins("S", "RunFile", "setForceProtectMode.make_ins", this)
                                        //this.turn_on_j6_and_j7_torque()]
                                        };

Dexter$1.set_keep_position            = function(){ return make_ins("S", "RunFile", "setKeepPositionMode.make_ins")
                                        //Dexter.turn_on_j6_and_j7_torque()]
                                        };
Dexter$1.prototype.set_keep_position  = function(){ return make_ins("S", "RunFile", "setKeepPositionMode.make_ins", this)
                                        //this.turn_on_j6_and_j7_torque()]
                                        };

Dexter$1.set_open_loop                = function(){ return make_ins("S", "RunFile", "setOpenLoopMode.make_ins")
                                        // Dexter.turn_on_j6_and_j7_torque()] //use to be in before Nov 3, 2022 but James N says shouldn't be there
                                        };
Dexter$1.prototype.set_open_loop      = function(){ return make_ins("S", "RunFile", "setOpenLoopMode.make_ins", this)
                                        // this.turn_on_j6_and_j7_torque()] //use to be in before Nov 3, 2022 but James N says shouldn't be there
                                        };


//End Dexter Instructions
//____________Dexter Database______________
//Note: often you should use Robot.instruction_type_to_
Dexter$1.instruction_type_to_function_name_map = {
    a:"move_all_joints",
    //b:"move_to",           //fry  obsolete
    B:"set_boundries", //10 args: j1BoundryHigh, j1Boundrylow,  j2BoundryHigh, j2Boundrylow, j3BoundryHigh, j3Boundrylow, j4BoundryHigh, j4Boundrylow, j5BoundryHigh, j5Boundrylow,
    C:"pid_move_to",
    c:"capture_ad",
    D:"pid_move_to_straight",
    d:"dma_read",
    e:"cause_dexter_error", //fry
    //E:"empty_instruction_queue_immediately", //new Sept 1, 2016
    F:"empty_instruction_queue",   //new Sept 1, 2016
    G:"get_robot_status_immediately",        //new Sept 1, 2016. Deprecated Dec 8, 2020
    g:"get_robot_status",   //fry
    h:"get_robot_status_heartbeat", //fry
    i:"capture_points",
    l:"load_tables",
    m:"record_movement",
    n:"find_index",
    o:"replay_movement",
    P:"pid_move_all_joints",
    R:"move_all_joints_relative",
    r:"read_file",
    s:"slow_move",
    S:"set_parameter",
    t:"dma_write",
    T:"move_to_straight",
    w:"write_fpga",
    W:"write_file",
    x:"exit",
    z:"sleep"
};

/*
var cache_of_dexter_instance_files = {}

//returns undefined or value of prop_name
//errors if the robot file is not valid json format
//first checks dexter instance, then file prop, then Dexter class prop

//returns a string if error, or literal name-value pairs object.
Dexter.prototype.get_dexter_props_file_object = function(){
    let file_path  = "//" + this.ip_address + "/share/robot_props.json" //todo needs verificatin
    if (file_exists(file_path)) {
        let content = read_file(file_path)
        try {
            const result = JSON.parse(content)
            return result
            //cache_of_dexter_instance_files[this.name] = result
        }
        catch(err) {
            return "The file: " + __dirname + "/" + file_name +
                "<br/>is not valid jason format: " + err.message
        }
    }
    else { return null }
}

Dexter.prototype.prop = function(prop_name, get_from_dexter=false){
    if (get_from_dexter){
        const file_result = this.get_dexter_props_file_object()
        if (typeof(file_result) == "string") { dde_error(file_result) }
        else { return file_result[prop_name] }
    }
    else {
        var val = this[prop_name]
        if(val !== undefined) { return val }
        else if (cache_of_dexter_instance_files[this.name] === undefined){ //fill up cache_of_dexter_instance_files or error, but don't even attempt to get actual result yet
            const file_result = this.get_dexter_props_file_object()
            if (typeof(file_result) == "string") {
                dde_error(file_result)
            }
            else if (file_result === null){
                let file_path  = "//" + this.ip_address + "/share/robot_props.json"
                warning("The file: " + file_path + " does not exist.")
                cache_of_dexter_instance_files[this.name] = false
            }
        }
        const obj = cache_of_dexter_instance_files[this.name] //obj will NOT be undefined. Its eitehr false or is a lit obj
        if (obj !== false){
            const result = obj[prop_name]
            if (result !== undefined) { return result }
        }
        return Dexter[prop_name]  //get the typical "class value" of the prop
    }
}
*/

//Dexter constants
//values in microns, pivot point to pivot point, not actual link length.
//Dexter manufacturing tolerance is about 5 microns for these link lengths.

//             HDI         ORIG DEX              ORIG DEX
Dexter$1.LINK1 = 0.235200;    //0.228600   //meters   6.5 inches,
Dexter$1.LINK2 = 0.339092;   //0.320676   //meters  12 5/8 inches
Dexter$1.LINK3 = 0.307500;    //0.330201   //meters  13 inches
Dexter$1.LINK4 = 0.059500;    //0.050801   //meters  2 inches
Dexter$1.LINK5 = 0.082440;   //0.082551   //meters  3.25 inches  // from pivot point to tip of the end-effector
//Dexter.LINKS = [0, Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]

/*These are the HDI Link Lengths as of Jan 1, 2020:
Dexter.LINK1 = 0.2352
Dexter.LINK2 = 0.339092
Dexter.LINK3 = 0.3075
Dexter.LINK4 = 0.0595
Dexter.LINK5 = 0.08244
*/

Dexter$1.LINK1_v1 = Dexter$1.LINK1 * 1000000; //in microns
Dexter$1.LINK2_v1 = Dexter$1.LINK2 * 1000000; //in microns
Dexter$1.LINK3_v1 = Dexter$1.LINK3 * 1000000; //in microns
Dexter$1.LINK4_v1 = Dexter$1.LINK4 * 1000000; //in microns
Dexter$1.LINK5_v1 = Dexter$1.LINK5 * 1000000; //in microns

Dexter$1.LINK1_AVERAGE_DIAMETER =  0.090000; //meters
Dexter$1.LINK2_AVERAGE_DIAMETER =  0.120000; //meters
Dexter$1.LINK3_AVERAGE_DIAMETER =  0.050000; //meters
Dexter$1.LINK4_AVERAGE_DIAMETER =  0.035000; //meters
Dexter$1.LINK5_AVERAGE_DIAMETER =  0.030000; //meters

//_________new dexter defaults_________
Dexter$1.defaults = {
    "Built by": "Mike Philips",
    "Dexter Model": "HDI",
    "Dexter Serial Number": "DEX-000000",
    "DexRun modified": "2022-02-04T21:27:24Z",
    "Manufacture Location": "Haddington Dynamics Inc Las Vegas",
    "OS version": "Ubuntu 16.04 LTS",
    "xillydemo modified": "2021-09-21T18:12:58Z",

    Forces: [],
    Frictions: [],
    BoundryHighs: [185, 105, 150, 120, 185],
    BoundryLows: [-185, -105, -150, -120, -185],
    PID_Ps: [],

    AxisCal: [-326400, -326400, -326400, -86400, -86400],
    Interpolation: [1, 1, 1, 1, 1],
    LinkLengths: [0.2352, 0.339092, 0.3075, 0.0595, 0.08244],

//dh_mat in Dexter units
//             microns  arcsec microns  arcsec
// ___ Joint,     Tz,     Rz,     Tx,     Rx
//S JointDH 1, 235200, 324000,      0, 324000;
//S JointDH 2, 100760, 324000, 339090, 643874;
//S JointDH 3,  61460,      0, 307500,   4125;
//S JointDH 4,  39300, 324000,      0, 313687;
//S JointDH 5,  59500, 324000,      0, 324000;
//S JointDH 6,  82440,      0,      0,-324000;

// converted to meters  deg meters    deg
    dh_mat: [[0.235200, 90, 0,        90],
        [0.100760, 90, 0.339090, 178.8538888888889],
        [0.061460,  0, 0.307500, 1.1458333333333333],
        [0.039300, 90, 0,        87.13527777777777],
        [0.059500, 90, 0,        90],
        [0.082440,  0, 0,        -90]],

    BWDampJoint: [0, 0, 0.25034065, 0.0619188, 0.00583905],
    BWAlphaJoint: [9.77374853, 1.89690978, 1.12505283, 0.04772041, 0.00402252],
    BWBetaJoint: [0.00591075, 6.3111515, 8.64624184, 0.18184776, 0.34199777],
    BWGammaJoint: [0, 0, 0, 0.65140762, 24.44855881],
    BWGainJoint: [3.3907304, 19.19908306, 1.74234028, 3.51781539, 0.73697885],
    "BW-sticRatioJoint": [0.12760212, 0.8168827, 0.5322899, 0.0307373, 0.29133478],
    BWElasticOffJoint: [-6.24846157, -1.21862716, 1.07327058, -5.77940025, -0.96618619],
    RawVelocityLimits: [375840, 360, 360, 360, 360],
    ServoSetup: []
    /* the below are "representative values" for ServoSetup, but the
       actual default should be "don't do anything".
    [{"a":              [10, 0, 0, 0, 0, 0, 87],  orig_line: 99},
              {"S, RebootServo": [3, 1],                   orig_line: 106},
              {"z":              0.000002,                 orig_line: 107},
              {"S, RebootServo": [1, 1],                   orig_line: 108}
             ]
             } */
};

//gets called regardless of whether simulate = true or not because
//even if we're simulating, we like to get that actual link lengths from
//the dexter IF its available
/*Dexter.prototype.set_link_lengths = function(job_to_start_when_done = null){
    let job_to_start = job_to_start_when_done //for closure
    let the_robot  = this //for closure
    let sim_actual = Robot.get_simulate_actual(this.simulate)
    if(this.Link1 &&
      (sim_actual !== true) && //ie "real"
      (this.link_lengths_set_from_dde_computer == true)){
        this.Link1 = undefined  //we want to get vals from Dexter.
        this.Link2 = undefined
        this.Link3 = undefined
        this.Link4 = undefined
        this.Link5 = undefined
    }
    if(!this.Link1 &&
       (!job_to_start || (job_to_start.name != "set_link_lengths"))){
       //we're going to set link lengths.
        if(sim_actual !== true) { //get link lengths from Dexter
            if(node_server_supports_editor(this)) {
                this.set_link_lengths_using_node_server(job_to_start)
            }
            else {
                warning("Dexter." + the_robot.name + "'s node server is not responding.<br/>" +
                        "Now attempting to get link lengths via a Job.")
                this.set_link_lengths_using_job(job_to_start)
            }
        }
        else { //get link lengths from dde computer
            this.set_link_lengths_using_dde_db(job_to_start)
        }
    }
    else {
        this.start_aux(job_to_start)
    }
}*/

Dexter$1.prototype.set_link_lengths = function(job_to_start_when_done = null, call_start_aux=true) {
    console.log("top of Dexter.prototype.set_link_lengths");
    let sim_actual = Robot$1.get_simulate_actual(this.simulate);
    if (job_to_start_when_done && (job_to_start_when_done.name === "set_link_lengths")) {
        console.log("set_link_lengths top of 1st if clause");
        if(call_start_aux) {
            this.start_aux(job_to_start_when_done);
        }
    }
    else if (job_to_start_when_done.get_dexter_defaults) {
        console.log("set_link_lengths top of 2nd if clause");
        if (sim_actual !== true) { //ie "real"
            console.log("set_link_lengths top of 2nd if clause, real");
            /*if (node_server_supports_editor(this)) {
                this.set_link_lengths_using_node_server(job_to_start_when_done)
            } else {
                job_to_start_when_done.stop_for_reason("errored_from_dexter_connect",
                    "While attempting to set_link_lengths, " +
                    " can't connect to Dexter." + this.name)
                //dde_error("Dexter." + this.name + "'s node server is not responding.<br/>" +
                //    "Set the Job's 'get_dexter_defaults' param to false to avoid looking for Defaults.makeins file and<br/>" +
                //    "initialize Dexter defaults to their idealized values.")
                //this.set_link_lengths_using_job(job_to_start_when_done)
            }*/
            this.set_link_lengths_using_node_server(job_to_start_when_done, call_start_aux);
        }
        else { //simulating, so set to idealized values
            console.log("set_link_lengths top of 2nd if clause, sim");
            this.defaults = Dexter$1.defaults;
            if(call_start_aux) {
                this.start_aux(job_to_start_when_done);
            }
        }
    }
    else { // set to idealized values
        console.log("set_link_lengths top of 3rd if clause");
        this.defaults = Dexter$1.defaults;
        if(call_start_aux) {
            this.start_aux(job_to_start_when_done);
        }
    }
};
Dexter$1.prototype.set_link_lengths_using_node_server = function(job_to_start_when_done, call_start_aux){
    let the_dexter = this;
    let callback = (function(err, content){
        if(err) { dde_error("Dexter." + the_dex_inst.name + ".defaults_read errored with url: " +
            the_url + "<br/>and error message: " +
            err.message +
            "<br/>You can set a Job's robot to the idealized defaults values by<br/>passing in a Job's 'get_dexter_defaults' to true.");
        }
        else if (call_start_aux){
            the_dexter.start_aux(job_to_start_when_done);
        }
    });
    the_dexter.defaults_read(callback);
};

/*
Dexter.prototype.set_link_lengths_using_node_server = function(job_to_start){
    let path = //"https://" + this.ip_address + "/srv/samba/share/Defaults.make_ins"
              "http://192.168.1.142/edit?edit=/srv/samba/share/Defaults.make_ins"
    let the_dexter = this
    let callback = function(err, data){
        if(err){
            dde_error("in set_link_lengths_using_node_server, could not get content of:<br/>" +
                       path)
        }
        else {
            if(typeof(data) !== "string") {
                data = data.body
            }
            the_dexter.set_link_lengths_from_file_content(data)
            if(job_to_start) { job_to_start.start }
        }
    }
    read_file_async(path, undefined, callback)
}
*/

/*Dexter.prototype.set_link_lengths_using_node_server = function(job_to_start){
    let ip = job_to_start.robot.ip_address
    let path = "http://" + ip + "/edit?edit=/srv/samba/share/Defaults.make_ins"
               //"http://192.168.1.142/edit?edit=/srv/samba/share/Defaults.make_ins"
    let options = {uri: path} //, timeout: 1000}
    let content = get_page(path)
    if(content.startsWith("Error: ")) {
        warning("set_link_lengths_using_node_server with path: " + path +
                " got error: " + content +
                "<br/> so now setting link lengths using a DDE Job.")
        this.set_link_lengths_using_dde_db(job_to_start) //this will deal with link_lengths_set_from_dde_computer
    }
    else {
        this.set_link_lengths_from_file_content(content)
        delete this.link_lengths_set_from_dde_computer
        if(job_to_start) {
            this.start_aux(job_to_start)
        }
    }
}*/

/* obsolete
Dexter.prototype.set_link_lengths_using_node_server = function(job_to_start){
    let ip = job_to_start.robot.ip_address
    let path = ip + ":" + "/edit?edit=/srv/samba/share/Defaults.make_ins"
    //"http://192.168.1.142/edit?edit=/srv/samba/share/Defaults.make_ins"
    DDE_File.read_file_async(path, function(err, content)
    if(content.startsWith("Error: ")) {
        warning("set_link_lengths_using_node_server with path: " + path +
            " got error: " + content +
            "<br/> so now setting link lengths using a DDE Job.")
        this.set_link_lengths_using_dde_db(job_to_start) //this will deal with link_lengths_set_from_dde_computer
    }
    else {
        this.set_link_lengths_from_file_content(content)
        delete this.link_lengths_set_from_dde_computer
        if(job_to_start) {
            this.start_aux(job_to_start)
        }
    }
}
 */
/*
Dexter.prototype.set_link_lengths_using_job = function(job_to_start){
    let the_robot = this
    let callback = function() {
        if(Job.set_link_lengths) {
            out("in sll cbb")
        }
        the_robot.start_aux(job_to_start)
    }
    let ssl_job =  new Job({name: "set_link_lengths",
                            robot: this,
                            show_instructions: false,
                            when_stopped: (job_to_start ? callback : "stop"),
                            if_dexter_connect_error: function(robot_name){
                                 warning("Can't connect to Dexter." + robot_name + " executing Job." + "set_link_lengths")
                                if(job_to_start.if_dexter_connect_error){
                                    job_to_start.if_dexter_connect_error(robot_name)
                                }
                                job_to_start.stop_for_reason("errored", "Can't connect to robot: " + robot_name)
                            },
                            do_list: [
                                Dexter.read_file("../Defaults.make_ins", "default_content"), //gets file from Dexter
                                function() {
                                    if(typeof(this.user_data.default_content) == "string"){
                                        this.robot.set_link_lengths_from_file_content(this.user_data.default_content)
                                        delete the_robot.link_lengths_set_from_dde_computer //because link lengths set from Dexter
                                    }
                                    else { //no file because we got an error code integer in this.user_data.default_content
                                        this.robot.set_link_lengths_using_dde_db(job_to_start) //will deal with link_lengths_set_from_dde_computer
                                    }
                                }
                            ]})
    ssl_job.start()
}
*/

/*
Dexter.prototype.set_link_lengths_using_dde_db = function(job_to_start){
    let path = dde_apps_folder + "/dexter_file_systems/"  + this.name + "/Defaults.make_ins"
    if(file_exists(path)) {
        let content = read_file(path)
        this.set_link_lengths_from_file_content(content)
    }
    else {
        this.Link1 = Dexter.LINK1
        this.Link2 = Dexter.LINK2
        this.Link3 = Dexter.LINK3
        this.Link4 = Dexter.LINK4
        this.Link5 = Dexter.LINK5
        this.link_lengths = [Dexter.LINK1, Dexter.LINK2, Dexter.LINK3, Dexter.LINK4, Dexter.LINK5]

        this.J1_angle_min = Dexter.J1_ANGLE_MIN
        this.J2_angle_min = Dexter.J2_ANGLE_MIN
        this.J3_angle_min = Dexter.J3_ANGLE_MIN
        this.J4_angle_min = Dexter.J4_ANGLE_MIN
        this.J5_angle_min = Dexter.J5_ANGLE_MIN
        this.J6_angle_min = Dexter.J6_ANGLE_MIN
        this.J7_angle_min = Dexter.J7_ANGLE_MIN

        this.J1_angle_max = Dexter.J1_ANGLE_MAX
        this.J2_angle_max = Dexter.J2_ANGLE_MAX
        this.J3_angle_max = Dexter.J3_ANGLE_MAX
        this.J4_angle_max = Dexter.J4_ANGLE_MAX
        this.J5_angle_max = Dexter.J5_ANGLE_MAX
        this.J6_angle_max = Dexter.J6_ANGLE_MAX
        this.J7_angle_max = Dexter.J7_ANGLE_MAX
    }
    //this.link_lengths_set_from_dde_computer = true
    if(job_to_start) {
        this.start_aux(job_to_start)
    }
}
*/
//content is the content of a Defaults.make_ins file
//sets link lengths as well as any other params in the file.
/* obsoleted by Dexter.defaults
Dexter.prototype.set_link_lengths_from_file_content = function(content){
    for(let line of content.split("\n")){
        //first get rid of comment, if any, at line end.
        let semi_pos = line.indexOf(";")
        if (semi_pos > -1) { line = line.substring(0, semi_pos) }
        line = line.trim()
        if(line.length > 0) {
            let line_elts = line.split(",")
            let oplet = line_elts[0].trim()
            if(oplet == "S"){
                let param_name = line_elts[1].trim()
                if(line_elts.length == 3){
                    let val = parseFloat(line_elts[2].trim())
                    let new_param_name = param_name
                    if(param_name.includes("Boundry")) {
                        val = val * _arcsec
                        new_param_name = "J"
                        new_param_name += param_name[1]
                        new_param_name = new_param_name + "_angle_" //+= fails here. JS bug
                        if(param_name.endsWith("Low")) {new_param_name += "min"}
                        else                           {new_param_name += "max"}
                    }
                    this[new_param_name] = val
                }
                //the rest have more than one val
                else if (param_name == "LinkLengths") { //link5 length is in the array first. }
                    for(let i = 2; i < line_elts.length; i++){
                        let i_val = parseFloat(line_elts[i].trim()) * _um  //convert from string of microns to meters.
                        if     (i == 2) { this.Link5 = i_val }
                        else if(i == 3) { this.Link4 = i_val }
                        else if(i == 4) { this.Link3 = i_val }
                        else if(i == 5) { this.Link2 = i_val }
                        else if(i == 6) { this.Link1 = i_val }
                        else { shouldnt("set_parameter of: " + param_name + " got more than 5 link lengths.") }
                    }
                }
                else {
                    let val = line_elts.slice(2, line_elts.length - 1)
                    this[param_name] = val
                }
            }
        }
    }
    if(!this.J6_angle_min) { //not included in some defaults.makeins files
        this.J6_angle_min = Dexter.J6_ANGLE_MIN
    }
    if(!this.J6_angle_max) { //not included in some defaults.makeins files
        this.J6_angle_max = Dexter.J6_ANGLE_MAX
    }
    if(!this.J7_angle_min) { //not included in some defaults.makeins files
        this.J7_angle_min = Dexter.J7_ANGLE_MIN
    }
    if(!this.J7_angle_max) { //not included in some defaults.makeins files
        this.J7_angle_max = Dexter.J7_ANGLE_MAX
    }
}
 */

//called from DexterSim for Dexter.read_from_robot("#POM", link_from_end)
//and possibly elsewhere by user but if so,
//gets angles from the return of the last instruction sent,
//not the current measured angles.
Dexter$1.prototype.get_POM = function(link_from_end=4){ //could be 5
    const sim_actual = Robot$1.get_simulate_actual(this.simulate);
    if(sim_actual === true){
        let dexsim = DexterSim.robot_name_to_dextersim_instance_map[this.name];
        if(!dexsim) {
            dde_error("Dexter." + this.name + " called which is simulated, but there's no DexterSim instance for that Dexter.");
        }
        else {
            let J_angles      = dexsim.compute_measured_angles_dexter_units();
            J_angles          = J_angles.slice(0, 6);
            let dh_mat        = this.defaults.dh_mat;
            let fk_result     = DH.forward_kinematics(J_angles, dh_mat);
            let arr_of_poms   = fk_result[2];
            let the_pom_index = link_from_end + 1;
            let the_pom       = arr_of_poms[the_pom_index];
            return the_pom
        }
    }
    else if(this.defaults && this.rs) {
        let J_angles = this.rs.measured_angles(5);
        let dh_mat = this.defaults.dh_mat;
        let arr_of_poms = DH.forward_kinematics(J_angles, dh_mat)[2];
        let pom = arr_of_poms[link_from_end + 1];
        return pom
    }
    else {
        dde_error("In Dexter." + this.name + " no angles or dh_mat are available until<br/>" +
            "you've run a Job with this Dexter at least once.");
    }

};



Dexter$1.LEG_LENGTH = 0.152400; //meters  6 inches

//values in degrees, Dexter HDI
Dexter$1.J1_ANGLE_MIN = -185;
Dexter$1.J1_ANGLE_MAX = 185;
Dexter$1.J2_ANGLE_MIN = -105;
Dexter$1.J2_ANGLE_MAX = 105;
Dexter$1.J3_ANGLE_MIN = -150;
Dexter$1.J3_ANGLE_MAX = 150;
Dexter$1.J4_ANGLE_MIN = -120; //-100
Dexter$1.J4_ANGLE_MAX = 120;  //100
Dexter$1.J5_ANGLE_MIN = -185;
Dexter$1.J5_ANGLE_MAX = 185;
Dexter$1.J6_ANGLE_MIN = -150; //0
Dexter$1.J6_ANGLE_MAX = 150; //296
Dexter$1.J7_ANGLE_MIN = 0;
Dexter$1.J7_ANGLE_MAX = 296;

Dexter$1.MAX_SPEED    = 30;  //degrees per second. NOT the max speed of the robot,
                         //but rather for a given instruction's envelope of speed,
                         //its the max speed that will be attined by that instruction.
                         //The JOINT that this is the max speed for is
                         //the joint that changes the most in a given call to move_all_joints.
Dexter$1.START_SPEED  = 0.5; //degrees per second
Dexter$1.ACCELERATION = 0.000129; //degrees/(second^2)

Dexter$1.RIGHT_ANGLE    = 90; // 90 degrees
Dexter$1.HOME_ANGLES    = [0, 0, 0, 0, 0, 0, 50];  //j2,j3,j4 straight up, link 5 horizontal pointing frontwards. If J7 is 0 it will overtorque, turning on the red light as it closes too tightly. James W likes 50 degrees.
Dexter$1.NEUTRAL_ANGLES = [0, 45, 90, -45, 0, 0, 0]; //lots of room for Dexter to move from here.
Dexter$1.PARKED_ANGLES  = [0, 0, 135, 45, 0, 0, 0]; //all folded up, compact.

Dexter$1.HOME_POSITION    = [[0, 0.08255, 0.866775],[0, 1, 0], [1, 1, 1]]; //meters, j5 direction, config
Dexter$1.NEUTRAL_POSITION = [[0, 0.5,     0.075],   [0, 0, -1],[1, 1, 1]];    //meters, j5 direction, config
//don't define   Dexter.PARKED_POSITION = [0, 0.151, 0.20],  [0, -1, 0],   [1, 1, 1]

    /*Dexter.robot_status_labels = [
        "ds_instruction_id",    // = 0
        "ds_instruction_type",  // = 1 //helps in debugging
        "ds_error_code",        // = 2 //0 means no error.

        "ds_j0_angle", //  = 3
        "ds_j1_angle", //  = 4
        "ds_j2_angle", //  = 5
        "ds_j3_angle", //  = 6
        "ds_j4_angle", //  = 7

        "ds_j0_x", //  = 8
        "ds_j0_y", //  = 9
        "ds_j0_z", //  = 10

        "ds_j1_x", //  = 11
        "ds_j1_y", //  = 12
        "ds_j1_z", //  = 13

        "ds_j2_x", //  = 14
        "ds_j2_y", //  = 15
        "ds_j2_z", //  = 16

        "ds_j3_x", //  = 17
        "ds_j3_y", //  = 18
        "ds_j3_z", //  = 19

        "ds_j4_x", //  = 20
        "ds_j4_y", //  = 21
        "ds_j4_z", //  = 22

        "ds_j5_x", //  = 23
        "ds_j5_y", //  = 24
        "ds_j5_z", //  = 25

        "ds_tool_type"   //  = 26
    ]*/
/*
Dexter.robot_status_labels = [
    "INSTRUCTION_ID",       // = 0
    "INSTRUCTION_TYPE",     // = 1 //the "oplet". helps in debugging
    "ERROR_CODE",           // = 2 //0 means no error.

    "BASE_POSITION_AT",     // 3  j0  means angle degrees.  base is bottom
    "END_POSITION_AT",      // 4  j2
    "PIVOT_POSITION_AT",    // 5  j1
    "ANGLE_POSITION_AT",    // 6  j3
    "ROTATE_POSITION_AT",   // 7  j4

//TABLE CALCULATED DELTA
    "BASE_POSITION_DELTA",   // 8   delta diff between where commanded to go and where optical encoder says.
    "END_POSITION_DELTA",    // 9
    "PIVOT_POSITION_DELTA",  // 10
    "ANGLE_POSITION_DELTA",  // 11
    "ROTATE_POSITION_DELTA", // 12

//PID CALCULATED DELTA
    "BASE_POSITION_PID_DELTA",   // 13     proportion integraded d.... math fn. helps hone in, reducing ocillation. closest to the force
    "END_POSITION_PID_DELTA",    // 14
    "PIVOT_POSITION_PID_DELTA",  // 12
    "ANGLE_POSITION_PID_DELTA",  // 13
    "ROTATE_POSITION_PID_DELTA", // 14

// FORCE CALCULATED POSITION MODIFICATION
    "BASE_POSITION_FORCE_DELTA",    // 15   hair
    "END_POSITION_FORCE_DELTA",     // 16
    "PIVOT_POSITION_FORCE_DELTA",   // 17
    "ANGLE_POSITION_FORCE_DELTA",   // 18
    "ROT_POSITION_FORCE_DELTA",     // 19

// RAW ANALOG TO DIGITAL VALUES from A 2 D converter
    "BASE_SIN", //  20
    "BASE_COS", //  21
    "END_SIN",  //  22
    "END_COS",  //  23
    "PIVOT_SIN",//  24
    "PIVOT_COS",//  25
    "ANGLE_SIN",//  26
    "ANGLE_COS",//  27
    "ROT_SIN",  //  28
    "ROT_COS",  //  29

    "DMA_READ_DATA",    //  30   // PROB SHOULD NOT BE USED WITH DDE

// RECORD AND PLAYBACK
    "RECORD_BLOCK_SIZE",        //  31
    "READ_BLOCK_COUNT",         //  32
    "PLAYBACK_BASE_POSITION",   //  33
    "PLAYBACK_END_POSITION",    //  34
    "PLAYBACK_PIVOT_POSITION",  //  35
    "PLAYBACK_ANGLE_POSITION",  //  36
    "PLAYBACK_ROT_POSITION",    //  37

    "END_EFFECTOR_IO_IN",   //  38   32 bits coming from the end effector.

    "SENT_BASE_POSITION",   //  39  where we told joint to go, - 250k to + 250k fixed
    "SENT_END_POSITION",    //  40
    "SENT_PIVOT_POSITION",  //  41
    "SENT_ANGLE_POSITION",  //  42
    "SENT_ROT_POSITION",    //  43

    "SLOPE_BASE_POSITION",  //  44   where at in acell curve. minimize jerk
    "SLOPE_END_POSITION",   //  45
    "SLOPE_PIVOT_POSITION", //  46
    "SLOPE_ANGLE_POSITION", //  47
    "SLOPE_ROT_POSITION"    //  48
] */
//for acknowledgement
/* obsolete Jan 2021
Dexter.robot_ack_labels = [
//new name   old name                   array index
// misc block
    "JOB_ID",              //0
    "INSTRUCTION_ID",      //1
    "START_TIME",          //2 //ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //3 //ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //4 "oplet"
    "ERROR_CODE"           //5   0 means ok
]*/

//call this from most code
Dexter$1.robot_status_labels_sm = function(sm=0){
    if(sm === 0) { return Dexter$1.robot_status_labels }
    else {
        let labels_name = "robot_status_labels_g" + sm;
        let actual_labels_array = Dexter$1[labels_name];
        if(actual_labels_array) { return actual_labels_array}
        else { return Dexter$1.robot_status_labels_g_other }
    }
};

//for g0
Dexter$1.robot_status_labels = [
//new name             old name
// misc block                    array index
"JOB_ID",              //new field                    0 //for commmanded instruction (when added to queue)
"INSTRUCTION_ID",      //same name                    1 //for cmd ins
"START_TIME",          //new field                    2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
"STOP_TIME",           //new field                    3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
"INSTRUCTION_TYPE",    //same name                    4 //for cmd ins  //"oplet"

"ERROR_CODE",          //same name                    5 //for any error      //0 means no error. 1 means an error
"DMA_READ_DATA",       //                             6 // deprecated DMA_READ_DATA  then deprecated  "JOB_ID_OF_CURRENT_INSTRUCTION"
"READ_BLOCK_COUNT",    //                             7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
"STATUS_MODE",         //same name                    8 //was RECORD_BLOCK_SIZE and was unused
"END_EFFECTOR_IO_IN",     //END_EFFECTOR_IO_IN        9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector
//J1 block
"J1_ANGLE",            // BASE_POSITION_AT           10 //means commanded stepped angle, not commanded_angle and not current_angle
"J1_DELTA",            // BASE_POSITION_DELTA        11
"J1_PID_DELTA",        // BASE_POSITION_PID_DELTA    12
null,                  // BASE_POSITION_FORCE_DELTA  13 //was J1_FORCE_CALC_ANGLE
"J1_A2D_SIN",          // BASE_SIN                   14
"J1_A2D_COS",          // BASE_COS                   15
"J1_MEASURED_ANGLE",   // PLAYBACK_BASE_POSITION     16 //deprecated J1_PLAYBACK
"J1_SENT",             // SENT_BASE_POSITION         17 //unused. angle sent in the commanded angle of INSTRUCTION_ID
"J7_MEASURED_ANGLE",   // SLOPE_BASE_POSITION        18 //deprecated J1_SLOPE
 null,                 //                            19 //was J1_MEASURED_ANGLE. not used, get rid of, now don't compute on dde side,
//J2 block of 10
"J2_ANGLE",            // END_POSITION_AT            20
"J2_DELTA",            // END_POSITION_DELTA         21
"J2_PID_DELTA",        // END_POSITION_PID_DELTA     22 was J2_FORCE_CALC_ANGLE
null,                  // END_POSITION_FORCE_DELTA   23
"J2_A2D_SIN",          // END_SIN                    24
"J2_A2D_COS",          // END_COS                    25
"J2_MEASURED_ANGLE",   // PLAYBACK_END_POSITION      26 //deprecated J2_PLAYBACK
"J2_SENT",             // SENT_END_POSITION          27 //unused
"J7_MEASURED_TORQUE",  // SLOPE_END_POSITION         28 //deprecated J2_SLOPE
 null,                 // new field                  29 //was J2_MEASURED_ANGLE, not used, get rid of,
//J2 block of 10
"J3_ANGLE",            // PIVOT_POSITION_AT           30
"J3_DELTA",            // PIVOT_POSITION_DELTA        31
"J3_PID_DELTA",        // PIVOT_POSITION_PID_DELTA    32
null,                  // PIVOT_POSITION_FORCE_DELTA  33  was "J3_FORCE_CALC_ANGLE"
"J3_A2D_SIN",          // PIVOT_SIN                   34
"J3_A2D_COS",          // PIVOT_SIN                   35
"J3_MEASURED_ANGLE",   // PLAYBACK_PIVOT_POSITION     36 //deprecated J3_PLAYBACK
"J3_SENT",             // SENT_PIVOT_POSITION         37 //unused
"J6_MEASURED_ANGLE",   // SLOPE_PIVOT_POSITION        38 //deprecated  J3_SLOPE
 null,                 // new field                   39 //was J3_MESURED_ANGLE not used get rid of
//J4 block of 10
"J4_ANGLE",            // ANGLE_POSITION_AT           40
"J4_DELTA",            // ANGLE_POSITION_DELTA        41
"J4_PID_DELTA",        // ANGLE_POSITION_PID_DELTA    42
null,                  // ANGLE_POSITION_FORCE_DELTA  43 was "J4_FORCE_CALC_ANGLE"
"J4_A2D_SIN",          // ANGLE_SIN                   44
"J4_A2D_COS",          // ANGLE_SIN                   45
"J4_MEASURED_ANGLE",   // PLAYBACK_ANGLE_POSITION     46 //deprecated J4_PLAYBACK
"J4_SENT",             // SENT_ANGLE_POSITION         47 //unused
"J6_MEASURED_TORQUE",  // SLOPE_ANGLE_POSITION        48 //deprecated J4_SLOPE
null,                  // new field                   49 //not used get rid of
//J4 block of 10
"J5_ANGLE",            // ROTATE_POSITION_AT          50
"J5_DELTA",            // ROTATE_POSITION_DELTA       51
"J5_PID_DELTA",        // ROTATE_POSITION_PID_DELTA   52
null,                  // ROT_POSITION_FORCE_DELTA    53 was "J5_FORCE_CALC_ANGLE"
"J5_A2D_SIN",          // ROT_SIN                     54
"J5_A2D_COS",          // ROT_SIN                     55
"J5_MEASURED_ANGLE",   // PLAYBACK_ROT_POSITION       56 //deprecated J5_PLAYBACK
"J5_SENT",             // SENT_ROT_POSITION           57 //unused
null,                  // SLOPE_ROT_POSITION          58 //deprecated J5_SLOPE  unusued
null                   // new field                   59 //was J5_MEASURED_ANGLE, not used get rid of
];


//its inefficient to have effectively 3 lists, but the sans-index list is good for
//short labels used in tables, and the index is nice and explicit
//for robot.robot_status[Dexter.foo_index] access
//The explicit Dexter.robot_status_index_labels is needed for a series.
Dexter$1.make_robot_status_indices = function(labels = Dexter$1.robot_status_labels, index_array=Dexter$1.robot_status_index_labels){
    for(var i = 0; i < labels.length; i++){
        var label = labels[i]; //could be null
        if (label) {
            var index_label = "Dexter." + label; //+ "_INDEX"
            Dexter$1[label] = i;
            index_array.push(index_label);
        }
    }
};

Dexter$1.robot_status_index_labels = [];
Dexter$1.make_robot_status_indices();

Dexter$1.make_backward_compatible_robot_status_indices = function(){
    Dexter$1.DMA_READ_DATA    = 6;
    Dexter$1.READ_BLOCK_COUNT = 7;
    Dexter$1.RECORD_BLOCK_SIZE = 8;
    Dexter$1.END_EFFECTOR_IN  = 9;

    Dexter$1.J1_PLAYBACK = 16;
    Dexter$1.J1_SLOPE    = 18;

    Dexter$1.J2_PLAYBACK = 26;
    Dexter$1.J2_SLOPE    = 28;

    Dexter$1.J3_PLAYBACK = 36;
    Dexter$1.J3_SLOPE    = 38;

    Dexter$1.J4_PLAYBACK = 46;
    Dexter$1.J4_SLOPE    = 48;

    Dexter$1.J5_PLAYBACK = 56;
    Dexter$1.J5_SLOPE    = 58;

    Dexter$1.J1_FORCE_CALC_ANGLE = Dexter$1.J1_MEASURED_ANGLE;
    Dexter$1.J2_FORCE_CALC_ANGLE = Dexter$1.J2_MEASURED_ANGLE;
    Dexter$1.J3_FORCE_CALC_ANGLE = Dexter$1.J3_MEASURED_ANGLE;
    Dexter$1.J4_FORCE_CALC_ANGLE = Dexter$1.J4_MEASURED_ANGLE;
    Dexter$1.J5_FORCE_CALC_ANGLE = Dexter$1.J5_MEASURED_ANGLE;
};

Dexter$1.make_backward_compatible_robot_status_indices();


Dexter$1.make_default_status_array = function(){
    let result = new Array(Dexter$1.robot_status_labels.length).fill(0);
    result[Dexter$1.INSTRUCTION_ID]   = -1;
    result[Dexter$1.INSTRUCTION_TYPE] = "g";
    result[Dexter$1.J6_MEASURED_ANGLE] = (0 - 512) * Socket.DEGREES_PER_DYNAMIXEL_UNIT;  //should result in degrees
    return result
};

Dexter$1.make_default_status_array_g1 = function(){
    let result = new Array(Dexter$1.robot_status_labels_g1.length).fill(0);
    result[Dexter$1.INSTRUCTION_ID]   = -1;
    result[Dexter$1.INSTRUCTION_TYPE] = "g";
    result[Dexter$1.STATUS_MODE] = 1;
    let index_j6_ma = Dexter$1.robot_status_labels_g1.indexOf("J6_MEASURED_ANGLE_G1");
    result[index_j6_ma] = -512;
    return result
};

Dexter$1.make_default_status_array_g_other = function(sm){
    let result = new Array(Dexter$1.robot_status_labels.length).fill(0);
    result[Dexter$1.INSTRUCTION_ID]   = -1;
    result[Dexter$1.INSTRUCTION_TYPE] = "g";
    result[Dexter$1.STATUS_MODE] = sm;
    return result
};

//call this from most code
Dexter$1.make_default_status_array_g_sm = function(sm=0){
    let meth_name = "make_default_status_array_g" + sm;
    let meth = Dexter$1[meth_name];
    if(meth) { return  meth.call(this) }
    else     { return Dexter$1.make_default_status_array_g_other(sm) }
};

Dexter$1.robot_status_labels_g1 = [
    // misc block
    "JOB_ID",              //new field  0 //for commmanded instruction (when added to queue)
    "INSTRUCTION_ID",      //same name  1 //for cmd ins
    "START_TIME",          //new field  2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //new field  3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //same name  4 //for cmd ins  //"oplet"

    "ERROR_CODE",          //same name  5 //for any error      //0 means no error. 1 means an error
    "DMA_READ_DATA",       //           6 // deprecated DMA_READ_DATA then deprecated JOB_ID_OF_CURRENT_INSTRUCTION
    "READ_BLOCK_COUNT",    //           7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
    "STATUS_MODE",   //same name        8
    "END_EFFECTOR_IO_IN",  //END_EFFECTOR_IO_IN 9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector

    "J1_MEASURED_ANGLE_G1", //10
    "J2_MEASURED_ANGLE_G1", //11
    "J3_MEASURED_ANGLE_G1", //12
    "J4_MEASURED_ANGLE_G1", //13
    "J5_MEASURED_ANGLE_G1", //14
    "J6_MEASURED_ANGLE_G1", //15
    "J7_MEASURED_ANGLE_G1", //16
    null,                   //17
    null,                   //18
    null,                   //19

    "J1_TORQUE_G1", //20
    "J2_TORQUE_G1", //21
    "J3_TORQUE_G1", //22
    "J4_TORQUE_G1", //23
    "J5_TORQUE_G1", //24
    "J6_TORQUE_G1", //25
    "J7_TORQUE_G1", //26
    null,           //27
    null,           //28
    null,           //29

    "J1_VELOCITY_G1", //30
    "J2_VELOCITY_G1", //31
    "J3_VELOCITY_G1", //32
    "J4_VELOCITY_G1", //33
    "J5_VELOCITY_G1", //34
    "J6_VELOCITY_G1", //35
    "J7_VELOCITY_G1", //36
    null,             //37
    null,             //38
    null,             //39

    null,            //40
    null,            //41
    null,            //42
    null,            //43
    null,            //44
    null,            //45
    null,            //46
    null,            //47
    null,            //48
    null,            //49

    null,            //50
    null,            //51
    null,            //52
    null,            //53
    null,            //54
    null,            //55
    null,            //56
    null,            //57
    null,            //58
    null             //59
];

Dexter$1.robot_status_index_labels_g1 = [];
Dexter$1.make_robot_status_indices(Dexter$1.robot_status_labels_g1, Dexter$1.robot_status_index_labels_g1);

/* changes from g0 to g2:
DONE Replace *_AT (presumably ANGLE as in J1_ANGLE) with *_RAW_ENCODER_ANGLE_FXP
DONE Replace *_DELTA with *_EYE_NUMBER
NO CHANGE Keep *_PID_DELTA
DON'T DO: Replace *_FORCE_DELTA with AdcCenter  What's FORCE_DELTA?
NO CHANGE Keep *_SIN
NO CHANGE Keep *_COS
NO CHANGE Keep MEASURED_ANGLE
*/
Dexter$1.robot_status_labels_g2 = [
//new name             old name
// misc block                    array index
    "JOB_ID",              //new field                    0 //for commmanded instruction (when added to queue)
    "INSTRUCTION_ID",      //same name                    1 //for cmd ins
    "START_TIME",          //new field                    2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //new field                    3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //same name                    4 //for cmd ins  //"oplet"

    "ERROR_CODE",          //same name                    5 //for any error      //0 means no error. 1 means an error
    "DMA_READ_DATA",       //                             6 // deprecated DMA_READ_DATA  then deprecated  "JOB_ID_OF_CURRENT_INSTRUCTION"
    "READ_BLOCK_COUNT",    //                             7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
    "STATUS_MODE",         //same name                    8 //was RECORD_BLOCK_SIZE and was unused
    "END_EFFECTOR_IO_IN",  //END_EFFECTOR_IO_IN           9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector

//J1 block
    "J1_RAW_ENCODER_ANGLE_FXP_G2",            // BASE_POSITION_AT           10 //means commanded stepped angle, not commanded_angle and not current_angle
    "J1_EYE_NUMBER_G2",            // BASE_POSITION_DELTA        11
    "J1_PID_DELTA_G2",        // BASE_POSITION_PID_DELTA    12
    null,                  // BASE_POSITION_FORCE_DELTA  13 //was J1_FORCE_CALC_ANGLE
    "J1_A2D_SIN_G2",          // BASE_SIN                   14
    "J1_A2D_COS_G2",          // BASE_COS                   15
    "J1_MEASURED_ANGLE_G2",   // PLAYBACK_BASE_POSITION     16 //deprecated J1_PLAYBACK
    "J1_SENT_G2",             // SENT_BASE_POSITION         17 //unused. angle sent in the commanded angle of INSTRUCTION_ID
    "J7_MEASURED_ANGLE_G2",   // SLOPE_BASE_POSITION        18 //deprecated J1_SLOPE
    null,                 //                            19 //was J1_MEASURED_ANGLE. not used, get rid of, now don't compute on dde side,
//J2 block of 10
    "J2_RAW_ENCODER_ANGLE_FXP_G2",            // END_POSITION_AT            20
    "J2_EYE_NUMBER_G2",            // END_POSITION_DELTA         21
    "J2_PID_DELTA_G2",        // END_POSITION_PID_DELTA     22 was J2_FORCE_CALC_ANGLE
    null,                     // END_POSITION_FORCE_DELTA   23
    "J2_A2D_SIN_G2",          // END_SIN                    24
    "J2_A2D_COS_G2",          // END_COS                    25
    "J2_MEASURED_ANGLE_G2",   // PLAYBACK_END_POSITION      26 //deprecated J2_PLAYBACK
    "J2_SENT_G2",             // SENT_END_POSITION          27 //unused
    "J7_MEASURED_TORQUE_G2",  // SLOPE_END_POSITION         28 //deprecated J2_SLOPE
    null,                     // new field                  29 //was J2_MEASURED_ANGLE, not used, get rid of,
//J2 block of 10
    "J3_RAW_ENCODER_ANGLE_FXP_G2",            // PIVOT_POSITION_AT           30
    "J3_EYE_NUMBER_G2",            // PIVOT_POSITION_DELTA        31
    "J3_PID_DELTA_G2",        // PIVOT_POSITION_PID_DELTA    32
    null,                     // PIVOT_POSITION_FORCE_DELTA  33  was "J3_FORCE_CALC_ANGLE"
    "J3_A2D_SIN_G2",          // PIVOT_SIN                   34
    "J3_A2D_COS_G2",          // PIVOT_SIN                   35
    "J3_MEASURED_ANGLE_G2",   // PLAYBACK_PIVOT_POSITION     36 //deprecated J3_PLAYBACK
    "J3_SENT_G2",             // SENT_PIVOT_POSITION         37 //unused
    "J6_MEASURED_ANGLE_G2",   // SLOPE_PIVOT_POSITION        38 //deprecated  J3_SLOPE
    null,                     // new field                   39 //was J3_MESURED_ANGLE not used get rid of
//J4 block of 10
    "J4_RAW_ENCODER_ANGLE_FXP_G2",            // ANGLE_POSITION_AT           40
    "J4_EYE_NUMBER_G2",       // ANGLE_POSITION_DELTA        41
    "J4_PID_DELTA_G2",        // ANGLE_POSITION_PID_DELTA    42
    null,                     // ANGLE_POSITION_FORCE_DELTA  43 was "J4_FORCE_CALC_ANGLE"
    "J4_A2D_SIN_G2",          // ANGLE_SIN                   44
    "J4_A2D_COS_G2",          // ANGLE_SIN                   45
    "J4_MEASURED_ANGLE_G2",   // PLAYBACK_ANGLE_POSITION     46 //deprecated J4_PLAYBACK
    "J4_SENT_G2",             // SENT_ANGLE_POSITION         47 //unused
    "J6_MEASURED_TORQUE_G2",  // SLOPE_ANGLE_POSITION        48 //deprecated J4_SLOPE
    null,                     // new field                   49 //not used get rid of
//J4 block of 10
    "J5_RAW_ENCODER_ANGLE_FXP_G2",            // ROTATE_POSITION_AT          50
    "J5_EYE_NUMBER_G2",            // ROTATE_POSITION_DELTA       51
    "J5_PID_DELTA_G2",        // ROTATE_POSITION_PID_DELTA   52
    null,                     // ROT_POSITION_FORCE_DELTA    53 was "J5_FORCE_CALC_ANGLE"
    "J5_A2D_SIN_G2",          // ROT_SIN                     54
    "J5_A2D_COS_G2",          // ROT_SIN                     55
    "J5_MEASURED_ANGLE_G2",   // PLAYBACK_ROT_POSITION       56 //deprecated J5_PLAYBACK
    "J5_SENT_G2",             // SENT_ROT_POSITION           57 //unused
    null,                     // SLOPE_ROT_POSITION          58 //deprecated J5_SLOPE  unusued
    null                      // new field                   59 //was J5_MEASURED_ANGLE, not used get rid of
];
Dexter$1.robot_status_index_labels_g2 = [];
Dexter$1.make_robot_status_indices(Dexter$1.robot_status_labels_g2, Dexter$1.robot_status_index_labels_g2);

Dexter$1.robot_status_labels_g_other = [
    // misc block
    "JOB_ID",              //new field                    0 //for commmanded instruction (when added to queue)
    "INSTRUCTION_ID",      //same name                    1 //for cmd ins
    "START_TIME",          //new field                    2 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "STOP_TIME",           //new field                    3 //for cmd ins//ms since jan 1, 1970? From Dexter's clock
    "INSTRUCTION_TYPE",    //same name                    4 //for cmd ins  //"oplet"

    "ERROR_CODE",          //same name                    5 //for any error      //0 means no error. 1 means an error
    "DMA_READ_DATA",       //                             6 // deprecated DMA_READ_DATA then deprecated JOB_ID_OF_CURRENT_INSTRUCTION
    "READ_BLOCK_COUNT",    //                             7 // deprecated READ_BLOCK_COUNT then deprecated CURRENT_INSTRUCTION_ID
    "STATUS_MODE",   //same name                    8
    "END_EFFECTOR_IO_IN",  //END_EFFECTOR_IO_IN           9 // was END_EFFECTOR_IN for a while, 0, 1, or 2 indicating type of io for end effector

    "RS_10_G_OTHER", //10
    "RS_11_G_OTHER", //11
    "RS_12_G_OTHER", //12
    "RS_13_G_OTHER", //13
    "RS_14_G_OTHER", //14
    "RS_15_G_OTHER", //15
    "RS_16_G_OTHER", //16
    "RS_17_G_OTHER", //17
    "RS_18_G_OTHER", //18
    "RS_19_G_OTHER", //19

    "RS_20_G_OTHER", //20
    "RS_21_G_OTHER", //21
    "RS_22_G_OTHER", //22
    "RS_23_G_OTHER", //23
    "RS_24_G_OTHER", //24
    "RS_25_G_OTHER", //25
    "RS_26_G_OTHER", //26
    "RS_27_G_OTHER", //27
    "RS_28_G_OTHER", //28
    "RS_29_G_OTHER", //29

    "RS_30_G_OTHER", //30
    "RS_31_G_OTHER", //31
    "RS_32_G_OTHER", //32
    "RS_33_G_OTHER", //33
    "RS_34_G_OTHER", //34
    "RS_35_G_OTHER", //35
    "RS_36_G_OTHER", //36
    "RS_37_G_OTHER", //37
    "RS_38_G_OTHER", //38
    "RS_39_G_OTHER", //39

    "RS_40_G_OTHER", //40
    "RS_41_G_OTHER", //41
    "RS_42_G_OTHER", //42
    "RS_43_G_OTHER", //43
    "RS_44_G_OTHER", //44
    "RS_45_G_OTHER", //45
    "RS_46_G_OTHER", //46
    "RS_47_G_OTHER", //47
    "RS_48_G_OTHER", //48
    "RS_49_G_OTHER", //49

    "RS_50_G_OTHER", //50
    "RS_51_G_OTHER", //51
    "RS_52_G_OTHER", //52
    "RS_53_G_OTHER", //53
    "RS_54_G_OTHER", //54
    "RS_55_G_OTHER", //55
    "RS_56_G_OTHER", //56
    "RS_57_G_OTHER", //57
    "RS_58_G_OTHER", //58
    "RS_59_G_OTHER"  //59
];

Dexter$1.robot_status_index_labels_g_other = [];
Dexter$1.make_robot_status_indices(Dexter$1.robot_status_labels_g_other, Dexter$1.robot_status_index_labels_g_other);


Dexter$1.tool_names = [
    "no_tool",      //0
    "unknown_tool" //1
];

Dexter$1.error_code_strings = [
    "OK",   //0
    "error" //1
];

//____________END of Dexter Database______________
Dexter$1.tool_type_to_name = function(tool_type){
    if(tool_type < Dexter$1.tool_names.length){
        return Dexter$1.tool_names[tool_type]
    }
    else { return "unknown_tool" }
};

Dexter$1.error_code_to_string = function(error_code){
    if(error_code < Dexter$1.error_code_strings.length){
        return Dexter$1.error_code_strings[error_code]
    }
    else { return "error" }
};

Dexter$1.robot_status_to_html = function(rs, where_from = ""){
    if (rs === null) { return "robot_status " + where_from + " : null,<br/>" }
    else {
        let html_table = Dexter$1.robot_status_to_html_table(rs);
        return "<details><summary>robot_status fields " + where_from + "</summary>" + html_table + "</details>"
    }
};
//also called by Job.show_robot_status_history_item
Dexter$1.robot_status_to_html_table = function(ds){
        //setting table class and using css to set fonts in th and td cells fails
        //let cs = " style='font-size:10pt;' " //cell style
        let oplet = ds[Dexter$1.INSTRUCTION_TYPE];
        let long_start_time_string = Utils.date_integer_to_long_string(ds[Dexter$1.START_TIME]);
        let long_stop_time_string  = Utils.date_integer_to_long_string(ds[Dexter$1.STOP_TIME]);
        let result =
        "<table class='robot_status_table'>" +
        "<tr><th></th>                        <th>JOB_ID</th>                           <th>INSTRUCTION_ID</th>                                                            <th>START_TIME</th>                                                         <th>STOP_TIME</th>                                                                              <th>INSTRUCTION_TYPE</th> </tr>" +
        "<tr><td></td><td>"           + ds[Dexter$1.JOB_ID]         + "</td><td>" + ds[Dexter$1.INSTRUCTION_ID]   + "</td><td title='" + long_start_time_string + "'>" + ds[Dexter$1.START_TIME] + "</td><td title='" + long_stop_time_string + "'>" + ds[Dexter$1.STOP_TIME] + "</td><td title='" + Robot$1.instruction_type_to_function_name(oplet)  + "'>" + oplet +        "</td></tr>" +

        "<tr><th></th>              <th>ERROR_CODE</th>                          <th>DMA_READ_DATA</th>                    <th>READ_BLOCK_COUNT</th>                   <th>STATUS_MODE</th>                                                                 <th>END_EFFECTOR_IO_IN</th></tr>"      +
        "<tr><td></td><td>" + ds[Dexter$1.ERROR_CODE] + "</td> <td>"       + ds[Dexter$1.DMA_READ_DATA]  + "</td><td>" + ds[Dexter$1.READ_BLOCK_COUNT] + "</td><td>" + ds[Dexter$1.STATUS_MODE]                                               + "</td><td>" + ds[Dexter$1.END_EFFECTOR_IO_IN] + "</td></tr>" +

        "<tr><th></th>                   <th>Joint 1</th>                          <th>Joint 2</th>                          <th>Joint 3</th>                          <th>Joint 4</th>                          <th>Joint 5</th></tr>" +
        "<tr><th>ANGLE</th><td>"      + ds[Dexter$1.J1_ANGLE]       + "</td><td>" + ds[Dexter$1.J2_ANGLE]       + "</td><td>" + ds[Dexter$1.J3_ANGLE]       + "</td><td>" + ds[Dexter$1.J4_ANGLE]       + "</td><td>" + ds[Dexter$1.J5_ANGLE]     + "</td></tr>" +
        "<tr><th>DELTA</th><td>"      + ds[Dexter$1.J1_DELTA]       + "</td><td>" + ds[Dexter$1.J2_DELTA]       + "</td><td>" + ds[Dexter$1.J3_DELTA]       + "</td><td>" + ds[Dexter$1.J4_DELTA]       + "</td><td>" + ds[Dexter$1.J5_DELTA]     + "</td></tr>" +
        "<tr><th>PID_DELTA</th><td>"  + ds[Dexter$1.J1_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J2_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J3_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J4_PID_DELTA]   + "</td><td>" + ds[Dexter$1.J5_PID_DELTA] + "</td></tr>" +
        "<tr><th>FORCE_CALC_ANGLE</th><td>"     + ds[Dexter$1.J1_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J2_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J3_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J4_FORCE_CALC_ANGLE]      + "</td><td>" + ds[Dexter$1.J5_FORCE_CALC_ANGLE]    + "</td></tr>" +
        "<tr><th>A2D_SIN</th><td>"    + ds[Dexter$1.J1_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J2_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J3_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J4_A2D_SIN]     + "</td><td>" + ds[Dexter$1.J5_A2D_SIN]   + "</td></tr>" +
        "<tr><th>A2D_COS</th><td>"    + ds[Dexter$1.J1_A2D_COS]     + "</td><td>" + ds[Dexter$1.J2_A2D_COS]     + "</td><td>" + ds[Dexter$1.J3_A2D_COS]     + "</td><td>" + ds[Dexter$1.J4_A2D_COS]     + "</td><td>" + ds[Dexter$1.J5_A2D_COS]   + "</td></tr>" +
        "<tr><th>PLAYBACK</th><td>"   + ds[Dexter$1.J1_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J2_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J3_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J4_PLAYBACK]    + "</td><td>" + ds[Dexter$1.J5_PLAYBACK]  + "</td></tr>" +
        "<tr><th>SENT</th><td>"       + ds[Dexter$1.J1_SENT]        + "</td><td>" + ds[Dexter$1.J2_SENT]        + "</td><td>" + ds[Dexter$1.J3_SENT]        + "</td><td>" + ds[Dexter$1.J4_SENT]        + "</td><td>" + ds[Dexter$1.J5_SENT]      + "</td></tr>" +
        "<tr><th>SLOPE</th><td>"      + ds[Dexter$1.J1_SLOPE]       + "</td><td>" + ds[Dexter$1.J2_SLOPE]       + "</td><td>" + ds[Dexter$1.J3_SLOPE]       + "</td><td>" + ds[Dexter$1.J4_SLOPE]       + "</td><td>" + ds[Dexter$1.J5_SLOPE]     + "</td></tr>" +
        "</table>";
        return result
};


Dexter$1.sent_instructions_to_html = function(sent_ins){
    var result = "<table><tr>" +
        "<th>JOB_ID</th>" +
        "<th title='The instruction_id is the same as the program counter at send time.'>INS ID</th>" +
        "<th>START_TIME</th>" +
        "<th>STOP_TIME</th>" +
        "<th>INSTRUCTION_TYPE</th>" +
        "<th>Instruction arguments</th></tr>";
    for(var ins of sent_ins){
        var instruction_type = Instruction.extract_instruction_type(ins);
        var instruction_name = " (" + Robot$1.instruction_type_to_function_name(instruction_type) + ")";
        result +=  "<tr><td>" + Instruction.extract_job_id(ins)          + "</td><td>" +
                                Instruction.extract_instruction_id(ins)  + "</td><td>" +
                                Instruction.extract_start_time(ins)      + "</td><td>" +
                                Instruction.extract_stop_time(ins)       + "</td><td>" +
                                instruction_type + instruction_name      + "</td><td>" +
                                Instruction.extract_args(ins)            + "</td></tr>";
    }
    result += "</table>";
    return "<details style='display:inline-block;'><summary></summary>" + result + "</details>"
};
//called from Utils.stringify_value
Dexter$1.make_show_rs_history_button_html = function(job_id){
    return "<button class='onclick_via_data' data-onclick='Dexter.show_rs_history,," + job_id + "'>Show robot status history</button>"

};
//called from inspect
Dexter$1.make_show_rs_history_button_html2 = function(job_id){
    return "<button onclick='Dexter.show_rs_history(" + job_id + ")'>Show robot status history</button>"

};

//start the process in ui
Dexter$1.show_rs_history = function(job_id){
    job_id = parseInt(job_id); //coming from UI so job_id likely a string to start with.
    Dexter$1.show_rs_history_get_rs_history(job_id);
};

Dexter$1.show_rs_history_get_rs_history = function(job_id){
    var the_job = Job.job_id_to_job_instance(job_id);
    var rob     = the_job.robot;
    var rs_history = the_job.rs_history;
    var rs_labels  = rob.constructor.robot_status_labels;
    if (rob instanceof Dexter$1) { //shove the xyz on the end of every rs, and append xyz to the labels too.
         rs_labels = rs_labels.concat(["End_Effector_X", "End_Effector_Y","End_Effector_Z"]);
         let new_rs_history = [];
         for (let i = 0; i < rs_history.length; i++){
            let rs = rs_history[i];
            let robot_status_instance = new RobotStatus({robot_status: rs});
            let sm = robot_status_instance.status_mode();
            if((sm === 0) || (sm === 1)) {
                //let angles = [rs[Dexter.J1_MEASURED_ANGLE], rs[Dexter.J2_MEASURED_ANGLE], rs[Dexter.J3_MEASURED_ANGLE], rs[Dexter.J4_MEASURED_ANGLE], rs[Dexter.J5_MEASURED_ANGLE]]
                let a_xyz  = robot_status_instance.xyz()[0];
                new_rs_history.push(rs.concat(a_xyz));
            }
            else { new_rs_history.push(rs); }
        }
        rs_history = new_rs_history;
    }
    Dexter$1.show_rs_history_display(the_job.name, the_job.robot.name, the_job.status_code,
                 the_job.highest_completed_instruction_id,
                 the_job.sent_instructions,  rs_history, rs_labels
                );
};

Dexter$1.show_rs_history_display = function(job_name, robot_name, status, highest_completed_instruction_id, sent_instructions, rs_history, rs_labels){
    //var job_instance = Job.job_id_to_instance(job_id) //won't work cause we'er in the UI.
    //out("in show_rs_history_display: " + sent_instructions)
    var highest_sent_instruction = "null";
    if (sent_instructions.length > 0) {
        highest_sent_instruction = sent_instructions[sent_instructions.length - 1][1];
    }
    var top_info = "<div> " + status + ". highest_sent_instruction: " + highest_sent_instruction +
        " &nbsp;&nbsp;highest completed instruction: " + highest_completed_instruction_id + "</div>";
    show_window({content: top_info + "<div id='rs_history_table'/>",
        title: "Job: " + job_name + ",&nbsp;&nbsp; Robot: " + robot_name + ", &nbsp;&nbsp; Status History",
        width:  725,
        height: 300});
    Dexter$1.rs_history_populate_window(sent_instructions, rs_history, rs_labels);
};

Dexter$1.make_rs_history_dataFields = function(rs_labels){
    var result = [];
    for(var i  = 0; i < rs_labels.length; i++){
        result.push({name: i, type:"string"});
    }
    return result
};

Dexter$1.make_rs_history_columns = function(rs_labels, sent_instructions){
    var result = [];
    let label;
    let width;
    let cells_renderer = null; //function(row, column, value, rowData){
                                  //try { value =  JSON.stringify(value) }
                                  //catch (e) {}
                                 // return value}
    for(var i  = 0; i < rs_labels.length; i++){
        label  = rs_labels[i];
        width=90;
        cells_renderer = null;
        if      (label === null) { label = "unused"; }
        else if (label == "JOB_ID")   {
            label = "<span title='The Job this instruction is in.'>JOB_ID</span>"; //doesn't work. tooltip doesn't show up
            width=70;
        }
        else if (label == "INSTRUCTION_ID")   {
            label = "<span title='instruction_id in the Job of JOB_ID.'>INS_ID</span>"; //doesn't work. tooltip doesn't show up
            width=80;
            cells_renderer = function (row, column, value, rowData) {
                    let ins_id = parseInt(value);
                    let ins = Dexter$1.get_instruction_from_sent_instructions(sent_instructions, ins_id);
                    let ins_html = "Instruction Fields&#013;";
                    let label_index = 0;
                    for(let lab of Instruction.labels){
                        ins_html += lab +  ": " + ins[label_index] + "&#013";
                        label_index += 1;
                    }
                    let args_html = ins.slice(label_index);
                    try { args_html = JSON.stringify(args_html); }
                    catch (e) {}
                    ins_html += "args: " + args_html;
                    return "<div title='" + ins_html + "' style='width:100%;color:blue;'>" + value + "</div>"
                    };
        }
        else if (label == "START_TIME") {
            label = "<span title='In milliseconds since Jan 1, 1970.'>START_TIME</span>";
            width=120;
        }
        else if (label == "STOP_TIME") {
            label = "<span title='In milliseconds since Jan 1, 1970.'>STOP_TIME</span>";
            width=120;
        }
        else if (label == "INSTRUCTION_TYPE") { //beware, usually this tooltip doesn't show. Maybe a jqxwidget bug?
            label = "<span title='instruction_type, a.k.a oplet.'>Type</span>"; // setting title doesn't give tooltip
            width=54;
            cells_renderer = function (row, column, value, rowData) {
                let fn_name = Robot$1.instruction_type_to_function_name(value[1]); //value will be a string of 3 chars, an oplet surounded by double quots.
                return "<div title='" + fn_name + "' style='width:100%;color:blue;'>" + value + "</div>"
            };
        }
        else if (label == "ERROR_CODE") {  //beware, usually this tooltip doesn't show. Maybe a jqxwidget bug?
            label = "<span title='error_code. Zero means no error.'>Error</span>"; // setting title doesn't give tooltip
            width=60;
        }
        else if (label.startsWith("End_Effector")) {
            width = 170;
        }
        else { //other labels
           width = (Math.max(label.length, 8) * 10);
           if(i < 60) { width += 15; } //room for the array index number.
        }
        var pinned = (i < 3);
        if(i < 60) { label = i + ". " + label; }
        let col_obj = {text: label, dataField: i, width: width, pinned: pinned,
                        draggable: true, cellsRenderer: cells_renderer }; //draggable is supposed to make the column draggable but it doesn't
        result.push(col_obj);
    }
    return result
};

Dexter$1.get_instruction_from_sent_instructions = function(sent_instructions, instruction_id){
    for(var ins of sent_instructions){
        if(ins[Dexter$1.INSTRUCTION_ID] == instruction_id){
            return ins
        }
    }
    return null
};

Dexter$1.prepare_rses_for_display = function(rs_history){
    let result = [];
    for (let row of rs_history){
        let new_row = [];
        result.push(new_row);
        for(let elt of row){
            if (typeof(elt) != "number"){
                try{ elt = JSON.stringify(elt); }
                catch (e) {}
            }
            new_row.push(elt);
        }
    }
    return result
};

Dexter$1.rs_history_populate_window = function(sent_instructions, rs_history, rs_labels){
    // prepare the data
    var data = Dexter$1.prepare_rses_for_display(rs_history); // [] // rs_history //looks like all html formatting & tooltips in the data are just trhown out bu jqdatatable
    var source =
    {   localData: data,
        dataType: "array",
        dataFields: Dexter$1.make_rs_history_dataFields(rs_labels)
    };
    var dataAdapter = new $.jqx.dataAdapter(source);
    $("#rs_history_table").jqxDataTable(
        {   width:  700,
            height: 225,
            //columnsHeight: "32px", //jqx bug: when including this field, it causes the vertical scroll bar to disappear rendering scorlling of long tables impossible.
            // need 2 rows of text
            altRows:  true,
            sortable: true,
            //theme: 'energyblue',
            pageable: false, //true,
            //pagerButtonsCount: 10,
            source: dataAdapter,
            columnsResize: true,
            columns: Dexter$1.make_rs_history_columns(rs_labels, sent_instructions)
        });
};

//we import it here, just to make sure its loaded,
//before the below code is loaded.

class IO$1{}

IO$1.get_page     = Robot.get_page;
IO$1.grab_robot_status = Robot.grab_robot_status;
IO$1.out          = Robot.out;
IO$1.save_picture = Robot.save_picture;
IO$1.show_picture = Robot.show_picture;
IO$1.show_video   = Robot.show_video;
IO$1.take_picture = Robot.take_picture;
//read_file and write_file are Dexter-specific instructions only,
//so they are under Dexter.read_file and Dexter.write_file

globalThis.IO = IO$1;

//See Examples at bottom of file

Dexter.defaults_arg_sep = ", ";

Dexter.defaults_coloned_comment_props = [
    "Dexter Serial Number",
    "Dexter Model",
    "Manufacture Location",
    "Built by"
];

Dexter.defaults_colonless_comment_props = [
    "DexRun modified",
    "xillydemo modified",
    "OS version"
];

//Dexter.dexter0.defaults = {}

/* Returns something like: "Dexter.dexter0:/srv/samba/share/Defaults.make_ins"
Dexter.dexter0.defaults_url()
*/
Dexter.prototype.defaults_url = function(){
    return "Dexter." + this.name + ":/srv/samba/share/Defaults.make_ins"
};


/*Gets the Defaults.make_ins file from Dexter and
sets this.defaults_lines with an array of strings (1 string per line)
Dexter.dexter0.defaults_read()
Dexter.dexter0.defaults_lines
*/

//the callback is optional.
//when set_link_lengths called defaults_read,
//it has the callback call Dexter.prototype.start_aux
Dexter.prototype.defaults_read = function(callback = null){
    let the_url = this.defaults_url();
    let the_dex_inst = this;
    let normal_defaults_read_cb = (function(err, content){
        if(err) { dde_error("Dexter." + the_dex_inst.name + ".defaults_read errored with url: " +
            the_url + "<br/>and error message: " +
            err.toString() +
            "<br/>You can set a Job's robot to the idealized defaults values by<br/>passing in a Job's 'get_dexter_defaults' to true.");
        }
        else {
            try {
                the_dex_inst.defaults_set_lines_from_string(content);
                the_dex_inst.defaults_lines_to_high_level();
                if (callback) {
                    callback.call(the_dex_inst, null);
                }
            }
            catch(err) {
                let defaults_copy = JSON.parse(JSON.stringify(Dexter.defaults));
                the_dex_inst.defaults = defaults_copy;
                warning("Could not parse Defaults.make_ins due to:<br/>" +
                    err.message +
                    "<br/>so Dexter." + the_dex_inst.name +
                    ".defaults has been set to a copy of Dexter.defaults."
                );
                if (callback) {
                    callback.call(the_dex_inst, null);
                }
            }
        }
    });
    DDEFile.read_file_async(the_url, normal_defaults_read_cb);
};

Dexter.prototype.defaults_write_return_string = function(){
    this.defaults_high_level_to_defaults_lines();
    let content = this.defaults_get("whole_file_string");
    return content
};

Dexter.prototype.defaults_write = function(){
    let content = this.defaults_write_return_string();
    let the_url = this.defaults_url();
    let the_dex_inst = this;
    DDEFile.write_file_async(the_url,  content,
        function(err){
            if(err) { warning("Dexter." + the_dex_inst.name + ".defaults_write errored with: " +
                err.message);
            }
            else {
                out(the_url + " written.");
            }
        });
};


/*
Internal fn not called by users.
They should use Dexter.dexter0.set("lines", "some str") instead.
Usually this function isn't called directly
as you can call Dexter.dexter0.defaults_read()
but if you really want to set defaults_lines to
a string you already have, its useful.

***
Dexter.dexter0.defaults_set_lines_from_string(read_file("Defaults.make_ins"))
Dexter.dexter0.defaults_lines
*/
Dexter.prototype.defaults_set_lines_from_string = function(content){
    content = content.trimEnd(); //don't trim beginning. James N wants top blank lines.
    let orig_lines = content.split("\n");
    this.defaults_lines = [];
    for(let orig_line of orig_lines){
        let a_clean_line = this.defaults_clean_line(orig_line);
        this.defaults_lines.push(a_clean_line);
    }
    return this.defaults_lines
};

/*any combination of contiguous spaces and commas counts as
  1 delimiter and are replace by one space in the output.
 inspect(Dexter.dexter0.defaults_clean_line(
    "  a    1 2  ; this    is").length)
  Dexter.dexter0.defaults_clean_line("a    9").length
  Dexter.dexter0.defaults_clean_line("S   RebootServo,,,   3, 1;")

  Dexter.dexter0.defaults_clean_line("S, RebootServo, 3, 1;")
*/
Dexter.prototype.defaults_clean_line = function (orig_line){
    let line = orig_line.trim();
    let new_line = "";
    let prev_char_was_space_or_comma = false;
    let in_comment = false;
    if(line === "") { return line }
    else {
        for(let char of line){
            if(in_comment) { new_line += char; }
            else if (char === ";") {
                new_line += char;
                in_comment = true;
            }
            else if((char === " ") || (char === ",")) {
                if(prev_char_was_space_or_comma) ; //throw out char
                else {
                    new_line += Dexter.defaults_arg_sep; //canonical separator is space, and this is the ONE space separator
                    prev_char_was_space_or_comma = true;
                }
            }
            else {
                new_line += char;
                prev_char_was_space_or_comma = false;
            }
        }
    }
    if(!line.includes(";")) { new_line += ";"; }
    return new_line
};

/*
Returns array of start_index of
    0. line starting with line_start,
    1. start of line_start within its line
    2. end of line_start within str. Ie the next char after the last
       char of line_start
Dexter.dexter0.defaults_find_index("asdf")
Dexter.dexter0.defaults_find_index("; Dexter Serial", false)
*/
Dexter.prototype.defaults_find_index = function(line_start, smart=true, from_end=true){
    if(!from_end) {
        for(let i = 0; i < this.defaults_lines.length; i++) {
            let line = this.defaults_lines[i];
            if(!smart) {
                if(line.startsWith(line_start)) {
                    return [i, 0, line_start.length]
                }
            }
            else {
                let start_pos = line.indexOf(line_start);
                if(start_pos != -1) {
                    let prefix = line.substring(0, start_pos);
                    if((prefix[0] === ";") || (prefix[0] === "S")){
                        for(let j = 1; j < prefix.length; j++){
                            prefix[j];
                        }
                    }
                }
            }
        }
        return null
    }
    else { //from_end
        for(let i = this.defaults_lines.length - 1; i >= 0; i--) {
            let line = this.defaults_lines[i];
            if(!smart) {
                if(line.startsWith(line_start)) {
                    return [i, 0, line_start.length]
                }
            }
        }
        return null
    }
};

//_______End of Utils_______
/*
***
Dexter.dexter0.defaults_get("whole_file_string")
Dexter.dexter0.defaults_get("lines")
Dexter.dexter0.defaults_get(["line", -1])

Dexter.dexter0.defaults_get("Dexter Serial Number")
Dexter.dexter0.defaults_get("Dexter Model")
Dexter.dexter0.defaults_get("Manufacture Location")
Dexter.dexter0.defaults_get("Built by")

Dexter.dexter0.defaults_get("DexRun modified")
Dexter.dexter0.defaults_get("xillydemo modified")
Dexter.dexter0.defaults_get("OS version")

Dexter.dexter0.defaults_get("S, RebootServo, 3") // "1"
Dexter.dexter0.defaults_get("S, RebootServo")    // "1, 1"
Dexter.dexter0.defaults_get("S, J1BoundryHigh")  // "666000"
Dexter.dexter0.defaults_get("J1BoundryHigh")     // "666000"


Dexter.dexter0.defaults_lines
*/
Dexter.prototype.defaults_get = function(key){
    if(!Array.isArray(this.defaults_lines)) {
        warning("No content for defaults_lines yet so all calls to defaults_get will return undefined.");
        return undefined
    }
    if(key === "whole_file_string") {
        return this.defaults_lines.join("\n")
    }
    else if(key === "lines") { return this.defaults_lines }
    else if (Number.isInteger(key)) {
        if(key < 0) { key = this.defaults_lines.length + key; }
        return this.defaults_lines[key]
    }
    else if (key.startsWith("^") || key.includes("\\")) { //key is a regex expression like '^J\\dBoundryHigh'
        let the_regex = new RegExp(key);
        let lines = [];
        for(let i = 0; i < this.defaults_lines.length; i++){
            let line = this.defaults_lines[i];
            if(the_regex.test(line)) {
                lines.push(line);
            }
        }
        return lines
    }
    else {
        let [result, line_number] = this.get_coloned_prop_value(key);
        if(result !== undefined) { return result }
        else {
            [result, line_number] = this.get_colonless_prop_value(key);
            if(result !== undefined) { return result }
            else {
                [result, line_number] = this.defaults_get_S(key);
                if(result !== undefined) { return result }
                else {
                    warning("Dexter." + this.name + ".defaults_get could not find key: " + key);
                    return undefined
                }
            }
        }
    }
};

//returns array of value(a string) and its line number(a non-neg int)
//or undefined if not found
Dexter.prototype.get_coloned_prop_value = function(key){
    if(Dexter.defaults_coloned_comment_props.includes(key)) {
        for(let i = this.defaults_lines.length - 1; i >=0; i--){
            let line = this.defaults_lines[i];
            if (line.startsWith(";")){
                let trimmed_line = line.substring(1).trim();
                let colon_pos = trimmed_line.indexOf(":");
                if(colon_pos >= 0) {
                    let possible_key = trimmed_line.substring(0, colon_pos).trim();
                    if(key === possible_key){
                        let val = trimmed_line.substring(colon_pos + 1).trim();
                        return [val, i]
                    }
                }
            }
        }
    }
    return []
};

//returns array of value(a string) and its line number(a non-neg int)
//or [] if not found
Dexter.prototype.get_colonless_prop_value = function(key){
    if(Dexter.defaults_colonless_comment_props.includes(key)) {
        for(let i = this.defaults_lines.length - 1; i >=0; i--){
            let line = this.defaults_lines[i];
            if (line.startsWith(";")){
                let trimmed_line = line.substring(1).trim();
                trimmed_line.indexOf(":");
                if(trimmed_line.startsWith(key + " ")) {
                    let val = trimmed_line.substring(key.length + 1).trim();
                    return [val, i]
                }
            }
        }
    }
    return []
};

/* Dexter.dexter0.defaults_lines
Dexter.dexter0.defaults_set("whole_file_string", ";top line\nS, hey")
Dexter.dexter0.defaults_lines
Dexter.dexter0.defaults_set("lines", ";diff top line\nS, hey")
   //synonym to whole_file_string but I want it since "get"
   //needs "whole_file_string"
Dexter.dexter0.defaults_set("lines", [";top line too", "S, hey 9"])
Dexter.dexter0.defaults_set(["line", 0], ";new top line")
                                        ["a", 30, 60] => "a 30 60"
Dexter.dexter0.defaults_get(["line", -2])

Dexter.dexter0.defaults_set("Dexter Serial Number", "XYZ")
Dexter.dexter0.defaults_set("Dexter Model", "ABC")
Dexter.dexter0.defaults_set("Manufacture Location", "LA")
Dexter.dexter0.defaults_set("Built by", "FRY")

Dexter.dexter0.defaults_set("DexRun modified", "FEB")
Dexter.dexter0.defaults_set("xillydemo modified", "1984")
Dexter.dexter0.defaults_set("OS version", "1.2.3")

Dexter.dexter0.defaults_set("S, RebootServo, 3", "X; a brand new comment")
Dexter.dexter0.defaults_set("S, RebootServo", "Y")
Dexter.dexter0.defaults_set("S, J1BoundryHigh", "ZZ")

Dexter.dexter0.defaults_set("JointDH", "1, 245656, 324100, 260, 323413") //note:
  //that first arg is really the Joint number, and semantically belongs in the key,
  //but then we can't use the s param name for the key, so keep the joint number in the value.


Dexter.dexter0.defaults_lines

//sets low level defaults_lines, then updates high level defaults
*/
Dexter.prototype.defaults_set = function(key, value){
    if(!Array.isArray(this.defaults_lines)) {
        this.defaults_lines = []; //not great but at least the below clauses will work
        if((key !== "whole_file_string") && (key !== "lines")) {
            warning("No content for defaults_lines yet so initializing it to the empty array.");
        }
    }
    if(typeof(this.defaults) !== "object") {
        if((key !== "whole_file_string") && (key !== "lines")) {
            this.defaults_init_defaults();
            warning("No content for defaults yet so initializing it to the empty object.");
        }
    }
    if(key === "whole_file_string") {
        if(Array.isArray(value)) { this.defaults_lines = value; }
        else if (typeof(value) === "string") {
            this.defaults_set_lines_from_string(value);
        }
        this.defaults_lines_to_high_level();
        return this.defaults
    }
    else if(key === "lines") {
        if(typeof(value) === "string") { this.defaults_set_lines_from_string(value); }
        else if(Array.isArray(value)) {
            this.defaults_lines = value;
        }
        else { dde_error("Dexter defaults.set passed 'lines' with a value that isn't an array: " + value);
        }
        this.defaults_lines_to_high_level();
        return this.defaults
    }
    else if (Number.isInteger(key)) { // -1 means we're  making a new last element.
        if(typeof(value) !== "string") {
            dde_error("Dexter." + this + ".defaults_set called with key of an integer<br/>" +
                      "so value should be a string but its not: " + value);
        }
        if(key < 0) { key = this.defaults_lines.length + key;}
        if(key >= this.defaults_lines.length) {
            dde_error("Dexter." + this.name + ".defaults_set passed key: " + key +
                " which is higher than the length of Dexter." + this.name + ".defaults_lines");
        }
        else {
            if(typeof(value) !== "string") {
                dde_error("Dexter." + this.name + ".defaults_set passed key: " + key +
                    " which expected a value of a string, but passed instead: " + value);
            }
            let clean_line = this.defaults_clean_line(value);
            this.defaults_lines[key] = clean_line;
            this.defaults_line_to_high_level(clean_line, key); //key is line number
            return value
        }
    }
    else if (key.length === 1) {
        dde_error("Dexter." + this.name + ".defaults_set passed key: " + key +
                  "<br/>which looks like an oplet, but you can't use oplets as keys with defaults_set." +
                  "<br/>Consider Dexter." + this.name + ".defaults_insert() instead.");
    }
    else {
        let value_str;
        if(typeof(value) === "string") {
            value_str = value;
            try {
                value = JSON.parse(value);
            }
            catch(err) {
                if (value.includes(Dexter.defaults_arg_sep)) {
                    value = value.split(Dexter.defaults_arg_sep);
                    for(let i = 0; i < value.length; i++){
                        let item = value[i];
                        let num = parseFloat(item);
                        if(Number.isNaN(num)) {
                            value = value_str; //assume user wanted just a string.
                            break;
                        }
                        else { value[i] = num;}
                    }
                }
            }
        }
        else {
            if (Array.isArray(value)) {
                value_str = value.join(Dexter.defaults_arg_sep);
            }
            else {
                value_str = "" + value;
            }
        }
        //now value_str is a string, and value is a num, an array, or possibly a string
        let result = this.set_coloned_prop_value(key, value_str);
        if(result !== undefined) {
            this.defaults[key] = value;
            return result
        }
        else {
            result = this.set_colonless_prop_value(key, value_str);
            if(result !== undefined) {
                this.defaults[key] = value;
                return result
            }
            else {
                //we've got an S param
                this.defaults_set_S(key, value_str); //sets the line in defaults_lines
                if(Dexter.defaults_is_j_key(key)) {
                    let [high_key, joint_number] = Dexter.defaults_j_key_to_high_key(key);
                    let ins_arr = [];
                    ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
                    //ins_arr.push(parsed_line.key) //arg0, the param name
                    ins_arr[Instruction.INSTRUCTION_ARG0] = key; //low key
                    if(Array.isArray(value)) {
                        ins_arr = ins_arr.concat(value);
                    }
                    else { ins_arr[Instruction.INSTRUCTION_ARG1] = value;}
                    let dde_ins_arr = Socket.instruction_array_arcseconds_to_degrees_maybe(ins_arr, this);
                    let val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1);
                    let new_high_val = val_arr[0];
                    this.defaults[high_key][joint_number - 1] = new_high_val;
                    return new_high_val
                }
                else if (key === "JointDH"){
                    let high_key = "dh_mat";
                    if(!Array.isArray(this.defaults.dh_mat)) {
                        this.defaults.dh_mat = [];
                    }
                    this.defaults[high_key]; //at the very least, will be an empty array
                    let joint_number = value[0];
                    let ins_arr = [];
                    ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
                    //ins_arr.push(parsed_line.key) //arg0, the param name
                    ins_arr[Instruction.INSTRUCTION_ARG0] = key; //low key
                    ins_arr = ins_arr.concat(value);
                    let dde_ins_arr = Socket.instruction_array_arcseconds_to_degrees_maybe(ins_arr, this);
                    let val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG2);
                    this.defaults[high_key][joint_number - 1] = val_arr;
                    return val_arr
                }
                else {
                    this.defaults[key] = value;
                    return value
                }
            }
        }
    }
};

Dexter.prototype.set_coloned_prop_value = function(key, value){
    if(Dexter.defaults_coloned_comment_props.includes(key)) {
        for(let i = this.defaults_lines.length - 1; i >=0; i--){
            let line = this.defaults_lines[i];
            if (line.startsWith(";")){
                let trimmed_line = line.substring(1).trim();
                let colon_pos = trimmed_line.indexOf(":");
                if(colon_pos >= 0) {
                    let possible_key = trimmed_line.substring(0, colon_pos).trim();
                    if(key === possible_key){
                        colon_pos = line.indexOf(":");
                        let new_line = "; " + key + ": " + value;
                        this.defaults_lines[i] = new_line;
                        return value
                    }
                }
            }
        }
    }
    return undefined
};

Dexter.prototype.set_colonless_prop_value = function(key, value){
    if(Dexter.defaults_colonless_comment_props.includes(key)) {
        for(let i = this.defaults_lines.length - 1; i >=0; i--){
            let line = this.defaults_lines[i];
            if (line.startsWith(";")){
                let trimmed_line = line.substring(1).trim();
                trimmed_line.indexOf(":");
                if(trimmed_line.startsWith(key + " ")) {
                    let new_line = "; " + key + " " + value;
                    this.defaults_lines[i] = new_line;
                    return value
                }
            }
        }
    }
    return undefined
};

Dexter.defaults_starts_with_S_oplet = function(string){
    return string.startsWith("S" + Dexter.defaults_arg_sep)
};

//trim "S, " from front
Dexter.defaults_trim_oplet = function(string){
    return string.substring(1 + Dexter.defaults_arg_sep.length)
};

// key can be "asdf", or "S, asdf"  or "asdf, 2" or "S, asdf, 2" ,etc.
//return array of value and line number of key in file
//or []
Dexter.prototype.defaults_get_S = function(key){
    for(let i = this.defaults_lines.length - 1; i >=0; i--){
        let line = this.defaults_lines[i];
        let first_sep_pos = line.indexOf(Dexter.defaults_arg_sep);
        let trimmed_line = line;
        let trimmed_key  = key;
        if((line === "") || line.startsWith(";")) { continue; } //not in this line
        else if (first_sep_pos === -1)            { continue; } //without sep, no val so not in this line
        else if (line.startsWith(key))            { trimmed_line = line; trimmed_key = key; }
        else if (Dexter.defaults_starts_with_S_oplet(key)){
            trimmed_key = Dexter.defaults_trim_oplet(key);
            if(Dexter.defaults_starts_with_S_oplet(line)){
                trimmed_line = Dexter.defaults_trim_oplet(line);
            }
            else { trimmed_line = line; }
        }
        else if(Dexter.defaults_starts_with_S_oplet(line)){  //we know key doesn't start with S_oplet
            trimmed_key = key;
            trimmed_line = Dexter.defaults_trim_oplet(line);
        }
        //trimmed_key and trimmed_line are set
        if(trimmed_line.startsWith(trimmed_key)){  //we've got a match!
            let after_key_pos = key.length;
            if(after_key_pos >= trimmed_line.length) { return [] } //end of line after key so no value
            else if (!(trimmed_line.substring(after_key_pos).startsWith(Dexter.defaults_arg_sep))){ return [] } //no sep after key so no value
            else {
                let val_begin_pos = after_key_pos + Dexter.defaults_arg_sep.length;
                let val = trimmed_line.substring(val_begin_pos);
                let comment_pos = val.indexOf(";");
                if(comment_pos !== -1){ val = val.substring(0, comment_pos); }
                val = val.trim();
                if(length.val === 0) { return [] } //we found the key but no value
                else { return [val, i] }
            }
        }
    }
    return []
};

//key is a string of a param name. Must be > 1 char.
//value is a string of the value. It can start with the defaults_arg_sep(erator) or not.
//it can have a semicolon (value terminator & comment starter or not.
//If key exists, its value is replaced.
//If key does not exist, a new line is added at the end of defaults_lines.
Dexter.prototype.defaults_set_S = function(key, value_str){
    for(let i = this.defaults_lines.length - 1; i >=0; i--){
        let line = this.defaults_lines[i];
        let first_sep_pos = line.indexOf(Dexter.defaults_arg_sep);
        let trimmed_line = line;
        let trimmed_key = key;
        if((line === "") || line.startsWith(";")) { continue; } //not in this line
        else if (first_sep_pos === -1)            { continue; } //without sep, no val so not in this line
        else if (line.startsWith(key))            { trimmed_line = line; trimmed_key = key; }
        else if (Dexter.defaults_starts_with_S_oplet(key)){
            trimmed_key = Dexter.defaults_trim_oplet(key);
            if(Dexter.defaults_starts_with_S_oplet(line)){
                trimmed_line = Dexter.defaults_trim_oplet(line);
            }
            else { trimmed_line = line; }
        }
        else if(Dexter.defaults_starts_with_S_oplet(line)){
            trimmed_line = Dexter.defaults_trim_oplet(line);
        }
        else { trimmed_line = line; }
        //trimmed_key and trimmed_line are set
        if(trimmed_line.startsWith(trimmed_key)){  //we've got a match!
            if(!(Dexter.defaults_starts_with_S_oplet(trimmed_key))){
                trimmed_key = "S" + Dexter.defaults_arg_sep + trimmed_key;
            }
            if (!(trimmed_key.endsWith(Dexter.defaults_arg_sep))){
                trimmed_key = trimmed_key + Dexter.defaults_arg_sep;
                let new_line = trimmed_key + value_str;
                if(!(new_line.includes(";"))) {
                    new_line += ";";
                }
                let semi_pos = line.indexOf(";");
                if(semi_pos !== -1) { new_line += line.substring(semi_pos + 1); }
                this.defaults_lines[i] = new_line;
                return new_line
            }
        }
    } //end of for_loop
    //key was not existing, so tack a new line onto the end.
    //warning("Dexter." + this.name + ".defaults_set attempted to set key: " + key +
    //        " but that key not found.")
    let new_line = "S";
    if(!key.startsWith(Dexter.defaults_arg_sep)) {
        new_line += Dexter.defaults_arg_sep;
    }
    new_line += key;
    new_line += Dexter.defaults_arg_sep;
    new_line += value_str;
    if(!value_str.includes(";")){
        new_line += ";";
    }
    this.defaults_lines.push(new_line);
    return value_str
};

//returns deleted val
Dexter.prototype.defaults_delete = function(key){
    if(key === "whole_file_string") {
        let deleted_lines = this.defaults_lines;
        this.defaults_lines = [];
        this.defaults = {};
        return deleted_lines
    }
    else if(key === "lines") {
        let deleted_lines = this.defaults_lines;
        this.defaults_lines = [];
        this.defaults = {};
        return deleted_lines
    }
    else if (Number.isInteger(key)) {
        if(key < 0) { key = this.defaults_lines.length + key; }
        let deleted_lines = this.defaults_lines.splice(key, 1);
        let parsed_line = Dexter.defaults_parse_line(line, line_number);
        if(parsed_line.hasOwnProperty("key")) {
            delete this.defaults[parsed_line.key];
        }
        return deleted_lines[0]
    }
    else if (key.startsWith("^") || key.includes("\\")) { //key is a regex expression like '^J\\dBoundryHigh'
        let the_regex = new RegExp(key);
        let lines_deleted_count = 0;
        for(let i = this.defaults_lines.length - 1; i >= 0; i--){
            let line = this.defaults_lines[i];
            if(the_regex.test(line)) {
                this.defaults_lines.splice(i, 1);
                lines_deleted_count += 1;
            }
        }
        this.defaults_lines_to_high_level();
        return lines_deleted_count
    }
    else {
        let [val, line_number] = this.get_coloned_prop_value(key);
        if(val !== undefined) {
            let deleted_lines = this.defaults_lines.splice(line_number, 1);
            delete this.defaults[key];
            return deleted_lines[0]
        }
        else {
            [val, line_number] = this.get_colonless_prop_value(key);
            if(val !== undefined) {
                let deleted_lines = this.defaults_lines.splice(line_number, 1);
                delete this.defaults[key];
                return deleted_lines[0]
            }
            else {
                [val, line_number] = this.defaults_get_S(key);
                if(val !== undefined) {
                    let deleted_lines = this.defaults_lines.splice(line_number, 1);
                    if (Dexter.defaults_is_j_key(key)) {
                        let [high_key, joint_number] = Dexter.defaults_j_key_to_high_key(key);
                        let arr = this.defaults[high_key];
                        delete arr[joint_number - 1];
                    }
                    else {
                        delete this.defaults[key];
                    }
                    return deleted_lines[0]
                }
                else {
                    warning("Dexter." + this.name + ".defaults_get could not find key: " + key);
                    return undefined
                }
            }
        }
    }
};
//index is the index of the line after it has been inserted
//into this.defaults_lines.
//A -1 index makes the line arg be in the same posiition in the array
//as the (before the call) last elt.
//ie in the new elt it is the 2nd to last elt.
//a bit "counter intuitive", but consistent with the
//index in defaults.set and JS splice
//That means the new elt will be the new 2nd to last elt
//with the new last elt still being the (before the call) last elt.
//this "def" of index is the same as I use in "defaults_insert"
//and the same that JS splice uses,
//but does mean that we don't have a way to represent how to
// "insert" a new elt on the end of the array (after the call)
//so an index of "last" is the way to do that.
//a -2 makes it the  to the last elt in the array.
// var foo = [4, 5, 6]
// foo.splice(-2, 0, 66)
Dexter.prototype.defaults_insert = function(line, index="last"){
    if     (index === "last") { index = this.defaults_lines.length; }
    else if(index < 0)        { index = this.defaults_lines.length + index;}

    if((index < 0) || (index > this.defaults_lines.length)){
        dde_error("Dexter." + this.name +
            ".defaults_insert passed an index that is out of range for defaults_lines.");
    }
    line = this.defaults_clean_line(line);
    this.defaults_lines.splice(index, 0, line);
    this.defaults_line_to_high_level(line, index);
};


Dexter.defaults_parse_line = function(line, line_number_for_error_message="unknown"){
    let result = {line: line};
    let trimmed_line = line.trim();
    result.trimmed_line = trimmed_line;
    if(trimmed_line === ""){
        result.kind = "blank_line";
        result.value_string = "";
    }
    else if(trimmed_line.startsWith(";")) {
        result.comment = trimmed_line;
        let colon_pos  = trimmed_line.indexOf(":");
        if(colon_pos !== -1) {
            let key = trimmed_line.substring(1, colon_pos).trim();
            if(Dexter.defaults_coloned_comment_props.includes(key)){
                result.key = key;
                result.kind = "coloned_comment_prop";
                result.value_string = trimmed_line.substring(colon_pos + 1).trim();
            }
        }
        if(!result.kind) {
            let line_minus_semicolon = trimmed_line.substring(1).trim();
            for(let colonless_prop_key of Dexter.defaults_colonless_comment_props){
                if(line_minus_semicolon.startsWith(colonless_prop_key)){
                    result.key = colonless_prop_key;
                    result.kind = "colonless_comment_prop";
                    result.value_string = line_minus_semicolon.substring(colonless_prop_key.length).trim();
                    break;
                }
            }
            if(!result.kind) {
                result.kind = "whole_line_comment";
                result.value_string = "";
            }
        }
    }
    else if (trimmed_line.startsWith("S" + Dexter.defaults_arg_sep)) {
        result.kind = "S_param";
        let key_start = 3;
        let key_end = trimmed_line.indexOf(Dexter.defaults_arg_sep, 4);
        if(key_end === -1) {
            result.kind = "invalid";
            result.value_string = "";
            result.error_message = "Error in parsing Defaults.make_ins<br/>" +
                "line number: " + line_number_for_error_message +
                "<br/>line: " + line +
                "<br/>S param with no proper key";
        }
        else {
            result.key = trimmed_line.substring(key_start, key_end);
            let val = trimmed_line.substring(key_end + Dexter.defaults_arg_sep.length).trim();
            let comment_pos = val.indexOf(";");
            if(comment_pos !== -1) {
                result.value_string = val.substring(0, comment_pos).trim();
                result.comment = val.substring(comment_pos + 1);
            }
            else {
                result.value_string = val;
            }
        }
    }
    else if(trimmed_line.indexOf(Dexter.defaults_arg_sep) === 1){
        result.kind = "oplet_instruction";
        result.key = trimmed_line[0]; //the oplet
        result.value_string = trimmed_line.substring(1 + Dexter.defaults_arg_sep.length).trim();
    }
    else { //lines starting with a longer than 1 char token //todo are there any?
        result.kind = "non_oplet_instruction";
        let key_end = trimmed_line.indexOf(Dexter.defaults_arg_sep);
        result.key  = trimmed_line.substring(key_end);
        let val_start = key_end + Dexter.defaults_arg_sep.length;
        let val_str   = trimmed_line.substring(val_start);
        let comment_start = val_str.indexOf(":");
        if(comment_start !== -1) {
            result.value_string = val_str.substring(0, comment_start).trim();
        }
        else { result.value_string = val_str; }
    }
    if(result.value_string){
        if     (result.kind === "invalid")                { result.value_array = []; }
        else if(result.kind === "blank_line")             { result.value_array = []; }
        else if(result.kind === "coloned_comment_prop")   { result.value_array = [result.value_string]; }
        else if(result.kind === "colonless_comment_prop") { result.value_array = [result.value_string]; }
        else if(result.kind === "whole_line_comment")     { result.value_array = []; }
        else { //"S_param" "oplet_instruction" "non_oplet_instruction"
            let vs_arr = result.value_string.split(Dexter.defaults_arg_sep);
            let val_arr = [];
            for(let item of vs_arr){
                let num = parseFloat(item);
                if(Number.isNaN(num)) { val_arr.push(item); }
                else { val_arr.push(num); }
            }
            result.value_array = val_arr;
        }
    }
    return result
};

/*
Dexter.dexter0.defaults_lines_to_high_level()
Dexter.dexter0.defaults
Dexter.dexter0.defaults_lines

*/

Dexter.prototype.defaults_lines_to_high_level = function(){
    this.defaults_init_defaults(); //initialize (ie clear existing, add J_key suffixes)
    for(let line_number = 0; line_number < this.defaults_lines.length; line_number++) {
        let line = this.defaults_lines[line_number];
        this.defaults_line_to_high_level(line, line_number);
    }
    //out("parsed " + this.defaults_lines.length + " lines.")
    return this.defaults
};
/*
Dexter.dexter0.defaults_lines
Dexter.dexter0.defaults_line_to_high_level("S, abJ2cd, 123")
Dexter.dexter0.defaults_line_to_high_level("S, J1BoundryHigh, 666000; 185")
Dexter.dexter0.defaults_line_to_high_level("S, LinkLengths, 82440, 59500, 307500, 339092, 235200")

FIXED bug in DDE inspect([undefined, 111]) errors: TypeError: Cannot read property '0' of undefined
*/

/*Dexter.prototype.defaults_low_to_high_values(parsed_line){
   let orig_array = parsed_line.value_array
   let converted_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(instruction_array, this)

}*/

Dexter.prototype.defaults_line_to_high_level = function(line, line_number="unknown"){
    if(!this.defaults) { this.defaults = {}; } //usually unnecessary but safer
    let parsed_line = Dexter.defaults_parse_line(line, line_number);
    let low_key = parsed_line.key;
    let high_key = low_key;
    let high_value;
    if      (parsed_line.kind  === "invalid")    ; //ignore
    else if (parsed_line.kind  === "blank_line") ; //ignore
    else if ((parsed_line.kind === "coloned_comment_prop") ||
        (parsed_line.kind === "colonless_comment_prop")) {
        if(parsed_line.value_array) {high_value = parsed_line.value_array[0];}
        else                        {
            high_value = Dexter.defaults[high_key];  //todo bug: noah reports that Dexter.defaults
            //is unbound. So before calling defaults_read, we need to get that
            //Dexter.defaults bound and filled up SO that we can steal "high_value" from it.
            warning("While parsing the Defaults.make_ins file,<br/>" +
                "there is no value for the comment_property key: " + low_key +
                "<br/>so we're using the value from Dexter.default." + high_key +
                "<br/>which is: " + high_value);
        }
        this.defaults[high_key] = high_value;
    }
    else if (parsed_line.kind === "whole_line_comment") ; //ignore
    else if (parsed_line.kind === "S_param") {
        if(!parsed_line.value_array) { //grab default from Dexter class
            high_value = Dexter.defaults[high_key];
            if(high_value === undefined){
                warning("While parsing the Defaults.make_ins file,<br/>" +
                    "there is no value for the S_param key: " + low_key +
                    "<br/>and there's no value from Dexter.default." + high_key +
                    "<br/>so we're ignoring: " + low_key);
            }
            this.defaults[high_key] = high_value;
            warning("While parsing the Defaults.make_ins file,<br/>" +
                "there is no value for the S_param key: " + low_key +
                "<br/>so we're using the value from Dexter.default." + high_key +
                "<br/>which is: " + high_value);
        }
        else { //use value from the low level.
            let ins_arr = [];
            ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
            ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
            ins_arr = ins_arr.concat(parsed_line.value_array);
            let dde_ins_arr = Socket.instruction_array_arcseconds_to_degrees_maybe(ins_arr, this);
            let val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1); //the high_val array
            parsed_line.high_value_array = val_arr;
            if (low_key === "LinkLengths") { //array of 5, but needs to be reversed
                let val = parsed_line.high_value_array.slice(); //make a copy
                val.reverse(); //copies in place
                this.defaults[low_key] = val;
            }
            else if (["RebootServo", "ServoSetX", "ServoSet2X"].includes(low_key)) {
                if (!this.defaults.ServoSetup) {
                    this.defaults.ServoSetup = [];
                }
                let obj = {};
                high_key = "S" + Dexter.defaults_arg_sep + low_key;
                obj[high_key] = parsed_line.high_value_array;
                obj.orig_line = line_number;
                this.defaults.ServoSetup.push(obj);

            }
            else if (low_key === "CmdXor") {//Added by Noah, 2/1/2023
                if (!this.defaults[parsed_line.key]){
                    this.defaults[low_key] = [];
                }
                this.defaults[low_key] = parsed_line.value_array;
            }
            else if (low_key === "JointStiffness") ;
            else if (low_key === "JointDH") {
                let joint_number = parsed_line.value_array[0]; //the low value_array
                if (!this.defaults.dh_mat) {
                    this.defaults.dh_mat = [];
                }
                let four_val_array = val_arr.slice(1); //take off the joint_number on the beginning of the array
                this.defaults.dh_mat[joint_number - 1] = four_val_array;
            }
            else if (low_key.startsWith("Joint")){
                let joint_number = val_arr[0];
                let val = val_arr[1];
                if(!this.defaults[high_key]){
                    this.defaults[high_key] = [];
                }
                let joint_number_minus_1 = joint_number - 1;
                this.defaults[high_key][joint_number_minus_1] = val;  //this works even if the joint_numbers are out of order. thank you JS!
            }
            else if (low_key.endsWith("Joint")){
                if(val_arr.length === 1){
                    this.defaults[high_key] = val_arr[0]; //parsed_line.high_value_array[0]
                }
                else if (val_arr.length === 2){
                    let val = val_arr[0];
                    let joint_number = val_arr[1];
                    if(!this.defaults[high_key]){
                        this.defaults[high_key] = [];
                    }
                    let joint_number_minus_1 = joint_number - 1;
                    this.defaults[high_key][joint_number_minus_1] = val;
                }
            }
            else if (Dexter.defaults_is_j_key(low_key)) {
                let [high_key, joint_number] = Dexter.defaults_j_key_to_high_key(low_key);
                if (!this.defaults[high_key]) {
                    this.defaults[high_key] = [];
                }
                this.defaults[high_key][joint_number - 1] = val_arr[0];
            }
            else if (val_arr.length === 1) {
                this.defaults[low_key] = val_arr[0];
            }
            else {
                this.defaults[parsed_line.key] = val_arr;
            }
        }
    }
    else if (parsed_line.kind === "oplet_instruction"){ //"z", mayby "a"
        if(parsed_line.value_array.length === 1){ //primarily for z oplet
            let ins_arr = [];
            ins_arr[Instruction.INSTRUCTION_TYPE] = low_key;
            ins_arr = ins_arr.concat(parsed_line.value_array);
            let dde_ins_arr = Socket.instruction_array_arcseconds_to_degrees_maybe(ins_arr, this);
            let new_val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG0);
            parsed_line.high_value_array = new_val_arr;
            if(!this.defaults.ServoSetup) { this.defaults.ServoSetup = []; }
            let obj = {};
            obj[high_key] = parsed_line.high_value_array[0];
            obj.orig_line = line_number;
            this.defaults.ServoSetup.push(obj);
        }
        else { //any oplet with non-1 args. primarily a, P, T
            let ins_arr = [];
            ins_arr[Instruction.INSTRUCTION_TYPE] = low_key;
            ins_arr = ins_arr.concat(parsed_line.value_array);
            let dde_ins_arr = Socket.instruction_array_arcseconds_to_degrees_maybe(ins_arr, this);
            let new_val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG0);
            parsed_line.high_value_array = new_val_arr;
            if(!this.defaults.ServoSetup) { this.defaults.ServoSetup = []; }
            let obj = {};
            obj[high_key] = parsed_line.high_value_array;
            obj.orig_line = line_number;
            this.defaults.ServoSetup.push(obj);
        }
    }
    else { warning("bottom of Dexter.prototype.defaults_line_to_high_level <br/>" +
        "unhandled line: " + line);
    }
};

//returns null or an array of a number between 1 and 9 inclusive
//and the index of that J char in the key
/*Dexter.defaults_j_number_of_key = function(key){
   let j_pos = key.indexOf("J")
   if(j_pos === -1) { return null }
   else if (j_pos === (key.length - 1)) { return null } //no room for a digit
   else {
     let digit_maybe = key[j_pos + 1]
     if((digit_maybe >= '1') && (digit_maybe <= '9')) { //must be at least 1
         return [parseInt(digit_maybe), j_pos]
     }
     else { return null }
   }
}*/

Dexter.prototype.defaults_init_defaults = function(){
    let obj = {};
    for(let high_key of Dexter.defaults_j_key_suffixes){
        obj[high_key + "s"] = []; //if this array is EMPTY when we attempt to write to low level, it writes nothing.
    }
    this.defaults = obj;
};

//A JKey is a S param name that starts with "J" followed by an integer from 1 thru 9
Dexter.defaults_j_key_suffixes = ["Force", "Friction", "BoundryHigh", "BoundryLow", "PID_P"];

// returns array of high_key (string) and integer (the joint number)
//if null is returned, key is not a j_key
//Dexter.defaults_j_key_to_high_key("J1Force")
//Dexter.defaults_j_key_to_high_key("J2_PID_P")
//J keys are above with suffixes of Dexter.defaults_j_key_suffixes .

Dexter.defaults_is_j_key = function(key){
    if(key.startsWith("J")) {
        for(let suffix of Dexter.defaults_j_key_suffixes) {
            if(key.endsWith(suffix)){ return true }
        }
    }
    return false
};

//doesn't start with J-digit, does end in "s", ie the high level equiv of a J key
// Dexter.defaults_is_high_j_key("Forces")
Dexter.defaults_is_high_j_key = function(high_key){
    if(!high_key.endsWith("s")) { return false }
    else {
        let low_key_suffix_maybe = high_key.substring(0, high_key.length - 1); //cut off "s" suffix
        return Dexter.defaults_j_key_suffixes.includes(low_key_suffix_maybe)
    }
};

Dexter.defaults_j_key_to_high_key = function(key){
    if(key.startsWith("J")) {
        for(let suffix of Dexter.defaults_j_key_suffixes) {
            if(key.endsWith(suffix)){
                let joint_number = parseInt(key[1]);
                return [suffix + "s", joint_number] }
        }
    }
    return null
};


//joint number is 1 based.
//returns null if key isn't one that is supposed to be turned into a j_key
// Dexter.defaults_high_key_to_j_key("Forces", 1)
// Dexter.defaults_high_key_to_j_key("PID_Ps", 2)
Dexter.defaults_high_key_to_j_key = function(key, joint_number){
    key = key.substring(0, key.length - 1); //cut off the "s"
    let is_j_key = false;
    for(let suffix of Dexter.defaults_j_key_suffixes) {
        if(key.endsWith(suffix)){is_j_key = true; break;}
    }
    if(!is_j_key) { return null }
    else if(key === "PID_P") { return "J" + joint_number + "_" + key}
    else                     { return "J" + joint_number       + key}
};

Dexter.prototype.defaults_compute_parsed_lines = function(){
    let parsed_lines = [];
    for(let i = 0; i < this.defaults_lines.length; i++){
        let line = this.defaults_lines[i];
        let parsed_line = Dexter.defaults_parse_line(line, i);
        parsed_lines.push(parsed_line);
    }
    return parsed_lines
};

//warning: this deletes all the data from high_level, but then
//fills it back in again after done.
Dexter.prototype.defaults_high_level_to_defaults_lines = function(){
    let parsed_lines = this.defaults_compute_parsed_lines();
    let result_lines = [];
    for(let line_number = 0; line_number < parsed_lines.length; line_number++){
        let parsed_line = parsed_lines[line_number];
        let low_key = parsed_line.key;
        if      (parsed_line.kind === "invalid")    ; //ignore
        else if (parsed_line.kind === "blank_line") { result_lines.push("");}
        else if (parsed_line.kind === "coloned_comment_prop") {
            let high_key = low_key;
            if(this.defaults[high_key]) { //user didn't delete it
                let new_line = "; " + low_key + ": " + this.defaults[high_key];
                result_lines.push(new_line);
                delete this.defaults[high_key];
            }
        }
        else if (parsed_line.kind === "colonless_comment_prop") {
            let high_key = low_key;
            if(this.defaults[high_key]) { //user didn't delete it
                let new_line = "; " + low_key + " " + this.defaults[high_key];
                result_lines.push(new_line);
                delete this.defaults[high_key];
            }
        }
        else if (parsed_line.kind === "whole_line_comment") { //there won't be any of these in the high level, but just for completeness ...
            result_lines.push(parsed_line.comment);
        }
        else if (parsed_line.kind === "S_param") {
            let ins_arr = [];
            ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
            if (low_key === "LinkLengths") { //array of 5, but needs to be reversed
                let high_key = low_key;
                if(this.defaults.hasOwnProperty(high_key)) { //user didn't delete it
                    ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                    let high_val = this.defaults[high_key].slice(); //copy
                    high_val.reverse(); //copies in place
                    ins_arr = ins_arr.concat(high_val);
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1); //grab all the link lengths, now in dexter units
                    let new_line = "S"      + Dexter.defaults_arg_sep +
                        low_key + Dexter.defaults_arg_sep +
                        low_val.join(Dexter.defaults_arg_sep) +
                        ";" + parsed_line.comment;
                    result_lines.push(new_line);
                    delete this.defaults[high_key];
                }
            }
            else if (["RebootServo", "ServoSetX", "ServoSet2X"].includes(low_key)){  //no units conversion
                let new_lines = this.defaults_high_level_to_defaults_lines_ServoSetup_line(line_number);
                for(let new_line of new_lines) { result_lines.push(new_line); }
            }
            else if (low_key === "CmdXor") {//Added by Noah, 2/1/2023
                let high_key = low_key;
                let new_line = "S" + Dexter.defaults_arg_sep + high_key
                    + Dexter.defaults_arg_sep +  this.defaults[high_key].join() +
                    ";" + parsed_line.comment;
                out(new_line);
                result_lines.push(new_line);
            }
            else if(low_key === "JointDH"){
                if(this.defaults.hasOwnProperty("dh_mat")) { //user didn't delete it
                    let high_val = this.defaults.dh_mat;
                    let joint_number = parsed_line.value_array[0];
                    let low_key = "JointDH";
                    ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                    ins_arr[Instruction.INSTRUCTION_ARG1] = joint_number;
                    let high_val_for_one_joint = high_val[joint_number - 1];
                    ins_arr = ins_arr.concat(high_val_for_one_joint);
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val_four_numbers = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG2); //now in dexter units

                    let new_line = "S" + Dexter.defaults_arg_sep + low_key + Dexter.defaults_arg_sep +
                        joint_number + Dexter.defaults_arg_sep +
                        low_val_four_numbers.join(Dexter.defaults_arg_sep) +
                        ";" + parsed_line.comment;
                    result_lines.push(new_line);
                    delete high_val[joint_number - 1];
                }
            }
            else if(Dexter.defaults_is_j_key(low_key)){//starts with J, 2nd char is digit. ie J1BoundryLow, with high key BoundryLows
                let [high_key, joint_number] = Dexter.defaults_j_key_to_high_key(low_key);
                if(this.defaults.hasOwnProperty(high_key)) { //user didn't delete it
                    ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                    let high_val = this.defaults[high_key][joint_number - 1];
                    ins_arr[Instruction.INSTRUCTION_ARG1] = high_val;
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr[Instruction.INSTRUCTION_ARG1]; //grab all the link lengths, now in dexter units
                    let new_line = "S" + Dexter.defaults_arg_sep + low_key +
                        Dexter.defaults_arg_sep + low_val +
                        ";" + parsed_line.comment;
                    result_lines.push(new_line);
                    delete this.defaults[high_key][joint_number - 1];
                }
            }
            else if(low_key.startsWith("Joint")) {
                if (this.defaults.hasOwnProperty(low_key)) { //user didn't delete it
                    let joint_number = parsed_line.value_array[0]; // 1 based
                    let high_val = this.defaults[low_key];
                    let high_joint_val = high_val[joint_number - 1];
                    ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                    ins_arr[Instruction.INSTRUCTION_ARG1] = joint_number;
                    ins_arr[Instruction.INSTRUCTION_ARG2] = high_joint_val;
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr[Instruction.INSTRUCTION_ARG2];
                    let new_line = "S" +
                        Dexter.defaults_arg_sep + low_key +
                        Dexter.defaults_arg_sep + joint_number +
                        Dexter.defaults_arg_sep + low_val +
                        ";" + parsed_line.comment;
                    result_lines.push(new_line);
                    delete this.defaults[low_key][joint_number - 1];
                }
            }
            else if (low_key.endsWith("Joint")) {
                if (this.defaults.hasOwnProperty(low_key)) { //user didn't delete it
                    let joint_number = parsed_line.value_array[1]; // 1 based
                    let high_val = this.defaults[low_key];
                    let high_joint_val = high_val[joint_number - 1];
                    ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                    ins_arr[Instruction.INSTRUCTION_ARG1] = high_joint_val;
                    ins_arr[Instruction.INSTRUCTION_ARG2] = joint_number;
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr[Instruction.INSTRUCTION_ARG1];
                    let new_line = "S" +
                        Dexter.defaults_arg_sep + low_key +
                        Dexter.defaults_arg_sep + low_val +
                        Dexter.defaults_arg_sep + joint_number +
                        ";" + parsed_line.comment;
                    result_lines.push(new_line);
                    delete this.defaults[low_key][joint_number - 1];
                }
            }

            else { //low_key is non j_key so use it as the high key
                let high_key = low_key;
                if(this.defaults.hasOwnProperty(high_key)) { //user didn't delete it
                    let high_val = this.defaults[low_key];
                    ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                    let low_val_str;
                    if(Array.isArray(high_val)) {
                        ins_arr = ins_arr.concat(high_val);
                        let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                        let low_val = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1);
                        low_val_str = low_val.join(Dexter.defaults_arg_sep);
                    }
                    else {
                        ins_arr[Instruction.INSTRUCTION_ARG1] = high_val;
                        let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                        let low_val = dde_ins_arr[Instruction.INSTRUCTION_ARG1];
                        low_val_str = low_val;
                    }
                    let new_line = "S" + Dexter.defaults_arg_sep + high_key +
                        Dexter.defaults_arg_sep + low_val_str +
                        ";" + parsed_line.comment;
                    delete this.defaults[high_key];
                    result_lines.push(new_line);
                }
            }
        } //end S param
        else if (parsed_line.kind === "oplet_instruction"){
            let new_lines = this.defaults_high_level_to_defaults_lines_ServoSetup_line(line_number);
            for(let new_line of new_lines) { result_lines.push(new_line); }
        }
        else { warning("bottom of Dexter.prototype.defaults_line_to_high_level <br/>" +
            "unhandled line: " + parsed_line.kind);
        }
    }//end loop

    let new_lines = this.defaults_high_level_to_defaults_lines_new_high_level();
    for(let new_line of new_lines){ result_lines.push(new_line); }
    //now all the data should be deleted from Dexter.dexter0.defaults (high level)
    this.defaults_lines = result_lines; //update the low level
    //so recreate it in case uses wants to use it after "writing it out".
    Dexter.dexter0.defaults_lines_to_high_level(); //fill in high level since the above deletes it all.
    return this.defaults_lines
};


Dexter.defaults_high_key_of_SS_obj = function(obj){
    if(!obj) { return null }
    for(let high_key of Object.keys(obj)){
        if(high_key !== "orig_line") { return high_key }
    }
    return null //probably shouldn't
};

//ServoSetup includes S, RebootServo & friends as well as a, z and maybe other oplet instructions.
//This fn handles both the items that were in the orign low level, as well as
//items added to the high level
//Handles the items in the ServoSetup array before and after the line_number,
//but not passed the next array elt that HAS a orig_line prop.
//But there still might remain some items in the array after the
//orig pass going thru the low_level lines, so
//when doing the "new" instructions pass,
//IF we pass an invalid line number, ie null,
//then this fn gets the rest of the items in the ServoSetup array
//below includes bug fix by Noah Jan 25, 2023
Dexter.prototype.defaults_high_level_to_defaults_lines_ServoSetup_line = function(line_number = null){
    let new_lines = [];
    let servo_setup_orig_length = this.defaults.ServoSetup.length;
    for(let k = 0; k < servo_setup_orig_length; k++) {
        let an_obj = this.defaults.ServoSetup[k];
        let high_key = Dexter.defaults_high_key_of_SS_obj(an_obj); //could be "a", "z", "S, RebootServo" or similar "S, foo"
        let high_val = (high_key ? an_obj[high_key] : null ); //usually an array, but for "z", just a number
        if(an_obj && high_key && Dexter.defaults_writeable_value(high_val)){
            if(an_obj.hasOwnProperty("orig_line")){
                if(an_obj.orig_line === line_number); //and keep going
                //to collect those objs UNTIL the next one that has an orig_line prop.
                else { //got to the next orig_line number so we're done until that line number is
                    //requested by driven from the low level array of strings.
                    return new_lines
                }
            }
            let val_str; //the below just sets val_str
            if(high_key.length === 1) { //oplet
                if(Array.isArray(high_val)) {
                    let ins_arr = [];
                    ins_arr[Instruction.INSTRUCTION_TYPE] = high_key;
                    ins_arr = ins_arr.concat(high_val);
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG0);
                    val_str = low_val.join(Dexter.defaults_arg_sep);
                }
                else {
                    let ins_arr = [];
                    ins_arr[Instruction.INSTRUCTION_TYPE] = high_key;
                    ins_arr.push(high_val);
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG0);
                    val_str = low_val.join(Dexter.defaults_arg_sep);
                }
            }
            else { // high_key looks like "S, RebootServo"
                let [oplet, s_param_name] = high_key.split(Dexter.defaults_arg_sep);
                let ins_arr = [];
                ins_arr[Instruction.INSTRUCTION_TYPE] = oplet;
                ins_arr[Instruction.INSTRUCTION_ARG0] = s_param_name;
                if(Array.isArray(high_val)) {
                    ins_arr = ins_arr.concat(high_val);
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1);
                    val_str = low_val.join(Dexter.defaults_arg_sep);
                }
                else {
                    ins_arr.push(high_val);
                    let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                    let low_val = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1);
                    val_str = low_val.join(Dexter.defaults_arg_sep);
                }
            }
            let new_line = high_key + Dexter.defaults_arg_sep + val_str + ";";
            new_lines.push(new_line);
            delete this.defaults.ServoSetup[k]; //replaces the elt in the array with undefined
        } //just skip over the obj. Its val is probably undefined.
    }
    return new_lines
};

Dexter.defaults_writeable_value = function(val){
    if(Array.isArray(val)){
        if(val.length === 0) { return false }
        else {
            for(let elt of val){
                if(Array.isArray(elt)) {
                    if(elt.length === 0) { return false }
                    else { return true }
                }
                else if(elt || (elt === 0)) { return true } //if any elt of the array has real data, write out array
            }
            return false
        }
    }
    else if(val || (val === 0)) { return true }
    else { return false }
};

//loop thru remaining high level (after deleted the matching lines from low level)
//and return an array of new lines
Dexter.prototype.defaults_high_level_to_defaults_lines_new_high_level = function(){
    let result_lines = [];
    for(let high_key of Object.keys(this.defaults)){
        let high_val = this.defaults[high_key];
        if(!Dexter.defaults_writeable_value(high_val)) ; //no val to write out so skip it
        else if (high_key === "LinkLengths") { //array of 5, but needs to be reversed
            let low_key = high_key;
            if(Dexter.defaults_writeable_value(high_val)) {
                high_val.reverse(); //copies in place, but ok since we delete it below
                let ins_arr = [];
                ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
                ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                ins_arr = ins_arr.concat(high_val);
                let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                let val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1);
                let new_line = "S"      + Dexter.defaults_arg_sep +
                    low_key + Dexter.defaults_arg_sep +
                    val_arr.join(Dexter.defaults_arg_sep) +
                    ";";
                result_lines.push(new_line);
                delete this.defaults[high_key];
            }
        }
        else if(high_key === "dh_mat"){
            for (let i = 0; i < high_val.length; i++) {
                let joint_number = i + 1;
                let high_val_joint_arr = high_val[i];
                let low_key = "JointDH";
                let ins_arr = [];
                ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
                ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
                ins_arr[Instruction.INSTRUCTION_ARG1] = joint_number;
                ins_arr = ins_arr.concat(high_val_joint_arr);
                let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                let low_val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG2);

                let new_line = "S" + Dexter.defaults_arg_sep  + low_key + Dexter.defaults_arg_sep +
                    joint_number   + Dexter.defaults_arg_sep  +
                    low_val_arr.join(Dexter.defaults_arg_sep) +
                    ";";
                result_lines.push(new_line);
                delete high_val[i];
            }
        }
        else if (high_key === "ServoSetup"){ //rebootServo and oplets under this. //no units conversion
            let new_lines = this.defaults_high_level_to_defaults_lines_ServoSetup_line(null); //null means get all the remaining ones in the ServoSetup array
            for(let new_line of new_lines) { result_lines.push(new_line); }
        }
        else if(Dexter.defaults_is_high_j_key(high_key)){
            for(let joint_number = 1; joint_number <= high_val.length; joint_number++){
                let low_key  = "J" + joint_number + high_key.substring(0, high_key.length - 1); //cut off "s" suffix from high_key
                let high_val_for_a_joint = high_val[joint_number - 1];
                let ins_arr = [];
                ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
                ins_arr[Instruction.INSTRUCTION_ARG0] = high_val_for_a_joint;
                let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
                let low_val = dde_ins_arr[Instruction.INSTRUCTION_ARG1];
                let new_line = "S" + Dexter.defaults_arg_sep + low_key +
                    Dexter.defaults_arg_sep + low_val +
                    ";";
                result_lines.push(new_line);
            }
            delete this.defaults[high_key];
        }
        else if(high_key === "CmdXor"); //already in the result so don't stick it in a 2nd time
        else { //low_key is non j_key so same as high key
            let low_key = high_key;
            let ins_arr = [];
            ins_arr[Instruction.INSTRUCTION_TYPE] = "S";
            ins_arr[Instruction.INSTRUCTION_ARG0] = low_key;
            if(Array.isArray(high_val)) { ins_arr = ins_arr.concat(high_val); }
            else { ins_arr[Instruction.INSTRUCTION_ARG1] = high_val; }
            let dde_ins_arr = Socket.instruction_array_degrees_to_arcseconds_maybe(ins_arr, this);
            let low_val_arr = dde_ins_arr.slice(Instruction.INSTRUCTION_ARG1);
            let low_val_str = low_val_arr.join(Dexter.defaults_arg_sep);
            let new_line = "S" + Dexter.defaults_arg_sep + low_key +
                Dexter.defaults_arg_sep + low_val_str + ";";
            delete this.defaults[high_key];
            result_lines.push(new_line);
        }
    }
    return result_lines
};

/* EXAMPLES
Dexter.dexter0.defaults_read() //the real top level. Gets the file, makes low level, then high level
//LOW LEVEL OPERATORS
Dexter.dexter0.defaults_set("whole_file_string", read_file("Defaults.make_ins")) //good for testing initialization
Dexter.dexter0.defaults_get("whole_file_string") //gets content from low level data, not the file
        //best to view the above in DDE with Output pane header "Code" checkbox checked.

Dexter.dexter0.defaults_get("lines")         //see the low level representation
Dexter.dexter0.defaults_get(3)               //see a particular line of the low level
Dexter.dexter0.defaults_get(-1)              //see the last line of the low level
Dexter.dexter0.defaults_get("J1BoundryHigh") //see J1BoundryHigh value
Dexter.dexter0.defaults.BoundryHighs
Dexter.dexter0.defaults.BoundryHighs[0] = 180
Dexter.dexter0.defaults_get("S, JointDH, 1")
Dexter.dexter0.defaults_get("^S, JointDH") //get array of all matching. But I might change this to get_all
Dexter.dexter0.defaults_get("^S, JointDH, \\d")
Dexter.dexter0.defaults_set("S, JointDH, 1", "225656, 224100, 260, 323413")

Dexter.dexter0.defaults_set(0,  ";top line comment")
Dexter.dexter0.defaults_set(-1, ";bottom line comment")
Dexter.dexter0.defaults_set("J1BoundryHigh", 777000)

Dexter.dexter0.defaults_insert("z 2000")

Dexter.dexter0.defaults_delete("Dexter Model")
Dexter.dexter0.defaults_delete("'^J\\dBoundryHi'")

Dexter.dexter0.defaults_get("Dexter Model")


Dexter.dexter0.defaults_compute_parsed_lines() //internal

// Dexter.dexter0.defaults_lines_to_high_level() //internal
Dexter.dexter0.defaults
Dexter.dexter0.defaults.Forces[1] = 60  //high level set
Dexter.dexter0.defaults.Forces[2] = 90  //high level set
Dexter.dexter0.defaults.ServoSetup.push({"a": [10, 20, 30]}) //high level insert
Dexter.dexter0.defaults.ServoSetup.unshift({"a": [90, 80, 70]}) //high level insert
Dexter.dexter0.defaults.LinkLengths
to_source_code({value: Dexter.dexter0.defaults.dh_mat})
js_beautify(JSON.stringify(Dexter.dexter0.defaults))

Dexter.dexter0.defaults_get("LinkLengths")
var a_dh_mat = Dexter.dexter0.defaults.dh_mat
a_dh_mat[0][0] = 250000
a_dh_mat[0] = [250000, 325000, 0.26, 89.83694444444444]

delete Dexter.dexter0.defaults.BWDampJoint

Dexter.dexter0.defaults.LinkLengths
Dexter.dexter0.defaults.LinkLengths[0] = 0.2


Dexter.dexter0.defaults_high_level_to_defaults_lines()

Dexter.dexter0.defaults_write_return_string()

// Dexter.dexter0.defaults_write() //warning: not ready for prime time. make a backup first.
*/

globalThis.Waiting = class Waiting {

    //called by Job.do_next_item
    //returns a dexter instance or null if Job is not waiting.
    static job_waiting_for_dexter(job_instance){
        if(job_instance.waiting_for_dexter_and_instruction) {
            return job_instance.waiting_for_dexter_and_instruction[0]
        }
        else {
            return null
        }
    }

    static is_job_waiting_for_dexter(job_instance, dexter_instance){
        let result =
            (job_instance.waiting_for_dexter_and_instruction &&
             job_instance.waiting_for_dexter_and_instruction[0] === dexter_instance);
        return result
    }

    //returns null if dexter_instance is NOT now performing,
    //else returns [job_instance, instruction] that dexter_instance is now performing
    static dexter_now_performing(dexter_instance){
        return dexter_instance.now_performing
    }

    /*called by Job.do_next_item just before getting the cur_instr.
      if(Waiting.job_waiting_for_dexter(job_instance){

         if(!Waiting.dexter_now_performing(Waiting.job_waiting_for_dexter(job_instance))){
              Waiting.clear_job_and_dexter(job_instance, dexter_instance)
              job_instance.send(Waiting.instruction_to_run_on_job(job_instance)
              return
         }
         else { job_instance.set_up_next_do(0) }
         }
      }
      // else just continue
    */
    static instruction_to_run_on_job(job_instance){
        if(job_instance.waiting_for_dexter_and_instruction){
            return job_instance.waiting_for_dexter_and_instruction[1]
        }
        else { return null}
    }

    /*called by Job.send if is_job_waiting_for_dexter
     if(Waiting.dexter_now_performing(dexter_instance)){
        Waiting.set_job(job_instance, dexter_instance, instruction)
        job_instance.set_up_next_do(0)
        return
     }
     else { //ok to run this instruction now, but hold up this job until dexter_instance.robot_done_with_instruction called
        Waiting.set_job_and_dexter(job_instance, dexter_instance, instruction)
     }
    */
    static set_job(job_instance, dexter_instance, instruction){
        job_instance.waiting_for_dexter_and_instruction = [dexter_instance, instruction];
    }

    static set_job_and_dexter(job_instance, dexter_instance, instruction){
        if(job_instance.waiting_for_dexter_and_instruction){
            shouldnt("Waiting.set_job_and_dexter attempting to set " + Job.job_name +
            " " + dexter_instance.name + "<br/>but Job already has set for: " +
                job_instance.waiting_for_dexter_and_instruction[0].name
            );
        }
        else {
            job_instance.waiting_for_dexter_and_instruction = [dexter_instance, instruction];
            dexter_instance.now_performing = [job_instance, instruction];
        }
    }

    /* in dexter_instance.robot_done_with_instruction
      if(Waiting.is_job_waiting_for_dexter(job_instance, dexter_instance) ){
         Waiting.clear_job_and_dexter(job_instance, dexter_instance)
      }
      else { shouldnt() }
     */
    static clear_job_and_dexter(job_instance, dexter_instance){
        job_instance.waiting_for_dexter_and_instruction = null;
        dexter_instance.now_performing = null;
    }

    static clear_all(){
        for (let a_job_name of Job.all_names){
            let a_job = Job[a_job_name];
            a_job.waiting_for_dexter_and_instruction = null;
        }
        for (let a_dexter_name of Dexter.all_names){
            Dexter[a_dexter_name].now_performing = null;
        }
    }

    //call when starting job and ending job
    static clear_all_if_ok(){
        if(this.ok_to_clear_all()){
            this.clear_all();
        }
    }

    //just used internally by
    static ok_to_clear_all(){
        return (Job.active_jobs().length === 0)
    }

    //called when a job ends. It *shouldn't* be necessary, but to catch jobs and
    //dexters that slip through cracks, its good safety to init for the next Jobs.
    static done_with_job(job_instance) {
        let dexter_instance = Waiting.job_waiting_for_dexter(job_instance);
        if(dexter_instance){
            Waiting.clear_job_and_dexter(job_instance, dexter_instance);
        }
        if((Job.active_jobs().length === 0) ||
            ((Job.active_jobs().length === 1) &&
             (Job.active_jobs()[0] === job_instance))) {
            Waiting.clear_all();
        }
    }
};

/* Created by Fry on 2/4/16. */
//https://www.hacksparrow.com/tcp-socket-programming-in-node-js.html
//import net from "net" //dde4 only needs net pkg on server, not on the browser side.

//import {Robot} from "./robot.js"        //dde4 Robot is now global
//import {DexterSim} from "./dextersim.js" //dde4 DexterSim is now global
//import {_nbits_cf, _arcsec, _um} = from "./units.js" //don't do this. These units and all the rest are
//already global vars.

//never create an instance
class Socket$1{
    //returns a net_soc_inst if in node, or a WebSocket if in dde, or null if none in Socket.robot_name_to_soc_instance_map
    //this is reverse lookup in robot_name_to_soc_instance_map
    static net_soc_inst_to_robot_name(net_soc_inst){
        for(let robot_name in Socket$1.robot_name_to_soc_instance_map){
            let a_net_soc_inst = Socket$1.robot_name_to_soc_instance_map[robot_name];
            if (a_net_soc_inst === net_soc_inst) { return robot_name }
        }
        return null
    }

    //when a job starts, it calls robot.start, which calls start_aux, which (for Dexter's)
    //calls Socket.init, which for sim, calls DexterSim.create_or_just_init
    static init(robot_name, job_instance, instruction_to_send_on_connect=null){
       //out(job_instance.name + " Socket.init passed: " + robot_name + " " + instruction_to_send_on_connect)
       if(platform === "node") {
            this.init_raw_socket(robot_name, job_instance, instruction_to_send_on_connect);
            return
       }

       //the below runs in dde4 IDE, using WebSockets
       if(!job_instance.is_active()) {
            warning(job_instance.name + " Attempt to Socket.init with inactive status: " + job_instance.status_code);
            return
        }
        let rob = Dexter[robot_name];
        const sim_actual = Robot.get_simulate_actual(rob.simulate); //true, false, or "both"
        if (sim_actual === true){ //when we are ONLY simulating
            DexterSim.create_or_just_init(robot_name, sim_actual);
            //out("socket for Robot." + robot_name + ". is_connected? " + Robot[robot_name].is_connected)
            Socket$1.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
            return
        }
        else if ((sim_actual === false) || (sim_actual == "both")) {
            if(sim_actual === "both"){
                DexterSim.create_or_just_init(robot_name, sim_actual); //harmless if done a 2nd time. returns without callback
            }
            let net_soc_inst = Socket$1.robot_name_to_soc_instance_map[robot_name];
            if(net_soc_inst && (net_soc_inst.readyState === WebSocket.CLOSED)) {//WebSocket.CLOSED == 3 //"closed")) { //we need to init all the "on" event handlers
                this.close(robot_name, true);
                net_soc_inst = null;
            }
            if(net_soc_inst) { //net_soc_inst already existed and is open
                Socket$1.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
                return
            }
            else { //make a new WebSocket
                //out(job_instance.name + " Socket.init net_soc_inst for " + robot_name + " doesn't yet exist or is closed.")
                try {
                    //net_soc_inst = new net.Socket()
                    //net_soc_inst.setKeepAlive(true)
                    let protocol = ((DDEFile.http_and_maybe_s === "http") ? "ws" : "wss");
                    let port     = ((protocol === "ws") ? ":" + rob.port : "");
                    let ws_url   = //"ws://" + rob.ip_address
                                   //"ws://" + rob.ip_address + ":" + rob.port
                                   protocol + "://" + rob.ip_address + port; //port is normally 3000
                    net_soc_inst = new WebSocket(ws_url); // see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket
                    console.log("In Socket.init, made new WebSocket at: " + ws_url);
                    if (!(net_soc_inst instanceof WebSocket)) {
                        dde_error("In Socket.init, could not create WebSocket for url: " + ws_url);
                    }
                }
                catch(err){
                        console.log(job_instance.name + " Socket.init catch clause with err: " + err.message);
                        this.close(robot_name, true);
                        out('DDE cannot connect to Dexter.<br/>' +
                            `Please read: <a href="#" onclick="DocCode.open_doc('configure_dexter_id', event)">Configure Dexter</a>)` +
                            `and, in particular: <a href="#" onclick="DocCode.open_doc('configure_browser_for_dde4_cloud_id', event)">Configure Browser for DDE4 Cloud</a>)`
                        );
                        dde_error("Error attempting to create socket to Dexter." + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port + err.message);
                }
                //WebSocket creating succeeded
                net_soc_inst.onopen = function(event){
                    Socket$1.robot_name_to_soc_instance_map[robot_name] = net_soc_inst;
                    //the 3 below closed over vars are just used in the one call to when this on connect happens.
                    Socket$1.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
                };
                net_soc_inst.onmessage = function(event) {
                    let msg = event.data;
                    console.log("Socket.js onmessage got msg: " + msg);
                    Socket$1.on_receive(msg, undefined, rob);
                };
                net_soc_inst.onclose = function(close_event){
                    console.log("net socket closed.");
                };
                net_soc_inst.onerror = function(err){
                    console.log("Probably while running " + job_instance.name + " Socket.init on error while waiting for ack from instruction: " + instruction_to_send_on_connect  +
                        " with err: " + err.toString());
                    //clearTimeout(st_inst)
                    let rob_name = Socket$1.net_soc_inst_to_robot_name(net_soc_inst);
                    if (rob_name == null) { rob_name = "unknown"; } //should be rare if at all.
                    let rob_maybe = (rob_name ? Dexter[rob_name] : null);
                    if (rob_maybe) {
                        //warning("in Socket.init on error callback, could not find Dexter." + rob_name)
                        rob = rob_maybe;
                    } //let rob "default" to the closed over "rob" because can't find anything else
                    //if(st_inst || (st_inst == 0)){ clearTimeout(st_inst) } //st_inst is just a non-neg int.
                    //Socket.close(robot_name, true) //true, means force_close, needed if job is still active becuse that will remove the soc from the robot_name_to_soc_instance_map and get init to really work.
                    if (rob.resend_count && (rob.resend_count >= 4)) {  //give up retrying and error
                        let active_jobs_using_rob = Job.active_jobs_using_robot(rob);
                        rob.resend_count = 0;
                        for(let job_inst of active_jobs_using_rob) {
                            job_inst.stop_for_reason("errored_from_dexter", "can't connect to Dexter." + rob_name);
                        }
                        return
                    }
                    else { //we've got a rob, keep trying
                        if(!rob.resend_count) {
                            rob.resend_count = 1;
                        }
                        else { rob.resend_count += 1; }
                        Socket$1.close(robot_name, true);
                        let timeout_dur = Math.pow(10, rob.resend_count);
                        setTimeout(function(){
                            console.log("re-initing Socket to Dexter." + rob_name);
                            //in the below, for the 3 closed over vars, its possible that these aren't
                            //the right closed over vars, because multiple jobs can send to a given robot.
                            //but if we're only running one robot, or in 2 or more jobs hitting a robot,
                            //maybe these are right, so worth a shot. Not sure what else to do.
                            Socket$1.prepare_for_re_init(robot_name);
                            Socket$1.init(rob_name, job_instance, instruction_to_send_on_connect);
                        }, timeout_dur);
                    }
                }; //end of on("error"
            } //ending the case where we need to make a new net_soc_inst/WebSocket
        }
    }

    //this code lifted from dde3 socket.js using raw sockets and called when running on node/job_engine
    static async init_raw_socket(robot_name, job_instance, instruction_to_send_on_connect=null){
        out(job_instance.name + " Socket.init_raw_socket passed: " + robot_name + " " + instruction_to_send_on_connect);
        if(!job_instance.is_active()) {
            warning(job_instance.name + " Attempt to Socket.init with inactive status: " + job_instance.status_code);
            return
        }
        globalThis.net = await import('net');
        out("init_raw_socket got net defined? : " + ((globalThis.net)? true : false));
        let rob = Robot[robot_name];
        const sim_actual = Robot.get_simulate_actual(rob.simulate); //true, false, or "both"
        if (sim_actual === true){ //when we are ONLY simulating
            DexterSim.create_or_just_init(robot_name, sim_actual);
            //out("socket for Robot." + robot_name + ". is_connected? " + Robot[robot_name].is_connected)
            Socket$1.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
        }
        else if ((sim_actual === false) || (sim_actual == "both")) {
            if(sim_actual == "both"){
                DexterSim.create_or_just_init(robot_name, sim_actual); //harmless if done a 2nd time. returns without callbaack
            }
            let net_soc_inst = Socket$1.robot_name_to_soc_instance_map[robot_name];
            if(net_soc_inst && !this.readyState_is_open(net_soc_inst)) { //we need to init all the "on" event handlers
                this.close(robot_name, true);
                net_soc_inst = null;
            }
            if(!net_soc_inst){
                //out(job_instance.name + " Socket.init net_soc_inst for " + robot_name + " doesn't yet exist or is closed.")
                try {
                    net_soc_inst = new net.Socket();
                    out("init_raw_socket made new net_soc_inst: " + net_soc_inst);
                    net_soc_inst.setKeepAlive(true);
                    //out(job_instance.name + " Just after created, net_soc_inst.readyState: " + net_soc_inst.readyState)
                    /* on error *could* be called, but its duration from a no-connection is
                       highly variable so I have below a setTimeout to kill the connection
                       after a second. But then both on error and the setTimeout method
                       *could* get called so I take pains to kill off the setTimeout
                       so that only one will get called.

                    */
                }
                catch(err){
                    console.log(job_instance.name + " Socket.init catch clause with err: " + err.message);
                    dde_error("Error attempting to create socket to Dexter." + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port + err.message);
                    this.close(robot_name, true);
                }
                // I must define the below just once (on actual new socket init, because  calling
                // net_soc_inst.on("data", function(data) {...} actually gives the socket 2 versions of the callback
                // and so each will be called once, giving us a duplication that causes a difficult to find bug.
                net_soc_inst.on("data", function(data) {
                    Socket$1.on_receive(data, undefined, rob);
                });
                net_soc_inst.on("connect", function(){
                    out(job_instance.name + " Succeeded connection to Dexter: " + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port, "green");
                    //clearTimeout(st_inst)
                    Socket$1.robot_name_to_soc_instance_map[robot_name] = net_soc_inst;
                    //the 3 below closed over vars are just used in the one call to when this on connect happens.
                    Socket$1.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
                });
                net_soc_inst.on("error", function(err){
                    console.log("Probably while running " + job_instance.name + " Socket.init on error while waiting for ack from instruction: " + instruction_to_send_on_connect  +
                        " with err: " + err.message);
                    //clearTimeout(st_inst)
                    let rob_name = Socket$1.net_soc_inst_to_robot_name(net_soc_inst);
                    if (rob_name == null) { rob_name = "unknown"; } //should be rare if at all.
                    let rob_maybe = (rob_name ? Dexter[rob_name] : null);
                    if (rob_maybe) {
                        //warning("in Socket.init on error callback, could not find Dexter." + rob_name)
                        rob = rob_maybe;
                    } //let rob "default" to the closed over "rob" because can't find anything else
                    //if(st_inst || (st_inst == 0)){ clearTimeout(st_inst) } //st_inst is just a non-neg int.
                    //Socket.close(robot_name, true) //true, means force_close, needed if job is still active becuse that will remove the soc from the robot_name_to_soc_instance_map and get init to really work.
                    if (rob.resend_count && (rob.resend_count >= 4)) {  //give up retrying and error
                        let active_jobs_using_rob = Job.active_jobs_using_robot(rob);
                        rob.resend_count = 0;
                        for(let job_inst of active_jobs_using_rob) {
                            job_inst.stop_for_reason("errored_from_dexter", "can't connect to Dexter." + rob_name);
                        }
                        return
                    }
                    else { //we've got a rob, keep trying
                        if(!rob.resend_count) {
                            rob.resend_count = 1;
                        }
                        else { rob.resend_count += 1; }
                        Socket$1.close(robot_name, true);
                        let timeout_dur = Math.pow(10, rob.resend_count);
                        setTimeout(function(){
                            console.log("re-initing Socket to Dexter." + rob_name);
                            //in the below, for the 3 closed over vars, its possible that these aren't
                            //the right closed over vars, because multiple jobs can send to a given robot.
                            //but if we're only running one robot, or in 2 or more jobs hitting a robot,
                            //maybe these are right, so worth a shot. Not sure what else to do.
                            Socket$1.prepare_for_re_init(robot_name);
                            Socket$1.init(rob_name, job_instance, instruction_to_send_on_connect);
                        }, timeout_dur);
                    }
                }); //end of on("error"
                setTimeout(function() {
                    if(!net_soc_inst) ; //presume the job completed and so nothing to do
                    else if (job_instance.is_done()) ; //presume the job completed and so nothing to do
                    else if(net_soc_inst.readyState === "open") ; //connection worked, leave it alone
                    else { //connection failed
                        job_instance.stop_for_reason("errored_from_dexter_connect", "Connection to Dexter." + robot_name +
                            "\n failed after 2 seconds.");
                    }
                }, 2000);
                let ip_addr = rob.ip_address;
                if (ip_addr == "localhost") ip_addr = "127.0.0.1"; // net.connect wants a number as a string
                console.log("Socket.init trying to connect to port:"+rob.port+" ip:"+ip_addr);
                net_soc_inst.connect(rob.port, ip_addr);
            } //ending the case where we need to make a new net_soc_inst

            /*out(job_instance.name + "Socket.init before connect, net_soc_inst.readyState: " + net_soc_inst.readyState)
            if (net_soc_inst.readyState === "closed") {
                 st_inst = setTimeout(function(){
                    out(job_instance.name + " in Socket.init, setTimout of st_inst")
                    if(net_soc_inst.readyState !== "open") { //still trying to connect after 1 sec, so presume it never will. kill it
                        Socket.close(robot_name, true)
                        rob.resend_count = 0
                        if(!job_instance.is_done()){
                            job_instance.stop_for_reason("errored_from_dexter", " socket timeout while connecting to Dexter." + rob.name)
                        }
                    }
                    else {
                        Socket.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect)
                    }
                }, Socket.connect_timeout_seconds * 5000)
                out(job_instance.name + " Now attempting to connect to Dexter." + robot_name + " at ip_address: " + rob.ip_address + " port: " + rob.port + " ...", "brown")
                net_soc_inst.connect(rob.port, rob.ip_address) //the one call to .connect()
            } */
            else { //net_soc_inst already existed and is open
                Socket$1.new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect);
            }
        }
        //out(job_instance.name + " Socket.init, very bottom")
    }

    //works for both dde and node platforms.
    static readyState_is_open(net_soc_inst){
        if(platform === "node") {
            return net_soc_inst.readyState === "open"
        }
        else {
            console.log("in Socket.js readyState_is_open, readyState is: " + net_soc_inst.readyState);
            return net_soc_inst.readyState === WebSocket.OPEN //WebSocket.OPEN is 1
        }
    }

    static send_low_level(net_soc_inst, str){
        if(platform === "node") {
            const arr_buff = Socket$1.string_to_array_buffer(str);
            net_soc_inst.write(arr_buff); //dde3
        }
        else { //net_soc_inst should be a WebSocket
            console.log("send_low_level to WebSocket sending str of: " + str);
            net_soc_inst.send(str); //was: str // WebSocket send cab take a JS string as its arg.
        }
    }


    //called from both above socket code and from dexsim
    static new_socket_callback(robot_name, job_instance, instruction_to_send_on_connect){
        Dexter.set_a_robot_instance_socket_id(robot_name);
        if(instruction_to_send_on_connect) { //usually this clause hits. happens for initial g oplet for a job
              //and when connection is dropped and we need to resetablish connection and resend.
              //ok to call this even if we were already connected.
            /*if(instruction_to_send_on_connect[Dexter.INSTRUCTION_ID] === undefined){
                instruction_to_send_on_connect[Dexter.INSTRUCTION_ID]  = -1
            }
            if(instruction_to_send_on_connect[Dexter.JOB_ID] === undefined) {
                instruction_to_send_on_connect[Dexter.JOB_ID] = job_instance.job_id
            }
            if(instruction_to_send_on_connect[Dexter.START_TIME] === undefined) {
                instruction_to_send_on_connect[Dexter.START_TIME] = Date.now()
            }
            this.send(robot_name, instruction_to_send_on_connect)
             */
            let rob = Robot[robot_name];
            job_instance.send(instruction_to_send_on_connect, rob);
        }
        else {
            warning("In new_socket_callback without instruction to send.");
        }
    }

    static oplet_array_or_string_to_array_buffer(oplet_array_or_string){
        let str = this.oplet_array_or_string_to_string(oplet_array_or_string);
        return this.string_to_array_buffer(str)
    }

    static oplet_array_or_string_to_string(oplet_array_or_string) {
        if (typeof(oplet_array_or_string) == "string") { return oplet_array_or_string }
        else { //oplet_array_or_string is an array
            let str = "";
            for(var i = 0; i < oplet_array_or_string.length; i++){
                let suffix = ((i == (oplet_array_or_string.length - 1))? ";": " ");
                //let elt = oplet_array_or_string[i] + suffix
                let elt = oplet_array_or_string[i];
                if (Number.isNaN(elt)) { elt = "NaN"; } //usually only for "a" instructions and only for elts > 4
                  //looks like this is never used now because I convert from NaN to the prev val
                  //in the the higher level code so only numbers get passed to DexRun.
                elt = elt + suffix;
                str += elt;
            }
            return str
        }
    }

    static string_to_array_buffer(str){
        var arr_buff = Buffer.alloc(256); //was 128 but no reason not to have it 256
        //var view1    = new Uint8Array(arr_buff)
        for(var i = 0; i < str.length; i++){
            let char = str[i];
            let code = char.charCodeAt(0);
            arr_buff[i] = code;
        }
        return arr_buff
    }

    static degrees_to_dexter_units_array(arr){
        let new_array = [];
        for(let index = 0; index < arr.length; index++){
            let joint_number = index + 1;
            new_array.push(this.degrees_to_dexter_units(arr[index], joint_number));
        }
        return new_array
    }

    static dexter_units_to_degrees_array(arr){
        let new_array = [];
        for(let index = 0; index < arr.length; index++){
            let joint_number = index + 1;
            new_array.push(this.dexter_units_to_degrees(arr[index], joint_number));
        }
        return new_array
    }

    static degrees_to_dexter_units(deg, joint_number){
        if(joint_number == 6) {
            return Math.round(deg / Socket$1.DEGREES_PER_DYNAMIXEL_320_UNIT) +
                              Socket$1.J6_OFFSET_SERVO_UNITS //512
        }
        else if (joint_number == 7) {
            return Math.round(deg / Socket$1.DEGREES_PER_DYNAMIXEL_320_UNIT)
        }
        else {
            return Math.round(deg * 3600)  //convert to arcseconds
        }
    }

    static dexter_units_to_degrees(du, joint_number){
        if(joint_number == 6) {
            let ang_deg = (du - Socket$1.J6_OFFSET_SERVO_UNITS ) *
                       Socket$1.DEGREES_PER_DYNAMIXEL_320_UNIT;
            return ang_deg
        }
        else if (joint_number == 7) {
              let ang_deg = du * Socket$1.DEGREES_PER_DYNAMIXEL_320_UNIT;
              return ang_deg
        }
        else { return du / 3600 }
    }

    static instruction_array_degrees_to_arcseconds_maybe(instruction_array, rob){
        if(typeof(instruction_array) == "string") { return instruction_array} //no conversion needed.
        const oplet = instruction_array[Dexter.INSTRUCTION_TYPE];
        let number_of_args = instruction_array.length - Instruction.INSTRUCTION_ARG0;
        if ((oplet === "a") || (oplet === "P")){
            //take any number of angle args
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy.length - Instruction.INSTRUCTION_ARG0;
            for(let i = 0; i < number_of_args; i++) {
                let index = Instruction.INSTRUCTION_ARG0 + i;
                let arg_val = instruction_array_copy[index];
                let converted_val = this.degrees_to_dexter_units(arg_val, i + 1);
                instruction_array_copy[index] = converted_val;
            }
            return instruction_array_copy
        }
        else if (oplet === "S") {
            const name = instruction_array[Instruction.INSTRUCTION_ARG0];
            const args = instruction_array.slice(Instruction.INSTRUCTION_ARG1, instruction_array.length);
            const first_arg = args[0];
            //first convert degrees to arcseconds
            if(["MaxSpeed", "StartSpeed", "Acceleration",
                "AngularSpeed", "AngularSpeedStartAndEnd", "AngularAcceleration",
                "CartesianPivotSpeed", "CartesianPivotSpeedStart", "CartesianPivotSpeedEnd",
                "CartesianPivotAcceleration", "CartesianPivotStepSize" ].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                instruction_array_copy[Instruction.INSTRUCTION_ARG1] = Math.round(first_arg * _nbits_cf);
                return instruction_array_copy
            }
            else if (name.includes("Boundry")) { //the full name is  J1BoundryHigh thru J5BoundryHigh, or J1BoundryLow thru J5BoundryLow
                let instruction_array_copy = instruction_array.slice();
                let joint_number = parseInt(name[1]);
                instruction_array_copy[Instruction.INSTRUCTION_ARG1] = this.degrees_to_dexter_units(first_arg, joint_number); //Math.round(first_arg * 3600) //deg to arcseconds
                //only expecting j1 thru J5, and since j1 thru j5 are to be converted the same, just pass joint 1
                return instruction_array_copy
            }
            else if (["CommandedAngles", "RawEncoderErrorLimits", "RawVelocityLimits"].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                for(let i = Instruction.INSTRUCTION_ARG1; i <  instruction_array.length; i++){
                    let orig_arg = instruction_array_copy[i];
                    instruction_array_copy[i] = this.degrees_to_dexter_units(orig_arg, i + 1); // Math.round(orig_arg * 3600)
                }
                return instruction_array_copy
            }
            //dynamixel conversion
            else if (name == "EERoll"){ //J6 no actual conversion here, but this is a convenient place
                //to put the setting of robot.angles and is also the same fn where we convert
                // the degrees to dynamixel units of 0.20 degrees
                //val is in dynamixel units
                rob.angles[5] = this.dexter_units_to_degrees(first_arg, 6); //convert dynamixel units to degrees then shove that into rob.angles for use by subsequent relative move instructions
                return instruction_array
            }
            else if (name == "EESpan") { //J7
                rob.angles[6] = this.dexter_units_to_degrees(first_arg, 7);
                return instruction_array
            }
            else if (name === "LinkLengths"){
                let instruction_array_copy = instruction_array.slice();
                for(let i = Instruction.INSTRUCTION_ARG1; i < instruction_array.length; i++){
                    let orig_arg = instruction_array_copy[i];
                    instruction_array_copy[i] = Math.round(orig_arg / _um);
                }
                return instruction_array_copy
            }
            else if (["CartesianSpeed", "CartesianSpeedStart", "CartesianSpeedEnd", "CartesianAcceleration",
                "CartesianStepSize", ].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                let new_val = Math.round(first_arg / _um); //convert from meters to microns
                instruction_array_copy[Instruction.INSTRUCTION_ARG1] = new_val;
                return instruction_array_copy
            }
            else if(name === "JointDH") {
                let instruction_array_copy = instruction_array.slice();
                instruction_array_copy[Instruction.INSTRUCTION_ARG2] =
                    Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG2] * 1000000);
                instruction_array_copy[Instruction.INSTRUCTION_ARG3] =
                    Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG3] * 3600);
                instruction_array_copy[Instruction.INSTRUCTION_ARG4] =
                    Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG4] * 1000000);
                instruction_array_copy[Instruction.INSTRUCTION_ARG5] =
                    Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG5] * 3600);
                return instruction_array_copy
            }
            else if (name.startsWith("Joint")){ //JointSpeed, JointAcceleration
                let instruction_array_copy = instruction_array.slice();
                let old_val = instruction_array_copy[Instruction.INSTRUCTION_ARG2];
                let new_val = old_val * 3600;
                instruction_array_copy[Instruction.INSTRUCTION_ARG2] = new_val;
                return instruction_array_copy
            }
            else { return instruction_array }
        }
        else if (oplet == "T") { //move_to_straight
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy[Instruction.INSTRUCTION_ARG0] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG0] / _um); //meters to microns
            instruction_array_copy[Instruction.INSTRUCTION_ARG1] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG1] / _um); //meters to microns
            instruction_array_copy[Instruction.INSTRUCTION_ARG2] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG2] / _um); //meters to microns
            instruction_array_copy[Instruction.INSTRUCTION_ARG11] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG11] * 3600); //degrees to arcseconds
            instruction_array_copy[Instruction.INSTRUCTION_ARG12] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG12] * 3600); //degrees to arcseconds
            return instruction_array_copy
        }
        else if (oplet == "z") { //sleep
            let instruction_array_copy = instruction_array.slice(); //instruction array contains dur in seconds, but Dexter expects microseconds
            instruction_array_copy[Instruction.INSTRUCTION_ARG0] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG0] * Socket$1.DEXTER_UNITS_PER_SECOND_FOR_SLEEP); //seconds to nanoseconds
            return instruction_array_copy
        }
        else { return instruction_array }
    }

    //not normally called but IS called when converting Defaults.make_ins to "high level".
    //this fn is meant to parallel as much as possible instruction_array_degrees_to_arcseconds_maybe
    //with degrees_to_dexter_units replaced with dexter_units_to_degrees, divides replaced by multiples, etc as makes sense
    //this inverse version doesn't actually use its rob arg.
    static instruction_array_arcseconds_to_degrees_maybe(instruction_array, rob){
        if(typeof(instruction_array) == "string") { return instruction_array} //no conversion needed.
        const oplet = instruction_array[Dexter.INSTRUCTION_TYPE];
        let number_of_args = instruction_array.length - Instruction.INSTRUCTION_ARG0;
        if ((oplet === "a") || (oplet === "P")){
            //take any number of angle args
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy.length - Instruction.INSTRUCTION_ARG0;
            for(let i = 0; i < number_of_args; i++) {
                let index = Instruction.INSTRUCTION_ARG0 + i;
                let arg_val = instruction_array_copy[index];
                let converted_val = this.dexter_units_to_degrees(arg_val, i + 1);
                instruction_array_copy[index] = converted_val;
            }
            return instruction_array_copy
        }
        else if (oplet === "S") {
            const name = instruction_array[Instruction.INSTRUCTION_ARG0];
            const args = instruction_array.slice(Instruction.INSTRUCTION_ARG1, instruction_array.length);
            const first_arg = args[0];
            //first convert arcseconds to degrees
            if(["MaxSpeed", "StartSpeed", "Acceleration",
                "AngularSpeed", "AngularSpeedStartAndEnd", "AngularAcceleration",
                "CartesianPivotSpeed", "CartesianPivotSpeedStart", "CartesianPivotSpeedEnd",
                "CartesianPivotAcceleration", "CartesianPivotStepSize" ].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                instruction_array_copy[Instruction.INSTRUCTION_ARG1] = first_arg / _nbits_cf;
                return instruction_array_copy
            }
            else if (name.includes("Boundry")) { //the full name is  J1BoundryHigh thru J5BoundryHigh, or J1BoundryLow thru J5BoundryLow
                let instruction_array_copy = instruction_array.slice();
                let joint_number = parseInt(name[1]);
                instruction_array_copy[Instruction.INSTRUCTION_ARG1] = this.dexter_units_to_degrees(first_arg, joint_number); //Math.round(first_arg * 3600) //deg to arcseconds
                //only expecting j1 thru J5, and since j1 thru j5 are to be converted the same, just pass joint 1
                return instruction_array_copy
            }
            else if (["CommandedAngles", "RawEncoderErrorLimits", "RawVelocityLimits"].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                for(let i = Instruction.INSTRUCTION_ARG1; i <  instruction_array.length; i++){
                    let orig_arg = instruction_array_copy[i];
                    instruction_array_copy[i] = this.dexter_units_to_degrees(orig_arg, i + 1); // Math.round(orig_arg * 3600)
                }
                return instruction_array_copy
            }
            //dynamixel conversion
            else if (name == "EERoll"){ //J6 no actual conversion here, but this is a convenient place
                //to put the setting of robot.angles and is also the same fn where we convert
                // the degrees to dynamixel units of 0.20 degrees
                //val is in dynamixel units
                //don't do in this fn  rob.angles[5] = this.dexter_units_to_degrees(first_arg, 6) //convert dynamixel units to degrees then shove that into rob.angles for use by subsequent relative move instructions
                return instruction_array
            }
            else if (name == "EESpan") { //J7
                //don't do in this fn  rob.angles[6] = this.dexter_units_to_degrees(first_arg, 7)
                return instruction_array
            }
            else if (name === "LinkLengths"){
                let instruction_array_copy = instruction_array.slice();
                for(let i = Instruction.INSTRUCTION_ARG1; i < instruction_array.length; i++){
                    let orig_arg = instruction_array_copy[i];
                    instruction_array_copy[i] = orig_arg * _um;
                }
                return instruction_array_copy
            }
            else if (["CartesianSpeed", "CartesianSpeedStart", "CartesianSpeedEnd", "CartesianAcceleration",
                "CartesianStepSize", ].includes(name)){
                let instruction_array_copy = instruction_array.slice();
                let new_val = Math.round(first_arg * _um); //convert from meters to microns
                instruction_array_copy[Instruction.INSTRUCTION_ARG1] = new_val;
                return instruction_array_copy
            }
            else if(name === "JointDH") {
                let instruction_array_copy = instruction_array.slice();
                instruction_array_copy[Instruction.INSTRUCTION_ARG2] =
                    instruction_array_copy[Instruction.INSTRUCTION_ARG2] / 1000000; //orig in microns
                instruction_array_copy[Instruction.INSTRUCTION_ARG3] =
                    instruction_array_copy[Instruction.INSTRUCTION_ARG3] / 3600;    //orig in arcsecs
                instruction_array_copy[Instruction.INSTRUCTION_ARG4] =
                    instruction_array_copy[Instruction.INSTRUCTION_ARG4] / 1000000; //orig in microns
                instruction_array_copy[Instruction.INSTRUCTION_ARG5] =
                    instruction_array_copy[Instruction.INSTRUCTION_ARG5] / 3600;    //orig in arcsecs
                return instruction_array_copy
            }
            else if (name.startsWith("Joint")){ //JointSpeed, JointAcceleration
                let instruction_array_copy = instruction_array.slice();
                let old_val = instruction_array_copy[Instruction.INSTRUCTION_ARG2];
                let new_val = old_val / 3600;
                instruction_array_copy[Instruction.INSTRUCTION_ARG2] = new_val;
                return instruction_array_copy
            }
            else { return instruction_array }
        }
        else if (oplet == "T") { //move_to_straight
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy[Instruction.INSTRUCTION_ARG0] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG0] * _um); //microns to meters
            instruction_array_copy[Instruction.INSTRUCTION_ARG1] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG1] * _um); //microns to meters
            instruction_array_copy[Instruction.INSTRUCTION_ARG2] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG2] * _um); //microns to meters
            instruction_array_copy[Instruction.INSTRUCTION_ARG11] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG11] / 3600); //arcseconds to degrees
            instruction_array_copy[Instruction.INSTRUCTION_ARG12] =
                Math.round(instruction_array_copy[Instruction.INSTRUCTION_ARG12] / 3600); //arcseconds to degrees
            return instruction_array_copy
        }
        else if (oplet == "z") { //sleep
            let instruction_array_copy = instruction_array.slice();
            instruction_array_copy[Instruction.INSTRUCTION_ARG0] =
                instruction_array_copy[Instruction.INSTRUCTION_ARG0] / Socket$1.DEXTER_UNITS_PER_SECOND_FOR_SLEEP; // nanoseconds to seconds
            return instruction_array_copy
        }
        else { return instruction_array }
    }
    //Socket
    static send(robot_name, oplet_array_or_string){ //can't name a class method and instance method the same thing
        let is_reboot_inst = Dexter.is_reboot_instruction(oplet_array_or_string);
        let rob = Robot[robot_name];
        let oplet_array_or_string_du = Socket$1.instruction_array_degrees_to_arcseconds_maybe(oplet_array_or_string, rob);
        let job_id = Instruction.extract_job_id(oplet_array_or_string);
        let job_instance = Job.job_id_to_job_instance(job_id);

        if(!job_instance){
            shouldnt("Socket.send passed: " + robot_name + " " + oplet_array_or_string +
                     "<br/>extracted job_id:" + job_id + " but no defined Job with that ID.");
        }
        //out(job_instance.name + " " + robot_name + " Socket.send passed oplet_array_or_string: " + oplet_array_or_string)

        //let oplet = oplet_array_or_string[Instruction.INSTRUCTION_TYPE]
        //out("In Socket.send for Job." + job_instance.name +
        //    " Dexter." + rob.name +
        //    " oplet: " + oplet +
        //    " instr: " + oplet_array_or_string)
        /*
        let instr_id = oplet_array_or_string[Instruction.INSTRUCTION_ID]
        let got_first_non_monitor_instr = false

        if((oplet === "g") && (instr_id > 0)) {
            got_first_non_monitor_instr = true
            //out("in Socket.send for job: " + job_instance.name)
        }
        else if ((job_instance !== "monitor_job") && (oplet !== "g") && got_first_non_monitor_instr){
            //out("in Socket.send for job: " + job_instance.name)
        }
        */
        const str =  Socket$1.oplet_array_or_string_to_string(oplet_array_or_string_du);
        if(Instruction.is_F_instruction_string(str)) {
            rob.waiting_for_flush_ack = true;
        }
        if(job_instance.keep_history) {
            job_instance.sent_instructions_strings.push(str);
        }
       // const arr_buff = Socket.string_to_array_buffer(str) //don't do in dde4. Plus Buffer is a Node.js data  structure, not in JS per se
        const sim_actual = Robot.get_simulate_actual(rob.simulate);
        if((sim_actual === true) || (sim_actual === "both")){
            let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
            if(sim_inst) {
                setTimeout( function() { //eqiv to net_soc_inst.write(arr_buff) below.
                    DexterSim.send(robot_name, str); //dde3 used to use arr_buff for the 2nd arg.
                    if(is_reboot_inst) {
                        job_instance.stop_for_reason("completed", "Dexter.reboot_robot instruction sent.");
                        DexterSim.uninit(robot_name);
                    }
                }, 1);}
            else {
                Waiting.clear_job_and_dexter(job_instance, rob); //must do or the job will get stuck not advancing as it will be waiting for oplet_array_or_string to complete
                this.close(robot_name, true); //both are send args
                setTimeout(function(){
                    Socket$1.init(robot_name, job_instance, oplet_array_or_string);
                }, 100);
            }
        }
        if ((sim_actual === false) || (sim_actual === "both")) {
            let net_soc_inst = Socket$1.robot_name_to_soc_instance_map[robot_name];
            if(net_soc_inst && this.readyState_is_open(net_soc_inst)) {
                try {
                    console.log("Socket.send about to send str: " + str, undefined, true);
                    //net_soc_inst.write(arr_buff) //dde3
                    //net_soc_inst.send(str) //dde4
                    this.send_low_level(net_soc_inst, str);
                    //console.log("Socket.send just sent:     " + str)
                    //this.stop_job_if_socket_dead(job_id, robot_name)
                    if(is_reboot_inst){
                        job_instance.stop_for_reason("completed", "Dexter.reboot_robot instruction sent.");
                        warning("Rebooting Dexter." + robot_name + " due to running reboot instruction.");
                        delete this.robot_name_to_soc_instance_map.robot_name;
                    }
                    return
                }
                catch(err) {
                    console.log("Socket.send just after write in catch clause with err: " + err.message);
                    if (rob.resend_count && (rob.resend_count >= 4)) {  //give up retrying and error
                        rob.resend_count = 0;
                        job_instance.stop_for_reason("errored_from_dexter", "can't connect to Dexter");
                        //job_instance.color_job_button() //automatically done by job.prototype.finish
                        job_instance.set_up_next_do(0);  //necessary?
                        return
                    }
                    else { //keep trying
                        /*if(!rob.resend_count) {
                            rob.resend_count = 1
                        }
                        else { rob.resend_count += 1 }*/
                        Waiting.clear_job_and_dexter(job_instance, rob);
                        this.close(robot_name, true);
                        let timeout_dur = Math.pow(10, rob.resend_count);
                        setTimeout(function(){
                            console.log("re-initing Socket to Dexter." + robot_name);
                            Socket$1.init(robot_name, job_instance, oplet_array_or_string);
                        }, timeout_dur);
                        return
                    }
                }
            }
            else { //This only hits if there is no net_soc_inst in Socket.robot_name_to_soc_instance_map or if its not open
                Waiting.clear_job_and_dexter(job_instance, rob);
                this.close(robot_name, true);
                setTimeout(function(){
                    Socket$1.init(robot_name, job_instance, oplet_array_or_string);
                }, 100);
            }
        }
    } //end of send method
    /* apr 2019: sim calls on_receive now
    static on_receive_sim(robot_status_in_arcseconds, robot_name){ //robot_status_in_arcseconds might also be an ack_array, wbich doens't have any degrees, and won't be converted. or modified.
        let rob = Robot[robot_name]
        let sim_actual = Robot.get_simulate_actual(rob.simulate)
        if(sim_actual === true) { //don't include "both"
            Socket.convert_robot_status_to_degrees(robot_status_in_arcseconds) //modifies its input
            rob.robot_done_with_instruction(robot_status_in_arcseconds) //now robot_status_in_arcseconds is really in degrees
        }
        //else {} rob.simulate will be "both", so let the real Dexter supply the call to
        //rob.robot_done_with_instruction and the rs_status from Dexter, not the simulated one.
    }*/

    //called both from Dexter returning, and from Sim.
    //data should be a Buffer object. https://nodejs.org/api/buffer.html#buffer_buffer
    //payload_string_maybe is undefined when called from the robot,
    //and if called from sim and we have an "r" oplet, it is either a string (everything ok)
    //or a positive integer (1) when sim get file-not-found.
    //
    static on_receive(data, payload_string_maybe, dexter_instance){
        //data.length == 240 data is of type: Uint8Array, all values between 0 and 255 inclusive
        //console.log("top of Socket.on_receive.")
        //out("Socket.on_receive passed data: " + data +
        //                             " payload_string_maybe: " + payload_string_maybe +
        //                             " dexter_instance: " + dexter_instance)
        console.log("on_receive passed data:");
        console.log(data);
        if(Array.isArray(data)) {  //hits with returns from dextersim in both dde3 and dde4 //a status array passed in from the simulator
            let robot_status = data;
            let oplet = robot_status[Dexter.INSTRUCTION_TYPE];
            this.on_receive_aux(data, robot_status, oplet, payload_string_maybe, dexter_instance);
        }
        else if (platform === "node"){ //as in orig dde3
            let view1 = new Int32Array(data.buffer); //array_buff1.bytelength / 4); //weird google syntax for getting length of a array_buff1
            let robot_status = [];
            for(var i = 0; i < view1.length; i++){
                var elt_int32 = view1[i];
                robot_status.push(elt_int32);
            }
            let opcode = robot_status[Dexter.INSTRUCTION_TYPE];
            let oplet  = String.fromCharCode(opcode);
            this.on_receive_aux(data, robot_status, oplet, payload_string_maybe, dexter_instance);
        }
        else if(typeof(data) === "string"){
            console.log("Socket.on_receive got data of a string: " + data);
        }
        else if (data instanceof Blob) {//dde4 what comes back from  websocket
            //from https://javascript.info/blob
            // get arrayBuffer from blob
            console.log("on_receive got blob of size: " + data.size);
            if(data.size === 0) { return } //just ignore this. maybe artifact of WebSockets
            let fileReader = new FileReader();
            fileReader.onload = function(event) {
                let arrayBuffer = event.target.result; //should be the same as fileReader.result
                if(arrayBuffer.byteLength < 240){
                    dde_error("Socket.on_receive filereader onload got arraybuffer.byteLength: " + arrayBuffer.byteLength +
                        "<br/>which is too short.");
                }
                else {
                    let view1 = new Int32Array(arrayBuffer);
                    let robot_status = [];
                    for (var i = 0; i < view1.length; i++) {
                        var elt_int32 = view1[i];
                        robot_status.push(elt_int32);
                    }
                    let oplet = robot_status[Dexter.INSTRUCTION_TYPE];
                    oplet = String.fromCharCode(oplet);
                    console.log("on_receive onload cb made rs: " + robot_status + " and got oplet; " + oplet);
                    Socket$1.on_receive_aux(data, robot_status, oplet, payload_string_maybe, dexter_instance);
                }
                };
            fileReader.onerror = function(err) {
                console.log("in Socket.on_receive, fileReader.onerror called with: " + err.message);
            };
            fileReader.readAsArrayBuffer(data);
        }
        else {
            shouldnt("In Socket.on_receive, got unexpected data type.");
        }
    }

    static on_receive_aux(data, robot_status, oplet, payload_string_maybe, dexter_instance){
        //console.log("Socket.on_receive passed DU robot status: " + robot_status)
        //the simulator automatically does this so we have to do it here in non-simulation
        //out("on_receive got back oplet of " + oplet)
        robot_status[Dexter.INSTRUCTION_TYPE] = oplet;
        //let job_id = robot_status[Dexter.JOB_ID]
        //let job_instance = Job.job_id_to_job_instance(job_id)
        //out("In on_receive_aux for Job." + job_instance.name +
        //    " Dexter." + dexter_instance.name +
        //    " oplet: " + oplet +
        //    " J1 angle: " + robot_status[Dexter.J1_MEASURED_ANGLE])
        if(oplet == "r"){ //Dexter.read_file
            if(typeof(payload_string_maybe) == "number") { //only can hit im sim.// should be 2 if it hits
                robot_status[Dexter.ERROR_CODE] = 0; //even though we got an error from file_not_found,
                //don't set the error in the robot status. Just let that error
                //be used in r_payload_grab_aux which passes it to got_content_hunk
                //which sets the user data to the error code and
                // read_file_instance.is_done = true
                //so the loop in read_file_instance terminates normally.
            }
            else if ((payload_string_maybe === undefined) && //real. not simulated
                     (robot_status[Dexter.ERROR_CODE] > 0)) { //got an error, probably file not found
                payload_string_maybe = robot_status[Dexter.ERROR_CODE];
                robot_status[Dexter.ERROR_CODE] = 0;
            }
            //now robot_status does NOT have an error code, but if there is an error,
            //payload_string_maybe is an int > 0
            //but if no error, payload_string_maybe is a string
            Socket$1.r_payload_grab(data, robot_status, payload_string_maybe);
        }
        else {
            Socket$1.convert_robot_status_to_degrees(robot_status);
            //this.handle_monitor_dexter_maybe(robot_status) //just show the measured angles in the sim pane, no extra sim
        }

        //the below line became unnecessary, and too complex, too hieruasic once we
        //changed capturing the dexter_instance in the closure that is the wrapper
        //for the call to on_received, in Socket.init
        //let rob = this.find_dexter_instance_from_robot_status(robot_status) //= Dexter[robot_name]
        if (oplet === "F") {
            dexter_instance.waiting_for_flush_ack = false;
        }
        //out(job_instance.name + " " + rob.name + " bottom of Socket.on_receive with: " + robot_status)
        dexter_instance.robot_done_with_instruction(robot_status); //robot_status ERROR_CODE *might* be 1
    }

    //this is needed bacause we might have an instruction like Dexter.dexter2.move_all_joints()
    //the enclosing job might not have that dexter as its default robot,
    //or might not even have a Dexter instance as the Job robot at all.
    //so we want to first check the instruction to see if it has a robot.
    //if so. use it, if not, go for the default robot for the job and if that is an instance
    //of Dexter, use it, else error with shouldnt
    //uPDATE JUl 18, 2021
    //now unnecessary due to the Socket.init closure for on_receive capturiing the
    //dexter intstnace and passing it to on_receive,
    //BUT this code might come in handy some day
    /*
    static find_dexter_instance_from_robot_status(robot_status){
        let job_id       = robot_status[Dexter.JOB_ID]
        let job_instance = Job.job_id_to_job_instance(job_id)
        if(!job_instance){
            shouldnt("Socket.find_dexter_instance_from_robot_status passed: " + oplet_array_or_string +
                "<br/>extracted job_id:" + job_id + " but there is no defined Job with that ID.")
        }
        let instr_id     = robot_status[Dexter.INSTRUCTION_ID]
        let rob
        if(instr_id === -1) { //the initial g instruction, only sent when a Job has as its robot, a dexter
           rob = job_instance.robot
        }
        else {
            let instr = job_instance.do_list[instr_id]
            rob = instr.robot //this is the best we can do if there's a robot indicated in the instr
            if(!rob) {
                if(Array.isArray(instr)) {
                    let last_elt = last(instr)
                    if(last_elt instanceof Dexter){
                        rob = last_elt
                    }
                    else {
                        rob = job_instance.robot
                    }
                }
                else if(job_instance.robot instanceof Dexter) { //next best we can do
                    rob = job_instance.robot
                }
                else {
                    shouldnt("Socket.find_dexter_instance_from_robot_status 2 couldn't find robot from: " + robot_status +
                             "<br/>using Job.id: " + job_id + " Job.name: " + job_instance.name +
                             "<br/>instr id: " + instr_id + " instruction: " + instr)
                }
            }
        }
        return rob
    }*/

    static r_payload_grab(data, robot_status, payload_string_maybe) {
        if(payload_string_maybe === undefined) { //only in real, not in sim
            let payload_length = robot_status[Socket$1.PAYLOAD_LENGTH];
            let data_start = Socket$1.PAYLOAD_START;
            let data_end = data_start + payload_length;
            let part_of_blob = data.slice(data_start, data_end);
            payload_string_maybe = part_of_blob.toString();
        }
        else if (typeof(payload_string_maybe)  !==  "string") { //beware, sometimes payload_string_maybe is a buffer. This converts it to a string.
            payload_string_maybe = payload_string_maybe.toString();
        }
        //else { payload_string_maybe is normally a string, but could be an integer of > 0 if there's an error }
        Socket$1.r_payload_grab_aux(robot_status, payload_string_maybe);  //payload_string still might be an integer error code, ie 1 when file not found
    }

    //payload_string_maybe could be a string or an integer error code like 1 when no file found
    static r_payload_grab_aux(robot_status, payload_string_maybe){
        let job_id = robot_status[Dexter.JOB_ID];
        let ins_id = robot_status[Dexter.INSTRUCTION_ID];
        Instruction.Dexter.read_file.got_content_hunk(job_id, ins_id, payload_string_maybe);
    }

    static convert_robot_status_to_degrees(robot_status){
        let raw_status_mode = robot_status[Dexter.STATUS_MODE];
        //out("convert_robot_status_to_degrees got raw_status_mode of: " + raw_status_mode)
        if((raw_status_mode === null) || (raw_status_mode === 0) || (raw_status_mode === "0")){
            robot_status[Dexter.STATUS_MODE] = 0;
            if (robot_status.length == Dexter.robot_status_labels.length){
                robot_status[Dexter.J1_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J1_ANGLE], 1); //0.0002777777777777778 //this number === _arcsec
                robot_status[Dexter.J2_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J2_ANGLE], 2);
                robot_status[Dexter.J3_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J3_ANGLE], 3);
                robot_status[Dexter.J4_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J4_ANGLE], 4);
                robot_status[Dexter.J5_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J5_ANGLE], 5);

                robot_status[Dexter.J1_DELTA] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J1_DELTA], 1);
                robot_status[Dexter.J2_DELTA] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J2_DELTA], 2);
                robot_status[Dexter.J3_DELTA] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J3_DELTA], 3);
                robot_status[Dexter.J4_DELTA] *= 0.00001736111111111111;   //todo get the "S" interpolation values from Defaults.make_ins instead  ie robot_status[Dexter.J4_DELTA] *= _arcsec / the_make_int_number
                robot_status[Dexter.J5_DELTA] *= 0.00001736111111111111;   //for this one too.

                robot_status[Dexter.J1_PID_DELTA] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J1_PID_DELTA], 1);
                robot_status[Dexter.J2_PID_DELTA] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J2_PID_DELTA], 2);
                robot_status[Dexter.J3_PID_DELTA] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J3_PID_DELTA], 3);
                robot_status[Dexter.J4_PID_DELTA] *= 0.00001736111111111111;  //for this one too.
                robot_status[Dexter.J5_PID_DELTA] *= 0.00001736111111111111;  //for this one too.

                robot_status[Dexter.J1_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J1_MEASURED_ANGLE], 1);
                robot_status[Dexter.J2_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J2_MEASURED_ANGLE], 2);
                robot_status[Dexter.J3_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J3_MEASURED_ANGLE], 3);
                robot_status[Dexter.J4_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J4_MEASURED_ANGLE], 4);
                robot_status[Dexter.J5_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J5_MEASURED_ANGLE], 5);
                robot_status[Dexter.J6_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J6_MEASURED_ANGLE], 6);
                robot_status[Dexter.J7_MEASURED_ANGLE] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J7_MEASURED_ANGLE], 7);

                robot_status[Dexter.J1_SENT] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J1_SENT], 1); //0.0002777777777777778 //this number === _arcsec
                robot_status[Dexter.J2_SENT] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J2_SENT], 2);
                robot_status[Dexter.J3_SENT] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J3_SENT], 3);
                robot_status[Dexter.J4_SENT] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J4_SENT], 4);
                robot_status[Dexter.J5_SENT] = Socket$1.dexter_units_to_degrees(robot_status[Dexter.J5_SENT], 5);

            }
        }
        //else not g0 so no conversion
    }

    /* //robot_status has dexter units (arceconds)
    static handle_monitor_dexter_maybe(robot_status) {
        let job_id = robot_status[Dexter.JOB_ID]
        let job_instance = Job.job_id_to_job_instance(job_id)
        if(job_instance.name === "monitor_dexter"){
            let instr_for_sim = []
            let rs = new RobotStatus(robot_status )
            instr_for_sim[Instruction.JOB_ID]           = rs.job_id()
            instr_for_sim[Instruction.INSTRUCTION_ID]   = rs.instruction_id()
            instr_for_sim[Instruction.START_TIME]       = rs.start_time()
            //don't need or shouldn't have stop time
            instr_for_sim[Instruction.INSTRUCTION_TYPE] = rs.instruction_type()
            instr_for_sim[Instruction.ERROR_CODE]       = rs.error_code()
            let meas_ang_arcseconds                = rs.measured_angles(undefined, true)
            let j1_index_in_instruction = Instruction.INSTRUCTION_ARG0
            for(let j_index_inc = j_index_inc; j_index_inc < 7; j_index_inc++ ){
                let j_index_in_instruction = j1_index_in_instruction + j_index_inc
                let J_val_in_arcseconds =
                instr_for_sim[j_index_in_instruction] = meas_ang_arcseconds[j_index_inc]
            }
            let robot_name = job_instance.robot.name //warning: might not be right.
            let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name]
            if(!sim_inst) {  DexterSim.create_or_just_init(robot_name, true)}
            setTimeout( function() { //eqiv to net_soc_inst.write(arr_buff) below.
                DexterSim.send(robot_name, str) //dde3 used to use arr_buff for the 2nd arg.
            }, 1)
        }
    }*/

    static handle_monitor_dexter_maybe(robot_status) {
        let job_id = robot_status[Dexter.JOB_ID];
        let job_instance = Job.job_id_to_job_instance(job_id);
        if (job_instance.name === "monitor_dexter") {
            let rs = new RobotStatus({robot_status: robot_status});
            let err = rs.error_code();
            if(err !== 0){
                warning("Job." + job_instance.name + " got back from Dexter error code: " + err);
            }
            else {
                let meas_ang_degrees = rs.measured_angles(undefined, true); //array of 7 degrees
                SimUtils.render_joints(meas_ang_degrees);
            }
        }
    }

    static close(robot_name, force_close=false){
        let rob = Robot[robot_name];
        const sim_actual = Robot.get_simulate_actual(rob.simulate);
        if ((sim_actual === false) || (sim_actual === "both")){
           if((rob.active_jobs_using_this_robot().length == 0) || force_close){
                const net_soc_inst = Socket$1.robot_name_to_soc_instance_map[robot_name];
                if(net_soc_inst){
                    this.close_low_level(net_soc_inst);
                    delete Socket$1.robot_name_to_soc_instance_map[robot_name];
                }
            }
        }
    }

    static close_low_level(net_soc_inst){
        if(platform === "node") {
            net_soc_inst.removeAllListeners();
            net_soc_inst.destroy();
        }
        else {
            net_soc_inst.close();
        }
    }

    static prepare_for_re_init(robot_name){
            let rob = Robot[robot_name];
            const sim_actual = Robot.get_simulate_actual(rob.simulate);
            if ((sim_actual === false) || (sim_actual === "both")){
                 const net_soc_inst = Socket$1.robot_name_to_soc_instance_map[robot_name];
                 if(net_soc_inst){
                     net_soc_inst.removeAllListeners();
                     net_soc_inst.destroy();
                     delete Socket$1.robot_name_to_soc_instance_map[robot_name];
                 }
            }
    }

    /*this causes DexRun to crash. Ultimately we need to rewrite FPGA code to get this functionality.
    static empty_instruction_queue_now(robot_name){
        let rob = Robot[robot_name]
        const sim_actual = Robot.get_simulate_actual(rob.simulate)
        if ((sim_actual === true) || (sim_actual === "both")){ //simulation
            DexterSim.empty_instruction_queue_now(robot_name)
        }
        if ((sim_actual === false) || (sim_actual == "both")){
            const soc_inst = Socket.robot_name_to_soc_instance_map[robot_name]
            if(soc_inst && !soc_inst.destroyed){
                const oplet_array = make_ins("E") //don't expect to hear anything back from this.
                const arr_buff = this.oplet_array_or_string_to_array_buffer(oplet_array)
                try { soc_inst.write(arr_buff) } //band-aid for not knowing what's in Dexter's queue.
                                              //if the queue is empty we shouldn't do.
                                              //we should empty the queue whenever DDE detects an error,
                                              //but before closing the socket.
                catch(err) {
                    warning("Writing to the robot: " + robot_name +
                            " while emptying its queue failed, but that may be ok.")
                }
            }
        }
    }*/
    static connect_timeout_seconds = 1
    static PAYLOAD_START = 7 * 4 //7th integer array index, times 4 bytes per integer
    static PAYLOAD_LENGTH = 6 //6th integer array index

////Socket.resend_count = null

    static robot_name_to_soc_instance_map = {} //can contain both raw sockets and WebSockets.
    static DEGREES_PER_DYNAMIXEL_320_UNIT = 0.29   //range of motion sent is 0 to 1023
    static DEGREES_PER_DYNAMIXEL_430_UNIT = 360 / 4096
    static J6_OFFSET_SERVO_UNITS = 512
    static DEXTER_UNITS_PER_SECOND_FOR_SLEEP = 1000000 //ie microseconds
}

globalThis.Socket = Socket$1;

//Socket.robot_is_waiting_for_reply = {} //robot_name to boolean map.
//Socket.max_dur_to_wait_for_reply_ms = 200



/*dexter0.joints = []
             joint_instances
                 motor_instance of a 2, 320, 430 or stepper
                        speed=30

                 min=-360
                 max=360
                 gear_ratio=1

                 convert_deg_to_dexter_units()
                 init() // ie like reboot_servo
                 set_indicator(val)   //ie turn on LED for J6
 */



//Socket.on_receive_added = false

/* Created by Fry on 3/30/16.*/
//whole file loaded in  env only as is tcp

//import {Robot, Dexter} from "./robot.js" //dde4 not needed as Robot, Dexter now global
//import {Socket}        from "./socket.js" //dde4 Socket is now global
//import {Instruction}   from "./instruction.js" //dde4 Instruction is now global

//import {Kin}           from "../math/Kin.js"    //dde4 Kin is now global
//import {Vector}        from "../math/Vector.js" //dde4 Vector is now global
//import {Simqueue}      from "./simqueue.js"     //dde4 SimQueue is now global

class DexterSim$1{
    constructor(robot_name){ //called once per DDE session per robot_name by create_or_just_init
        this.robot_name = robot_name;
        this.robot      = Robot[robot_name]; //mostly used by predict_move_dur
        DexterSim$1.robot_name_to_dextersim_instance_map[robot_name] = this;
        this.angles_dexter_units = [0,0,0,0,0,
                                   Socket.degrees_to_dexter_units(0, 6), //different from the others because for the others, 0 deg is also 0 dexter units, but not for j6
                                   50];  //50 which is the new HOME angle so that j7 doesn't overtorque.
        this.pid_angles_dexter_units = [0,0,0,0,0,0,0];  //last 2 angles are always zero.
    }

    compute_measured_angles_dexter_units(){
        return Vector.add(this.angles_dexter_units, this.pid_angles_dexter_units)
    }

    compute_measured_angles_degrees(){
        let ma_du = this.compute_measured_angles_dexter_units();
        return Socket.dexter_units_to_degrees_array(ma_du)
    }

    compute_measured_angle_degrees(joint_number){ //joint is 1 thru 7
        let ma_du = this.angles_dexter_units[joint_number - 1];
        let ma_deg = Socket.dexter_units_to_degrees(ma_du, joint_number);
        return ma_deg
    }

    static is_simulator_running(){
        for(let rob_name in DexterSim$1.robot_name_to_dextersim_instance_map){
            let sim_instance = DexterSim$1.robot_name_to_dextersim_instance_map[rob_name];
            if(sim_instance.queue_instance.is_simulator_running()){
                return true
            }
        }
        return false
    }

    simout(string){
       let sim_html = '<span style="color:black; background-color:#ab99ff;"> &nbsp;Simulator: </span> &nbsp;&nbsp;';
        let rob_name = "Dexter." + this.robot_name;
        out(sim_html + rob_name + " " + string, undefined, true); //temp printout
    }

    //sim_actual passed in is either true or "both"
    //called by Socket.init. This is the top level initializer for the simulator
    static create_or_just_init(robot_name, sim_actual = "required"){
        if (!DexterSim$1.robot_name_to_dextersim_instance_map){
            DexterSim$1.init_all();
        }
        var sim_inst = DexterSim$1.robot_name_to_dextersim_instance_map[robot_name];
        if(!sim_inst) {
            sim_inst = new DexterSim$1(robot_name);
            sim_inst.init(sim_actual);
        }
        else {
            let cur_dex_inst_of_name = Dexter[robot_name];
            sim_inst.robot = cur_dex_inst_of_name; //because if the user redefined the robot of that name
            //since the last time they made a DexterSim instance, sim_inst will have the old dexter inst,
            //so we need to update it.
            sim_inst.sim_actual = sim_actual;
        }
        //if (sim_actual === true) { //do not call new_socket_callback if simulate is "both" because we don't want to call it twice
        //    Socket.new_socket_callback(robot_name)
        //}
    }

    static init_all(){ //called once per DDE session (normally)
        DexterSim$1.robot_name_to_dextersim_instance_map = {};
        //DexterSim.set_interval_id = setInterval(DexterSim.process_next_instructions, 10)
    }

    //called by Socklet.send when reboot_robot sent
    //After Dexter is sent a reboot instruction, it continues to run the items in its queue,
    //but does not accept new instructions, so simulate that.
    static uninit(robot_name, tries=0){
        let dexsim = DexterSim$1.robot_name_to_dextersim_instance_map[robot_name];
        if(dexsim.queue_instance.is_queue_empty() || (tries === 80)) { //80 * 200 = 16 secs. If the queue hasn't empied by that time, kill it anyway
            setTimeout(function() {
                delete DexterSim$1.robot_name_to_dextersim_instance_map[robot_name];
            }, 4000); //Give the last instruction in  the queue a chance to finish, then kill it
        }
        else {
            setTimeout(function(){DexterSim$1.uninit(robot_name, tries + 1);},
                200);
        }
    }

    init(sim_actual){
        this.sim_actual = sim_actual;
        this.queue_instance = new Simqueue(this);

        //these should be in dexter_units
        this.parameters = { //set_params. see Socket.js instruction_array_degrees_to_arcseconds_maybe
            Acceleration:  0.0001,        // in _nbits_cf units
            MaxSpeed:     30 * _nbits_cf, // in _nbits_cf units
            StartSpeed:    0 * _nbits_cf  // in _nbits_cf units
        };
        this.status_mode = 0; //can also be 1, set by "g" command.
        this.fpga_register = new Array(Instruction.w_address_names.length); //the make_ins("w", index, val) instructions stored here. //write fpga register
        this.fpga_register.fill(0);
        this.write_file_file_name = null;
        this.write_file_file_content = ""; //grows as "m" instructions come in
        this.last_instruction_sent = null;

        // not used  this.pid_angles_arcseconds      = [0,0,0,0,0,0,0]
        this.velocity_arcseconds_per_second = [0,0,0,0,0,0,0];
    }

    static array_buffer_to_string(arr_buff, terminating_char=";"){
        let str = arr_buff.toString();
        let end_index = str.indexOf(terminating_char);
        return str.substring(0, end_index)
    }

    //this fn obsoleted by dde4 and str's getting sent from Socket, not arr_buff's
    static array_buffer_to_oplet_array(arr_buff){
        this.array_buffer_to_string(arr_buff);
    }

    static str_to_oplet_array(str) {
        let split_str = str.split(" ");
        let oplet_array = [];
        let oplet;
        for(let i = 0; i <  split_str.length; i++) {
            let substr = split_str[i];
            if(i == Instruction.INSTRUCTION_TYPE) {
                oplet = substr[0]; //dde4: substr is someimes "g;" so get rid of the semicolon.
                oplet_array.push(oplet);
                if(substr.endsWith(";")) {
                    substr = substr.substring(0, (substr.length - 1)); //cut off the trailing semicolon
                    break;
                }
                else                     { continue; }
            }
            else if ((oplet == "W") && (i == Instruction.INSTRUCTION_ARG2)) { //this is the payload of Dexter.write_file
                //let raw_string = arr_buff.toString() //can't use str because that ends at first semicolon, and payload might have semicolons in it.
                //don't do the above, str can now have semicolons in it beecause its not filtered by  array_buffer_to_string
                //cutting everything after semicolon off.

                let ending_semicolon_pos = str.lastIndexOf(";"); //note that the payload might have semicolons in it so don't choose those by using LASTindexOf
                let W_pos = str.indexOf(" W ");
                let start_payload_length_pos = W_pos + 5; //5 skips over the "W f " (oplet and write_kind letter and spaces)
                //but now we must skip over the payload length, which is an int of variable length
                let start_payload_pos = str.indexOf(" ", start_payload_length_pos) + 1; //skip over palyoad length and the space after it
                let payload = str.substring(start_payload_pos, ending_semicolon_pos); //excludes final semicolon
                oplet_array.push(payload);
                break;
            }
            else if (substr == ";")         { break }
            else if (substr == "")          ; //ignore. this is having more than one whitespace together. Just throw out
            else if (substr == "undefined") { oplet_array.push(undefined); }
            else if (substr == "undefined;") {
                oplet_array.push(undefined);
                break;
            }
            else if (substr == "NaN")       { oplet_array.push(NaN); }
            else if (substr == "NaN;")      {
                oplet_array.push(NaN);
                break;
            }
            else {
                let num_maybe = parseFloat(substr); //most are ints but some are floats
                if(Number.isNaN(num_maybe)) { oplet_array.push(substr); } //its a string
                else                        { oplet_array.push(num_maybe); } //its an actual number
                if(substr.includes(";")) { break; } //this clause new in dde4. Allows input str to have a semicolon,
                 //and to use that semicolon in a W oplet's payload, while also
                 //ignoring chars after the semicolon. //todo dde4 needs testing
            }
        }
        return oplet_array
    }

    //used in Simqueue for showing sent instructions
    job_of_last_instruction_sent() {
        let instr = this.last_instruction_sent;
        if(!instr) { return null }
        else {
            let job_id = instr[Instruction.JOB_ID];
            return Job.job_id_to_job_instance(job_id)
        }
    }

    //called from Socket.send
    //typically adds instruction to ds_instance.instruction_queue
    static async send(robot_name, str){ //use to take arr_buff as 2nd arg in dde3
        let instruction_array = //obsolete in dde4:  this.array_buffer_to_oplet_array(arr_buff) //instruction_array is in dexter_units
                                this.str_to_oplet_array(str);
        //out("Sim.send passed instruction_array: " + instruction_array + " robot_name: " + robot_name)
        let ds_instance = DexterSim$1.robot_name_to_dextersim_instance_map[robot_name];
        /*if(!ds_instance) {
            let rob = Dexter[robot_name]
            rob.instruction_to_send_on_connect = instruction_array
            const sim_actual = Robot.get_simulate_actual(rob.simulate)
            this.create_or_just_init(robot_name, sim_actual)
            return
        }*/
        ds_instance.last_instruction_sent = instruction_array;
        let ins_args = Instruction.args(instruction_array); //in dexter_units
        let oplet  = instruction_array[Dexter.INSTRUCTION_TYPE];
        switch(oplet) {
            case "a":
                ds_instance.queue_instance.add_to_queue(instruction_array);
                ds_instance.ack_reply_maybe(instruction_array);
                break;
            case "e": //cause an error. Used for testing only
                //not needed as ack_reply pulls the error_code out of instruction_array for "e" oplets. let the_error_code = instruction_array[Instruction.INSTRUCTION_ARG0]
                ds_instance.ack_reply_maybe(instruction_array);
                break;
            case "E": //not implemented on Dexter Mar 13, 2021 but should be. Requires FPGA programming
                ds_instance.queue_instance.empty_instruction_queue(); //this will call ack_reply IFF the queue is blocked (by a previous "F" cmd
                break;
            case "F": //empty_instruction_queue. blocks adding to queue until its empty.
                ds_instance.queue_instance.set_queue_blocking_instruction(instruction_array);
                //do not ack_reply! That happens when all items removed from the queue.
                break;
            case "g":
                let inst_status_mode = instruction_array[Instruction.INSTRUCTION_ARG0];
                if ((inst_status_mode === null) || (inst_status_mode === undefined)) {
                    ds_instance.status_mode = 0;
                } //helps backwards compatibility pre status modes.
                else {
                    ds_instance.status_mode = inst_status_mode;
                }
                ds_instance.ack_reply(instruction_array);
                break;
            /*case "G": //deprecated. get immediate. The very first instruction sent to send should be  "G",
                                     //so let it be the first call to process_next_instruction & start out the setTimeout chain
                ds_instance.add_instruction_to_queue(instruction_array) //stick it on the front of the queue so it will be done next
                break;*/
            case "h": //doesn't go on instruction queue, just immediate ack
                ds_instance.ack_reply(instruction_array);
                break;
            case "P": //does not go on queue  //ds_instance.queue_instance.add_to_queue(instruction_array)
                //pid_move_all_joints for j6 and 7 are handled diffrently than J1 thru 5.
                //IF we get a pid_maj for j6 and/or j7, just treat it like
                // an maj for j6 and j7, ie just more the joints to those locations.
                //pid_move_all_joints can construct an istruction array that has less than 7 joint angles.
                //IF a j6 or j7 is NOT present, then don't do anything with j6 and j7 ie don't set it to zero.
                let pid_ang_du = Instruction.extract_args(instruction_array); //probably will be 5 long but could be 7
                for (let i = 0; i < pid_ang_du.length; i++) {
                    let new_ang = pid_ang_du[i];
                    if (i < 5) {
                        ds_instance.pid_angles_dexter_units[i] = new_ang;
                    } else {
                        ds_instance.angles_dexter_units[i] = new_ang; //j6 & J7.
                    }
                }
                ds_instance.compute_measured_angles_degrees();
                //let angle_degrees_array = Socket.dexter_units_to_degrees_array(ds_instance.angles_dexter_units)
                //let pid_angle_degrees_array = Socket.dexter_units_to_degrees_array(ds_instance.pid_angles_dexter_units)
                //let sum_degrees_array = Vector.add(angle_degrees_array, pid_angle_degrees_array).slice(0, 5)
                if (SimUtils.is_simulator_showing()) {
                    SimUtils.render_j1_thru_j5(ds_instance); //todo this just jumps to the new angles, not move smoothly as it should
                    if (pid_ang_du.length > 5) {
                        SimUtils.render_j6(ds_instance);
                    }
                    if (pid_ang_du.length > 6) {
                        SimUtils.render_j7(ds_instance); //don't bother to pass xyz and robot.pose as that's only used by simBuild.
                    }
                }
                ds_instance.ack_reply(instruction_array);
                break;
            case "r": //Dexter.read_file. does not go on queue
                let is_reboot_inst = Dexter.is_reboot_instruction(instruction_array);
                if (is_reboot_inst) { //don't do ack_reply as the actual robot doesn't send back a robot status
                    DexterSim$1.uninit(robot_name); //its over for this Dexter.
                    warning("Rebooting simulated Dexter." + robot_name + " due to running reboot instruction.");
                }
                else {
                    let payload_string_maybe = await ds_instance.process_next_instruction_r(instruction_array);
                    ds_instance.ack_reply(instruction_array, payload_string_maybe);
                }
                break;
            case "S":
                let param_name = ins_args[0];
                let param_val  = ins_args[1];
                if(["Acceleration", "MaxSpeed", "StartSpeed"].includes(param_name)) {
                    ds_instance.queue_instance.set_instruction_done_action(param_name, param_val);
                }
                //EERoll & EESpan *ought* to go on queue but Dexter Mar 19, 2021 does them immediately
                //so the simulator follows suit.
                //Also, the belwo sets the peasured angles immediately to the commanded angle
                //bit really should "animate" it based on the speed of these motors
                //though they're much faster than j1 thru 5.
                //Note that if the robot has 320 motors vs 430, the speed will vary.
                //So this is a cheap simulation.
                else {
                    if(param_name === "EERoll") { //joint 6
                        //ds_instance.measured_angles_dexter_units[5] = param_val
                        ds_instance.queue_instance.start_running_j6_plus_instruction(6, param_val);
                    }
                    else if(param_name === "EESpan") { //joint 7
                        //ds_instance.measured_angles_dexter_units[6] = param_val
                        ds_instance.queue_instance.start_running_j6_plus_instruction(7, param_val);
                    }
                    //else if(param_name === "RebootServo"){
                       //we don't need special processing for RebootServo. After it will be
                       //a "z" oplet instruction (Dexter.sleep) that will cause Sim queue to show "sleep"
                    //}
                    else {
                        ds_instance.parameters[param_name] = param_val;
                        ds_instance.simout("set parameter: " + param_name + " to " + param_val);
                    }
                }
                ds_instance.ack_reply(instruction_array);
                break;
            case "T":
                let angles_dexter_units = ds_instance.convert_T_args_to_joint_angles_dexter_units(ins_args);
                let new_instruction_array = instruction_array.slice(0, Instruction.INSTRUCTION_ARG0);
                new_instruction_array[Instruction.INSTRUCTION_TYPE] = "a"; //change from "T" to "a"
                new_instruction_array.concat(angles_dexter_units);
                ds_instance.queue_instance.add_to_queue(instruction_array); //just like "a" for now

            case "w": //write fpga register
                const write_location = ins_args[0];
                if (write_location < ds_instance.fpga_register.length) {
                    let new_val = ins_args[1];
                    ds_instance.fpga_register[write_location] = new_val;
                    let reg_name = Instruction.w_address_names[write_location];
                    ds_instance.simout("FPGA Register: " + reg_name + " ( " + write_location + " )  set to: " + new_val);
                    ds_instance.ack_reply(instruction_array);
                }
                else { shouldnt('DexterSim.fpga_register is too short to accommodate "w" instruction<br/> with write_location of: ' +
                    write_location + " and value of: " + ins_args[1]); 
                }  
                 break;
            case "W": //write file
                ds_instance.process_next_instruction_W(ins_args);
                ds_instance.ack_reply(instruction_array);
                break;
            case "z": //sleep, first arg holds microseconds dur
                //all sleep does is wait for the dur, (starting when the instruction is received
                // by the robot) and then return the ack_reply.
                //so it just holds up DDE sending more instructions.
                //Any ongoing queued instructions just keep running as they would
                //without the sleep.
                //When the dur is up, the queue_instance takes care of sending the ack_reply.
                ds_instance.queue_instance.start_sleep(instruction_array);
                break;
            default:
                let temp_str = "non_normal_oplet_" + oplet; //prevent this from being printed more than once between out pane clearnings
                warning("In DexterSim.send, got instruction not normally processed: " + oplet, temp_str);
                ds_instance.ack_reply(instruction_array);
                break;
        }
    }

    //this is called by "a" and "P" instructions only, ie only
    //instuctions that add to the queue.
    ack_reply_maybe(instruction_array, payload_string_maybe){
        if(this.queue_instance.is_queue_full()) {
            let the_job = Job.active_job_with_robot(this.robot);
            if (the_job.show_instructions) { //if we're doing a move_to_straight instruction, there's a lot of instrs per sec, so good to be able to stop this printout as it slows down sim
                this.simout("queue is full.<br/>There will be no reply until the current instruction completes.");
            }
        }
        else {
            this.ack_reply(instruction_array, payload_string_maybe);
        }
    }

    //hacked to now create and pass to on_receive a full robot status
    //payload_string_maybe might be undefined, a string payload or an error number positive int.
    ack_reply(instruction_array, payload_string_maybe){
        let job_id = instruction_array[Instruction.JOB_ID];
        Job.job_id_to_job_instance(job_id);
        let robot_status_array = Dexter.make_default_status_array_g_sm(this.status_mode);
        let rs_inst = new RobotStatus({robot_status: robot_status_array});
        let opcode = instruction_array[Instruction.INSTRUCTION_TYPE];
        robot_status_array[Dexter.JOB_ID] = job_id;
        robot_status_array[Dexter.INSTRUCTION_ID] = instruction_array[Instruction.INSTRUCTION_ID];
        robot_status_array[Dexter.START_TIME] = instruction_array[Instruction.START_TIME]; //Date.now()
        robot_status_array[Dexter.STOP_TIME] = Date.now();
        robot_status_array[Dexter.INSTRUCTION_TYPE] = opcode; //leave this as a 1 char string for now. helpful for debugging
        if ((opcode === "r") &&
            (typeof (payload_string_maybe) == "number") &&
            (payload_string_maybe > 0)) {
            robot_status_array[Dexter.ERROR_CODE] = payload_string_maybe;
        } else if (opcode === "e") {
            robot_status_array[Dexter.ERROR_CODE] = instruction_array[Dexter.ERROR_CODE];
        }
        if (rs_inst.supports_measured_angles()) {
            let ma_du = this.compute_measured_angles_dexter_units();
            rs_inst.set_measured_angles(ma_du, true); //we want to install arcseconds, as Socket is expected arcseconds and will convert to degrees
        }

        if (this.status_mode === 0) {
            robot_status_array[Dexter.J1_ANGLE] = this.angles_dexter_units[0];
            robot_status_array[Dexter.J2_ANGLE] = this.angles_dexter_units[1];
            robot_status_array[Dexter.J3_ANGLE] = this.angles_dexter_units[2];
            robot_status_array[Dexter.J4_ANGLE] = this.angles_dexter_units[3];
            robot_status_array[Dexter.J5_ANGLE] = this.angles_dexter_units[4];
            //there are no slots in robot_status_array g0 for j6 and j7 angles
            let latest = this.queue_instance.latest_sent_queued_instruction;
            let j1_5_arcsecs;
            if (latest) {
                j1_5_arcsecs = [latest[Instruction.INSTRUCTION_ARG0],
                    latest[Instruction.INSTRUCTION_ARG1],
                    latest[Instruction.INSTRUCTION_ARG2],
                    latest[Instruction.INSTRUCTION_ARG3],
                    latest[Instruction.INSTRUCTION_ARG4]];
            } else {
                j1_5_arcsecs = [0, 0, 0, 0, 0];
            }
            robot_status_array[Dexter.J1_SENT] = j1_5_arcsecs[0];
            robot_status_array[Dexter.J2_SENT] = j1_5_arcsecs[1];
            robot_status_array[Dexter.J3_SENT] = j1_5_arcsecs[2];
            robot_status_array[Dexter.J4_SENT] = j1_5_arcsecs[3];
            robot_status_array[Dexter.J5_SENT] = j1_5_arcsecs[4];
            //unfortunately g0 doesn't support J6_SENT or J7_SENT
        }
        else if(this.status_mode === 1);

        if (this.sim_actual === true) {
            let dexter_instance = this.robot;  //for closure variable
            setTimeout(function () {
                Socket.on_receive(robot_status_array, payload_string_maybe, dexter_instance);
            }, 1);
        }
    }

    //from https://stackoverflow.com/questions/15761790/convert-a-32bit-integer-into-4-bytes-of-data-in-javascript/24947000
    //not called mar 18, 2021
    /*toBytesInt32 (num) {
        arr = new ArrayBuffer(4); // an Int32 takes 4 bytes
        view = new DataView(arr);
        view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false
        return arr;
    }*/

    //when we're running the simulator on Dexter
    static render_once_node(ds_instance, job_name, robot_name, force_render=true){ //inputs in arc_seconds
         //note that SimUtils.render_once has force_render=false, but
         //due to other changes, its best if render_once_node default to true
        let rs_inst = ds_instance.robot.rs;
        if (force_render){
            let j1 = rs_inst.measured_angle(1); //joint_number)robot_status[Dexter.J1_MEASURED_ANGLE]
            let j2 = rs_inst.measured_angle(2);
            let j3 = rs_inst.measured_angle(3);
            let j4 = rs_inst.measured_angle(4);
            let j5 = rs_inst.measured_angle(5);
            let j6 = rs_inst.measured_angle(6);
            let j7 = rs_inst.measured_angle(7);
            j1 = j1; //* -1 //fix for j1 wrong sign
            j5 = j5 * -1; //fix for j5 wrong sign
            out("DexterSim " + job_name + " " + robot_name + " J1: " + j1 + ", J2: " + j2 + ", J3: " + j3 + ", J4: " + j4 + ", J5: " + j5 + ", J6: " + j6 + ", J7: " + j7,
                "#95444a", //brown,
                true); //temp output
        }
    }

    // also called by process_next_instruction_T()
    /*process_next_instruction_a(angles_dexter_units){
        //predict needs its angles in degrees but ins_args are in arcseconds
        const orig_angles_in_deg = Socket.dexter_units_to_degrees_array(this.measured_angles_dexter_units)  //Socket.dexter_units_to_degrees(this.measured_angles_dexter_units) //this.measured_angles_dexter_units.map(function(ang) { return ang / 3600 })
        const angles_in_deg  = Socket.dexter_units_to_degrees_array(angles_dexter_units) //ns_args.map(function(ang)    { return ang / 3600 })
        //ins_args_in_deg[5] = Socket.dexter_units_to_degrees(ins_args[5], 6) //joint 6
        //ins_args_in_deg[6] = Socket.dexter_units_to_degrees(ins_args[6], 7) //joint 7

        //predict_move_dur takes degrees in and returns seconds
        let dur_in_seconds = Math.abs(Kin.predict_move_dur(orig_angles_in_deg, angles_in_deg, this.robot))
        let dur_in_milliseconds = dur_in_seconds * 1000
        return dur_in_milliseconds
    }*/

    //same as the above. just better named for its functionality
    predict_a_instruction_dur_in_ms(angles_dexter_units){
        if(angles_dexter_units === this.angles_dexter_units) { //an optimization for this common case of no change
            return 0
        }
        else {
            //predict needs its angles in degrees but ins_args are in arcseconds
            const orig_angles_in_deg = Socket.dexter_units_to_degrees_array(this.angles_dexter_units);  //Socket.dexter_units_to_degrees(this.measured_angles_dexter_units) //this.measured_angles_dexter_units.map(function(ang) { return ang / 3600 })
            const angles_in_deg  = Socket.dexter_units_to_degrees_array(angles_dexter_units); //ns_args.map(function(ang)    { return ang / 3600 })
            //ins_args_in_deg[5] = Socket.dexter_units_to_degrees(ins_args[5], 6) //joint 6
            //ins_args_in_deg[6] = Socket.dexter_units_to_degrees(ins_args[6], 7) //joint 7

            //predict_move_dur takes degrees in and returns seconds
            //let dur_in_seconds = Math.abs(Kin.predict_move_dur(orig_angles_in_deg, angles_in_deg, this.robot))
            let dur_in_seconds = Math.abs(Kin.predict_move_dur_5_joint(orig_angles_in_deg, angles_in_deg, this.robot));
            //use 5 joint as j6 and j7 aren't part of this path.
            let dur_in_milliseconds = dur_in_seconds * 1000;
            return dur_in_milliseconds
        }
    }

    predict_j6_plus_instruction_dur_in_ms(new_angle_in_dexter_units, joint_number){
        let orig_angle_in_dexter_units = this.angles_dexter_units[joint_number -1];
        let diff_du = new_angle_in_dexter_units - orig_angle_in_dexter_units;
        let diff_deg = Socket.dexter_units_to_degrees(diff_du, joint_number);
        let dur_in_seconds = Math.abs(diff_deg) / Kin.dynamixel_320_degrees_per_second;
        let dur_in_ms = dur_in_seconds * 1000;
        return dur_in_ms
    }

    /*
    process_next_instruction_T(ins_args){ //ins_args xyz in microns
        let xyz_in_microns = [ins_args[0], ins_args[1], ins_args[2]]
        let J5_direction   = [ins_args[3], ins_args[4], ins_args[5]]
        let config         = [ins_args[6], ins_args[7], ins_args[8]]
        let j6_angle       = ins_args[11]
        let j7_angle       = ins_args[12]
        let pose           = undefined //its not in the ins_args, and defaults just fine

        let xyz_in_meters = [xyz_in_microns[0] / 1000000,
                             xyz_in_microns[1] / 1000000,
                             xyz_in_microns[2] / 1000000]
        let angles_in_degrees = Kin.xyz_to_J_angles(xyz_in_meters, J5_direction, config, pose)
        let angles_in_dexter_units = Socket.degrees_to_dexter_units(angles_in_degrees)
        angles_in_dexter_units.push(j6_angle)
        angles_in_dexter_units.push(j7_angle)
        return this.process_next_instruction_a(angles_in_dexter_units)
    }*/

    convert_T_args_to_joint_angles_dexter_units(ins_args){ //ins_args contains xyz in microns
        let xyz_in_microns = [ins_args[0], ins_args[1], ins_args[2]];
        let J5_direction   = [ins_args[3], ins_args[4], ins_args[5]];
        let config         = [ins_args[6], ins_args[7], ins_args[8]];
        let j6_angle       = ins_args[11];
        let j7_angle       = ins_args[12];
        let pose           = undefined; //its not in the ins_args, and defaults just fine

        let xyz_in_meters = [xyz_in_microns[0] / 1000000,
            xyz_in_microns[1] / 1000000,
            xyz_in_microns[2] / 1000000];
        let angles_in_degrees = Kin.xyz_to_J_angles(xyz_in_meters, J5_direction, config, pose);
        let angles_in_dexter_units = Socket.degrees_to_dexter_units(angles_in_degrees);
        angles_in_dexter_units.push(j6_angle);
        angles_in_dexter_units.push(j7_angle);
        return angles_in_dexter_units //this.process_next_instruction_a(angles_in_dexter_units)
    }

    //read_file
    async process_next_instruction_r(instruction_array) {
        let hunk_index = instruction_array[Instruction.INSTRUCTION_ARG0];
        let source     = instruction_array[Instruction.INSTRUCTION_ARG1];
        let source_path_array = source.split("/");
        let last_path_part = Utils.last(source_path_array);
        let payload_string;
        if(source.startsWith("`")){
            dde_error("The Dexter Simulator can't handle Dexter.read_from_robot instructions<br/>" +
                      "that start with a backtick for executing BASH commands.");
        }
        else if(last_path_part.startsWith("#")) { //got special "file"
            if(last_path_part.startsWith("#MeasuredAngles")){
                let result_array = this.compute_measured_angles_dexter_units();
                result_array = result_array.slice(0, 5); //cut off angles 6 and 7
                payload_string = JSON.stringify(result_array); //a crude aapproximation of the real values.
                //should return a string of 5 integers of arcseconds.
            }
            else if(last_path_part.startsWith("#POM") ||
                last_path_part.startsWith("#XYZ")){
                /*let measured_angs = this.compute_measured_angles_dexter_units().slice(0, 5)
                let link_lens = this.robot.link_lengths
                if(link_lens.length !== 5) { link_lens = ink_lens.slice(0, 5) }
                let result_array  = DexterSim.make_pom(measured_angs, link_lens) //2 arrays of 5 numbers in dexter units
                payload_string = JSON.stringify(result_array)
                 */
                last_path_part = last_path_part.trim();
                let last_path_parts = last_path_part.split(" ");
                let num = 4;
                if(last_path_parts.length > 1) {
                    last(last_path_parts);
                }
                let rob = this.robot;
                let pom = rob.get_POM(num); //a matrix
                payload_string = JSON.stringify(pom);
            }
            else if(last_path_part.startsWith("#StepAngles")){
                let result_array = this.compute_measured_angles_dexter_units();
                result_array = result_array.slice(0, 5); //cut off angles 6 and 7
                payload_string = JSON.stringify(result_array); //a crude aapproximation of the real values.
                  //should return a string of 5 integers of arcseconds.
            }
            else {
                dde_error("The Dexter Simulator can't handle Dexter.read_from_robot instructions<br/>" +
                    "with a path of: " + source);
            }
        }
        else {
            let whole_content;
            try {
                whole_content = await DDEFile.read_file_async(source);
            }//errors if path in "source" doesn't exist
            catch (err) {
                return 2 //return the error code
            }
            let start_index = hunk_index * Instruction.Dexter.read_file.payload_max_chars;
            let end_index = start_index + Instruction.Dexter.read_file.payload_max_chars;
            payload_string = whole_content.substring(start_index, end_index); //ok if end_index is > whole_cotnent.length, it just gets how much it can, no error
        }
            return payload_string
    }
    //Dexter.write_file
    process_next_instruction_W(ins_args, rob){
        let kind_of_write  = ins_args[0];
        ins_args[1];
        let payload        = ins_args[2];
        this.robot_name;
        switch(kind_of_write){
            case "f": //payload is file name to write to. Just one of these to start with
                this.write_file_file_name = payload;
                this.write_file_file_content = "";
                break;
            case "m": //middle, ie a content instruction, many of these
                this.write_file_file_content += payload;
                break;
            case "e":   //end, just one of these
                this.write_file_file_content += payload;
                let last_slash_pos = this.write_file_file_name.lastIndexOf("/");
                let folders_string = "";
                if(last_slash_pos != -1) { folders_string = this.write_file_file_name.substring(0, last_slash_pos + 1); }
                if(folders_string.startsWith("/")) ;
               /* folder_path = make_full_path(folder_path)
                make_folder(folder_path)
                let full_path = dde_computer_file_system_start + this.write_file_file_name
                full_path = make_full_path(full_path)
                //fs.mkdirSync(path, options-recursive???)
                write_file(full_path, this.write_file_file_content)
                */
                DDEFile.write_file_async(this.write_file_file_name, this.write_file_file_content);
                break;
            default:
              dde_error('The "W" write_file instruction received<br/>' +
                        'a "kind_of-write" letter of "' + kind_of_write + "<br/>" +
                        'but the only valid letters are "f", "m" and "e".');
        }
        return 0 //dur
    }
    //The corresponding fn for Dexter causes DexRun to crash, so we've commented out all calls to it.
    //When FPGA is updated to support it, we can re_instate it as a regular function.
    static empty_instruction_queue_now(robot_name){
        if(DexterSim$1.robot_name_to_dextersim_instance_map) {
            let ds_instance = DexterSim$1.robot_name_to_dextersim_instance_map[robot_name];
            if(ds_instance) {
                ds_instance.queue_instance.empty_instruction_queue();
            }
        }
    }

    static robot_name_to_dextersim_instance_map = {}
    static set_interval_id = null
    
}

globalThis.DexterSim = DexterSim$1;

/* the queue is an array of 16 "a" instruction arrays.
   pos 0 is the "front" of the queue, the currently being executed instruction
   by the FPGA. instructions are removed at the end of the queue.
   The last elt in the queue is the latests "sent" instruction.
   It is pushed onto the end of the queue when the Job "executes" the instruction.

   J6 and J7: although its good for "whole instruction display purposes" to have
   J6 and j7 in an instruction, they aren't put in the queue.
   As soon as Dextrun gets an "a" instruction with a J6 and/or J7,
   or a set_parameter("EERoll") (J6) or "EESpan" (J7) it starts
   executing it, bypassing the queue. thus they are out of sequence
   with the movement of J1 thru 5, unless the queue is empty.
   They have their own "speed" (not variable) and generally take much shorter time
   to execute than a j1 thru 5 long move. ie j 6 or 7 long move
   might take 0.5 sec or less.
   Also, J6 and J7 aren't coordinated with each other like the
   j1 thru 5 are in an "a" cmd.
   Also, if a move for j7 comes in WHILE another move
   for J7 is going on, that ongoing move is aborted, and
   the new commanded angle takes over before finishing the old move.
   (same for J6). So there's no special "queue" for J6/J7.

   Sleep (z oplet) have times in microseconds (as their dexter units).
   When one comes in to dexrun, ack_reply is not sent,
   but a countdown for the dur starts as soon as it get to dexrun,
   and when the dur is up, the ack_reply is sent.
   A sleep instruction does not affect exiting items in queue,
   but does prevent DDE from sending more instructions until
   the sleep dur is up.

   So we really have up to 4 different independent "processes" going on.
   1. Moving j1 thru j5, all the joints can move simulaneously.
          // the fastest joint takes the top speed, and the others
          //all move slower such that all 5 joints start and end together.
   2. Moving j6
   3. Moving j7
   4. Sleep
   j1 thru 5 are similar to each other.
   J6 & J7 are similar to each other.

   Despite the fact that j6 & j7 and sleep aren't in the queue, this
   file processes them anyway for modularity and
   because a move_all_joints has its first 5 joints processes
   here, so this code strips off the j6 and 7 and handles them
   separately.
*/

class Simqueue$1{
    static queue_max_length = 16
    constructor(sim_instance){
        this.sim_instance = sim_instance;
        this.queue = []; //new Array of 16 fails because length will == 16, and first push pushes to index 16  new Array(Simqueue.queue_max_length)
        this.queue_blocking_instruction = null; //set when F cmd comes in, to that F instruction_array
        this.sleep_dur_us = 0;   //microseconds
        this.queue_dom_elt_id_string_prefix         = this.sim_instance.robot_name + "_queue_";
        this.queue_dom_elt_status_string            = this.queue_dom_elt_id_string_prefix + "status_id";
        this.queue_dom_elt_instruction_table_string = this.queue_dom_elt_id_string_prefix + "instruction_table_id";
        this.latest_sent_queued_instruction = null; //every time a cmd is added to the queue, this var is set to it.
         //we can't just pull the last item off the queue because,
         //at the beginning. this is null, and if the queue is emptied, the lasteset wouldn't be on the queue.
         //so we need this state var. J1 thru 5 make up the "SENT" robot_status row.
        this.instr_to_param_map = {}; //keys are an instruction array. Values are an array of a set param name (string) and its new value
                                     //to be set in sim_inst.parameters whenever the instr is done executing (ie when removed from queue
        this.joint_number_to_j6_plus_status_map = {6: "stopped at " + sim_instance.angles_dexter_units[5],
                                                   7: "stopped at " + sim_instance.angles_dexter_units[6]
                                                  };
        this.joint_number_to_render_j6_plus_frame_call_map = {};
        this.show_degrees = false;
    }

    //called by test suite
    is_simulator_running(){
        return (!this.is_queue_empty() || (this.sleep_dur_us > 0))
    }
    
    is_queue_full(){
      return (this.queue.length === Simqueue$1.queue_max_length)
    }
    
    is_queue_empty(){ 
    	return (this.queue.length === 0)
    }
    
    //returns an instruction_array or null if the queue is empty
    newest_instruction_in_queue() {
       if(this.is_queue_empty()) { return null }
       else return this.queue[this.queue.length - 1]
    }

    current_instruction_in_queue(){
        if(this.is_queue_empty()) { return null }
        else return this.queue[0]
    }

    
    ok_to_add_to_queue(){
        if(this.is_queue_full()) { return false }
        else if(this.queue_blocking_instruction) { return false }
        else { return true }
    }
    
    is_valid_instruction_for_queue(instruction_array){
        let oplet = instruction_array[Dexter.INSTRUCTION_TYPE];
        return  ["a", "P"].includes(oplet)
    }

    simple_instruction_array_test(instruction_array){
        for(let i = 0; i < instruction_array.length; i++){
            let val = instruction_array[i];
            let type = typeof(val);
            if(!["number", "string", "undefined"].includes(type)) {
                dde_error("Simulator passed invalid instruction arg at index " + i +
                    " of : " + val +
                    " in instruction array: " + instruction_array);
            }
        }
    }

    add_to_queue(instruction_array){
        this.simple_instruction_array_test(instruction_array);
        if(this.is_queue_full()){
            shouldnt("Simqueue is full so can't be added to.");
        }
        else {
            let queue_was_empty = this.is_queue_empty();
            this.queue.push(instruction_array);
            this.latest_sent_queued_instruction = instruction_array;
            this.update_show_queue_if_shown();
            if(queue_was_empty) {
                this.start_running_instruction_if_any();
            }
            let j6_du = instruction_array[Instruction.INSTRUCTION_ARG5];
            if(j6_du !== undefined) { //if it is undefined, no change so do nothing
                this.start_running_j6_plus_instruction(6, j6_du);
            }
            let j7_du = instruction_array[Instruction.INSTRUCTION_ARG6];
            if(j7_du !== undefined) {
                this.start_running_j6_plus_instruction(7, j7_du);
            }
        }
    }

    //called when graphics simulator is done executing the now-running instruction.
    //dont set params in here because remove_from_queue is called by
    //empty_instruction_queue which we DON'T want to set_params.
    remove_from_queue(){ //takes off of front of queue, returns the removed instruction
        this.queue.shift();
        if(this.is_queue_empty()) {
            this.unset_queue_blocking_instruction_maybe();
        }
    }

    done_with_instruction(){
        let cur_inst = this.current_instruction_in_queue();
        this.remove_from_queue();
        let param_names_and_values = this.instr_to_param_map[cur_inst];
        if(param_names_and_values){
            for(let param_name in param_names_and_values){
                let param_value = param_names_and_values[param_name];
                this.sim_instance.parameters[param_name] = param_value;
                //this.sim_instance.simout("set_parameter: " + param_name + " to " + param_value)
            }
        }
        delete this.instr_to_param_map[cur_inst]; //not needed anymore
        this.unblock_from_unfull_maybe();
        this.update_show_queue_if_shown();
        let queue_instance = this;
        setTimeout(function(){
                    queue_instance.start_running_instruction_if_any();
                   }, 1); //even if 0, its probably a good idea to give JS chance to run other stuff between instructions.
    }

    //do not remove the front instruction from the queue until AFTER its done running
    start_running_instruction_if_any(){
        if(this.is_queue_empty()) {
            this.sim_instance.simout("queue is empty.");
        }
        else {
            let instruction_array = this.current_instruction_in_queue();
            this.render_instruction(instruction_array);
        }
    }

    //implements  the "E" oplet
    empty_instruction_queue(){
        while (this.queue.length) { this.remove_from_queue();  }
        this.update_show_queue_if_shown();
    }

    //implements the "F" oplet. called from DexterSim
    set_queue_blocking_instruction(f_instruction_array) {
        if(this.queue_blocking_instruction) { //yikes we got an F cmd before the prev F cmd was finished.
          //we need to ack_reply to the first one so DDE will know that one was handled.
          //but that doesn't mean DDE can expect its other instructions from
          //getting handled because this call returns on blocking.
          //But maybe this never happens because if DDE can't send ANY instructions
          //to Dexter after an "F" until the block is cleared, then maybe this clause
          //never happens.
           let instr = this.queue_blocking_instruction;
           this.queue_blocking_instruction = f_instruction_array;
           this.update_show_queue_if_shown(); //probably not necessary because queue is already blocked
           this.sim_instance.ack_reply(instr);
        }
        else if(this.is_queue_empty()){ //since the queue is already empty,
        //this instruction is basically a no-op. Don't set this.queue_blocking_instruction
        //just ack_reply
            this.sim_instance.ack_reply(f_instruction_array);
        }
        else { //normal case
            this.queue_blocking_instruction = f_instruction_array;
            this.update_show_queue_if_shown();
        }
    }

    unset_queue_blocking_instruction_maybe(){
        if(this.queue_blocking_instruction){
            let instr = this.queue_blocking_instruction;
            this.queue_blocking_instruction = null;
            this.sim_instance.ack_reply(instr);
        }
    }

    //called by done_with_instruction just after the cur instruction is removed from the queue.
    unblock_from_unfull_maybe(){
        if(this.queue.length === (Simqueue$1.queue_max_length - 1)){
          let newest_instr = this.newest_instruction_in_queue();
          this.sim_instance.ack_reply(newest_instr); //because its ack_reply wasn't called when it first came in and filled the queue
        }
    }

    actions_for_instruction(instruction_array){
        return this.instr_to_param_map[instruction_array]
    }

    //called from DexSim.send, "P" clause for MaxSpeed, & friends and from the  "z" clause
    set_instruction_done_action(param_name, param_value){
        let newest = this.newest_instruction_in_queue();
        if(newest){
           let actions = this.actions_for_instruction(newest);
           if(!actions) {  //might not be any action yet.
              actions = {};
              this.instr_to_param_map[newest] = actions;    
           }
           //beware, there can be more than one action, and
           //we might even have a do_list that attempts to set
           //the same param more than once. We want to keep the LATEST of them,
           //an this data structure will do that by overwriting previous same param_name values.
           actions[param_name] = param_value;
        }
        else { //queue is empty so just set params immediately and don't put them in instr_to_param_map
               this.sim_instance.parameters[param_name] = param_value;
               //this.sim_instance.simout("set_parameter: " + param_name + " to " + param_value)
        }
    }

    //J6_plus
    start_running_j6_plus_instruction(joint_number, new_angle_in_dexter_units){
        let ds_instance = this.sim_instance;
        let dur_in_ms = ds_instance.predict_j6_plus_instruction_dur_in_ms(new_angle_in_dexter_units, joint_number);
        if(dur_in_ms === 0) ; //the joint is already at the commanded angle so nothing to do. This is a big optimization for a common case.
        else if (SimUtils.is_simulator_showing()){
            let val_for_show;
            if(Number.isNaN(new_angle_in_dexter_units)) { val_for_show = "NaN"; }
            else if(this.show_degrees) {
                val_for_show = Socket.dexter_units_to_degrees(new_angle_in_dexter_units, joint_number);
            }
            else { val_for_show = new_angle_in_dexter_units; }
            this.joint_number_to_j6_plus_status_map[joint_number] = "moving to " + val_for_show;
            this.update_j6_plus_status_if_shown(joint_number);
            let robot_name = ds_instance.robot_name;
            SimUtils.render_j6_plus(ds_instance, new_angle_in_dexter_units, robot_name, dur_in_ms, joint_number);
        }
    }

    //just sets j6_plus status and updates
    done_with_j6_plus_instruction(joint_number){
        let du = this.sim_instance.angles_dexter_units[joint_number - 1];
        let val_for_show = (this.show_degrees ? Socket.dexter_units_to_degrees(du, joint_number) : du);
        val_for_show = (Number.isInteger(val_for_show) ? val_for_show : val_for_show.toFixed(3));
        this.joint_number_to_j6_plus_status_map[joint_number] = "stopped at " + val_for_show;
        this.update_j6_plus_status_if_shown(joint_number);
    }

    start_sleep(instruction_array_in_us) {
        this.sleep_dur_us = instruction_array_in_us[Instruction.INSTRUCTION_ARG0];
        let sleep_instruction = instruction_array_in_us; //for closure
        this.update_show_queue_status_if_shown();
        let sleep_dur_ms = this.sleep_dur_us / 1000;
        let queue_instance = this;
        setTimeout(function(){ //end sleep
                     queue_instance.sleep_dur_us = 0; //must do before update_show_queue_status
                     queue_instance.update_show_queue_status_if_shown();
                     queue_instance.sim_instance.ack_reply(sleep_instruction);
                    }, sleep_dur_ms);
    }


    //______Render instruction ________
    //called at the start of rendering an instruction
    render_instruction(instruction_array){
        let ins_args  = instruction_array.slice(Instruction.INSTRUCTION_ARG0, Instruction.INSTRUCTION_ARG7);
        let dur_in_ms = this.sim_instance.predict_a_instruction_dur_in_ms(ins_args);
        //out("render_instruction passed instruction_array: " + instruction_array)
        //let job_id    = instruction_array[Instruction.JOB_ID]
        //let job_instance = Job.job_id_to_job_instance(job_id)
        //I use to pass job name to render_multi, but it doesn't really need it.
        //I took it out because in the testsuite or ref man, if you have 2 job defs of the same
        //name next to each other, then the 2nd one removes the first one.
        //but if the first one has instructions in the queue, they belong to a
        //non_exisitant job so getting the job_id out of the instruction array and
        //looking it up to find the job def will fail, causing an error.
        //so just avoid that. Dexter (and by extension the simulator) don't
        //know about Jobs and don't care. Useful for debugging perhaps, but
        //causes problems as in above.
        let rob_name  = this.sim_instance.robot_name;
        { //globalThis.platform == "dde") //even if we're in dde, unless the sim pane is up, don't attempt to render
            SimUtils.render_multi(this.sim_instance, ins_args, rob_name, dur_in_ms);
        }
    }
    render_once_node(instruction_array, job_name, rob_name, dur_in_ms){
        let instr_str = "<code style='background-color:white;'> " + instruction_array.join(", ") + " </code>";
        this.sim_instance.simout("For Job." + job_name +
               "<br/><span style='margin-left:106px;'>Simulating instruction: " + instr_str, "</span>");
          let queue_instance = this;
          setTimeout(function(){
              queue_instance.sim_instance.simout("Done with: <span style='margin-right;40px;'/>" + instr_str, "green");
              queue_instance.done_with_instruction();
          }, dur_in_ms);
    }


    //________show_queue_______
    queue_status(){
        if(this.is_queue_full())                  { return "full" }
        else if (this.sleep_dur_us > 0)           { return "sleep" } //put before blocked as robot can sleep even when blocked
        else if (this.queue_blocking_instruction) { return "blocked" }
        else if (this.is_queue_empty())           { return "empty" }
        else                                      { return "accepting" }
    }

    queue_status_color(){
        let q_status = this.queue_status();
        if      (q_status === "accepting") { return "#aaf1aa" } //green
        else if (q_status === "blocked")   { return "#ff7e79" } //pale red/orange
        else if (q_status === "empty")     { return "#76cdf1" } //blue
        else if (q_status === "full")      { return "#da7900" } //brown
        else if (q_status === "sleep")     { return "#ffff00" } //yellow
        else { shouldnt("In Simqueue.queue_status_color got invalid status: " + status);}
    }
    queue_is_shown(){
        if(globalThis[this.queue_dom_elt_status_string]){
            return true
        }
        else { return false }
    }

    //top level show called from clicking the "Show Queue" button in Sim header.
    // Simqueue.show_queue_for_default_dexter()
    static show_queue_for_default_dexter(){
        if(DDEVideo.misc_pane_menu_selection !== "Simulate Dexter"){
            DDEVideo.show_in_misc_pane("Simulate Dexter"); //if Simulate Dexter is not shown when queue is shown, we'll get an error
        }
        let rob_name = Dexter.default.name;
        let sim_inst = (DexterSim.robot_name_to_dextersim_instance_map ?
                         DexterSim.robot_name_to_dextersim_instance_map[rob_name] :
                         null);
        if(!sim_inst){ //create one, even before we actually send any instructions.
                       //then we can at least show an empty version of the queue.
            let connect_success_cb = function(){
                //has to be an out, not a simout because sim_inst isn't available to make the cb.
                out("show_queue_for_default_dexter initialized DexterSim instance for Dexter." + rob_name);
            };
            DexterSim.create_or_just_init(rob_name, true, connect_success_cb);
            sim_inst = DexterSim.robot_name_to_dextersim_instance_map[rob_name];
        }
        sim_inst.queue_instance.show_queue();
    }

    static show_queue_cb(vals){
        let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[vals.robot_name];
        if(!sim_inst) { warning("The simulator has not yet been initialized. Run a Job."); }
        else if(vals.clicked_button_value === "show_instructions") {
           Simqueue$1.show_instructions(vals.robot_name);
       }
       else if(vals.clicked_button_value === "show_parameters"){
           Simqueue$1.show_parameters(vals.robot_name);
       }
       else if (vals.clicked_button_value === "show_fpga_reg"){
           Simqueue$1.show_fpga_reg(vals.robot_name);
       }
       else if (vals.clicked_button_value === "init"){
            Simqueue$1.init(vals.robot_name);
       }
       else if (vals.clicked_button_value === "show_degrees"){
           sim_inst.queue_instance.show_degrees = vals.show_degrees;
           sim_inst.queue_instance.done_with_j6_plus_instruction(6);
           sim_inst.queue_instance.done_with_j6_plus_instruction(7);
           sim_inst.queue_instance.update_show_queue_if_shown();
       }
    }

    show_queue(){
        if(!this.queue_is_shown()) {
            let content = '<div>\n' +
                          this.make_show_queue_status() +
                          this.make_show_queue_instructions_table() +
                          '\n</div>';
            show_window({title: "Queue simulation for Dexter:" + this.sim_instance.robot_name,
                         content: content,
                         x:520, y:0, width:600, height: 400,
                         callback: "Simqueue.show_queue_cb"});
        }
        else {
            this.sim_instance.simout("simqueue is already shown.");
        }
        this.update_show_queue_if_shown();
    }
    make_show_queue_status(){
        let rob_name = this.sim_instance.robot_name;
        return  '<input type="hidden" name="robot_name" value="' + rob_name + '"/>\n' +

                `<input type="button" name="show_instructions" ` +
                `title="Show the instructions sent\nto the simulated Dexter." ` +
                `value="&#9432; instructions"/>&nbsp;&nbsp;` +

                `<input type="button" name="show_parameters" ` +
                `title="Show the simulated set_parameters\nand their values." ` +
                `value="&#9432; params">&nbsp;&nbsp;` +

                `<input type="button" name="show_fpga_reg" ` +
                `title="Show the simulated FGPA register\naddresses, names and values." ` +
                `value="&#9432; FPGA reg">&nbsp;&nbsp;`+

                `<input type="button" name="init" ` +
                `title="Initialize the simulator for Dexter.` + rob_name + `\nThis simulates turning Dexter off and on." ` +
                `value="init">`+

                `<span title="Unchecked shows&#013;Joints 1 thru 5 in arcseconds and&#013;Joints 6 & 7 in Dynamixel units."> ` +
                    `<input name="show_degrees" style="margin-left:15px;" type="checkbox" data-onchange='true' ` +
                    `/>Show degrees` +
                 `</span>` +
                 `<div style="margin-top:4px;"><i>Status </i>` +
                 '<b>Queue:</b> <div style="display:inline-block; padding-left:10px; padding-bottom:3px; padding-top:2px; width:80px;" id="' + this.queue_dom_elt_status_string + '"></div> ' +
                 '<b>J6:   </b> <div style="display:inline-block; padding-left:10px; padding-bottom:3px; padding-top:2px; width:150px;" id="sim_j6_dom_elt_status_id"></div> ' +
                 '<b>J7:   </b> <div style="display:inline-block; padding-left:10px; padding-bottom:3px; padding-top:2px; width:150px;" id="sim_j7_dom_elt_status_id"></div> ' +
                 '</div>'
    }

    update_show_queue_if_shown(){
        if(this.queue_is_shown()){
            this.update_show_queue_status_if_shown();
            this.update_show_queue_instructions_table();
            this.update_j6_plus_status_if_shown();
        }
    }

    update_show_queue_status_if_shown(){
        if(this.queue_is_shown()){
            let elt = globalThis[this.queue_dom_elt_status_string];
           /* let html = '<span id="' + this.queue_dom_elt_status_string + '" '  +
                       'style="background-color:' + this.queue_status_color()        + ';">&nbsp;' +
                       this.queue_status() +
                       '&nbsp;</span>'*/
            let q_stat = this.queue_status();
            if(q_stat === "sleep"){
                q_stat += " " + (this.sleep_dur_us/1000000).toFixed(1);
            }
            elt.innerHTML = q_stat;
            elt.style["background-color"] = this.queue_status_color();
            //elt.outerHTML = html
            if(this.sleep_dur_us > 0){
                let queue_instance = this;
                setTimeout(function(){
                             queue_instance.sleep_dur_us -= 100000; //subtract 100 ms
                             if (queue_instance.sleep_dur_us <= 0) { //we're done with the sleep
                                 queue_instance.sleep_dur_us = 0;
                             }
                             //even if we're now at 0, n
                             queue_instance.update_show_queue_status_if_shown(); //updates the sleep time left display

                           }, 100);
            }
        }
    }

    static show_instructions(robot_name){
        let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
        let the_job = sim_inst.job_of_last_instruction_sent();
        if(!the_job) {
            warning("No instructions sent to Dexter." + sim_inst.robot_name);
        }
        else {
            let title = "<b>Job." + the_job.name + ".sent_instructions</b>";
            let html = Dexter.sent_instructions_to_html(the_job.sent_instructions);
            let start_pos = html.indexOf("<table>");
            let end_pos   = html.indexOf("</table>") + 7;
            html = html.substring(start_pos, end_pos);
            sim_inst.simout(title + html);
        }
    }
    
    static show_parameters(robot_name){
      let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
      let title = " <b>set_parameters</b>";
      let html = "<table>";
      let params_obj = sim_inst.parameters;
      let param_names = Object.getOwnPropertyNames(params_obj);
      param_names.sort();
      for(let param_name of param_names){
          html += "<tr><td>" + param_name + "</td><td>" + params_obj[param_name] + "</td></tr>";
      }
        html += "</table>";
        sim_inst.simout(title + html);
    }
    
    static show_fpga_reg(robot_name){
      let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
      let fr_arr = sim_inst.fpga_register;
      let display_html = "<table><tr><th>Address</th><th>Address Name</th><th>Value</th></tr>\n";
      for(let i = 0; i < fr_arr.length; i++) {
         let val = fr_arr[i];
         let row = "<tr><td>"  + i + 
                   "</td><td>" + Instruction.w_address_names[i] +
                   "</td><td>" + val + 
                   "</td></tr>";
         display_html += row;
      }
      display_html += "</table>";
        sim_inst.simout("<b> Simulated FPGA Registers </b>" + display_html);
    }

    static init(robot_name){
        let sim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
        let rob = Dexter[robot_name];
        let sim_actual = Robot.get_simulate_actual(rob.simulate); //true, false, or "both"
        if(sim_actual === false) { sim_actual = true; } //we know we're simulating
        sim_inst.init(sim_actual);
        sim_inst.simout("initialized.");
    }


    
    make_show_queue_instructions_table(){
        let result = '<table id="' + this.queue_dom_elt_instruction_table_string + '" style="margin-top:5px;">\n' +
                     this.make_show_queue_instruction_labels();
        for(let inst_queue_index = 0; inst_queue_index < Simqueue$1.queue_max_length; inst_queue_index++){
            let instr = this.queue[inst_queue_index];
            let row_html;
            if(instr === undefined) {
                row_html = "<tr><td  class='simqueue_td'>" + inst_queue_index + "</td></tr>\n";
            }
            else {
                row_html = this.make_show_queue_instruction_data(inst_queue_index);
            }
            result += row_html;
        }
        result += "</table>";
        return result
    }

    make_show_queue_instruction_labels(){
        let columns_labels = ["Q&nbsp;Pos", "JOB", "INSTR#", "Joint&nbsp;1", "Joint&nbsp;2", "Joint&nbsp;3", "Joint&nbsp;4", "Joint&nbsp;5", "Joint&nbsp;6", "Joint&nbsp;7"];
        let result = "<tr>";
        for(let i = 0; i < columns_labels.length; i++) {
            let header_label = columns_labels[i];
            if((i === 8) || (i === 9)) {
                let joint_number = i - 2;
                header_label = "<span style='color:blue;' " +
                               "title='" +
`These values are sent directly to the J` + joint_number + ` motor
 when they are first added to the queue.
 They do not wait until their instruction is at
 the front of the queue (Q Pos=0)
 to start moving the motor. 
 J1 thru J5 do wait.` +
                               "'>" + header_label + "</span>";
            }
            result += "<th>" + header_label + "</th>";
        }
        result += "</tr>\n";
        return result
    }

    //returns one row of data for one instruction_array
    make_show_queue_instruction_data(inst_queue_index){
        let instruction_array = this.queue[inst_queue_index];
        let data_labels   = ["Q Pos", "JOB_ID", "INSTRUCTION_ID", "INSTRUCTION_ARG0", "INSTRUCTION_ARG1","INSTRUCTION_ARG2","INSTRUCTION_ARG3","INSTRUCTION_ARG4","INSTRUCTION_ARG5","INSTRUCTION_ARG6"];
        let result = "<tr>";
        let job_name;
        let instruction_id;
        for(let q_pos = 0; q_pos < data_labels.length; q_pos++) {
            let data_val;
            if(q_pos === 0) { data_val = inst_queue_index; }
            else {
               let data_label = data_labels[q_pos];
               let instr_elt_index = Instruction[data_label];
               data_val = instruction_array[instr_elt_index];
               if(data_label === "JOB_ID") { //data_val is a job_id
                    let job_instance = Job.job_id_to_job_instance(data_val);
                    if(job_instance) {
                        job_name = job_instance.name;
                        data_val = job_name; //job_name also used below for set_params
                    }
                    //else //rarely, the job_id doesn't find a job. In that case don't error. just show the job_id in place of the job name
               }
               else if(data_label === "INSTRUCTION_ID") {
                   instruction_id = data_val;
               }
               else if (this.show_degrees) { //we only get INSTRUCTION_ARG0 and up in this clause
                   let joint_number = q_pos - 2;
                   data_val = Socket.dexter_units_to_degrees(data_val, joint_number);
               }
            }
            result += "<td class='simqueue_td'>" + data_val + "</td>";
        }
        result += "</tr>\n";
        let actions = this.actions_for_instruction(instruction_array);
        if(actions) {
            let actions_string = "" + "set_parameters: " + JSON.stringify(actions);
            result +=  "<tr><td class='simqueue_td'>"  + (inst_queue_index + 0.5) +
                      "</td><td class='simqueue_td'>" + job_name +
                      "</td><td class='simqueue_td'>" + (instruction_id + 1) +  //because there could be multiple set params, all of them at instruction id's higher than instruction_id variable. Just go with instruction_id as a simplification
                      "</td><td class='simqueue_td'colspan='7'>" + actions_string + "</td></tr>";
        }
        return result
    }

    update_show_queue_instructions_table(){
        let table_elt        = globalThis[this.queue_dom_elt_instruction_table_string];
        table_elt.outerHTML  = this.make_show_queue_instructions_table();
    }

    update_j6_plus_status_if_shown(joint_number){
        if(this.queue_is_shown()){
            if(!joint_number) {
                this.update_j6_plus_status_if_shown(6);
                this.update_j6_plus_status_if_shown(7);
            }
            else {
                let status = this.joint_number_to_j6_plus_status_map[joint_number];
                let elt_id = "sim_j" + joint_number + "_dom_elt_status_id";
                let elt = globalThis[elt_id];
                elt.innerHTML = status;
                let color = (status.startsWith("stopped") ? "#76cdf1" : //blue
                                                            "#aaf1aa"); //green
                elt.style["background-color"] = color;
            }
        }
    }
}

globalThis.Simqueue = Simqueue$1;

/**
 * Created by Fry on 3/30/16.
 */
class SimUtils$1{
/*from http://stackoverflow.com/questions/30271693/converting-between-cartesian-coordinates-and-spherical-coordinates
 this.radius = sqrt((x*x) + (y*y) + (z*z));
 this.inclination = arccos(z / this.radius);
 this.azimuth = atan2(y, x);
 this.x = this.radius * sin(this.inclination) * cos(this.azimuth);
 this.y = this.radius * sin(this.inclination) * sin(this.azimuth);
 this.z = this.radius * cos(this.inclination);

 Fry convention:
 x is horizontal, left to right positive to the right
 y is vertical, postive is up
 z is nearer and further away, postive is further away

 */
    static ria_to_xyz(radius, inclination, azimuth){
        return [radius * Math.sin(inclination) * Math.cos(azimuth), //x
            radius * Math.sin(inclination) * Math.sin(azimuth), //y
            radius * Math.cos(inclination)]                     //z
    }
    static xyz_to_ria(x, y, z){
        var radius = Math.sqrt((x*x) + (y*y) + (z*z));
        return [radius,
            Math.arccos(z / radius), //inclination
            Math.atan2(y, x)        //asimuth
        ]
    }

    static add_xyzs(xyz1, xyz2){
        var result = [];
        result.push(xyz1[0] + xyz2[0]);
        result.push(xyz1[1] + xyz2[1]);
        result.push(xyz1[1] + xyz2[1]);
        return result
    }

    static distance (xyz1, xyz2){
        return Math.hypot(xyz1[0] - xyz2[0], xyz1[1] - xyz2[1], xyz1[2] - xyz2[2])
    }

    static is_simulator_showing(){
        if(globalThis["sim_graphics_pane_id"]) { return true }
        else { return false }
    }

    // 2 * Math.PI  radians == 360 degrees
    // (2 * Math.PI) / 360  == 0.017453292519943295  radians per degree
    // 0.00000484813681109536 radians per arc_second
    //not called in dde4
    static arc_seconds_to_radians(arc_seconds){
        return 0.00000484813681109536 * arc_seconds
    }

    static degrees_to_radians(degrees){
        return (Math.PI * degrees ) / 180
    }


    //ds_inst is an instance of DexterSim class.
    //robot_name example: "Dexter.dexter0"
    static render_multi(ds_instance, new_angles_dexter_units, robot_name, dur_in_ms=0){ //inputs in arc_seconds
        //console.log("render_multi passed: " +  new_angles_dexter_units)
        //onsole.log("Dexter.default: " + Dexter.default)
        //onsole.log("Dexter.dexter0: " + Dexter.dexter0)
        if (Dexter.default.name === robot_name){
            let dur_to_show = Math.round(dur_in_ms / 100); //in 10ths of seconds, rounded
            dur_to_show = "" + dur_to_show;
            if (dur_to_show.length > 1) {
                let dur_to_show_secs = dur_to_show.substring(0, dur_to_show.length - 1);
                dur_to_show = dur_to_show_secs + "." + last(dur_to_show);
            }
            else { dur_to_show = "0." + dur_to_show; }
            if(this.is_simulator_showing()) {
                sim_pane_move_dur_id.innerHTML = dur_to_show;
            }
            let total_frames = Math.ceil(dur_in_ms / SimUtils$1.ms_per_frame); //total_frames might be 0. that's ok.
            let js_inc_per_frame = [];
            for(let joint = 0; joint < new_angles_dexter_units.length; joint++){
                let j_diff = new_angles_dexter_units[joint] - this.prev_joint_angles[joint];
                js_inc_per_frame.push(j_diff / total_frames);
            }
            //let prev_js = this.prev_joint_angles.slice(0)
            let rob = Dexter[robot_name];
            let prev_js = ds_instance.angles_dexter_units.slice(); //must copy because render_multi is going to continuous update mesured_angels per frame and we want to capture the prev_js and keep it constant
            //console.log("calling render_multi_frame first time with new_angles as: " + new_angles_dexter_units + " prev_js: " + prev_js + " js_inc_per_frame: " + js_inc_per_frame)
            SimUtils$1.render_multi_frame(ds_instance, new_angles_dexter_units, prev_js, js_inc_per_frame, total_frames, 0, rob); //beginning an all but last rendering

            //used by render_once_but_only_if_have_prev_args\
            this.prev_joint_angles     = new_angles_dexter_units;
            //SimUtils.prev_robot_status = robot_status //not use by  render_multi or render_multi_frame
            SimUtils$1.prev_robot_name   = robot_name;
        }
        else {
            setTimeout(function(){
                ds_instance.queue_instance.done_with_instruction(); //this is the final action of
                //calling SimUtils.render_multi_frame, and necessary to get this instruction
                //out of the queue. Must do even if we aren't redendering (ie calling SimUtils.render_multi_frame)
            }, dur_in_ms);
        }
    }
    //new_js is the array of target joint angles, only used for the "last" frame.
    //new_js and prev_js are in arcseconds. prev_js
    //For given new commanded angles of an instrution, this fn is called many times, with a dur of ms_per_frame
    //between the calls. All args remain the same for such calls except for frame, which is incremented from
    //0 up to total_frames. Once its called with frame == total_frames, it immediately stops the recursive calls.
    static render_multi_frame(ds_instance, new_angles_dexter_units, prev_js, js_inc_per_frame, total_frames, frame_number=0, rob){
        if(frame_number > total_frames) { //we're done
            ds_instance.queue_instance.done_with_instruction(); //removes the cur instruction_array from queue and if there's more, starts the next instruction.
        }
        else {
            let prev_js_useful_len = Math.min(5, prev_js.length); //we do not handle j6 & 7 here. That's done with render_j6_plus
            for(let joint = 0; joint < prev_js_useful_len; joint++){
                let prev_j = prev_js[joint];
                let j_inc_per_frame = js_inc_per_frame[joint]; //might be undefined for j6 and 7
                let inc_to_prev_j = frame_number * j_inc_per_frame;
                let j_angle = prev_j + (Number.isNaN(inc_to_prev_j) ? 0 : inc_to_prev_j); //j_angle is in arcseconds
                ds_instance.angles_dexter_units[joint] = j_angle;
                //if(joint === 0) { out("J" + joint + ": inc_to_prev_j: " + Math.round(inc_to_prev_j) +
                //                      " j_angle as: "  +  Math.round(j_angle) +
                //                      " j_angle deg: " + (Math.round(j_angle) / 3600 ))
                //}
                Socket.dexter_units_to_degrees(j_angle, joint + 1);

               /* let j_angle_degrees_rounded = Math.round(angle_degrees)
                let rads = SimUtils.degrees_to_radians(angle_degrees)

                switch(joint) {
                    case 0:
                        Simulate.sim.J1.rotation.y = rads * -1
                        sim_pane_j1_id.innerHTML = j_angle_degrees_rounded
                        break;
                    case 1:
                        Simulate.sim.J2.rotation.z = rads
                        sim_pane_j2_id.innerHTML = j_angle_degrees_rounded * -1
                        break;
                    case 2:
                        Simulate.sim.J3.rotation.z = rads
                        sim_pane_j3_id.innerHTML = j_angle_degrees_rounded * -1
                        break;
                    case 3:
                        Simulate.Simulate.sim.J4.rotation.z = rads
                        sim_pane_j4_id.innerHTML = j_angle_degrees_rounded * -1
                        break;
                    case 4:
                        Simulate.sim.J5.rotation.y = rads * -1
                        xyz = Kin.J_angles_to_xyz(new_angles, rob.pose)[0] //needed in case 6 and below
                        sim_pane_j5_id.innerHTML = j_angle_degrees_rounded
                        break;
                    case 5:
                        if(Simulate.sim.J6) {
                            Simulate.sim.J6.rotation.z = rads
                        }
                        sim_pane_j6_id.innerHTML = j_angle_degrees_rounded
                        break;
                    case 6:
                        if(Simulate.sim.J7) { //330 degrees = 0.05 meters
                           let new_xpos = ((angle_degrees * 0.05424483315198377) / 296) * -1 //more precise version from James W aug 25.
                           new_xpos *= 10
                           //out("J7 angle_degrees: " + angle_degrees + " new xpos: " + new_xpos)
                           Simulate.sim.J7.position.setX(new_xpos) //see https://threejs.org/docs/#api/en/math/Vector3
                           //all below fail to change render
                           //Simulate.sim.J7.position.x = new_pos
                           //Simulate.sim.J7.updateMatrix() //no effect
                           //Simulate.sim.j7.updateWorldMatrix(true, true)
                                // prev new_pos value;
                                // ((angle_degrees * 0.05) / 330 ) * -1 //meters of new location
                                // but has the below problems
                                // x causes no movement, but at least inited correctly
                                // y sends the finger to move to outer space upon init, but still visible, however moving j7 doesn't move it
                                // z causes the finger to be somewhat dislocated upon dui init, however moving j7 doesn't move it
                           //sim.J7.rotation.y = rads
                        }
                        sim_pane_j7_id.innerHTML = j_angle_degrees_rounded
                        if(globalThis.SimBuild) {
                             SimBuild.handle_j7_change(angle_degrees, xyz, rob)
                        }
                        break;
                } */ //end switch
            } //end for loop
           /* let str_length
            let x = xyz[0]
            if(x < 0) { str_length = 6} //so we get the minus sign plus 3 digits after decimal point, ie MM
            else      { str_length = 5}
            sim_pane_x_id.innerHTML = ("" + x).substring(0, str_length)

            let y = xyz[1]
            if(y < 0) { str_length = 6} //so we get the minus sign plus 3 digits after decimal point, ie MM
            else      { str_length = 5}
            sim_pane_y_id.innerHTML = ("" + y).substring(0, str_length)

            let z = xyz[2]
            if(z < 0) { str_length = 6} //so we get the minus sign plus 3 digits after decimal point, ie MM
            else      { str_length = 5}
            sim_pane_z_id.innerHTML = ("" + z).substring(0, str_length)

            //ds_instance.queue_instance.update_show_queue_if_shown() //I *could* do this here and update
            //the current instruction row based on ds_instance.measured_angles_dexter_units
            //but update_show_queue_if_shown just uses the instruction_array's commanded angles and
            //besides, you can see J angles updated every frame in the Sim pane's header.
            //Best to just leave the queue sim alone until actual whole instructions in queue change.
            sim.renderer.render(sim.scene, sim.camera) //tell the graphis to finally draw.
            */
            this.render_j1_thru_j5(ds_instance);
            setTimeout(function() {
                SimUtils$1.render_multi_frame(ds_instance, new_angles_dexter_units, prev_js, js_inc_per_frame, total_frames, frame_number + 1, rob, false);
            }, SimUtils$1.ms_per_frame);
        }
    }

    //never called in a job engine job, only called by dde_ide for "debugging".
    static render_joints_smart(src = null) {
        let evaled_src;
        if (src == null) {
            src = Editor.get_any_selection().trim();
        }
        if (typeof(src) !== "string"){ evaled_src = src; }
        else { //src is a string
            src = src.trim();
            if (src.endsWith(",")) {
                src = src.substring(0, src.length - 1); //cut off the trailing commaa
            }
            if (src.length === 0) {
                warning("To render joints you must select some text in the editor pane that indicates an array of joint angles.");
                return false
            } else {
                try {
                    evaled_src = globalThis.eval(src); //note: if src is "2,3,4" then eval returns 4. This problem is handled way below
                } catch (err) {
                    let joint_arr_maybe = this.render_joints_process_arg_list(src);
                    if (Utils.is_array_of_numbers(joint_arr_maybe)) {
                        evaled_src = joint_arr_maybe;
                    } else {
                        warning(src + " did not evaluate to an array of joint angles.");
                        return false
                    }
                }
            }
        }
        //at this point, eval_src is not a string and maybe valid,
        //but we still might have to call render_joints_process_arg_list(src) again.
        let angle_degrees;
        if(Utils.is_array_of_numbers(evaled_src)){
                angle_degrees = evaled_src;
        }
        else {
            let angle_degrees_maybe = this.render_joints_process_instruction(evaled_src);
            if(Utils.is_array_of_numbers(angle_degrees_maybe)) {
                angle_degrees = angle_degrees_maybe;
            }
            else {
                let angle_degrees_maybe = this.render_joints_process_arg_list(src);
                if (Utils.is_array_of_numbers(angle_degrees_maybe)) {
                    angle_degrees = angle_degrees_maybe;
                }
                else {
                    warning(src + " did not evaluate to an array of joint angles.");
                    return false
                }
            }
        }
        //at this point, angle_degrees is an array of numbers.
        if(angle_degrees.length === 3){ //maybe its x, y z ?
            if(Kin.is_in_reach(angle_degrees)){
                angle_degrees = Kin.xyz_to_J_angles(angle_degrees); //this will error with [0,0,0] (singluarity) or out of range.
                //that's  not terrible as we just want to keep the orign angle_degrees and use them
                //as joint angles, but we do get a red error message in dde due to it.
            }
        }
        for(let i = 0; angle_degrees.length < 5; i++){
            angle_degrees.push(0);
        }
        this.render_joints(angle_degrees);
        return angle_degrees
    }

    static render_joints_process_arg_list(src){
        let split_src = src.split(",");
        let joint_arr_maybe = [];
        for(let item of split_src){
            try {
                let num = globalThis.eval(item);
                if(typeof(num) === "number") { joint_arr_maybe.push(num);}
                else {return false }
            }
            catch(err){ return false}
        }
        return joint_arr_maybe
    }

    static render_joints_process_instruction(joint_arr_maybe){
        if ((joint_arr_maybe instanceof Instruction.Dexter.move_all_joints) ||
            (joint_arr_maybe instanceof Instruction.Dexter.pid_move_all_joints)){
            if(!Kin.check_J_ranges(joint_arr_maybe.array_of_angles)) {
                dde_error("Angles of: " + joint_arr_maybe.array_of_angles + " are not within Dexter's reach.");
            }
            return joint_arr_maybe.array_of_angles
        }
        else if ((joint_arr_maybe instanceof Instruction.Dexter.move_to) ||
                 (joint_arr_maybe instanceof Instruction.Dexter.pid_move_to)  ||
                 (joint_arr_maybe instanceof Instruction.Dexter.move_to_straight)){
            let xyz = joint_arr_maybe.xyz;
            if(!Kin.is_in_reach(xyz)) {
                dde_error("The XYZ position of: " + xyz + " is not within Dexter's reach.");
            }
            else {
                return Kin.xyz_to_J_angles(
                    joint_arr_maybe.xyz,
                    joint_arr_maybe.J5_direction,
                    joint_arr_maybe.config,
                    joint_arr_maybe.workspace_pose
                )
            }
        }
        else { return false }
    }

    //called by render_j1_thru_j5 as well as monitor_dexter
    static render_joints(angle_degrees_array, rob_pose=Vector.make_pose()){
        for(let i = 0; i < angle_degrees_array.length; i++){
            let angle_degrees = angle_degrees_array[i];
            this.render_joint(i + 1, angle_degrees);
        }
        let xyz = Kin.J_angles_to_xyz(angle_degrees_array, rob_pose)[0];

        let str_length;
        let x = xyz[0];
        if(x < 0) { str_length = 6;} //so we get the minus sign plus 3 digits after decimal point, ie MM
        else      { str_length = 5;}
        if(this.is_simulator_showing()) {
            sim_pane_x_id.innerHTML = ("" + x).substring(0, str_length);
        }
        let y = xyz[1];
        if(y < 0) { str_length = 6;} //so we get the minus sign plus 3 digits after decimal point, ie MM
        else      { str_length = 5;}
        if(this.is_simulator_showing()) {
            sim_pane_y_id.innerHTML = ("" + y).substring(0, str_length);
        }
        let z = xyz[2];
        if(z < 0) { str_length = 6;} //so we get the minus sign plus 3 digits after decimal point, ie MM
        else      { str_length = 5;}
        if(this.is_simulator_showing()) {
            sim_pane_z_id.innerHTML = ("" + z).substring(0, str_length);
        }
        if(this.is_simulator_showing()) {
            Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera);
        }
    }

    //joint number is 1 thru 7
    static render_joint(joint_number, angle_degrees){
        if(joint_number <= 5) {
            let y_or_z = (((joint_number === 1) || (joint_number === 5)) ? "y" : "z");
            let j_angle_degrees_rounded = Math.round(angle_degrees);
            let rads = SimUtils$1.degrees_to_radians(angle_degrees);
            let id_str = "J" + joint_number;
            if(this.is_simulator_showing()) {
                Simulate.sim[id_str].rotation[y_or_z] = rads * -1;
                globalThis["sim_pane_j" + joint_number + "_id"].innerHTML = j_angle_degrees_rounded;
            }
        }
        else if(joint_number === 6){
            let rads = SimUtils$1.degrees_to_radians(angle_degrees);
            let j_angle_degrees_rounded = Math.round(angle_degrees);
            if(this.is_simulator_showing()) {
                if (Simulate.sim.J6) {
                    Simulate.sim.J6.rotation.z = rads;
                }
                sim_pane_j6_id.innerHTML = j_angle_degrees_rounded;
            }
        }
        else if(joint_number === 7){
            SimUtils$1.degrees_to_radians(angle_degrees);
            let j_angle_degrees_rounded = Math.round(angle_degrees);
            if(this.is_simulator_showing()) {
                if (Simulate.sim.J7) { //330 degrees = 0.05 meters
                    let new_xpos = ((angle_degrees * 0.05424483315198377) / 296) * -1; //more precise version from James W aug 25.
                    new_xpos *= 10;
                    Simulate.sim.J7.position.setX(new_xpos); //see https://threejs.org/docs/#api/en/math/Vector3
                }
                sim_pane_j7_id.innerHTML = j_angle_degrees_rounded;
            }
        }
    }


    //angles_in_degrees array of len 5. first elt is J1.
    //actually draws the graphics, but nothing else.
    //called both by render_multi_frame and in dextersim for super cheap handling of "P" (pid_move_all_joints)
    /*static render_j1_thru_j5(ds_instance, rob_pose){
            let angles_in_degrees = ds_instance.compute_measured_angles_degrees()
            let rob_pos = ds_instance.robot.pose

            let angle_degrees, j_angle_degrees_rounded, rads

            angle_degrees = angles_in_degrees[0] //Joint 1

            j_angle_degrees_rounded = Math.round(angle_degrees)
            rads = SimUtils.degrees_to_radians(angle_degrees)
            Simulate.sim.J1.rotation.y = rads * -1
            sim_pane_j1_id.innerHTML = j_angle_degrees_rounded

            angle_degrees = angles_in_degrees[1] //Joint 2
            j_angle_degrees_rounded = Math.round(angle_degrees)
            rads = SimUtils.degrees_to_radians(angle_degrees)
            Simulate.sim.J2.rotation.z = rads * -1
            sim_pane_j2_id.innerHTML = j_angle_degrees_rounded

            angle_degrees = angles_in_degrees[2] //Joint 3
            j_angle_degrees_rounded = Math.round(angle_degrees)
            rads = SimUtils.degrees_to_radians(angle_degrees)
            Simulate.sim.J3.rotation.z = rads * -1
            sim_pane_j3_id.innerHTML = j_angle_degrees_rounded

            angle_degrees = angles_in_degrees[3] //Joint 4
            j_angle_degrees_rounded = Math.round(angle_degrees)
            rads = SimUtils.degrees_to_radians(angle_degrees)
            Simulate.sim.J4.rotation.z = rads * -1
            sim_pane_j4_id.innerHTML = j_angle_degrees_rounded

            angle_degrees = angles_in_degrees[4] //Joint 5
            j_angle_degrees_rounded = Math.round(angle_degrees)
            rads = SimUtils.degrees_to_radians(angle_degrees)
            Simulate.sim.J5.rotation.y = rads * -1
            sim_pane_j5_id.innerHTML = j_angle_degrees_rounded

            let xyz = Kin.J_angles_to_xyz(angles_in_degrees, rob_pose)[0]

            let str_length
            let x = xyz[0]
            if(x < 0) { str_length = 6} //so we get the minus sign plus 3 digits after decimal point, ie MM
            else      { str_length = 5}
            sim_pane_x_id.innerHTML = ("" + x).substring(0, str_length)

            let y = xyz[1]
            if(y < 0) { str_length = 6} //so we get the minus sign plus 3 digits after decimal point, ie MM
            else      { str_length = 5}
            sim_pane_y_id.innerHTML = ("" + y).substring(0, str_length)

            let z = xyz[2]
            if(z < 0) { str_length = 6} //so we get the minus sign plus 3 digits after decimal point, ie MM
            else      { str_length = 5}
            sim_pane_z_id.innerHTML = ("" + z).substring(0, str_length)

            Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera)
    }*/

    static render_j1_thru_j5(ds_instance){
        let angles_in_degrees = ds_instance.compute_measured_angles_degrees();
        angles_in_degrees = angles_in_degrees.slice(0, 5); //we only want the first 5.
        let rob_pos = ds_instance.robot.pose;
        this.render_joints(angles_in_degrees, rob_pos);
    }

    //same level as render_multi but for one of j6 or j7.
    static render_j6_plus(ds_instance, new_angle_dexter_units, robot_name, dur_in_ms=0, joint_number=7){
        if (Dexter.default.name === robot_name){
            let total_frames = Math.ceil(dur_in_ms / SimUtils$1.ms_per_frame);
            let prev_js = ds_instance.angles_dexter_units[joint_number - 1];
            let j_diff = new_angle_dexter_units - prev_js; //this.prev_joint_angles[joint]
            let js_inc_per_frame = ((total_frames === 0) ? 0 : (j_diff / total_frames));
             //let prev_js = this.prev_joint_angles.slice(0)
            let rob = Dexter[robot_name];
            //console.log("calling render_j6_plus first time with new_angles as: " + new_angle_dexter_units + " prev_js: " + prev_js + " js_inc_per_frame: " + js_inc_per_frame)
            let render_j6_plus_frame_call = function(){
                SimUtils$1.render_j6_plus_frame(ds_instance, new_angle_dexter_units, js_inc_per_frame,
                                              total_frames, 0, rob, joint_number);
            };
            this.render_j6_plus_frame_outer(ds_instance, joint_number, render_j6_plus_frame_call);
        }
    }

    //joint_number: usually 6 or 7
    //render_j6_plus_frame_call a closure of no args that calls render_j6_plus_frame
    //If there is an ongoing call to render_j6_plus_frame,
    // then that ongoing call to render_j6_plus_frame will stop it and call render_j6_plus_frame_call,
    //otherwise, no ongoing call to stop so just call render_j6_plus_frame_call,
    static render_j6_plus_frame_outer(ds_instance, joint_number, render_j6_plus_frame_call){
        let call_map = ds_instance.queue_instance.joint_number_to_render_j6_plus_frame_call_map;
        let the_call = call_map[joint_number];
        if(!the_call) { //no ongoing call to render_j6_plus_frame, so no need to stop one in progess.
            call_map[joint_number] = true; //true indicates there is, (just to be started) an ongoing call, but no "next call"
            render_j6_plus_frame_call.call(this);
        }
        else if (the_call === true) { //there is an ongoing call, so have render_j6_plus_frame stop it then call the new render_j6_plus_frame_call
            call_map[joint_number] = render_j6_plus_frame_call;
        }
        else if (typeof(the_call) === "function") { //unusual but could happen. there is an ongoing call, AND a "next call", but that
               //next_call hasn't been called yet, so overwrite it in the map, and have the ongoing call
               //stop. No need to bother with the exiting "next" call as we've got a new one
               //that superseeds it.
            call_map[joint_number] = render_j6_plus_frame_call;
        }
        else {
            shouldnt("render_j6_plus_frame_outer found the_call of: " + the_call + " which is not undefined, not true and not a function.");
        }
    }



    static render_j6_plus_frame(ds_instance, new_angle_dexter_units, js_inc_per_frame,
                                total_frames, frame_number=0, rob, joint_number){
        let call_map = ds_instance.queue_instance.joint_number_to_render_j6_plus_frame_call_map;
        let render_j6_plus_frame_call = call_map[joint_number];
        if(frame_number >= total_frames) { //we're done, normal
            if(render_j6_plus_frame_call === true) {
                ds_instance.queue_instance.done_with_j6_plus_instruction(joint_number); //updates j6 or j7 status
                call_map[joint_number] = undefined; //all done with this call to render_j6_plus_frame

            }
            else if (typeof(render_j6_plus_frame_call === "function")) {
                ds_instance.queue_instance.done_with_j6_plus_instruction(joint_number); //updates j6 or j7 status
                call_map[joint_number] = undefined;
                this.render_j6_plus_frame_outer(ds_instance, joint_number, render_j6_plus_frame_call);
            }
            else {
                shouldnt("In render_j6_plus_frame with joint_number: " + joint_number +
                         " done with instruction but invalid render_j6_plus_frame_call: " + render_j6_plus_frame_call);
            }
        }
        else if (typeof(render_j6_plus_frame_call) === "function") { //stop the current call early and switch to the new one
            ds_instance.queue_instance.done_with_j6_plus_instruction(joint_number); //updates j6 or j7 status
            call_map[joint_number] = undefined;
            this.render_j6_plus_frame_outer(ds_instance, joint_number, render_j6_plus_frame_call);
        }
        else {
            let ma_du   = ds_instance.angles_dexter_units;
            let prev_js = ma_du[joint_number - 1];     //grab the old
            let j_angle = prev_js + js_inc_per_frame;  //compute the new
            ma_du[joint_number - 1] = j_angle;         //set it for all to see
            //undate the graphics of the simulation
            let angle_degrees = Socket.dexter_units_to_degrees(j_angle, joint_number);
            SimUtils$1.degrees_to_radians(angle_degrees);
            switch(joint_number) {
                case 6:
                    /*if(sim.J6) {
                        sim.J6.rotation.z = rads
                    }
                    sim_pane_j6_id.innerHTML = j_angle_degrees_rounded
                    */
                    this.render_j6(ds_instance);
                    break;
                case 7:
                    /*if(sim.J7) { //330 degrees = 0.05 meters
                        let new_xpos = ((angle_degrees * 0.05424483315198377) / 296) * -1 //more precise version from James W aug 25.
                        new_xpos *= 10
                        //out("J7 angle_degrees: " + angle_degrees + " new xpos: " + new_xpos)
                        sim.J7.position.setX(new_xpos) //see https://threejs.org/docs/#api/en/math/Vector3
                        //all below fail to change render
                        //sim.J7.position.x = new_pos
                        //sim.J7.updateMatrix() //no effect
                        //sim.j7.updateWorldMatrix(true, true)
                        // prev new_pos value;
                        // ((angle_degrees * 0.05) / 330 ) * -1 //meters of new location
                        // but has the below problems
                        // x causes no movement, but at least inited correctly
                        // y sends the finger to move to outer space upon init, but still visible, however moving j7 doesn't move it
                        // z causes the finger to be somewhat dislocated upon dui init, however moving j7 doesn't move it
                        //sim.J7.rotation.y = rads
                    }
                    sim_pane_j7_id.innerHTML = j_angle_degrees_rounded
                    if(globalThis.SimBuild) {
                        let new_angles = []
                        for(let i = 0; i < 5; i++) {
                            let ang_du = ma_du[i]
                            let ang_deg = Socket.dexter_units_to_degrees(ang_du, joint_number)
                            new_angles.push(ang_deg)
                        }
                        let xyz = Kin.J_angles_to_xyz(new_angles, rob.pose)[0]
                        SimBuild.handle_j7_change(angle_degrees, xyz, rob)
                    }
                    */
                    this.render_j7(ds_instance);
                    break;
            } //end switch
            //sim.renderer.render(sim.scene, sim.camera) //maybe not needed

            //figure out whether to loop, or start new commanded angle
            if (render_j6_plus_frame_call === true){ //just keep going
                 setTimeout(function() {
                    SimUtils$1.render_j6_plus_frame(ds_instance, new_angle_dexter_units, js_inc_per_frame, total_frames, frame_number + 1, rob, joint_number);
                }, SimUtils$1.ms_per_frame);
            }
            else {
               shouldnt("render_j6_plus_frame found render_j6_plus_frame_call of: " + render_j6_plus_frame_call +
                        "which is not true and not a function.");
            }
        }
    }

    static render_j6(ds_instance){
        let angle_degrees = ds_instance.compute_measured_angle_degrees(6);
        let rads = SimUtils$1.degrees_to_radians(angle_degrees);
        let j_angle_degrees_rounded = Math.round(angle_degrees);
        if(this.is_simulator_showing()) {
            if (Simulate.sim.J6) {
                Simulate.sim.J6.rotation.z = rads;
                Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera);
            }
            sim_pane_j6_id.innerHTML = j_angle_degrees_rounded;
        }
    }

    static render_j7(ds_instance){ //xyz only needs to be passed in if using SimBuild
        let angles_in_degrees = ds_instance.compute_measured_angles_degrees();
        let j7_angle_degrees = angles_in_degrees[6];
        SimUtils$1.degrees_to_radians(j7_angle_degrees);
        let j7_angle_degrees_rounded = Math.round(j7_angle_degrees);
        if(this.is_simulator_showing()) {
            if (Simulate.sim.J7) { //a THREE Object3D, i.e. there is a J7.    330 degrees = 0.05 meters
                let new_xpos = ((j7_angle_degrees * 0.05424483315198377) / 296) * -1; //more precise version from James W aug 25.
                new_xpos *= 10;
                //out("J7 j7_angle_degrees: " + j7_angle_degrees + " new xpos: " + new_xpos)
                Simulate.sim.J7.position.setX(new_xpos); //see https://threejs.org/docs/#api/en/math/Vector3
                Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera);
            }
            sim_pane_j7_id.innerHTML = j7_angle_degrees_rounded;
            if (SimObj && SimObj.objects && SimObj.objects.length > 0) {
                let rob        = ds_instance.robot;
                let rob_pose   = rob.pose;
                let xyz        = Kin.J_angles_to_xyz(angles_in_degrees, rob_pose)[0];
                SimBuild.handle_j7_change(j7_angle_degrees, xyz, rob);
            }
        }
    }

    //no longer called by SimObj.js, but calls "render" instead
    /*static render_once_with_prev_args_maybe(){
        if(this.prev_robot_status){
            this.render_once(SimUtils.prev_robot_status,
                             SimUtils.prev_robot_name)
        }
        else {
            if (this.is_simulator_showing()) {
                Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera)
            } //just the initial condition, dex straight up
        }
        }
    */

    /*was called from video.js, but now we use SimUtils.render()
    static render_multi_with_prev_args_maybe(){
        if(this.prev_robot_status){
            this.render_multi(SimUtils.prev_robot_status,
                SimUtils.prev_robot_name)
        }
        else {
            if (this.is_simulator_showing()) {
                Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera)
            }
        } //just the initial condition, dex straight up
    }*/

    static render(){
        if (this.is_simulator_showing()) {
            Simulate.sim.renderer.render(Simulate.sim.scene, Simulate.sim.camera);
        }
    }

    /* apparently not called May 2, 2022 use SimUtils.is_simulator_showing() instead
    static is_shown(){
        if(globalThis["sim_graphics_pane_id"]) { return true }
        else { return false }
    }*/

    static inspect_dexter_sim_instance(robot_name){
        if(!robot_name) {
            robot_name = default_dexter_name_id.value;
            if(!robot_name.startsWith("Dexter.")) {
                robot_name = "Dexter." + Dexter.default.name;
            }
        }
        if(robot_name.startsWith("Dexter.")) {
            robot_name = robot_name.substring(7);
        }
        if(!DexterSim.robot_name_to_dextersim_instance_map){
            warning('Sorry, no simulation has been run on: ' + robot_name + ' yet.<br/>' +
                "Run a job using " + robot_name + " before requesting this information.");
        }
        else {
            let dextersim_inst = DexterSim.robot_name_to_dextersim_instance_map[robot_name];
            if(!dextersim_inst){
                warning('Sorry, no simulation has been run on "robot_name" yet.<br/>' +
                        "Run a job using" + robot_name + " before requesting this information.");
            }
            else {
                inspect(dextersim_inst);
            }
        }
    }
    static prev_joint_angles = [0, 0, 0, 0, 0, 0, 0]
    static prev_robot_status = null
    static prev_robot_name   = null
    static ms_per_frame      = 33 //30 frames per second
}


globalThis.SimUtils = SimUtils$1;

//Robot Status Class (as distinguished from the robot_status 1D array of 60 elts.
//import {Dexter} from './robot.js' //dde4 not needed because Dexter is now global

class RobotStatus$1{
    //below work for g0 and g1
    constructor({robot_status="required"}){
        this.robot_status = robot_status; //for g0, the array has degrees, etc.
                                         //for g1+ the array has low level numbers, ie arcseconds,
                                         //unchanged from what Dexter sends to DDE.
                                         //But methods like measured_angle return degrees.
    }
    job_id()                        { return this.robot_status[Dexter.JOB_ID]}
    instruction_id()                { return this.robot_status[Dexter.INSTRUCTION_ID]}
    start_time()                    { return this.robot_status[Dexter.START_TIME]}
    stop_time()                     { return this.robot_status[Dexter.STOP_TIME]}
    instruction_type()              { return this.robot_status[Dexter.INSTRUCTION_TYPE]}
    error_code()                    { return this.robot_status[Dexter.ERROR_CODE]}
    dma_read_data()                 { return this.robot_status[Dexter.DMA_READ_INSTRUCTION]}
    read_block_count()              { return this.robot_status[Dexter.READ_BLOCK_COUNT]}
    end_effector_io_in()            { return this.robot_status[Dexter.END_EFFECTOR_IO_IN]} //was end_effector_io_in

    status_mode(){
        return RobotStatus$1.array_status_mode(this.robot_status)
    }

    //called from Monitor
    static array_status_mode(robot_status_array){
        let raw = robot_status_array[Dexter.STATUS_MODE];
        if      (typeof(raw) === "string") { return parseInt(raw) }
        else if (typeof(raw === "number")) { return raw }
    }

    static is_other_status_mode(sm){ //such status_modes will use generic table display.
        return ![0, 1, 2].includes(sm)
    }

    supports_measured_angles(){
        return (this.status_mode() < 3)
    }

    value_at_index(index){
        if((index < 0) || (index > 59)) {
            return this.robot_status(index)
        }
        else {
            dde_error("RobotStatus.value_at_index called with index that's not between 0 and 59 iclusive: " + index);
        }
    }

    //below for g0 only
    angle(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_ANGLE";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else {
                  dde_error("RobotStatus.angle passed joint_number: " + joint_number +
                             "<br/> but the value of that is: " + result +
                             "<br/> when it should be a number." +
                             "<br/>The whole robot status is: " + this.robot_status);

                 }
        }
        else {
            dde_error("RobotStatus.angle is invalid for status_mode: " + sm);
        }
    }

    angles(joint_count=5){
        let sm = this.status_mode();
        if(sm === 0) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.angle(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.angles is invalid for status_mode: " + sm);
        }
    }

    delta(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_DELTA";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.delta passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.delta is invalid for status_mode: " + sm);
        }
    }

    deltas(joint_count=5){
        let sm = this.status_mode();
        if(sm === 0) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.delta(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.deltas is invalid for status_mode: " + sm);
        }
    }

    pid_delta(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_PID_DELTA";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.pid_delta passed joint_number: " + joint_number + " which isn't valid."); }
        }
        if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_PID_DELTA_G2";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.pid_delta passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.pid_delta is invalid for status_mode: " + sm);
        }
    }

    pid_deltas(joint_count=5){
        let sm = this.status_mode();
        if(sm === 0) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.pid_delta(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.pid_deltas is invalid for status_mode: " + sm);
        }
    }

    /*force_calc_angle(joint_number){
        let result = this.robot_status["J" + joint_number + "_FORCE_CALC_ANGLE"]
        if(typeof(result) == "number") { return result}
        else { dde_error("RobotStatus.force_calc_angle passed joint_number: " + joint_number + " which isn't valid.") }
    }

    force_calc_angles(joint_count=5){
        let result = []
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.force_calc_angle(j_number))
        }
        return result
    }*/

    a2d_sin(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_A2D_SIN";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_sin passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_A2D_SIN_G2";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_sin passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.a2d_sin is invalid for status_mode: " + sm);
        }
    }

    a2d_sins(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.a2d_sin(j_number));
        }
        return result
    }

    a2d_cos(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_A2D_COS";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_cos passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_A2D_COS_G2";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) == "number") { return result}
            else { dde_error("RobotStatus.a2d_cos passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.a2d_cos is invalid for status_mode: " + sm);
        }
    }

    a2d_coses(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.a2d_cos(j_number));
        }
        return result

    }

    sent(joint_number){
        let sm = this.status_mode();
        if(sm === 0) {
            let label = "Dexter.J" + joint_number + "_SENT";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) === "number") { return result}
            else { dde_error("RobotStatus.sent passed joint_number: " + joint_number + " which isn't valid."); }
        }
        if(sm === 2) {
            let label = "Dexter.J" + joint_number + "_SENT";
            let index = value_of_path(label);
            let result = this.robot_status[index];
            if(typeof(result) === "number") { return result}
            else { dde_error("RobotStatus.sent passed joint_number: " + joint_number + " which isn't valid."); }
        }
        else {
            dde_error("RobotStatus.sent is invalid for status_mode: " + sm);
        }
    }

    sents(joint_count=5){
        let sm = this.status_mode();
        if((sm === 0) || (sm === 2)) {
            let result = [];
            for(let j_number = 1; j_number <= joint_count;  j_number++){
                result.push(this.sent(j_number));
            }
            return result
        }
        else {
            dde_error("RobotStatus.sents is invalid for status_mode: " + sm);
        }
    }

    //works for g0 & g1  returns angle in degrees except
    //if raw=true, then return the number in the array without converting
    //used in
    measured_angle(joint_number, raw=false) {
        let sm = this.status_mode();
        if(sm === 0) {
            if      (joint_number == 1) { return this.robot_status[Dexter.J1_MEASURED_ANGLE] }
            else if (joint_number == 2) { return this.robot_status[Dexter.J2_MEASURED_ANGLE] }
            else if (joint_number == 3) { return this.robot_status[Dexter.J3_MEASURED_ANGLE] }
            else if (joint_number == 4) { return this.robot_status[Dexter.J4_MEASURED_ANGLE] }
            else if (joint_number == 5) { return this.robot_status[Dexter.J5_MEASURED_ANGLE] }
            else if (joint_number == 6) { return this.robot_status[Dexter.J6_MEASURED_ANGLE] }
            else if (joint_number == 7) { return this.robot_status[Dexter.J7_MEASURED_ANGLE] }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                          "<br/>Valid numbers are 1 through 7.");
            }
        }
        else if (sm === 1) {
            if((joint_number >= 0) && (joint_number <= 10)){
                let index = 9 + joint_number;
                let result = this.robot_status[index];
                if(!raw) { result = result / 3600; } //the usual case
                return result
            }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                          "<br/>Valid numbers are 1 through 7.");
            }
        }
        if(sm === 2) {
            if((joint_number >= 0) && (joint_number <= 7)) {
                if      (joint_number == 1) { return this.robot_status[Dexter.J1_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 2) { return this.robot_status[Dexter.J2_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 3) { return this.robot_status[Dexter.J3_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 4) { return this.robot_status[Dexter.J4_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 5) { return this.robot_status[Dexter.J5_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 6) { return this.robot_status[Dexter.J6_MEASURED_ANGLE_G2] / 3600 }
                else if (joint_number == 7) { return this.robot_status[Dexter.J7_MEASURED_ANGLE_G2] / 3600 }
            }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 7.");
            }
        }
        else {
            dde_error("RobotStatus.measured_angle isn't supported for status_mode of " + sm);
        }
    }

    //works for g0 & g1 returns angle in degrees
    measured_angles(joint_count=7, raw=false){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.measured_angle(j_number, raw));
        }
        return result
    }

    //array_of_measured_angles is in degrees
    //if raw is true, don't modify array_of_measured_angles when shoving them into the array
    //array_of_measured_angles expected to be in degrees, but if raw = true, it doesn't matter.
    set_measured_angles(array_of_measured_angles, raw=false){
        let rs_array = this.robot_status;
        let sm = this.status_mode();
        if(sm === 0) { //angles in rs_array are in degrees
            rs_array[Dexter.J1_MEASURED_ANGLE] = array_of_measured_angles[0];
            rs_array[Dexter.J2_MEASURED_ANGLE] = array_of_measured_angles[1];
            rs_array[Dexter.J3_MEASURED_ANGLE] = array_of_measured_angles[2];
            rs_array[Dexter.J4_MEASURED_ANGLE] = array_of_measured_angles[3];
            rs_array[Dexter.J5_MEASURED_ANGLE] = array_of_measured_angles[4];
            rs_array[Dexter.J6_MEASURED_ANGLE] = array_of_measured_angles[5];
            rs_array[Dexter.J7_MEASURED_ANGLE] = array_of_measured_angles[6];
        }
        else if (sm === 1) { //angles in rs_array are in arcseconds
            for(let i = 0; i < 7; i++){
                let new_val = array_of_measured_angles[i];
                if(!raw) { new_val = new_val * 3600; } //usual
                rs_array[Dexter.J1_MEASURED_ANGLE_G1 + i] = new_val;
            }
        }
        else if(sm === 2) { //angles in rs_array are in degrees
            rs_array[Dexter.J1_MEASURED_ANGLE_G2] = array_of_measured_angles[0];
            rs_array[Dexter.J2_MEASURED_ANGLE_G2] = array_of_measured_angles[1];
            rs_array[Dexter.J3_MEASURED_ANGLE_G2] = array_of_measured_angles[2];
            rs_array[Dexter.J4_MEASURED_ANGLE_G2] = array_of_measured_angles[3];
            rs_array[Dexter.J5_MEASURED_ANGLE_G2] = array_of_measured_angles[4];
            rs_array[Dexter.J6_MEASURED_ANGLE_G2] = array_of_measured_angles[5];
            rs_array[Dexter.J7_MEASURED_ANGLE_G2] = array_of_measured_angles[6];
        }
        else {
            dde_error("RobotStatus.set_measured_angles can't handle status_mode: " + sm);
        }
    }

    //works only for g1
    torque(joint_number) {
        if(this.status_mode() === 1) {
            if((joint_number >= 0) && (joint_number <= 7)) {
                let index = 19 + joint_number;
                return this.robot_status[index] / 1000000
            }
            else {
                dde_error("RobotStatus.torque passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 7.");
            }
        }
        else {
            dde_error("RobotStatus.torque called using status_mode " + sm + ", but it only works for 1.");
        }
    }

    //works only for g1
    torques(joint_count=7){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.torque(j_number));
        }
        return result
    }

    //works only for g1 returned value is in degrees per second
    velocity(joint_number) {
        if(this.status_mode() === 1) {
            if((joint_number >= 0) && (joint_number <= 7)) {
                let index = 29 + joint_number;
                return this.robot_status[index] / 3600
            }
            else {
                dde_error("RobotStatus.velocity passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 7.");
            }
        }
        else {
            dde_error("RobotStatus.velocity called using status_mode " + sm + ", but it only works for 1.");
        }
    }

    //works only for g1  returned values are in degrees per second
    velocities(joint_count=7){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.velocity(j_number));
        }
        return result
    }

    raw_encoder_angle(joint_number) {
        let sm = this.status_mode();
        if(sm === 2) {
            if      (joint_number == 1) { return this.robot_status[Dexter.J1_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 2) { return this.robot_status[Dexter.J2_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 3) { return this.robot_status[Dexter.J3_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 4) { return this.robot_status[Dexter.J4_RAW_ENCODER_ANGLE_FXP_G2] }
            else if (joint_number == 5) { return this.robot_status[Dexter.J5_RAW_ENCODER_ANGLE_FXP_G2] }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 5.");
            }
        }
        else {
            dde_error("RobotStatus.raw_encoder_angle called using status_mode: " + sm + ", but it only works for 2.");
        }
    }

    raw_encoder_angles(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.raw_encoder_angle(j_number));
        }
        return result
    }

    eye_number(joint_number) {
        let sm = this.status_mode();
        if(sm === 2) {
            if      (joint_number == 1) { return this.robot_status[Dexter.J1_EYE_NUMBER_G2] }
            else if (joint_number == 2) { return this.robot_status[Dexter.J2_EYE_NUMBER_G2] }
            else if (joint_number == 3) { return this.robot_status[Dexter.J3_EYE_NUMBER_G2] }
            else if (joint_number == 4) { return this.robot_status[Dexter.J4_EYE_NUMBER_G2] }
            else if (joint_number == 5) { return this.robot_status[Dexter.J5_EYE_NUMBER_G2] }
            else {
                dde_error("RobotStatus.measured_angle passed invalid joint_number of: " + joint_number +
                    "<br/>Valid numbers are 1 through 5.");
            }
        }
        else {
            dde_error("RobotStatus.raw_encoder_angle called using status_mode: " + sm + ", but it only works for 2.");
        }
    }

    eye_numbers(joint_count=5){
        let result = [];
        for(let j_number = 1; j_number <= joint_count;  j_number++){
            result.push(this.eye_number(j_number));
        }
        return result
    }


    //returns array. First elt is an array of x,y,z
    xyz(){
        let joint_angles = this.measured_angles(5);
        return Kin.J_angles_to_xyz(joint_angles)
    }

    static fill_robot_status_array_with_another(rs_array_to_modify, source_of_values_rs_array, raw=false){
       for(let i = 0; i < 10; i++){
           if(i !== Dexter.STATUS_MODE) { //don't change the status_mode of rs_array_to_modify, as that's the real reason we're calling this whole method
                rs_array_to_modify[i] = source_of_values_rs_array[i];
           }
       }
       let arr_mod_RS = new RobotStatus$1({robot_status: rs_array_to_modify});
       let arr_src_RS = new RobotStatus$1({robot_status: source_of_values_rs_array});
       let arr_src_mes_angs = arr_src_RS.measured_angles(7, raw);
       arr_mod_RS.set_measured_angles(arr_src_mes_angs, raw);
    }

}
globalThis.RobotStatus = RobotStatus$1;

//import {eval_js_part2} from "../../general/eval.js" //now this is global

class DDEFile$1 {
    static http_and_maybe_s = "http" //but could be set to "https" if using an https node serever
    //utilities
    static convert_backslashes_to_slashes(a_string){
        let result = a_string.replace(/\\/g, "/");
        return result
    }

    static is_root_path(path){
        if(path.startsWith("/")) { return true }
        else if ((path.length > 1) && (path[1] == ":")){ //WinOS junk. Maybe unnecessary in dde4
            let first_char = path[0];
            return ((first_char >= "A") && (first_char <= "Z"))
        }
        else { return false }
    }

    static is_dde_path(path){
        return path.startsWith("dde/")
    }

    static add_default_file_prefix_maybe(path){
        path = DDEFile$1.convert_backslashes_to_slashes(path);
        if (this.is_root_path(path))     { return path }
        else if (this.is_dde_path(path)) { //starts with "dde/"
            let file_prefix = "";
            if(dde_running_in_cloud()){
                //example: path is:  "dde/third_party/Corlib.ipg"
                //we want to return: "cfry.github.io/dde4/dde/third_party/CorLib.ipg"
                file_prefix = globalThis.location.host + "/dde4/";
            }
            return file_prefix + path
        } // the node server will prepend to such paths
        else if ((path === "dde_apps") || path.startsWith("dde_apps/")) { return path }
        else if (path == "new buffer") { return path } //needed by Editor.edit_file
        else { return "dde_apps/" + path }
    }

    //DDEFile.make_url only called from this file june 26, 2022
    //beware. there's an output.js make_url too.
    //query for this method ALWAYS starts with "/edit?"
    //"/edit?edit=",   takes a path. get the path's content
    //"/edit?info=",   takes a path  to get meta info on the file but not its content
    //"/edit?path=..." takes a path to edit
    //"/edit?list="    takes a path of a dir to get info on
    //"/edit?start=...", "/edit?", The query args arg start (position in file) and length
    //used only in read_path_part where the initial path of the url is the file being looked at,
    //when you want to get just part of a file. So i guess the initial path must be absolute.


    static make_url(path, query=""){
        //if (adjust_to_os) { path = adjust_path_to_os(path) }
        let url;
        let colon_pos = path.indexOf(":");
        if(path.startsWith("Dexter.")){
            if(colon_pos === -1) {
                dde_error("The path of: " + path + " is invalid. If it starts with 'Dexter.'" +
                          "It must contain a colon and that colon must be after the name" +
                          "of the Dexter.");
            }
            else {
                let [full_dex_name, extracted_path] = path.split(":");
                let dex = Utils.value_of_path(full_dex_name);
                if(!dex) {
                    dde_error("The path of: " + path + " is invalid because<br/>" +
                        full_dex_name + " is not defined as a Dexter instance.<br/>" +
                        "You need to define a Dexter instance with that name and<br/>" +
                        "an ip_address to use that path.");
                }
                let ip_address = dex.ip_address;
                extracted_path = this.add_default_file_prefix_maybe(extracted_path);
                url = DDEFile$1.http_and_maybe_s + "://" + ip_address + query + extracted_path;
            }
        }
        else if(path.startsWith("host:")){
            let [full_dex_name, extracted_path] = path.split(":");
            let ip_address = this.host(); //might return "localhost"
            extracted_path = this.add_default_file_prefix_maybe(extracted_path);
            url = DDEFile$1.http_and_maybe_s + "://" + ip_address + query + extracted_path;
        }
        else if (path.includes(":")) {
            if(query !== "") {
                let [protocol, host, extracted_path] = path.split(":");
                if((protocol === "http") || (protocol === "https")){
                    extracted_path = this.add_default_file_prefix_maybe(extracted_path);
                    url = DDEFile$1.http_and_maybe_s + ":" + host + query + path; //todo cut out host, just go with extracted path here???
                }
                else { //only 1 colon, assume its NOT the suffix to host but the separator before port
                    extracted_path = host;
                    host = protocol;
                    extracted_path = this.add_default_file_prefix_maybe(extracted_path);
                    url = DDEFile$1.http_and_maybe_s + "://" + host + //":" +  //don't insert this colon. causes fetch to break
                        query + extracted_path;
                }
            }
            else { url = path; }
        }
        else {
            path = this.add_default_file_prefix_maybe(path);
            if(dde_running_in_cloud()){
                url = DDEFile$1.http_and_maybe_s + "://" + path;  //cloud can't handle any query strings
            }
            else {
                url = DDEFile$1.http_and_maybe_s + "://" + this.host() + //":" +
                    query + path;
            }
        }
        return url
    }

    static host(){
        if(globalThis.platform === "node") {
            return "localhost"
        }
        else {
            return globalThis.location.host //ex: "192.168.1.142", "localhost:80"
        }
    }
    /*
    static is_server_on_dexter(){ //dde4 todo compare this.host to each one of the defined dexters,
        //and if ONE of them matches host, then return true lese return false.
        return this.host().startsWith("192.168.")

    }*/

    //returns something like "http://localhost:80" or
    //                       "http://192.168.1.142"
    static protocol_and_host(){ //includes port
        return globalThis.location.protocol +  // "http:" or "https:"
               "//" +
               this.host()
    }

    static extract_domain_from_url(url){
        let [protocol, empty, domain] = url.split("/");
        return domain
    }



    //static dde_apps_folder_url
    static init(){
        /*if(this.is_server_on_dexter()){
            dde_apps_folder = "/srv/samba/share/dde_apps"
        }
        else {
            dde_apps_folder = "/Users/Fry/Documents/dde_apps" //todo should come from persisitent_db
        }
        this.dde_apps_folder_url = this.protocol_and_host() + "//" +
                                   dde_apps_folder
        */
    }
    static ensure_ending_slash(str){
        str = str.trim();
        if(str.endsWith("/")) { return str }
        else { return str+ "/" }
    }

    static ensure_no_ending_slash(str){
        str = str.trim();
        if(str.endsWith("/")) { return str.substring(0, str.length - 1) }
        else { return str }
    }

    static callback_or_error(callback, error_message="got error", path){
        if (callback) {
            callback(error_message, path);
        }
        else {
            dde_error(error_message);
        }
    }

    //value might legitimately pass in undefined, so leave it that way
    static callback_or_return(callback, value, path){
        if (callback) {
            callback(null, value, path);
        }
        else {
            return value
        }
    }

    //______end Utilites______
    //Core file manipulation methods

    static async file_exists(path, callback){
        let info = await this.path_info(path, callback);
        if(info){
            return this.callback_or_return(callback, true, path)
        }
        else {
            return this.callback_or_return(callback, false, path)
        }
    }

    /*static async get_page_async(url_or_options, callback){
        //https://www.npmjs.com/package/request documents request
        //as taking args of (options, cb) but the actual
        //fn itself has params(uri, options, cb
        //request(url_or_options, callback)
        let url, options, response, err, body
        if(typeof(url_or_options) === "string") {
            url = url_or_options
            options = { credentials: 'include',
                mode: 'cors'} // no-cors, *cors, same-origin } //attempt to get cross domain urls. might not work
                              // see https://developer.mozilla.org/en-US/docs/Web/API/Request/mode
            response = await fetch(url, options)
        }
        else {
            response = await fetch(url_or_options)
        }
        if(response.ok){
            return this.callback_or_return(callback, body)
        }
        else {
            let err = ("get_page_async didn't work.")
            return this.callback_or_error(callback, err)
        }
    }*/

    //see https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors
    ///both my server (gitup.io and the requested url's server need to
    //send back the proper header: ("res" stands for response)
    //  res.setHeader('Access-Control-Allow-Origin', '*');
    // to allow you to get the url.
    static async get_page_async(url, callback){
        //https://www.npmjs.com/package/request documents request
        let full_url = (dde_running_in_cloud() ? url :
            DDEFile$1.http_and_maybe_s + "://" + this.host() + "/get_page?path=" + url);
        try {
            let response = await fetch(full_url); //will error due to CORS if the host serving full_url doesn't pave a response header allowing CORS
            if (response.ok) {
                let content = await response.text();
                return this.callback_or_return(callback, content, path)
            } else {
                let err_mess =  "get_page_async for: " + url + " failed.<br/>" + err.message;
                return this.callback_or_error(callback, err_mess, path)
            }
        }
        catch(err){
          "get_page_async for: " + url + " failed.<br/>" + err.message;
          return this.callback_or_error(callback, err, url)
        }
    }


    //from https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Synchronous_and_Asynchronous_Requests
    //scynchronous, bypasses htttpd server. Often fails due to CORS, but
    //will work when requesting pages from server that served DDE4.
    static get_page(url){
        let request = new XMLHttpRequest();
        request.open('GET', url, false);  // `false` makes the request synchronous
        request.send(null);
        if (request.status === 200) {
            return request.responseText
        }
        else { //but it will actually error before this if its a CORS policy violation
            throw new Error("get_page failed to get: " + url + " with error code: " + request.status)
        }
    }

    //path can be a file, a folder, or a non-existant path.
    //returns null, if non-existant, else
    //a JSON object with the fields documented in
    static async path_info(path = "dde_apps", callback){
        ///if(!path.startsWith("/")) {    path = dde_apps_folder + "/" + path
        //path = this.add_default_file_prefix_maybe(path)
        //let full_url = this.protocol_and_host() + "/edit?info=" + path
        let full_url = this.make_url(path, "/edit?info=");
        //full_url = full_url.substring(1) //cut off the leading slash makes the server code
        //think that this url is a root url for some strange reason.
        //see httpd.mjs, serve_file()
        // see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
        let file_info_response = await fetch(full_url); //, {mode: 'no-cors'}) // no-cors)
        if(file_info_response.ok) {
            let content = await file_info_response.text();
            if(content === "null") {
                return this.callback_or_return(callback, null, path)
            }
            else {
                let json_obj = JSON.parse(content);
                let is_dir = json_obj.kind === "folder";
                let perm_str = Utils.permissions_integer_string_to_letter_string(json_obj.permissions, is_dir);
                json_obj.permissions_letters = perm_str;
                return this.callback_or_return(callback, json_obj, path)
            }
        }
        else {
            this.callback_or_error(callback, "DDEFile.path_info for: " + path + " got error: " + file_info_response.status, path);
        }
    }

    static async is_folder(path, callback){
        let info_obj = await this.path_info(path);
        if(info_obj === null) {
            return this.callback_or_return(callback, false, path)
        }
        else {
            let is_fold = info_obj.kind === "folder";
            return this.callback_or_return(callback, is_fold, path)
        }
    }



    //callback is optional. If not passed, return a promise
    //if passed, the callback is called with 2 args,
    //err (default null meaning no error, and content (ie the string of the content of the file
    //note: assumes Node_server is up and working (unlike DDE3 which has to check with get_page)
    static async read_file_async(path, callback){
        if (path === undefined) {
            if (Editor.current_file_path == "new buffer"){
                this.callback_or_error(callback, "Attempt to read_file_async but no path given.", path);
            }
            else { path = Editor.current_file_path; }
        }
        let full_url = this.make_url(path, "/edit?edit=");
        //path = this.add_default_file_prefix_maybe(path)
        //let full_url = this.protocol_and_host() +  "/edit?edit=" + path
        console.log("read_file_async fetching: " + full_url);
        let file_info_response = await fetch(full_url); //,  {mode: 'no-cors'}) // unnecessary to specify the no-cors, but it doesnt' hurt, {mode: 'no-cors'})
        if(file_info_response.ok) {
            let content = await file_info_response.text();
            return this.callback_or_return(callback, content, path)
        }
        else {
            this.callback_or_error(callback, "DDEFile.read_file_async of: " + path + " got error: " + file_info_response.status, path);
        }
    }

    static async read_file_part(path, start=0, length=80, callback){
        if (path === undefined) {
            if (Editor.current_file_path == "new buffer"){
                this.callback_or_error(callback, "Attempt to read_file_async but no path given.", path);
            }
            else { path = Editor.current_file_path; }
        }
        let full_url = this.make_url(path,
                                    "/edit?start=" + start +
                                    "&length=" + length + "&read_part=");
        //path = this.add_default_file_prefix_maybe(path)
        //let full_url = this.protocol_and_host() +  "/edit?edit=" + path
        let file_info_response = await fetch(full_url,
                                             {mode: 'no-cors'} ); // unnecessary to specify the no-cors, but it doesnt' hurt, {mode: 'no-cors'})
        if(file_info_response.ok) {
            let content = await file_info_response.text();
            return this.callback_or_return(callback, content, path)
        }
        else {
            this.callback_or_error(callback, "DDEFile.read_file_part of: " + path + " got error: " + file_info_response.status, path);
        }
    }


    //content can be a string or a blob, and a "file" object is a blob.
    static async write_file_async(path, content, encoding= null, callback){ //default was "utf8" in dde3
        if (path === undefined){
            if (Editor.current_file_path == "new buffer"){
                this.callback_or_error(callback, "Attempt to write file but no filepath given.", path);
            }
            else { path = Editor.current_file_path; }
        }
        //path = this.add_default_file_prefix_maybe(path)
        if (content === undefined) {
            content = Editor.get_javascript();
        }
        let orig_content = content;
        if(encoding === null) {
            if(Utils.typed_array_name(content) === "Uint8Array") ; //good!
            else if (typeof(content) === "string") {
                content = Utils.string_to_unit8array(content);
            }
            else {
                warning("DDEFile.write_file_async passed content of type: " +
                    typeof (content) + " and encoding of null.<br/>" +
                    "write probably won't write the content correctly.");
            } //todo  good luck! probably need some conversion here.
        }

        let full_url = this.make_url(path, "/edit?");
        //let full_url = this.protocol_and_host() + "/edit" //"/edit?path=path" //"/edit"
        //let res = await fetch(full_url, {method: 'POST', //'PUT', //'POST', //using PUT fails
        //                                 //path: path, //fails
        //                                 body: content})
        let [url_sans_query, path_to_store_content_in] = full_url.split("?");
        let formData = new FormData();
        let blob;
        if(typeof(content) === "string"){
            blob = new Blob([content]); //, { type: "text/plain"}); //turns out at least for text files, no tyoe necessary
        }
        else if(Utils.typed_array_name(content) === "Uint8Array") {  //if I atttempt to use the uin9Arry as a blob. I get wrror "content is not of type Blob"
            blob = new Blob([content.buffer]);
        }
        else { blob = content; } //probably a "file" object from upload
        formData.append("data", blob, path_to_store_content_in);
        //formData.append("name", path)
        let res = await fetch(url_sans_query, {method: 'POST', //'PUT', //'POST', //using PUT fails
                                             body: formData,
                                             mode: 'no-cors'});
        if(res.ok) {
            out("DDEFile.write_file_async wrote file to: " + full_url, undefined, true); //make it temp.
            return this.callback_or_return(callback, orig_content, path)
        }
        else {
            this.callback_or_error(callback, "DDEFile.write_file_async of: " + path + " got error: " + res.status, path);
        }
    }

    static async append_to_file(path, content, encoding= null, callback){ //default was "utf8" in dde3
        if (path === undefined){
            if (Editor.current_file_path == "new buffer"){
                this.callback_or_error(callback, "Attempt to write file but no filepath given.", path);
            }
            else { path = Editor.current_file_path; }
        }
        //path = this.add_default_file_prefix_maybe(path)
        if (content === undefined) {
            content = Editor.get_javascript();
        }
        let orig_content = content;
        if(encoding === null) {
            if(Utils.typed_array_name(content) === "Uint8Array") ; //good!
            else if (typeof(content) === "string") {
                content = Utils.string_to_unit8array(content);
            }
            else {
                warning("DDEFile.append_to_file passed content of type: " +
                    typeof (content) + " and encoding of null.<br/>" +
                    "write probably won't write the content correctly.");
            } //todo  good luck! probably need some conversion here.
        }

        let full_url = this.make_url(path, "/edit?");
        //let full_url = this.protocol_and_host() + "/edit" //"/edit?path=path" //"/edit"
        //let res = await fetch(full_url, {method: 'POST', //'PUT', //'POST', //using PUT fails
        //                                 //path: path, //fails
        //                                 body: content})
        let [url_sans_query, path_to_store_content_in] = full_url.split("?");
        let formData = new FormData();
        let blob;
        if(typeof(content) === "string"){
            blob = new Blob([content]); //, { type: "text/plain"}); //turns out at least for text files, no tyoe necessary
        }
        else if(Utils.typed_array_name(content) === "Uint8Array") {  //if I atttempt to use the uin9Arry as a blob. I get wrror "content is not of type Blob"
            blob = new Blob([content.buffer]);
        }
        else { blob = content; } //probably a "file" object from upload
        formData.append("data", blob, path_to_store_content_in);
        //formData.append("name", path)
        url_sans_query += "?append=true";
        let res = await fetch(url_sans_query, {method: 'POST', //'PUT', //'POST', //using PUT fails
                                                    body: formData,
                                                    mode: 'no-cors'});
        if(res.ok) {
            out("DDEFile.append_to_file to: " + this.add_default_file_prefix_maybe(path), undefined, true);
            return this.callback_or_return(callback, orig_content, path)
        }
        else {
            this.callback_or_error(callback,
                                   "DDEFile.append_to_file to: " +
                                   this.add_default_file_prefix_maybe(path) + " got error: " + res.status,
                                   path);
        }
    }

    static async delete(path, callback){
        if (path === undefined){
            if (Editor.current_file_path == "new buffer"){
                this.callback_or_error(callback, "Attempt to write file but no filepath given.", path);
            }
            else { path = Editor.current_file_path; }
        }
        let full_url = this.make_url(path, "/edit?path="); //but the "?path=path" part of the returned URL
        // is not actually used by the server
        // it uses the formData.append("path" ...
        let [url_sans_query, path_to_store_content_in] = full_url.split("?");
        let formData = new FormData();
        let defaulted_path = this.add_default_file_prefix_maybe(path);
        formData.append("path", defaulted_path);
        let res = await fetch(url_sans_query, {method: 'DELETE',
                                                    body: formData});
        if(res.ok) {
            out("DDEFile.delete deleted: " + defaulted_path, undefined, true);
            return this.callback_or_return(callback, true, path)
        }
        else {
            this.callback_or_error(callback, "DDEFile.delete_file of: " + path + " got error: " + res.status, path);
        }
    }

    static async make_folder(path, callback){
        let exists = await this.file_exists(path);
        if(exists) {
            out("DDEFile.make_folder tried to create: " + path + " but it already exists.", undefined, true);
        }
        else {
            let sep = ((Utils.last(path) === "/") ? "" : "/'");
            let temp_file_path = path + sep + "temp_file";
            let write_result = await this.write_file_async(temp_file_path, "the content");
            //out("write_result: " + write_result)
            if(write_result === "the content"){
                this.delete(temp_file_path, callback);
            }
            else {
                this.callback_or_error(callback, "Error calling DDEFile.make_folder(" + path + ")", path);
            }
        }
    }

    static async copy_file_async(source_path, destination_path, callback){
        let content = await DDEFile$1.read_file_async(source_path);
        DDEFile$1.write_file_async(destination_path, content, null, callback);
    }

    static async edit_file(path, dont_save_cur_buff_even_if_its_changed=false, callback){
        let full_url = this.make_url(path, "/edit?edit=");

        let file_info_response = await fetch(full_url);
        if(file_info_response.ok) {
            let content = await file_info_response.text();
            Editor.edit_file(path, content, dont_save_cur_buff_even_if_its_changed); //true means: dont_save_cur_buff_even_if_its_changed
            this.callback_or_return(callback, content, path);
        }
        else {
            this.callback_or_error(callback, "DDEFile.edit_file of: " + path + " got error: " + file_info_response.status, path);
        }
    }

    static async insert_file_content(path, callback){
        let full_url = this.make_url(path, "/edit?edit=");
        let file_info_response = await fetch(full_url);
        if(file_info_response.ok) {
            let content = await file_info_response.text();
            Editor.insert(content);
            this.callback_or_return(callback, content, path);
        }
        else {
            this.callback_or_error(callback, "DDEFile.insert_file_content of: " + path + " got error: " + file_info_response.status, path);
        }
    }

    static loading_file

    static load_file_callback_default(err, result, path){
        if(err) {
            dde_error("DDEFile.load_file of: " + path + " errored with: " + err.message);
        }
        else {
            out("DDEFile.load_file of: " + path + " returned result of: " + result);
        }
    }

    static async load_file(path, callback=DDEFile$1.load_file_callback_default){
        //if(!path.startsWith("/")) {path = dde_apps_folder + "/" + path}
        //path = this.add_default_file_prefix_maybe(path)
        //let full_url = this.protocol_and_host() + "/edit?edit=" + path
        //full_url = full_url.substring(1) //cut off the leading slash makes the server code
        //think that this url is a root url for some strange reason.
        //see httpd.mjs, serve_file()
        console.log("load_file passed path: " + path);
        //out("load_file passed path: " + path)
        let defaulted_path = this.add_default_file_prefix_maybe(path);
        let full_url = this.make_url(defaulted_path, "/edit?edit=");
        console.log("load_file made url: " + full_url);
        //out("load_file made url: " + full_url)
        //console.log("about to call fetch that has value: " + fetch)
        let file_info_response = await fetch(full_url);
        console.log("load_file after 1st fetch with response: " + file_info_response.ok);
        //out("load_file after 1st fetch with response: " + file_info_response.ok)
        if(file_info_response.ok) {
            console.log("load_file got response that is OK");
            //out("load_file got response that is OK")
            let content = await file_info_response.text();
            console.log("load_file got content: " + content);
            //out("load_file got content: " + content)
            let result;
            try {
                this.loading_file = defaulted_path;

                //let result = eval_js_part2(content)
                //this.loading_file = undefined
                //this.callback_or_return(callback, result.value)

                if(path.endsWith(".py")){
                    await Py.init();
                    result = Py.eval(content);
                    console.log("load_file got result: " + result);
                    this.loading_file = undefined;
                    this.callback_or_return(callback, result, path);
                    return
                }
                else if(globalThis.eval_js_part2) { //we're in IDE
                    console.log("load_file in clause globalThis.eval_js_part2");
                    let result_obj = globalThis.eval_js_part2(content);
                    if(result_obj.err){
                        this.loading_file = undefined;
                        this.callback_or_error(callback, err, path);
                        return
                    }
                    else {
                        result = result_obj.value;
                    }
                }
                else { //we're in node
                    console.log("load_file in clause node");
                    //console.log("Dexter.dexter0: " + Dexter.dexter0)
                    result = globalThis.eval(content);
                }
                console.log("load_file got result: " + result);
                this.loading_file = undefined;
                this.callback_or_return(callback, result, path);
            }
            catch(err){
                this.loading_file = undefined;
                this.callback_or_error(callback, err, path);
            }
        }
        else {
            this.loading_file = undefined;
            this.callback_or_error(callback,
                                   "DDEFile.load_file of: " + defaulted_path + " got error: " + file_info_response.status,
                                   path);
        }
    }

    static async folder_listing(path="dde_apps", callback){
       //if(!path.startsWith("/")) { path = dde_apps_folder + "/" + path }
       //if(!path.endsWith("/")) { path = path + "/" } //httpd.js requires ending slash
        //path = this.add_default_file_prefix_maybe(path)
        path = this.ensure_ending_slash(path);
        let full_url = this.make_url(path, "/edit?list=");
        //path = this.ensure_ending_slash(path) //httpd.js requires ending slash
        //let url = this.protocol_and_host() + "/edit?list=" + path
        let fold_info = await fetch(full_url);
        if(fold_info.ok) {
            let content = await fold_info.text();
            let obj = JSON.parse(content);
            return this.callback_or_return(callback, obj, path)
        }
        else {
            this.callback_or_error(callback, "DDEFile.folder_listing for: " + path + " got error: " + fold_info.status, path);
        }
    }

    //______choose methods

    static choose_file_to_edit_handler(vals){
        //out("top of choose_file_handler with: " + vals.clicked_button_value)
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else {
            vals.window_index;
            SW.close_window(vals.window_index);
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                DDEFile$1.choose_file({folder:   vals.clicked_button_value,
                                     title:    "Choose a file from:",
                                     callback: "DDEFile.choose_file_to_edit_handler"});
            }
            else {
                let dont_save_cur_buff_even_if_its_changed = false;
                DDEFile$1.edit_file(vals.clicked_button_value, undefined, dont_save_cur_buff_even_if_its_changed);
            }
        }
    }

    static download_file_handler(vals){
        //out("top of choose_file_handler with: " + vals.clicked_button_value)
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else {
            vals.window_index;
            SW.close_window(vals.window_index);
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                DDEFile$1.choose_file({folder:   vals.clicked_button_value,
                    title:    "Choose a file from:",
                    callback: "DDEFile.download_file_handler"});
            }
            else {
                DDEFile$1.download_file(vals.clicked_button_value);
            }
        }
    }

    //from https://attacomsian.com/blog/javascript-download-file
    static download (path, filename){
        // Create a new link
        const anchor = document.createElement('a');
        anchor.href = path;
        anchor.download = filename;

        // Append to the DOM
        document.body.appendChild(anchor);

        // Trigger `click` event
        anchor.click();

        // Remove element from DOM
        document.body.removeChild(anchor);
    }


    static async download_file(path, callback){
        let full_url = this.make_url(path, "/edit?edit=");
        let file_info_response = await fetch(full_url);
        if(file_info_response.ok) {
            file_info_response.type; //not so good. Returns "basic"
            //let data = await file_info_response.text()
            //see https://attacomsian.com/blog/javascript-download-file
            //const blob = new Blob([data], { type: "text/plain" });
            //from https://developer.mozilla.org/en-US/docs/Web/API/Response
            const blob = await file_info_response.blob(); //tested to work with both text files and JPG files.
            const url = URL.createObjectURL(blob);  // Create an object URL
            let last_slash = path.lastIndexOf("/");
            let file_name = path.substring(last_slash + 1);
            this.download(url, file_name);  // Download file
            URL.revokeObjectURL(url); // Release the object URL
            return this.callback_or_return(callback, true, path)
            }
        else {
            this.callback_or_error(callback,"DDEFile.download_file of: " + path + " got error: " + file_info_response.status, path);
        }
    }

    static choose_file_to_load_handler(vals){
        //out("top of choose_file_load_handler with: " + vals.clicked_button_value)
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else {
            vals.window_index;
            SW.close_window(vals.window_index);
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                DDEFile$1.choose_file({folder:   vals.clicked_button_value,
                                     title:    "Choose a file from:",
                                     callback: "DDEFile.choose_file_to_load_handler"});
            }
            else {
                DDEFile$1.load_file(vals.clicked_button_value);
                out(vals.clicked_button_value + " loaded.");
            }
        }
    }

    static async load_and_start_job_handler(vals){
        //out("top of choose_file_load_handler with: " + vals.clicked_button_value)
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else {
            vals.window_index;
            SW.close_window(vals.window_index);
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                DDEFile$1.choose_file({folder:   vals.clicked_button_value,
                    title:    "Choose a file from:",
                    callback: "DDEFile.choose_file_to_load_handler"});
            }
            else {
                let path   = (vals.clicked_button_value);
                await Job.define_and_start_job(path);
                out(vals.clicked_button_value + " loaded.");
            }
        }
    }

    static insert_file_content_handler(vals){
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else {
            vals.window_index;
            SW.close_window(vals.window_index);
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                DDEFile$1.choose_file({folder:   vals.clicked_button_value,
                    title:    "Insert file content:",
                    callback: "DDEFile.insert_file_content_handler"});
            }
            else {
                DDEFile$1.insert_file_content(vals.clicked_button_value);
            }
        }
    }

    //folder is a string like "/foo/bar" or "/foo/bar/"
    //choose file to edit, etc depending on callback
    static async choose_file({folder="dde_apps",
                              title="Choose file:",
                              x=50, y=50, width=700, height=450,
                              callback=DDEFile$1.choose_file_to_edit_handler}){
        //if(!folder.startsWith("/")) { folder = dde_apps_folder + "/" + path }
        //if(!folder.endsWith("/")) { folder = folder + "/" }
        folder = this.add_default_file_prefix_maybe(folder);
        folder = this.ensure_ending_slash(folder);
        let full_folder_info_obj = await DDEFile$1.path_info(folder);
        let full_folder = full_folder_info_obj.full_path;
        let fold_info = await this.folder_listing(folder);
        let array_of_objs = fold_info;
        let html = "<table><tr><th>Name</th><th>Size(bytes)</th><th>Last Modified Date</th><th>Permissions</th></tr>\n";
        for(let obj of array_of_objs) {
            let name = obj.name;
            if(name !== "..") {
                let is_dir = false;
                if((obj.type === "dir") && (!(name.endsWith("/")))){
                    name = name + "/";
                    is_dir = true;
                }
                let path = full_folder + name;
                let name_html = "<a href='#' name='" + path + "'>" + name + "</a>";
                let date_ms = obj.date; //might be a float, possibly undefined.
                let date_str = Utils.date_or_number_to_ymdhms(date_ms);

                let perm_str = Utils.permissions_integer_string_to_letter_string(obj.permissions, is_dir);
                let row = "<tr>" +
                          "<td>" + name_html + "</td>" +
                          "<td>" + obj.size + "</td>" +
                          "<td>" + date_str + "</td>" +
                          "<td>" + perm_str + "</td>" +
                          "</tr>\n";
                html += row;
            }
        }
        html += "</table>";
        let breadcrumbs_html = "/";
        let folds = full_folder.split("/");
        let building_fold = "/";
        for(let fold of folds){
            if(fold !== "") { //first and last elts of folds are empty strings
                building_fold += fold + "/";
                let the_html = "<a href='#'  name='" + building_fold + "'>" + fold + "</a>";
                breadcrumbs_html += the_html + "/";
            }
        }
        let device_menu = this.device_menu();

        //html = "<div style='overflow:scroll; height:400px);'>" + html + "</div>"
        show_window({title: "<span style='font-size:17px;'> " + title + " " + device_menu + " " + breadcrumbs_html + "</span>",
                     content: html,
                     x: x, y: y, width: width, height: height,
                     callback: callback});
    }

    static device_menu(){
        let html = "<select name='device_name'> <option>host</option>\n";
        for(let a_dex_name of Dexter.all_names){
            let opt_html = "<option>" + a_dex_name + "</option>\n";
            html += opt_html;
        }
        html += "</select>";
        return html
    }

//______save_as
    static choose_file_save_as_handler(vals){
        //out("top of choose_file_handler with: " + vals.clicked_button_value)
        let filename_to_save_to = vals.filename_to_save_to_id;
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else if (vals.clicked_button_value === "filename_to_save_to_id") {
            filename_to_save_to_id.focus(); //doesn't work
        }
        else if (vals.clicked_button_value === "save_as"){
            let window_index = vals.window_index;
            SW.close_window(window_index);
            let slash_maybe = (DDEFile$1.current_folder_to_save_to.endsWith("/") ? "" : "/");
            let path_to_save_to = DDEFile$1.current_folder_to_save_to + slash_maybe + filename_to_save_to; //DDEFile.this.current_folder_to_save_to ends with slash
            let content = Editor.get_javascript();
            DDEFile$1.write_file_async(path_to_save_to, content);
            Editor.after_successful_save_as(path_to_save_to);

        }
        else {
           let window_index = vals.window_index;
           SW.close_window(window_index);
           let is_folder = vals.clicked_button_value.endsWith("/");
           if(is_folder){
               let path_to_save_to = vals.clicked_button_value + filename_to_save_to;
               let save_button_label = vals.save_button_label.value;
               DDEFile$1.choose_file_save_as({path:     path_to_save_to,
                                            title:    "Save file as:",
                                            save_button_label: save_button_label,
                                            callback: "DDEFile.choose_file_save_as_handler"});
           }
           else {
             warning("Click on a folder to change the folder to save to.");
           }
        }
    }

    static async insert_file_path_handler(vals){
        //out("top of insert_file_path with: " + vals.clicked_button_value)
        let filename_to_save_to = vals.filename_to_save_to_id;
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else if (vals.clicked_button_value === "filename_to_save_to_id") {
            filename_to_save_to_id.focus(); //doesn't work
        }
        else if (vals.clicked_button_value === "save_as"){
            let window_index = vals.window_index;
            SW.close_window(window_index);
            let slash_maybe = (DDEFile$1.current_folder_to_save_to.endsWith("/") ? "" : "/");
            let path_to_save_to = DDEFile$1.current_folder_to_save_to + slash_maybe + filename_to_save_to; //DDEFile.this.current_folder_to_save_to ends with slash
            Editor.insert(path_to_save_to);
        }
        else {
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                let window_index = vals.window_index;
                SW.close_window(window_index);
                let path_to_save_to = vals.clicked_button_value + filename_to_save_to;
                DDEFile$1.choose_file_save_as({path: path_to_save_to,
                    title:    "Insert file path:",
                    callback: "DDEFile.insert_file_path_handler"});
            }
            else { //leave window up until user clicks on "save"
                let path = vals.clicked_button_value;
                let last_slash = path.lastIndexOf("/");
                let filename = path.substring(last_slash + 1);
                filename_to_save_to_id.value = filename;
            }
        }
    }

    static async insert_file_path_into_cmd_handler(vals){
        //out("top of insert_file_path with: " + vals.clicked_button_value)
        let filename_to_save_to = vals.filename_to_save_to_id;
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else if (vals.clicked_button_value === "filename_to_save_to_id") {
            filename_to_save_to_id.focus(); //doesn't work
        }
        else if (vals.clicked_button_value === "save_as"){
            let window_index = vals.window_index;
            SW.close_window(window_index);
            let slash_maybe = (DDEFile$1.current_folder_to_save_to.endsWith("/") ? "" : "/");
            let path_to_save_to = DDEFile$1.current_folder_to_save_to + slash_maybe + filename_to_save_to; //DDEFile.this.current_folder_to_save_to ends with slash
            cmd_input_id.value = path_to_save_to;
            cmd_input_id.focus();
        }
        else {
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                let window_index = vals.window_index;
                SW.close_window(window_index);
                let path_to_save_to = vals.clicked_button_value + filename_to_save_to;
                DDEFile$1.choose_file_save_as({path: path_to_save_to,
                    title:    "Insert file path:",
                    callback: "DDEFile.insert_file_path_into_cmd_handler"});
            }
            else { //leave window up until user clicks on "save"
                let path = vals.clicked_button_value;
                let last_slash = path.lastIndexOf("/");
                let filename = path.substring(last_slash + 1);
                filename_to_save_to_id.value = filename;
            }
        }
    }

    static current_path_to_save_to = null

    //folder is a string like "/foo/bar" or "/foo/bar/"
    static async choose_file_save_as({path="dde_apps" + "/junk.js",
                                      save_button_label = "Save",
                                      title="Save file as:",
                                      x=50, y=50, width=700, height=450,
                                      callback="DDEFile.choose_file_save_as_handler"} = {}){
        //if(!path.startsWith("/")) { path = dde_apps_folder + "/" + path }
        path = this.add_default_file_prefix_maybe(path);
        let last_slash = path.lastIndexOf("/");
        let folder     = path.substring(0, last_slash + 1); //we want folder to end in a slash
        let filename   = path.substring(last_slash + 1);
        let full_folder_info_obj = await DDEFile$1.path_info(folder);
        let full_folder = full_folder_info_obj.full_path;

        let fold_info     = await this.folder_listing(folder);
        let array_of_objs = fold_info;
        let html = "<table><tr><th>Name</th><th>Size(bytes)</th><th>Last Modified Date</th><th>Permissions</th></tr>\n";
        for(let obj of array_of_objs) {
            let name = obj.name;
            if(name !== "..") {
                let is_dir = false;
                if((obj.type === "dir") && (!(name.endsWith("/")))){
                    name = name + "/";
                    is_dir = true;
                }
                let path = full_folder + name;
                let name_html = "<a href='#' name='" + path + "'>" + name + "</a>";
                let date_ms = obj.date; //might be a float, possibly undefined.
                let date_str = Utils.date_or_number_to_ymdhms(date_ms);

                let perm_str = Utils.permissions_integer_string_to_letter_string(obj.permissions, is_dir);
                let row = "<tr>" +
                    "<td>" + name_html + "</td>" +
                    "<td>" + obj.size + "</td>" +
                    "<td>" + date_str + "</td>" +
                    "<td>" + perm_str + "</td>" +
                    "</tr>\n";
                html += row;
            }
        }
        html += "</table>";

        this.current_folder_to_save_to = full_folder;
        let breadcrumbs_html = "/";
        let folds = full_folder.split("/");
        let building_fold = "/";
        for(let fold of folds){
            if(fold !== "") { //first and last elts of folds are empty strings
                building_fold += fold + "/";
                let the_html = "<a href='#'  name='" + building_fold + "'>" + fold + "</a>";
                breadcrumbs_html += the_html + "/";
            }
        }
        html = "<input style='margin-left:10px' id='filename_to_save_to_id' value='" + filename + "'/>" +
               "<input type='submit' style='margin-left:10px' name='save_as' value='" + save_button_label + "' autofocus/>" +
               "<input type='hidden' style='margin-left:10px' name='save_button_label' value='" + save_button_label + "'/>" +
                html;
        show_window({title: "<span style='font-size:17px;'> " + title + " " + breadcrumbs_html + "</span>",
                     content: html,
                     x: x, y: y, width: width, height: height,
                     callback: callback,
                     init_elt_id: "filename_to_save_to_id"});
    }

    //_______OVERALL Upload File code below here_________
    static choose_file_to_upload(){
        show_window({title: "Choose file to upload",
            content: "<input id='dde_upload_file_id' type='file'/>" +
            "<p/><input name='upload_file' type='button' value='Upload'/>",
            x:100, y:100, width:300, height:120,
            callback: "DDEFile.choose_file_to_upload_handler"
        });
    }

    static choose_file_to_upload_handler(vals){
        if(vals.clicked_button_value === "close_button") ;
        else if (vals.clicked_button_value === "upload_file"){
            let first_file = dde_upload_file_id.files[0];
            let path = "dde_apps" + "/" + first_file.name;
            DDEFile$1.choose_file_save_as({path: path,
                                         title: "Upload file to:",
                                         callback: "DDEFile.file_upload_handler"});
        }
    }

    //now choose the place to upload to and do it.

    static file_upload_handler(vals){
        //out("top of file_upload_handler with: " + vals.clicked_button_value)
        let filename_to_save_to = vals.filename_to_save_to_id;
        if(vals.clicked_button_value === "close_button") ; //just let window close
        else if (vals.clicked_button_value === "filename_to_save_to_id") {
            filename_to_save_to_id.focus(); //doesn't work
        }
        else if (vals.clicked_button_value === "save_as"){
            //let window_index = vals.window_index
            //SW.close_window(window_index) //ita already closed by submit button
            let slash_maybe = (DDEFile$1.current_folder_to_save_to.endsWith("/") ? "" : "/");
            let path_to_save_to = DDEFile$1.current_folder_to_save_to + slash_maybe + filename_to_save_to; //DDEFile.this.current_folder_to_save_to ends with slash
            //let content = Editor.get_javascript()
            let file = dde_upload_file_id.files[0]; //a file is a blob
            DDEFile$1.write_file_async(path_to_save_to, file);
            Editor.after_successful_save_as(path_to_save_to);

        }
        else {
            let window_index = vals.window_index;
            SW.close_window(window_index);
            let is_folder = vals.clicked_button_value.endsWith("/");
            if(is_folder){
                let path_to_save_to = vals.clicked_button_value + filename_to_save_to;
                DDEFile$1.choose_file_save_as({path: path_to_save_to,
                                             title:    "Upload file to:",
                                             callback: "DDEFile.file_upload_handler"});
            }
            else {
                warning("Click on a folder to change the folder to save to.");
            }
        }
    }




    //________Overall Folder Upload___________

    //choose folder to upload_______

    static choose_folder_to_upload(){
        show_window({
            title: "Choose a folder to upload",
            content: "First click the <b>Choose File</b> button and select a source folder.<p/>" +
                     "<input id='dde_upload_folder_id' type='file' webkitdirectory value='Choose folder'/><p/>" +
                     "Then click <b>Upload Folder</b> and select the destination folder.<p/>" +
                     "<input name='upload_folder' type='button' value='Upload Folder'/>",
            x:100, y:100, width:450, height:190,
            callback: "DDEFile.choose_folder_to_upload_handler"
        });
    }

    static choose_folder_to_upload_handler(vals){
        if(vals.clicked_button_value === "close_button") ;
        else if (vals.clicked_button_value === "upload_folder"){
            let files = dde_upload_folder_id.files;
            let title = "Upload the files of folder to:";
            let last_folder_name;
            for(let fi of files) {  //wierdly files[0] won't work here.
                let webkit_rel_path = fi.webkitRelativePath;
                last_folder_name = webkit_rel_path.substring(0, webkit_rel_path.indexOf("/"));
                title = "Upload the files of folder <b>" + last_folder_name + "</b> to:";
                break;
            }
            let path = "dde_apps" + "/" + last_folder_name;
            DDEFile$1.choose_folder_to_upload_to({path: path,
                title:    title,
                callback: "DDEFile.choose_folder_to_upload_to_handler"});
        }
    }


    //_____choose folder to upload to_____

    static async choose_folder_to_upload_to_handler(vals){
        if(vals.clicked_button_value === "close_button") ;
        else if(vals.clicked_button_value === "upload") { //does the real work
            let files = dde_upload_folder_id.files; //a file is a blob
            let suffix = ((files.length === 1 ? "" : "s"));
            out("Uploading " + files.length + " file" + suffix + " from " + vals.orig_folder_name + "/ to " + vals.full_folder_to_present +  vals.last_folder_name + "/");
            for(let file of files){
                let path_to_save_to = vals.full_folder_to_present + vals.last_folder_name + "/" + file.name;
                await DDEFile$1.write_file_async(path_to_save_to, file);
                out("File uploaded to: " + path_to_save_to);
            }
            out(vals.orig_folder_name + "/ folder upload complete.");
        }
        else if (!vals.clicked_button_value.endsWith("/")){
            warning("You must choose a folder, not a file.\nFolder names end in slash.");
        }
        else { //navigate to new folder to upload to
            //user clicked on either a breadcrumb in the title or a folder name in the table.
            let window_index = vals.window_index;
            SW.close_window(window_index);
            let title = "Upload the files of folder to:";
            let files = dde_upload_folder_id.files;
            for(let fi of files) {  //wierdly files[0] won't work here.
                //let webkit_rel_path = fi.webkitRelativePath
                //let orig_folder_name = webkit_rel_path.substring(0, webkit_rel_path.indexOf("/"))
                let orig_folder_name = vals.orig_folder_name;
                title = "Upload files of folder " + orig_folder_name + " to:";
                break;
            }
            let last_folder_name = vals.last_folder_name;
            DDEFile$1.ensure_ending_slash(vals.clicked_button_value)
                                  + last_folder_name;
            DDEFile$1.choose_folder_to_upload_to({
                                    path:     vals.clicked_button_value + vals.last_folder_name,
                                    title:    title,
                                    callback: "DDEFile.choose_folder_to_upload_to_handler",
                                    orig_folder_name: vals.orig_folder_name});
        }
    }

    static async choose_folder_to_upload_to({path="dde_apps/",
                                             title=null,
                                             x=50, y=50, width=700, height=450,
                                             callback="DDEFile.choose_folder_to_upload_to_handler",
                                             orig_folder_name = null}){

        //if(!path.startsWith("/")) { path = dde_apps_folder + "/" + path }
        //if (!path.endsWith("/")) { path = path + "/" } //ensure last slash, needed on path below
        path = this.add_default_file_prefix_maybe(path);
        /*let last_slash = path.lastIndexOf("/")
        let first_path = path.substring(0, last_slash + 1) //inclusive trailing slash
        let last_path  = path.substring(last_slash + 1)
        let filename = path.substring(last_slash + 1)
        */

        let path_sans_last_slash = (path.endsWith("/") ? path.substring(0, (path.length - 1)) : path);
        let last_slash = path_sans_last_slash.lastIndexOf("/");
        let path_sans_last_folder_name_with_last_slash = path_sans_last_slash.substring(0, last_slash + 1);
        let last_folder_name =  path_sans_last_slash.substring(last_slash + 1);
        //this.current_folder_to_save_to = path
        if (orig_folder_name === null) { orig_folder_name = last_folder_name;}
        title = "Upload files from <b>" + orig_folder_name + "</b> to:";
        let full_folder_to_present_info_obj = await DDEFile$1.path_info(path_sans_last_folder_name_with_last_slash);
        let full_folder_to_present = full_folder_to_present_info_obj.full_path;
        let fold_info = await this.folder_listing(path_sans_last_folder_name_with_last_slash);
        let array_of_objs = fold_info;
        let html = "<table><tr><th>Name</th><th>Size(bytes)</th><th>Last Modified Date</th><th>Permissions</th></tr>\n";
        for(let obj of array_of_objs) {
            let name = obj.name;
            if(name !== "..") {
                let is_dir = false;
                if((obj.type === "dir") && (!(name.endsWith("/")))){
                    name = name + "/";
                    is_dir = true;
                }
                let name_html = "<a href='#' name='" + path_sans_last_folder_name_with_last_slash + name + "'>" + name + "</a>";
                let date_ms = obj.date; //might be a float, possibly undefined.
                let date_str = Utils.date_or_number_to_ymdhms(date_ms);

                let perm_str = Utils.permissions_integer_string_to_letter_string(obj.permissions, is_dir);
                let row = "<tr>" +
                    "<td>" + name_html + "</td>" +
                    "<td>" + obj.size + "</td>" +
                    "<td>" + date_str + "</td>" +
                    "<td>" + perm_str + "</td>" +
                    "</tr>\n";
                html += row;
            }
        }
        html += "</table>";
        let breadcrumbs_html = "/";
        let folds = full_folder_to_present.split("/");  //full_folder_to_present has slahses on front and end
        let building_fold = "/";
        for(let fold of folds){
            if(fold !== "") { //first and last elts of folds are empty strings
                building_fold += fold + "/";
                let the_html = "<a href='#'  name='" + building_fold + "'>" + fold + "</a>";
                breadcrumbs_html += the_html + "/";
            }
        }
        let upload_tooltip = "Click to upload the files to\n" + path_sans_last_folder_name_with_last_slash +
                              "\nwith a last_folder of the folder in the type-in to the left.";

        html = "<input style='margin-left:10px' name='last_folder_name' value='" + last_folder_name + "'/>" +
               "<input type='submit' title='" + upload_tooltip + "' style='margin-left:10px; margin-bottom:5px;' name='upload' value='upload'/>" +
               "<input type='hidden' name='full_folder_to_present' value='" + full_folder_to_present + "'/>" +
               "<input type='hidden' name='orig_folder_name' value='" + orig_folder_name + "'/>" +
            html;
        show_window({title: "<span style='font-size:17px;'> " + title + " " + breadcrumbs_html + "</span>",
            content: html,
            x: x, y: y, width: width, height: height,
            callback: callback});
    }
    //end overall Upload______
    static async dynamic_import(package_name, global_var_name){
        let url = 'https://cdn.skypack.dev/' + package_name;
        let result = await import(url);
        if(global_var_name) {
            if(global_var_name.includes("-")) {
                dde_error("dynamic_import passed a global_var_name of: " + global_var_name +
                    "<br/>that contains a hyphen which is invalid in JS.<br/>" +
                    "We recommend replacing hyphens with underscores.");
            }
            else {
                globalThis[global_var_name] = result;
            }
        }
        return result
    }
}
globalThis.DDEFile = DDEFile$1;

class html_db$1{
   static is_html_tag(tag){
       return html_db$1.tags.includes(tag)
   }
   static string_looks_like_html(str){
       str = str.trim();
       if(str.length == 0) { return false } //because we normally want to let th empty string be considered JS
       else if (str[0] !== "<") { return false }
       else if (!str.includes(">")) { return false }
       else {
           let length_to_examine = Math.min(15, str.length); //"blockquote.length == 10
           for(let i = 1; i < length_to_examine; i++){
               let char = str[i];
               if(!Utils.is_letter(char)){
                 let tag = str.substring(1, i);
                 tag = tag.toLowerCase();
                 if(this.is_html_tag(tag)) { return true }
                 else { return false }
               }
           }
           return false
       }
   }
   static compute_html_properties(){
     let result = [];
     for(let prop in html_db$1.html_property_tag_map){
         result.push(prop);
     }
     return result
   }

    //"border" "color" "content" "height" "width"
   static intersection_of_html_and_css_properties(){
       return Utils.intersection(html_db$1.html_properties, html_db$1.css_properties)
   }
   static is_html_property(prop_name){
       if (prop_name.startsWith("data-")) { return true }
       else { return html_db$1.html_properties.includes(prop_name) }
   }
   static tag_has_property(tag, property){
       if(property.startsWith("data-")) { return true }
       let valid_tags = html_db$1.html_property_tag_map[property];
       if (!valid_tags) { return false }
       else if (valid_tags[0] == "all") { return true }
       else { return valid_tags.includes(tag) }
   }
   static properties_for_tag(tag){ //the properties specific to this tag. Does not grab "global properties"
       let result = [];
       for(let prop_name in html_db$1.html_property_tag_map){
           let tags_for_this_prop_name = html_db$1.html_property_tag_map[prop_name];
           if(tags_for_this_prop_name.includes(tag)) { result.push(prop_name); }
       }
       return result
   }
   static is_css_property(prop_name){
        return  html_db$1.css_properties.includes(prop_name)
   }
   static tags = [
    "a",
    "abbr",
    "acronym",
    "address",
    "applet",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "basefont",
    "bdi",
    "bdo",
    "bgsound",
    "big",
    "blink",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "center",
    "cite",
    "code",
    "col",
    "colgroup",
    "command",
    "content",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "element",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "font",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "image",
    "img",
    "input",
    "ins",
    "isindex",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "listing",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "multicol",
    "nav",
    "nextid",
    "nobr",
    "noembed",
    "noframes",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "plaintext",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "rtc",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "shadow",
    "slot",
    "small",
    "source",
    "spacer",
    "span",
    "strike",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "tt",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "xmp"]

    // adapted from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes
    static html_property_tag_map = {
    accept:["form", "input"],
    "accept-charset":["form"],
    accesskey:["all"],
    action:["form"],
    align:["applet", "caption", "col", "colgroup", "hr", "iframe", "img", "table", "tbody", "td", "tfoot", "th", "thead", "tr"],
    alt:["applet", "area", "img", "input"],
    async:["script"],
    autocomplete:["form", "input"],
    autofocus:["button", "input", "keygen", "select", "textarea"],
    autoplay:["audio", "video"],
    bgcolor:["body", "col", "colgroup", "marquee", "table", "tbody", "tfoot", "td", "th", "tr"],
    border:["img", "object", "table"],
    buffered:["audio", "video"],
    challenge:["keygen"],
    charset	:["meta", "script"],
    checked	:["command", "input"],
    cite:["blockquote", "del", "ins", "q"],
    class:["all"],
    code:["applet"],
    codebase:["applet"],
    color:["basefont", "font", "hr"],
    cols:["textarea"],
    colspan:["td", "th"],
    content:["meta"],
    contenteditable:["all"],
    contextmenu:["all"],
    controls:["audio", "video"],
    coords:["area"],
    crossorigin:["audio", "img", "link", "script", "video"],
    data:["object"],
    "data-*":["all"],
    datetime:["del", "ins", "time"],
    default:["track"],
    defer:["script"],
    dir:["all"],
    dirname	:["input", "textarea"],
    disabled:["button", "command", "fieldset", "input", "keygen", "optgroup", "option", "select", "textarea"],
    download:["a", "area"],
    draggable:["all"],
    dropzone:["all"],
    enctype:["form"],
    for:["label", "output"],
    form:["button", "fieldset", "input", "keygen", "label", "meter", "object", "output", "progress", "select", "textarea"],
    formaction:["input", "button"],
    headers	:["td", "th"],
    height:["canvas", "embed", "iframe", "img", "input", "object", "video"],
    hidden:["all"],
    high:["meter"],
    href:["a", "area", "base", "link"],
    hreflang:["a", "area", "link"],
    "http-equiv":["meta"],
    icon:["command"],
    id:["all"],
    integrity:["link", "script"],
    ismap:["img"],
    itemprop:["all"],
    keytype:["keygen"],
    kind:["track"],
    label:["track"],
    lang:["all"],
    language:["script"],
    list:["input"],
    loop:["audio", "bgsound", "marquee", "video"],
    low	:["meter"],
    manifest:["html"],
    max:["input", "meter", "progress"],
    maxlength:["input", "textarea"],
    minlength:["input", "textarea"],
    media:["a", "area", "link", "source", "style"],
    method:["form"],
    min:["input", "meter"],
    multiple:["input", "select"],
    muted:["audio", "video"],
    name:["button", "form", "fieldset", "iframe", "input", "keygen", "object", "output", "select", "textarea", "map", "meta", "param"],
    novalidate:["form"],

    onabort: ["audio", "embed", "img", "object", "video"],
    onafterprint: ["body"],
    onbeforeprint: ["body"],
    onbeforeunload: ["body"],
    onblur: ["all"], //all visible elts
    oncanplay: ["audio", "embed", "object", "video"],	//Script to be run when a file is ready to start playing (when it has buffered enough to begin)
    oncanplaythrough: ["audio", "video"], //	Script to be run when a file can be played all the way to the end without pausing for buffering
    onchange: ["all"], //All visible elements.	Script to be run when the value of the element is changed
    onclick: ["all"], //All visible elements.	Script to be run when the element is being clicked
    oncontextmenu: ["all"], //All visible elements.	Script to be run when a context menu is triggered
    oncopy: ["all"], //All visible elements.	Script to be run when the content of the element is being copied
    oncuechange: ["track"], //	Script to be run when the cue changes in a <track> element
    oncut: ["all"], //All visible elements.	Script to be run when the content of the element is being cut
    ondblclick: ["all"], //All visible elements.	Script to be run when the element is being double-clicked
    ondrag: ["all"], //All visible elements.	Script to be run when the element is being dragged
    ondragend: ["all"], //All visible elements.	Script to be run at the end of a drag operation
    ondragenter: ["all"], //All visible elements.	Script to be run when an element has been dragged to a valid drop target
    ondragleave: ["all"], //All visible elements.	Script to be run when an element leaves a valid drop target
    ondragover: ["all"], //All visible elements.	Script to be run when an element is being dragged over a valid drop target
    ondragstart: ["all"], //All visible elements.	Script to be run at the start of a drag operation
    ondrop: ["all"], //All visible elements.	Script to be run when dragged element is being dropped
    ondurationchange: ["audio", "video"],	//Script to be run when the length of the media changes
    onemptied: ["audio", "video"],	//Script to be run when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects)
    onended: ["audio", "video"],	//Script to be run when the media has reach the end (a useful event for messages like "thanks for listening")
    onerror: ["audio", "body", "embed", "img", "object", "script", "style", "video"], //	Script to be run when an error occurs
    onfocus: ["all"], 	//All visible elements.	Script to be run when the element gets focus
    onhashchange: ["body"], //Script to be run when there has been changes to the anchor part of the a URL
    oninput: ["all"], //	All visible elements.	Script to be run when the element gets user input
    oninvalid: ["all"], //	All visible elements.	Script to be run when the element is invalid
    onkeydown: ["all"], //	All visible elements.	Script to be run when a user is pressing a key
    onkeypress: ["all"], //	All visible elements.	Script to be run when a user presses a key
    onkeyup: ["all"], //	All visible elements.	Script to be run when a user releases a key
    onload: ["body", "iframe", "img", "input", "link", "script", "style"], //	Script to be run when the element is finished loading
    onloadeddata: ["audio", "video"],	//Script to be run when media data is loaded
    onloadedmetadata: ["audio", "video"],	//Script to be run when meta data (like dimensions and duration) are loaded
    onloadstart: ["audio", "video"],	//Script to be run just as the file begins to load before anything is actually loaded
    onmousedown: ["all"], //	All visible elements.	Script to be run when a mouse button is pressed down on an element
    onmousemove: ["all"], //	All visible elements.	Script to be run as long as the  mouse pointer is moving over an element
    onmouseout: ["all"], //	All visible elements.	Script to be run when a mouse pointer moves out of an element
    onmouseover: ["all"], //	All visible elements.	Script to be run when a mouse pointer moves over an element
    onmouseup: ["all"], //	All visible elements.	Script to be run when a mouse button is released over an element
    onmousewheel: ["all"], //	All visible elements.	Script to be run when a mouse wheel is being scrolled over an element
    onoffline: ["body"], //Script to be run when the browser starts to work offline
    ononline: ["body"], //Script to be run when the browser starts to work online
    onpagehide: ["body"], //Script to be run when a user navigates away from a page
    onpageshow: ["body"], //Script to be run when a user navigates to a page
    onpaste: ["all"], //	All visible elements.	Script to be run when the user pastes some content in an element
    onpause: ["audio", "video"],	//Script to be run when the media is paused either by the user or programmatically
    onplay: ["audio", "video"],	//Script to be run when the media is ready to start playing
    onplaying: ["audio", "video"],	//Script to be run when the media actually has started playing.
    onpopstate: ["body"], //Script to be run when the window's history changes.
    onprogress: ["audio", "video"],	//Script to be run when the browser is in the process of getting the media data
    onratechange: ["audio", "video"],	//Script to be run each time the playback rate changes (like when a user switches to a slow motion or fast forward mode).
    onreset: ["form"], //	Script to be run when a reset button in a form is clicked.
    onresize: ["body"], //Script to be run when the browser window is being resized.
    onscroll: ["all"], //Script to be run when an element's scrollbar is being scrolled
    onsearch: ["input"], //	Script to be run when the user writes something in a search field (for <input="search">)
    onseeked: ["audio", "video"],	//Script to be run when the seeking attribute is set to false indicating that seeking has ended
    onseeking: ["audio", "video"],	//Script to be run when the seeking attribute is set to true indicating that seeking is active
    onselect: ["all"], //Script to be run when the element gets selected
    onshow: ["menu"], //	Script to be run when a <menu> element is shown as a context menu
    onstalled: ["audio", "video"],	//Script to be run when the browser is unable to fetch the media data for whatever reason
    onstorage: ["body"], //Script to be run when a Web Storage area is updated
    onsubmit: ["form"], //	Script to be run when a form is submitted
    onsuspend: ["audio", "video"],	//Script to be run when fetching the media data is stopped before it is completely loaded for whatever reason
    ontimeupdate: ["audio", "video"],	//Script to be run when the playing position has changed (like when the user fast forwards to a different point in the media)
    ontoggle: ["details"], //	Script to be run when the user opens or closes the <details> element
    onunload: ["body"], //Script to be run when a page has unloaded (or the browser window has been closed)
    onvolumechange: ["audio", "video"],	//Script to be run each time the volume of a video/audio has been changed
    onwaiting: ["audio", "video"],	//Script to be run when the media has paused but is expected to resume (like when the media pauses to buffer more data)
    onwheel: ["all"],

    open:["details"],
    optimum:["meter"],
    pattern:["input"],
    ping:["a", "area"],
    placeholder:["input", "textarea"],
    poster:["video"],
    preload:["audio", "video"],
    radiogroup:["command"],
    readonly:["input", "textarea"],
    rel:["a", "area", "link"],
    required:["input", "select", "textarea"],
    reversed:["ol"],
    rows:["textarea"],
    rowspan:["td", "th"],
    sandbox:["iframe"],
    scope:["th"],
    scoped:["style"],
    seamless:["iframe"],
    selected:["option"],
    shape:["a", "area"],
    size:["input", "select"],
    sizes:["link", "img", "source"],
    slot:["all"],
    span:["col", "colgroup"],
    spellcheck:["all"],
    src:["audio", "embed", "iframe", "img", "input", "script", "source", "track", "video"],
    srcdoc:["iframe"],
    srclang:["track"],
    srcset:["img"],
    start:["ol"],
    step:["input"],
    style:["all"],
    summary:["table"],
    tabindex:["all"],
    target:["a", "area", "base", "form"],
    title:["all"],
    type:["button", "input", "command", "embed", "object", "script", "source", "style", "menu"],
    usemap:["img", "input", "object"],
    value:["button", "option", "input", "li", "meter", "progress", "param"],
    width:["canvas", "embed", "iframe", "img", "input", "object", "video"],
    wrap:["textarea"]
    }

    static css_properties = [
    "all",
    "background", "background-attachment", "background-clip", "background-color",
    "background-image", "background-origin", "background-position", "background-repeat",
    "background-size",
    "border", "border-bottom", "border-bottom-color",
    "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-style",
    "border-bottom-width", "border-collapse", "border-color", "border-image",
    "border-image-outset", "border-image-repeat", "border-image-slice", "border-image-source",
    "border-image-width", "border-left", "border-left-color", "border-left-style",
    "border-left-width", "border-radius", "border-right", "border-right-color",
    "border-right-style", "border-right-width", "border-spacing", "border-style", "border-top",
    "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-style",
    "border-top-width", "border-width",
    "bottom", "box-shadow",
    "caption-side", "clear",
    "clip", "color", "content", "counter-increment", "counter-reset", "cursor",
    "direction", "display", "empty-cells",
    "float", "font", "font-family", "font-size",
    "font-size-adjust", "font-stretch", "font-style", "font-synthesis", "font-variant",
    "font-weight",
    "height",
    "left", "letter-spacing", "line-height",
    "list-style", "list-style-image", "list-style-position", "list-style-type",
    "margin", "margin-bottom", "margin-left", "margin-right", "margin-top",
    "max-height", "max-width", "min-height", "min-width",
    "opacity", "orphans",
    "outline", "outline-color", "outline-style", "outline-width", "overflow", "overflow-x", "overflow-y",
    "padding", "padding-bottom", "padding-left", "padding-right", "padding-top",
    "page-break-after", "page-break-before", "page-break-inside", "position",
    "quotes",  "right",
    "table-layout", "text-align", "text-decoration", "text-indent", "text-transform",
    "top", "transform", "transform-origin", "transition", "transition-delay",
    "transition-duration", "transition-property", "transition-timing-function",
    "unicode-bidi", "vertical-align", "visibility",
    "white-space", "widows", "width", "word-spacing",
    "z-index"
    ]


//from https://davidwalsh.name/convert-html-stings-dom-nodes
//innerHTML can be a string, a Node (elt) or an array of Nodes

//only uses the first top level element
    static html_to_dom_elt(html, use_first_top_level_elemment_only=true){
        let frag = document.createRange().createContextualFragment(html);
        if (use_first_top_level_elemment_only) {
            return frag.firstChild
        }
        else { return frag }
    }

    static replace_dom_elt(old_elt, new_elt){
        old_elt.parentNode.replaceChild(new_elt, old_elt);
    }


    static insert_elt_before(new_elt, old_elt){
        old_elt.parentNode.insertBefore(new_elt, old_elt);
    }

//works even when old_elt is the only elt in its parent.
    static insert_elt_after(new_elt, old_elt){
        old_elt.parentNode.insertBefore(new_elt, old_elt.nextSibling);
    }

    static remove_dom_elt(elt){ elt.parentNode.removeChild(elt); }

    static is_dom_elt(obj){
      return obj instanceof HTMLElement
    }

    static is_dom_elt_ancestor(possible_ancestor, starting_elt){
        if (possible_ancestor == null) { return false}
        else if(possible_ancestor == starting_elt) { return true }
        else { return html_db$1.is_dom_elt_ancestor(possible_ancestor.parentNode, starting_elt) }
    }

    //find the first child of elt that has class
    static dom_elt_child_of_class(elt, a_class){
       for(let kid of elt.children){
           if (kid.classList.contains(a_class)) { return kid }
       }
       return null
    }

    static dom_elt_children_of_class(elt, a_class){
        let result = [];
        for(let kid of elt.children){
            if (kid.classList.contains(a_class)) { result.push(kid); }
        }
        return result
    }

    //focuses on the first elt of a_tag name that it finds.
    //exludes elt in the returned results.
    //searchers all descendents of elt.
    //casing of a_tag doesn't matter.
    static focus_on_descendant_with_tag(elt, a_tag="input"){
        let sub_elts = elt.getElementsByTagName(a_tag);
        if(sub_elts.length > 0) {
          sub_elts[0].focus();
        }
    }

    static dom_elt_descendant_of_classes(elt, classes){
        if(classes.length == 0) { shouldnt("html_db.dom_elt_descendant_of_classes passed empty classes array."); }
        else {
            let next_class = classes[0];
            let result_maybe = html_db$1.dom_elt_child_of_class(elt, next_class);
            if(!result_maybe) {
                error("html_db.dom_elt_descendant_of_classes passed a class: " + next_class +
                      "that is not present in elt: " + elt);
            }
            else if(classes.length == 1) { return result_maybe }
            else { return html_db$1.dom_elt_descendant_of_classes(result_maybe, classes.slice(1)) }
        }
    }


//if elt has a_class. return the elt, else go up the parentNode until you find one
//or, if not, return null
    static closest_ancestor_of_class(elt, a_class){
        if (elt == null) { return null }
        else if(elt.classList && elt.classList.contains(a_class)) { return elt }
        else if (elt.parentNode) { return html_db$1.closest_ancestor_of_class(elt.parentNode, a_class) }
        else return null
    }


//possibly includes elt itself.
    static ancestors_of_class(elt, a_class){
        let result = [];
        while(true) {
            if (elt == null) { break }
            else if(elt.classList && elt.classList.contains(a_class)) { result.push(elt); }
            elt = elt.parentNode;
        }
        return result
    }
} //end html_db class

globalThis.html_db = html_db$1;
html_db$1.html_properties = html_db$1.compute_html_properties();


//documented in dde3
function make_html(tag, properties, innerHTML="", ending="auto", error=false){
    let tag_is_valid;
    let has_css = false;
    if(html_db$1.is_html_tag(tag)){ tag_is_valid = true; }
    else {
        tag_is_valid = false;
        warning_or_error("make_html called with tag: " + tag +
            "<br/> that's not in DDE's database.",
            error);
    }
    let html_props = {};
    let css_props  = {};
    let direct_html_props = null;  //this might get set to a string OR a js literal obj.
    let direct_css_props  = null;
    for (let prop_name in properties){
        if      (prop_name == "html_properties") { direct_html_props = properties["html_properties"]; }
        else if (prop_name == "style")           { direct_css_props  = properties["style"]; }
        else if(tag_is_valid) {
            if(html_db$1.is_html_property(prop_name)) { //this clause checks for css overlap
                let tag_has_prop = html_db$1.tag_has_property(tag, prop_name);
                if(html_db$1.is_css_property(prop_name)) { //uh-oh, valid html and css prop but ...
                    if(tag_has_prop) { //double uh-oh, this prop is good for this tag
                        warning_or_error("make_html called with tag: " + tag +
                            " and property: " + prop_name +
                            " which is valid HTML and css. ", error);
                        //didn't error so:
                        warning(prop_name + " being used as CSS property. " +
                            "<br/> Stick it in 'html_properties' to force it to be HTML" +
                            "<br/> or put it in 'style' property to get rid of this warning."
                        );
                        css_props[prop_name] = properties[prop_name];
                    }
                    else { //ok prop is not an html prop for this tag so css wins, no error
                        css_props[prop_name] = properties[prop_name];
                    }
                }
                else { html_props[prop_name] = properties[prop_name]; } //no conflict with css
            }
            else if(html_db$1.is_css_property(prop_name)) {
                css_props[prop_name] = properties[prop_name];
            }
            else {
                warning_or_error("make_html called with tag of: " + tag +
                    " with a property of: " + prop_name +
                    " that is not in DDE's database.", error);
                warning(prop_name + " treated as HTML property." +
                    "<br/> Stick it in the 'style' property to force it to be CSS." ); //if the above doesn't error, give more info
                html_props[prop_name] = properties[prop_name];
            }
        }
        else { //invalid html tag which either caused an error before here or has already been warned against
            //so we're skating on thin ice. Prefer HTML here. User has already been warned that
            //tag is unknown, so no fancy error messages.
            if(html_db$1.is_css_property(prop_name))  { //if a prop is both a css and and html prop, make it to a css prop
                css_props[prop_name] = properties[prop_name];
            }
            else if     (html_db$1.is_html_property(prop_name)) { html_props[prop_name] = properties[prop_name]; }
            else {
                warning_or_error("make_html called with tag of: " + tag +
                    " with a property of: " + prop_name +
                    " that is not in DDE's database.", error);
                warning(prop_name + " treated as an HTML property." +
                    "<br/> Stick it in the 'style' property to force it to be CSS.");
                html_props[prop_name] = properties[prop_name];
            }
        }
    }
    //tag validated, html_props & css_props validated and filled in, now use them to
    //generate the html
    let result = "<" + tag;
    if (direct_html_props){
        if (typeof(direct_html_props) == "string"){
            result += " " + direct_html_props;
        }
        else {
            for (let attr in direct_html_props){
                result += " " + attr + '="' + direct_html_props[attr] + '"';
            }
        }
    }
    for (let attr in html_props){
        let val = html_props[attr];
        if ((typeof(val) == "string") && val.includes('"')) {
            val = Utils.replace_substrings(val, '"', '\"');
        }
        result += " " + attr + '="' + val + '"';
    }
    if (direct_css_props) {
        result += ' style="';
        if (typeof(direct_css_props) == "string"){
            result += direct_css_props;
            has_css = true;
        }
        else {
            for (let attr in direct_css_props){
                result += (has_css ? " ": "") + attr + ':' + direct_css_props[attr] + ';';
                has_css = true;
            }
        }
        has_css = true;
    }
    for(let attr in css_props){
        if (!has_css) {
            result += ' style="';  //before first style prop
        }
        result += (has_css ? " ": "") + attr + ":" + css_props[attr] + ";"; //avoid extra space at end
        has_css = true;
    }
    if (ending != "none") {
        if (has_css) { result += '"'; }
    }
    if      (ending == "none") ;
    else if (ending == "end_style_only") ; //already done above in (ending != "none")
    else if (ending == "end_properties_only") {
        if (innerHTML != "") { dde_error('make_html called with ending="end_properties_only" but with a non-empty innerHTML.'); }
        else { result += ">"; }
    }
    else if (ending == "short") {
        if (innerHTML != "") { dde_error('make_html called with ending="short" but with a non-empty innerHTML.'); }
        else { result += "/>"; }
    }
    else if (ending == "long") { //works whether or not innerHTML exists
        result += ">" + innerHTML + "</" + tag + ">";
    }
    else if (ending == "auto") { //long or short depending on innerHTML presence.
        if (innerHTML == "") { result += "/>"; }
        else { result += ">" + innerHTML + "</" + tag + ">";}
    }
    else { shouldnt("make_html got invalid ending: " + ending); }
    return result
}

globalThis.make_html = make_html;


    /* from stack overflow
    function htmlToElement(html) {
        var template = document.createElement('template');
        html = html.trim(); // Never return a text node of whitespace as the result
        template.innerHTML = html;
        return template.content.firstChild;
    }
    */
//documented in dde3
function make_dom_elt(tag, properties, innerHTML="", ending="auto", error=false){
    let html_string = make_html(tag, properties, "", ending, error);
    let result = html_db$1.html_to_dom_elt(html_string);
    if(typeof(innerHTML) == "string")   { result.innerHTML = innerHTML;  }
    else if (innerHTML instanceof Node) { result.appendChild(innerHTML); }
    else if (Array.isArray(innerHTML)) {
        for(elt of innerHTML){
            result.appendChild(elt);
        }
    }
    return result
}
globalThis.make_dom_elt = make_dom_elt;

//import {Instruction} from "./instruction.js" //now global

function to_source_code$1({value, indent="", function_names=false, newObject_paths=false,
                        job_names=false, robot_names=false,
                        depth_limit=100, depth=0, job_orig_args=false,
                        one_line_per_array_elt=false, array_elt_max_chars=60} = {}){
        //console.log("Object.isNewObject: " + Object.isNewObject)
        if(globalThis.Ammo && (value === Ammo)) { return "Ammo" } //if I let this go, it causes some infinite recursion which also happens in inspect
        if (!((typeof(arguments[0]) == "object") && arguments[0].hasOwnProperty("value"))){
            value = arguments[0]; //so we can just do calls of to_source_code("stuf")
        }
        if (depth > depth_limit) { return "***" } //stops infinite recursion in circular structures.
        //console.log("to_source_code before big if")
        if      (value === undefined)        { return "undefined" }
        else if (value === null)             { return "null" } //since typeof(null) == "object", this must be before the typeof(value) == "object" clause
        else if (value === true)             { return "true"}
        else if (value === false)            { return "false"}
        else if (typeof(value) === "number") { return value.toString() } //works for NaN too, no need to use (isNaN(value)) { result = "NaN" } //note the check for number before checking isNanN is necessary because JS wasn't designed.
        else if (typeof(value) === "symbol") { return value.toString() }
        else if (typeof(value) === "string") {
            if (value.includes("\n") ||
                (value.includes("'") && value.includes('"')))
                                             { return indent + "`" + value + "`" }
            else if  (value.includes('"'))   { return indent + "'" + value + "'" }
            else                             { return indent + '"' + value + '"' }
        }
        else if (value instanceof Date)      { return value.toString() }
        else if (typeof(value) == "function"){
             let new_args = {value: value, indent: indent};
             return to_source_code_function(new_args)
        }
        else if (Object.isNewObject(value)) {
            //console.log("in to_source_code isNewObject")
            if (newObject_paths) { return value.objectPath }
            else                 { return value.sourceCode() }
        }
        else if (Instruction.is_oplet_array(value)){
            return Instruction.oplet_array_to_source_code(value)
        }
        else if (Utils.typed_array_name(value)){ //any type of array
            //console.log("calling to_source_code_array")
            return to_source_code_array({value: value, one_line_per_array_elt: one_line_per_array_elt, array_elt_max_chars: array_elt_max_chars})
        }
        //Job, Robot, Instruction, Duration
        else if (value.to_source_code){
            let new_args = {value: value, indent: indent, depth: depth + 1}; //use depth because we can potentially have infinite recursion here.
            if (value.hasOwnProperty("job_orig_args")) {
                new_args.job_orig_args = value.job_orig_args; //If true, src generated is from the orig props, not
                //the current instance props.  current instance props is the default.
            }
            return value.to_source_code(new_args)
        }
        else if (value === globalThis)     { return "globalThis"  } //too many weird values in there and too slow so punt.
        else if (globalThis.Picture && Picture.is_mat(value)){ //we can't and probably shouldn't attempt to print out a readable mat here,
                                          //so just print a string to let a user know what it is in the inspector
                                          //without this, bad bug happens when inspecting Jobs that have taken a picture and
                                          //put it in a user_data variable
            let result = "Mat (picture) of: width: " +  Picture.mat_width(value) +
                         " height: "  + Picture.mat_height(value);
            return result
        }
        else if (typeof(value) == "object"){//beware if we didn't catch arrays above this would hit
                                            //assumes at this point we just have a lit obj.
            return to_source_code_lit_obj({value: value, indent: indent}) //arguments[0]
        }
        else { shouldnt("to_source_code passed: " + value + " which is not a handled type."); }
}

function to_source_code_array(args){
    let value = args.value;
    if (Instruction.is_oplet_array(value)) {
        return to_source_code_instruction_array(args)
    }
    let chars_added_since_last_newline = 0;
    let result = "[";
    let len = value.length;
    let max_chars = (args.array_elt_max_chars ? args.array_elt_max_chars : 60);
    for (let i = 0; i < len; i++){ //don't use "for ... in here as it gets some wrong stuff
        let prefix = "";
        let val = value[i];
        let val_str = to_source_code$1({value: val, array_elt_max_chars: max_chars});
        let comma_maybe = ((i < (len - 1)) ? "," : "");
        let newline_or_space_suffix = ((i == (len - 1))? "" : " ");
        let str_and_suffix_len = val_str.length;
        if (args.one_line_per_array_elt) { newline_or_space_suffix = "\n"; }
        else if (chars_added_since_last_newline > max_chars) {
            prefix = "\n";
            chars_added_since_last_newline = str_and_suffix_len;
        }
        else if ((chars_added_since_last_newline == 0) && (val_str.length > max_chars)) {
            chars_added_since_last_newline = str_and_suffix_len; //add it in the usual way
        }
        else if ((chars_added_since_last_newline + str_and_suffix_len) > args.array_elt_max_chars) {
            prefix = "\n";
            chars_added_since_last_newline = str_and_suffix_len;
        }
        else { chars_added_since_last_newline += str_and_suffix_len; }
        //if (Array.isArray(elt_val)) sep = sep + "<br/>" //put each sub-array on its own line
        result += prefix + val_str + comma_maybe + newline_or_space_suffix;
    }
    result += "]";
    return result
}

/* errors on at least some instruction arrays .function to_source_code_instruction_array(args){
    let inst_array = args.value
    let the_indent = ((args.indent === undefined) ? "" : args.indent)
    let result = the_indent + "make_ins("
    let prop_args = Object.assign({}, args) //Object.assign({}, args)
    prop_args.indent = ""
    for(let prop_index in inst_array) {
        prop_args.value = inst_array[prop_index]
        let prop_src = to_source_code(prop_args)
        let suffix = ((prop_index == (inst_array.length - 1)) ? "" : ", ")
        result += prop_src + suffix
    }
    result += ")"
    return result
}*/

function to_source_code_instruction_array(args){
    let inst_array = args.value;
    let the_indent = ((args.indent === undefined) ? "" : args.indent);
    let result = the_indent + "make_ins(";
    let start_array_index = Instruction.INSTRUCTION_TYPE;
    for(let i = start_array_index; i <  inst_array.length; i++) {
        let val = inst_array[i];
        let val_src = to_source_code$1(val);
        let suffix = ((i == (inst_array.length - 1)) ? "" : ", ");
        result += val_src + suffix;
    }
    result += ")";
    return result
}

function to_source_code_lit_obj(args){
        let value = args.value;
        let indent = args.indent;
        if (!indent) { indent = ""; }
        let result = indent + "{";
        let prop_names = Object.getOwnPropertyNames(value); //long objects like cv cause problems
        for (var prop_index = 0; prop_index < prop_names.length; prop_index++) {
            let prop_name   = prop_names[prop_index];
            let prop_val    = value[prop_name];
            let prop_args   = Object.assign({}, args); //Object.assign({}, args) //copy the args
            prop_args.value = prop_val;
            prop_args.indent = ""; //((prop_index == 0) ? "" : (indent + " "))
            let prop_indent = ((prop_index == 0) ? "" : (indent + " "));
            let quote_char = "";
            if (prop_name.indexOf(" ") != -1){
                quote_char = '"';
                if (prop_name.indexOf('"') != -1) { prop_name = Utils.replace_substrings(prop_name, '"',  '\\"'); }
            }
            let trailing_comma = ((prop_index == (prop_names.length - 1)) ? "" : ", ");
            result += prop_indent + quote_char + prop_name + quote_char + ": " + to_source_code$1(prop_args) +
                      trailing_comma + "\n";
        }
        result += indent + "}";
        return result
}

function to_source_code_function(args){
    let fn_name = Utils.function_name(args.value);
    if (args.function_names && (fn_name !== null) && (fn_name !== "")) {
        return args.indent + fn_name
    }
    else {
        let src = args.value.toString();
        return Utils.replace_substrings(src, "\n", args.indent + "\n")
    }
}

globalThis.to_source_code = to_source_code$1;

class Duration$1 {
    //DO NOT default minutes to anything as we need null there so that the first arg will be interprested as ms
    constructor(string_or_hours=0, minutes=0, seconds=0, milliseconds=0){ //First arg can be "12:34" for hours:mins,
        // "12:34:56" for hours:mins:secs,
        // or 123 for hours
        if (typeof(string_or_hours) == "string") { //presume "12:34"(hours and mins) or "12:34:56" hours, mins, secs
            if (is_hour_colon_minute(string_or_hours) || is_hour_colon_minute_colon_second(string_or_hours)){
                var [h, m, s] = string_or_hours.split(":");
                var secs = parseInt(h) * 60 * 60;
                secs += parseInt(m) * 60;
                if (s) { secs += parseInt(s); }
                this.milliseconds = secs * 1000; //to get milliseconds
                return
            }
        }
        else if (typeof(string_or_hours) == "number"){
            let secs = (string_or_hours * 60 * 60) + (minutes * 60) + seconds;
            this.milliseconds = (secs * 1000) + milliseconds;
            return
        }
        throw new Error("new Duration passed arg: " + string_or_hours + " which is not a number or a string of the format 12:34 or 12:34:56 ")
    }
    toString() { return this.to_source_code }

    to_source_code(){
        let total_ms  = this.milliseconds;
        let ms        = total_ms  % 1000;
        let total_sec = (total_ms - ms)   / 1000;
        let sec       = total_sec % 60;
        let total_min = (total_sec - sec) / 60;
        let min       = total_min % 60;
        let hour      = (total_min - min) / 60;
        return "new Duration(" + hour + ", " + min + ", " + sec + ", " + ms + ")"
    }

    to_seconds(){ return this.milliseconds / 1000 }
}

globalThis.Duration = Duration$1;

// the client
class Monitor {
     static port = 3002 //the monitor port for a Dexter. also used by MonitorServer

    //static default_domain = "192.168.1.142"  //not now used but *could( be used in
    //resolve_domain a la else if (domain_maybe === undefined) { return default_domain }

     static resolve_domain(domain_maybe){
        if     (typeof(domain_maybe) === "string") { return domain_maybe }
        else if(domain_maybe instanceof Dexter)    { return domain_maybe.ip_address }
        else if(domain_maybe instanceof WebSocket) {
            let the_url = domain_maybe.url; //something like "ws://localhost:3002/"
            let colon_pos = the_url.indexOf(":", 5);
            let domain = the_url.substring(5, colon_pos);
            return domain
        }
        else { dde_error("resolve_domain passsed: " + domain_maybe +
            " which is not a domain, Dexter instance or Websocket instance.");
        }
     }

     static domain_to_websocket_map = {} //contains only OPEN websockets

     //domain is the domain of the Job Engine you want to  monitor.
     //It can be "localhost", "102.168.1.142" (and friends), Dexter.dexter0 (or any Dexter instance) or a websocket thats in domain_to_websocket_map
     static domain_to_websocket(domain=Dexter.default){
         domain = this.resolve_domain(domain);
         return this.domain_to_websocket_map[domain]
     }


     static set_domain_to_websocket(domain=Dexter.default, websocket){
         domain = this.resolve_domain(domain);
         this.domain_to_websocket_map[domain] = websocket;
     }

    static delete_domain(domain=Dexter.default){
        domain = this.resolve_domain(domain);
        delete this.domain_to_websocket_map[domain];
    }

     //domain can be a string:  use "localhost" for the simulator running on your pc,
     //or something like "192.168.1.142"
     static ws_url(domain=Dexter.default){
         domain = this.resolve_domain(domain);
         return  "ws://" + domain + ":" + this.port
     }
     
	//browser side code (uses server, doesn't create it)
    //if source is passed, we're going to do a SEND after the init opens the websocket
     static init(domain="localhost", source, callback, period){
         domain = this.resolve_domain(domain);
         let the_state = this.state(domain); //returns one of "CONNECTING", "OPEN", "CLOSING", "CLOSED", "UNKOWN STATE"
         if(["CONNECTING", "OPEN"].includes(the_state)) {
             let warning_mess = "Monitor.init got state of: " + the_state + " so doesn't try to open the websocket again.";
             console.log(warning_mess);
             out(warning_mess);
         }
         else {
             let the_url        = this.ws_url(domain);
             this.send_source   = source;    //ok if undefined
             this.send_callback = callback;  //ok if undefined
             this.send_period   = period;    //ok if undefined
             let status_mess    = "Monitor.init opening websocket for url: " + the_url;
             console.log(status_mess);
             out(status_mess);
             let websocket = new WebSocket(the_url); //WebSocket defined in chrome browser

             websocket.onopen = function (evt) {
                 out("Monitor for: " + websocket.url + " websocket opened."); //onOpen(evt)
                 Monitor.set_domain_to_websocket(domain, websocket);
                 if (Monitor.send_source) {
                     let source = Monitor.send_source;
                     let callback = Monitor.send_callback;
                     let period = Monitor.send_period;
                     Monitor.send_source = undefined;
                     Monitor.send_callback = undefined;
                     Monitor.send_period = undefined;
                     Monitor.send_aux(websocket, source, callback, period);
                 }
             };
         }
		
         websocket.onclose = function(evt) {
             Monitor.delete_domain(websocket);
             out("Monitor for: " + websocket.url + " websocket closed."); //onClose(evt)
         };
		
         websocket.onmessage = function(evt) {
             let data_str = evt.data;
             out("Monitor for: " + websocket.url + " onmessage got: " + data_str, undefined, true);
             try {
                 let json_data = JSON.parse(data_str);
                 let callback_src = json_data.callback;
                 if(callback_src) {
                     if(callback_src.startsWith("function(")){
                         callback_src = "(" + callback_src + ")";
                     }
                     let callback_fn = globalThis.eval(callback_src);
                     let value       = globalThis.eval(json_data.value);
                     //out("Monitor for: " + websocket.url + " got value of: " + value)
                     let result = callback_fn.call(null, value, websocket, json_data); //usually done for side effect.
                 }
                 //delete the below?
                /*
                 if (json_data.type === "show_measured_angles") {
                     SimUtils.render_joints(json_data.value)
                 } else if (json_data.type === "evaled") {
                     let new_val
                     if (json_data.callback) {
                         let response_str_to_eval = json_data.callback + "(" + json_data.value + ")"
                         try {
                             new_val = globalThis.eval(response_str_to_eval)
                         } catch (err) {
                             dde_err("Monitor evaled callback errored with: " + err.message)
                         }
                     } else {
                         new_val = globalThis.eval(json_data.value)
                     }
                     out("Monitor got evaled of: " + new_val)
                 } else if (json_data.type === "out") {
                     out(json_data.value)
                 } */
             }
             catch(err){
                 dde_error("Monitor for: " + websocket.url +
                           " got error message back from MonitorServer of: " + err.message);
             }
         };
		
         websocket.onerror = function(evt) {
            dde_error("Monitor for: " + websocket.url + " errored probably because no Job Engine running at that url.");
         };
      } //end of init

      static close(domain){
            let websocket = this.domain_to_websocket(domain);
            websocket.close();
            this.delete_domain(domain);
      }

      static readyStateInt_to_string(int){
            let states = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
            if(int >= states.length) { return "UNKNOWN STATE" }
            else                     { return states[int] }
      }

      //returns one of //returns one of "CONNECTING", "OPEN", "CLOSING", "CLOSED", "UNKOWN STATE",
      // or "websocket for {the domain} has not been created"
      static state(domain){
          let websocket = this.domain_to_websocket(domain);
          if(!websocket) { return "websocket for " + domain + " has not been created."}
          else {
             let state_str = this.readyStateInt_to_string(websocket.readyState);
             return state_str
          }
      }

      // source is JS source code to eval in the job engine at domain.
      //   If source has multiple expressions, ie "foo(); bar()",
      //   both will be evaled but only the value of the last expression will
      //   be the returned value. The value is converted to a string with to_source_code
      //   in the MonitorServer and sent back to the Monitor computer as that string,
      //   then converted back to an object via globalThis.eval(value_str) before its
      //   passed to the callback.
      // callback is a function that takes one argument, the result
      //   of evaling source (value). It is called on the Monitor computer with the
      //   value. If callback is null, the job engine will not
      //   send a message back to the Monitor computer.
      //   The callback should be a string that evals to a fn, or
      //   a function whose toString() method gives us the src.
      // period indicates when source is evaled.
      //   "once" means just once the job engine recieves this message.
      //   A number means the number of seconds between evals of the source.
      //   the source continue to be evaled until it is stopped.
      // examples: Monitor.send("localhost", "Job.active_job_names()",  "out", "once")
      //           Monitor.send("localhost", "Job.defined_job_names()", "out", "once")
	
     static send(domain, source, callback="Monitor.out", period="run_once" //can also be a positive number of seconds to repeatedly eval message
          ){
         if(typeof(callback) === "function") {
             let fn_name = Utils.function_name(callback);
             if(fn_name !== "") { callback = fn_name;}
             else               { callback = callback.toString();}
         }
         let websocket = this.domain_to_websocket(domain);
         if(websocket) { this.send_aux(websocket, source, callback, period); }
         else {
             this.init(domain, source, callback, period);
         }
     }

     static send_aux(websocket, source, callback, period) {
          let state = Monitor.state(websocket);
          if (!(state === "OPEN")) {
              //dde_error("The websocket for: " + websocket.url + " is not open, its: " + state )
              websocket = new WebSocket(websocket.url); //try one more time.
              setTimeout(function () {
                  let state = Monitor.state(websocket);
                  if(state !== "OPEN"){
                      Monitor.delete_domain(websocket); //start afresh next time we try to send
                      dde_error("websocket for: " + websocket.url + " is not OPEN, its: " + state);
                  }
                  else {
                      Monitor.send_aux_aux(websocket, source, callback, period);
                  }
              }, 1000);
          }
          else {
              this.send_aux_aux(websocket, source, callback, period);
          }
     }

     static send_aux_aux(websocket, source, callback, period) {
              let message_object = {
                  source: source,
                  callback: callback,
                  period: period
              };
              let message_str = JSON.stringify(message_object);
              out("Monitor for: " + websocket.url + " sending: " + message_str);
              websocket.send(message_str);
     }

      //used as the default callback in a send.
     static out(value, websocket=null, json_data){
         Monitor.last_out_value = value;
         let url_message = "";
         if(websocket) {
             url_message = "for websocket: " + websocket.url + " ";
         }
         let result = {value: value,
                       command: json_data.source,
                       value_string: json_data.value,
                       error_type: json_data.error_type,
                       error_message: json_data.error_message,
                       full_error_message: json_data.full_error_message};
         let src_label = "Monitor " + url_message + " <i>the result of evaling:</i> ";
         eval_js_part3(result, src_label);
         /*let src_truncated = ((json_data.source.length > 22) ?
                               json_data.source.substring(0, 20) + "..." :
                               json_data.source)
         out("<fieldset><legend>Monitor " + url_message + " <i>the result of evaling:</i> " +
              `<code title='` + json_data.source + `'>` + src_truncated + "</code> is...</legend>" +
             value + "</fieldset>")*/
      }



     static show_dialog(){
         let localhost_checked = "";
         let dexter_default_checked = "";
         if(simulate_radio_true_id.checked) {localhost_checked      = "checked"; }
         else                               {dexter_default_checked = "checked"; }
         show_window({
             title: "Monitor Dexter <i>in the Job Engine</i>",
             x: 300, y: 50, width: 430, height: 550,
             content: `
<fieldset><legend>Domain: <i>what Dexter to monitor</i></legend> 
<input name="domain_kind" type="radio" value="localhost"      style="margin-left:10px;" ` + localhost_checked      + `/> Use DDE4 installed on Local PC (localhost)<br/>
<input name="domain_kind" type="radio" value="Dexter.default" style="margin-left:10px;" ` + dexter_default_checked + `/> Use Dexter.default (see Misc Pane header menu)<br/>
<input name="domain_kind" type="radio" value="type_in"        style="margin-left:10px;"/> Type in ip_address: 
     <input name="domain_type_in" value="192.168.1.142"/>
</fieldset>
<div style="margin:10px;">
    <a href="#" id="job_engine_user_interface_id" onclick="Monitor.browse_job_engine()">
        Browse Job Engine User Interface
    </a>
</div>
<input type="button" name="copy_job_to_job_engine" value="Copy Job to Job Engine" style="margin: 5px 0px 10px 10px;"
       title="Copy the selection, or if no selection,&#013;the whole file in the Editor&#013;to a Job Engine file&#013;named by the contained Job definition."/>


<!--<input name="job_engine_user_interface" type="button" style="margin: 4px;" value="Job Engine User Interface"/><br/>
<input name="show_defined_jobs"       type="button" style="margin: 4px;" value="Show Defined Jobs"/><br/>
-->


<fieldset style="margin-top:10px;"><legend>Operations: <i>to be performed in the Job Engine</i></legend> 
<input name="show_active_jobs"        type="button" style="margin: 4px;" value="Show Active Jobs"/>
<input name="run_job"                 type="button" style="margin: 4px 4px 4px 95px;" value="Run Job"
   title="If there is a selection in the Editor,&#013;treat it as a Job definition.&#013;Otherwise grab the whole buffer.&#013;Send it to the Job Engine.&#013;Define and start it.&#013;Always runs just once."/> <br/>

<input name="show_active_monitors"    type="button" style="margin: 4px;" value="Show Active Monitors"/>
<input name="stop_active_monitors"    type="button" style="margin: 4px 4px 4px 70px;" value="Stop Active Monitors"
       title='Stops all periodic operations.&#013;Always runs just once,&#013;ignoring the "once" ckeckbox.'/><br/>

<input name="render_measured_angles"  type="button" style="margin: 4px;" value="Render Measured Angles"/> 
    <input style="margin:0px;padding:0px;" name="render_measured_angles_many" type="checkbox" data-onchange="true"
           title="Run render_measured_angles continuously,&#013;i.e. more than once, every 'period'."/>
    <span style="font-size:14px;margin:0px;padding:0px;">&gt;1</span>
<input name="show_robot_status"       type="button" style="margin: 4px 4px 4px 10px;" value="Show Robot Status"/>
    <input style="margin:0px;padding:0px;" name="show_robot_status_many" type="checkbox" data-onchange="true"
       title="Refresh robot status continuously,&#013;i.e. more than once, every 'period'."/>
    <span style="font-size:14px;margin:0px;padding:0px;">&gt;1</span>
 <br/>
<input name="send"                    type="button" style="margin: 4px;" value="Send"/> 
    <input style="margin:0px;padding:0px;" name="send_many" type="checkbox" data-onchange="true"
    title="Send the below code continuously,&#013;i.e. more than once, every 'period'."/>
    <span style="font-size:14px;margin:0px 20px 0px 0px;padding:0px;">&gt;1</span>
code to run in Job Engine:<br/>
<textarea name="source" rows="2" cols="80">Job.active_job_names() //returns array of strings</textarea>
<div style="margin-left:120px;"> callback to run in DDE:</div>
<textarea name="callback" rows="3" cols="80">function(val){\n    out("Job count: " + val.length, "green")\n}</textarea>
</fieldset>
<fieldset><legend>Period: <i>how often to run the &gt;1 checkbox operations</i></legend> 
<!--<input name="run_once" type="checkbox" style="margin-left:10px;" checked/>
     once
     &nbsp; <i>OR</i> &nbsp; every -->
     <input name="period_duration" type="number" value="0.1" step="0.05" min="0" style="width:60px;"/> seconds
</fieldset>
`,
             callback: "Monitor.handle_show_dialog"
         });
      }

      static handle_show_dialog(vals){
          //ebugger;
          let domain_kind = vals.domain_kind;
          let domain;
          if      (domain_kind === "localhost")      { domain = "localhost";}
          else if (domain_kind === "Dexter.default") { domain = Dexter.default.ip_address;}
          else if (domain_kind === "type_in")        { domain = val.domain_type_in;}
          Monitor.domain = domain; //used by  Monitor.show_robot_status_cb
          /*if(vals.run_once){
              the_period = "run_once"
          }
          else { the_period = vals.period_duration }
          */
          if(vals.clicked_button_value === "close_button") ;

          else if (vals.clicked_button_value === "job_engine_user_interface_id") {
              let url = "http://" + domain + "/dde/jobs.html";
              try { browse_page(url); }
              catch(err) {
                  dde_error("Could not browse: " + url  + "<br/>Verify that the domain of: " + domain +
                            " is correct<br/>and that a server is running on Dexter or the server is simulated.");
              }
          }
          else if (vals.clicked_button_value === "copy_job_to_job_engine") {
              Monitor.copy_job_to_job_engine(domain);
          }
          else if(vals.clicked_button_value === "show_defined_jobs"){
              Monitor.send(domain, "Job.defined_job_names()",  "Monitor.out",  "run_once");
          }
          else if(vals.clicked_button_value === "show_active_jobs"){
             Monitor.send(domain, "Job.active_job_names()",  "Monitor.out",  "run_once");
          }
          else if(vals.clicked_button_value === "run_job"){
              Monitor.run_job(domain); //always run_once
          }
          else if(vals.clicked_button_value === "show_active_monitors"){
              Monitor.send(domain, "MonitorServer.active_monitor_sources()", "Monitor.out",  "run_once");
          }
          else if(vals.clicked_button_value === "stop_active_monitors"){
              Monitor.stop_active_monitors(domain); //don't run periodically.
              document.querySelector('[name="render_measured_angles_many"]').checked = false;
              document.querySelector('[name="show_robot_status_many"]').checked = false;
              document.querySelector('[name="send_many"]').checked = false;

          }
          else if(vals.clicked_button_value === "render_measured_angles"){
              Monitor.render_measured_angles(domain, "run_once");
          }
          else if(vals.clicked_button_value === "render_measured_angles_many"){
              if(vals.render_measured_angles_many){ //this is true if user clicked on unchecked box to make it checked
                  Monitor.render_measured_angles(domain, vals.period_duration);
              }
              else {
                  Monitor.stop_active_monitor(domain,
                               "Dexter.dexter0.rs.measured_angles()"); //must be the same code as in hte status method: render_measured_angles
              }
          }
          else if(vals.clicked_button_value === "show_robot_status"){
              Monitor.show_robot_status(domain, "run_once");
          }
          else if(vals.clicked_button_value === "show_robot_status_many"){
              if(vals.show_robot_status_many){
                  Monitor.show_robot_status(domain, vals.period_duration);
              }
              else {
                  Monitor.stop_active_monitor(domain,
                               "Dexter.default.robot_status");
              }
          }
          else if(vals.clicked_button_value === "send"){
              Monitor.send(domain, vals.source, vals.callback, "run_once" );
          }
          else if(vals.clicked_button_value === "send_many"){
              if(vals.send_many) {
                  Monitor.send(domain, vals.source, vals.callback, vals.period_duration);
              }
              else {
                  Monitor.stop_active_monitor(domain, vals.source);
              }
          }
          else {shouldnt("got unhandled click button value of: " + vals.clicked_button_value);}
      }
    //higher levels sends:
    static copy_job_to_job_engine(domain) {
        let src = Editor.get_javascript();
        let job_name = Job.source_to_job_name(src);
        if(job_name === null){
            dde_error("Job.copy_job_to_job_engine could not find a valid Job Definition in the editor.");
        }
        else {
            let path = "http://" + domain + "/srv/samba/share/dde_apps/" + job_name + ".dde";
            out("Copying Job definition to: " + path);
            DDEFile.write_file_async(path, src);
        }
    }
    //example: Monitor.render_measured_angles()
    static render_measured_angles(domain, period=0.05){
        this.send(domain,
            "Dexter.dexter0.rs.measured_angles()", //if you change this, change the show_window handler for stopping it.
            `(function(angles) {
                                  SimUtils.render_joints(angles) 
                              })`,
            period
        );
    }

    static run_job(domain) {//always run_once.
        let js_src = Editor.get_javascript("auto");
        let full_src = "Job.define_and_start_job(`" + js_src + "`)";
        this.send(domain, full_src, undefined, "run_once");
    }

    static stop_active_monitors(domain){
        this.send(domain,
            "MonitorServer.stop_active_monitors()",
            "(function() { out('Monitor: active monitors stopped.') })",
            "run_once"
        );
    }

    static stop_active_monitor(domain, operation_source){
        this.send(domain,
            "MonitorServer.stop_active_monitor('" + operation_source + "')",
            "(function() { out('Monitor: active monitors stopped.') })",
            "run_once"
        );
    }

    static show_robot_status(domain, period){
        Monitor.send(domain,
            "Dexter.default.robot_status",
            "Monitor.show_robot_status_cb",
            period);
    }

    static show_robot_status_cb(robot_status){
        if(RobotStatusDialog.window_up()){ //use existing window
            RobotStatusDialog.robot_status = robot_status;
            RobotStatusDialog.update_robot_status_table();
        }
        else { //create a new window
            let sm = RobotStatus.array_status_mode(robot_status);
            RobotStatusDialog.show(Monitor.domain, sm, robot_status);
        }
    }

    static strips_solve({domain        = "required",
                         callback      = "Monitor.out",
                         period        = "run_once",

                         strips_domain = "required",
                         problem       = "required",
                         fast        = true,
                         verbose     = false,
                         output        = "(function(text) { console.log(text); })" //inside strips
                      }) {
         if(typeof(strips_domain) === "string") ; //ok as is
         else { //assume its a JSON object
             strips_domain = JSON.stringify(strips_domain);
             if (!strips_domain.startsWith("{")) {
                 dde_error("Monitor.strips_solve called with object which isn't " +
                     "a proper JSON object:\n" + strips_domain);
             }
         }
         let src_obj = {strips_domain: strips_domain,
                        problem: problem,
                        fast: fast,
                        verbose: verbose,
                        output: output};
         let src = JSON.stringify(src_obj);
         this.send(domain, src, callback, period);
    }

    static strips_pddl_to_json({
            domain        = "required",
            callback      = "Monitor.out",
            period        = "run_once",

            pddl_string   = "required",
            problem_or_domain= "problem",

            fast        = true,
            verbose     = false,
            output        = "(function(text) { console.log(text); })" //inside strips
        }) {
            if(typeof(pddl_string) === "string") ; //ok as is
            else {dde_error("Monitor.strips_pddl_to_json called with object which isn't " +
                        "a string:\n" + pddl_string);
            }
            let src_obj =  {pddl_string: pddl_string,
                            problem_or_domain: problem_or_domain,
                            fast: fast,
                            verbose: verbose,
                            output: output};
            let src = JSON.stringify(src_obj);
            this.send(domain, src, callback, period);
     }
}
/*
Monitor.ws_url()
Monitor.init()
Monitor.send("hey")
Monitor.close()
*/
globalThis.Monitor = Monitor;


// https://www.tutorialspoint.com/websockets/websockets_server_working.htm
class MonitorServer$1 {
   static source_to_interval_id_map = {}

   static active_monitor_sources(){
       return Object.keys(this.source_to_interval_id_map)
   }

   static stop_active_monitor(source){
       let interval_id = this.source_to_interval_id_map[source];
       if((interval_id === 0) || interval_id) {
           clearInterval(interval_id);
           delete this.source_to_interval_id_map[source];
       }
   }

   static stop_active_monitors(){
        for(let source of Object.keys(this.source_to_interval_id_map)) {
            this.stop_active_monitor(source);
        }
   }

   static server = null

   static init(){ //called by load_job_engine.js
       console.log("Top of MonitorServer.init now disabled");
       return //TODO needs work
	}

    //data is a string that looks like:
    // {source: "some string of js", callback: "some str"} // that evals to a fn of one arg on the client which will be passed the result of source
    static handle_message(ws_connection, data) {
        console.log('MonitorServer.handle_message got message: ' + data);
        let data_obj;
        try {
            data_obj = JSON.parse(data); //has fields src, callback, period
        }
        catch (err) {
            this.handle_message_error(ws_connection, data, data_obj, err); //data_obj is undefined, and that's ok for JSON.parse errors
        }
        if (data_obj.period === "run_once") {
            if(data_obj.source.includes("strips_domain")) {
                   this.handle_message_strips_solve(ws_connection, data, data_obj);
            }
            else if (data_obj.source.includes("problem_or_domain")) {
                this.handle_message_strips_pddl_to_json(ws_connection, data, data_obj);
            }
            else { this.handle_message_one_eval(ws_connection, data, data_obj); }
        }
        else { //got a period so repeating eval
            let interval_id = setInterval(function() {
                   MonitorServer$1.handle_message_one_eval(ws_connection, data, data_obj);
                },
                data_obj.period * 1000);  //convert seconds to milliseconds
            this.source_to_interval_id_map[data_obj.source] = interval_id; //so that we have a list of the active_monitors for status and for stopping
        }
    }
    static handle_message_one_eval(ws_connection, data, data_obj) {
        try{
            let value = globalThis.eval(data_obj.source);
            if (data_obj.callback) {
                let message_object = {
                    source:   data_obj.source, //not really needed by Monitor but useful for debugging
                    callback: data_obj.callback,
                    value:    to_source_code({value: value})
                };
                let message_str = JSON.stringify(message_object);
                MonitorServer$1.send(ws_connection, message_str);
            }
        }
        catch(err){
            this.handle_message_error(ws_connection, data, data_obj, err);
        }
    }

    static handle_message_error(ws_connection, data, data_obj, err) {
        let message_object = {
            source:             (data_obj ? data_obj.source : data), //If we have a data_obj, that means the JSON.parse call above didn't error, else it did
            callback:           "Monitor.out", //always do Monitor.out for the calleback when there is an error
            //value: err.message,
            //the below is similar to eval_part2 bottom
            error_type:         err.name,
            error_message:      err.message,
            full_error_message: err.stack
        };
        let message_str = JSON.stringify(message_object);
        MonitorServer$1.send(ws_connection, message_str);
    }

    static handle_message_strips_solve(ws_connection, data, data_obj){
        let strips_data_obj = JSON.parse(data_obj.source);
        if(strips_data_obj.strips_domain  === undefined) { // required
            let err = {error_type:         "required but not passed.",
                       error_message:      "domain required but not passed.",
                       full_error_message: ""
                      };
            this.handle_message_error(ws_connection, data, data_obj, err);
            return
        }
        if(strips_data_obj.problem === undefined) { //required
            let err = {error_type:         "required but not passed.",
                       error_message:      "problem required but not passed.",
                       full_error_message: ""
            };
            this.handle_message_error(ws_connection, data, data_obj, err);
            return
        }
        if(strips_data_obj.fast    !== undefined) { StripsManager.fast    = data_obj.fast; } //default true
        if(strips_data_obj.verbose !== undefined) { StripsManager.verbose = data_obj.verbose; } //default false
        if(strips_data_obj.output  !== undefined) { //default "(function(text) { console.log(text); })"
                try {
                    let fn = eval(strips_data_obj.output);
                    StripsManager.output = fn;
                }
                catch(err) {
                    this.handle_message_error(ws_connection, data, data_obj, err);
                }
        }
        StripsManager.load(strips_data_obj.strips_domain,
                           strips_data_obj.problem,
                           function(domain, problem){
                             MonitorServer$1.strips_solve(ws_connection, data, data_obj, domain, problem);},
                           true);
    }

    //similar to MonitorServer.handle_message_one_eval
    //here domain and problem are actual objects, not their src code.
    static strips_solve(ws_connection, data, data_obj, domain, problem){
        let solutions = StripsManager.solve(domain, problem);
        let solutions_str = JSON.stringify(solutions);
        if (data_obj.callback) { //the Monitor(client) callback
            let message_object = {
                source:   "MonitorServer.strips_solve(...)", //not really needed by Monitor but useful for debugging
                callback: data_obj.callback,
                value:    solutions_str
            };
            let message_str = JSON.stringify(message_object);
            MonitorServer$1.send(ws_connection, message_str);
        }
    }

    static handle_message_strips_pddl_to_json(ws_connection, data, data_obj){
        console.log("top of MonitorServer.handle_message_strips_pddl_to_json passed dat_obj: " + data_obj);
        let strips_data_obj = JSON.parse(data_obj.source);
        if(strips_data_obj.pddl_string === undefined) { // required
            let err = {error_type:         "required but not passed.",
                       error_message:      "pddl_string required but not passed.",
                       full_error_message: ""
            };
            this.handle_message_error(ws_connection, data, data_obj, err);
            return
        }
        if(strips_data_obj.problem_or_domain === undefined) { //required
            let err = {error_type:         "required but not passed.",
                error_message:      "problem_or_domain required but not passed.",
                full_error_message: ""
            };
            this.handle_message_error(ws_connection, data, data_obj, err);
            return
        }
        if(strips_data_obj.fast    !== undefined) { StripsManager.fast    = data_obj.fast; } //default true
        if(strips_data_obj.verbose !== undefined) { StripsManager.verbose = data_obj.verbose; } //default false
        if(strips_data_obj.output  !== undefined) { //default "(function(text) { console.log(text); })"
            try {
                console.log("MonitorServer.handle_message_strips_pddl_to_json about to eval: " + strips_data_obj.output);
                let fn = eval(strips_data_obj.output);
                StripsManager.output = fn;
            }
            catch(err) {
                this.handle_message_error(ws_connection, data, data_obj, err);
            }
        }
        let cb = (function(json_string) {
            if (data_obj.callback) { //the Monitor(client) callback
                let message_object = {
                    source: "MonitorServer.strips_pddl_to_json(...)", //not really needed by Monitor but useful for debugging
                    callback: data_obj.callback,
                    value: json_string
                };
                let message_str = JSON.stringify(message_object);
                MonitorServer$1.send(ws_connection, message_str);
            }
        });
        console.log("in  MonitorServer.handle_message_strips_pddl_to_json about to call StripsManager.loadCode");
        StripsManager.loadCode(strips_data_obj.problem_or_domain, strips_data_obj.pddl_string, cb);
    }

    static readyStateInt_to_string(int){
        let states = ["CONNECTING", "OPEN", "CLOSING", "CLOSED"];
        if(int >= states.length) { return "UNKNOWN STATE" }
        else                     { return states[int] }
    }
    
    static send(ws_connection, message_object) {
        let message_str;
        if (typeof (message_object) !== "string") {
            message_str = JSON.stringify(message_object);
        }
        else { message_str = message_object;}
        out("MonitorServer.send passed message: " + message_str + " wsc: " + ws_connection);
        if (ws_connection){
            let state_str = this.readyStateInt_to_string(ws_connection.readyState);
            if(state_str === "OPEN") {
                //console.log("ws_connection.send bound to: " + ws_connection.send)
                console.log("MonitorServer.send passed wdc and sending message: " + message_str);
                ws_connection.send(message_str);
            }
            else {
                console.log("MessageServer.send can't send message: " + message_str + "<br/> because ws_connection is not open, its: " + state_str);
            }
        }
        else {
            console.log("MessageServer.send can't send message: " + message_str + "<br/> because no ws_connection passed: " + ws_connection);
        }
    }

    static send_all(message_object){
        this.server.clients.forEach(function(client){
            MonitorServer$1.send(client, message_object);
        });
    }
}
   
globalThis.MonitorServer = MonitorServer$1;
/*
MonitorServer.init()
*/

//see https://pyodide.org/en/stable/usage/api-reference.html
globalThis.Py = class Py {
    static status = "not_loaded"

    static async init(){
        if(Py.status == "loading"){
            warning("Python is in the process of loading.");
        }
        else if(Py.status == "loaded"){ //if we attemt to loadPyodide twice, we get an error,
            //so this is more graceful.
            warning("Python is already initialized.<br/>To re-initialize the Python environment, you must relaunch DDE.");
        }
        else if (Py.status == "not_loaded"){
            //await import("https://cdn.jsdelivr.net/pyodide/v0.20.0/full/pyodide.js")
            await import('https://cdn.jsdelivr.net/pyodide/v0.23.2/full/pyodide.js');
            Py.status = "loading";
            globalThis.pyodide = await loadPyodide();
            Py.status = "loaded";
            out("Python initialized.");
        }
        else { shouldnt("Py.init() has invalid status: " + Py.status);}
    }

    static eval(python_source_code) {
        if (this.status === "loaded") {
            let proxy_maybe = pyodide.runPython(python_source_code);
            if (pyodide.isPyProxy(proxy_maybe)) {
                let value = proxy_maybe.toJs();
                proxy_maybe.destroy(); //get rid of the memory
                return value
            } else {
                return proxy_maybe
            }
        }
        else {
            dde_error("Py.eval can't work unless Python is initialized.<br/>" +
            "It is: " +  Py.status + "<br/>" +
            "To initialize Python, eval: <code>Py.init()</code>");
        }
    }

    static eval_py_part2(command){
        let result;
        let start_time = Date.now();
        try {
            let value = Py.eval(command);
            result = {
                command: command,
                value: value,
                value_string: Utils.stringify_value(value),
                duration: Date.now() - start_time
            };
        }
        catch(err) {
            result = {
                command: command,
                error_type: err.name,
                error_message: err.message,
                full_error_message: err.stack
            };
        }
        let src_label = "The result of evaling Python: ";
        eval_js_part3(result, src_label);
    }
};

//after using this fn to define a global constant,
//foo: [ 42 doesn't error. however
//it doesn't set it either, just keeps the old value.
//import {Instruction} from "./instruction.js" //now global

var units_data = {
length_units: {
_km: [ 1000,        "kilometer"],
_m:  [ 1,           "meter"],
_cm: [ 0.01,	    "centimeter"],
_mm: [ 0.001,	    "millimeter"],
_um: [ 0.000001,	"micron"],
_nm: [ 0.000000001,	"nanometer"],

_LY:    [ 9.461e+15,"light-year"],
_mile:  [ 1609.34,  "mile"],
_yard:  [ 0.9144,	"yard"],
_ft:    [ 0.3048,	"foot"],
_in:    [ 0.0254,	"inch"],
_mil:   [ 0.0000254,"thou"],
},

angle_units: {
_rev:      [ 360,			"revolution"],
_rad:      [ 180/Math.PI,	"radian"],
_deg:      [ 1,			    "degree"],
_arcmin:   [ 1/60,		    "arcminute"],
_arcsec:   [ 1/3600,		"arcsecond"],
_nbits_cf: [ 7754.73550222, "bits_per_degree"] //(nbits*seconds/degree)
},

duration_units: {
_week: [ 604800,        "week"],
_day:  [ 86400,			"day"],
_hour: [ 3600,			"hour"],
_min:  [ 60,			"minute"],
_s  :  [ 1,				"second"],
_ms :  [ 0.001,			"millisecond"],
_us :  [ 0.000001,		"microsecond"],
_ns :  [ 0.000000001,	"nanosecond"]
},

frequency_units: {
_Ghz: [ 1000000000,	"Gigahertz"],
_Mhz: [ 1000000,	"Megahertz"],
_khz: [ 1000,		"kilohertz"],
_hz : [ 1,			"hertz"]
},

mass_units: {
_kg: [ 1,				"kilogram"],
_g : [ 0.001,			"gram"],
_mg: [ 0.000001,		"milligram"],
_ug: [ 0.000000001,		"microgram"],
_ng: [ 0.000000000001,	"nanogram"],

_lb_mass: [ 0.453592,	"pound mass (lbm)"],
_slug	: [ 14.5939,	"slug"],
_blob   : [ 175.126836,	"blob"]
},

force_units: { //weight
_GN: [ 1000000000,	"Giga-Newton"],
_MN: [ 1000000,		"Mega-Newton"],
_kN: [ 1000,		"kilo-Newton"],
_N : [ 1,			"Newton"],
_mN: [ 0.001,		"milli-Newton"],
_uN: [ 0.000001,	"micro-Newton"],

_lb: [ 4.44822,		"pound force (lbf)"],
_oz: [ 4.44822/16,	"ounce"]
},

pressure_units: {
_GPa: [ 1000000000,	"GigaPascal"],
_Mpa: [ 1000000,	"MegaPascal"],
_kPa: [ 1000,		"kiloPascal"],
_Pa : [ 1,			"Pascal"],
_mPa: [ 0.001,		"milliPascal"],
_uPa: [ 0.000001,	"microPascal"],
_nPa: [ 0.000000001,"nanoPascal"],

_Gpsi: [ 6894760000000,"Giga-pounds per square inch"],
_Mpsi: [ 6894760000,	"Mega-pounds per square inch"],
_kpsi: [ 6894760,		"kilo-pounds per square inch"],
_psi : [ 6894.76,			"pounds per square inch"],
_mpsi: [ 6.89,		"milli-pounds per square inch"],
_upsi: [ 0.00689476,	"micro-pounds per square inch"],
_npsi: [ 0.00000689476,"nano-pounds per square inch"]
},

torque_units: {
_N_m:  [ 1,			        "Newton-meter"],
_N_cm: [ 0.001,		        "Newton-centimeter"],

_lbf_ft: [ 1.35581794,	    "pound-foot"],
_lbf_in: [ 1.35581794/12,	"pound-in"],
},

power_units: {
_GW: [ 1000000000,	"GigaWatt"],
_MW: [ 1000000,		"MegaWatt"],
_kW: [ 1000,		"kiloWatt"],
_W : [ 1,			"Watt"],
_mW: [ 0.001,		"milliWatt"],
_uW: [ 0.000001,	"microWatt"],
_nW: [ 0.000000001,	"nanoWatt"],

_HP: [ 745.7,		"horsepower"],
},

energy_units: {
_GJ: [ 1000000000,	"GigaJoule"],
_MJ: [ 1000000,		"MegaJoule"],
_kJ: [ 1000,		"kiloJoule"],
_J : [ 1,			"Joule"],
_mJ: [ 0.001,		"milliJoule"],
_uJ: [ 0.000001,	"microJoule"],
_nJ: [ 0.000000001,	"nanoJoule"],

_GWh: [3600000000000, "Gigawatt-hour"],
_MWh: [3600000000,	  "Megawatt-hour"],
_kWh: [3600000,		  "kilowatt-hour"],
_Wh:  [3600,		  "watt-hour"],
_mWh: [3.6,			  "milliwatt-hour"],
_uWh: [0.0036,		  "microwatt-hour"],
_nWh: [0.0000036,	  "nanowatt-hour"],

_kcal:   [ 4184,	  "kilocalorie"],
_cal:    [ 4.184,	  "calorie"],
_ft_lbf: [ 1.35582,	  "foot-pound"],
_BTU:    [ 1055.06,	  "British Thermal Unit"]
}
};

function init_units(){
    for(let series_name_core in units_data) {
        let one_series_units = units_data[series_name_core];
        var the_keys = Object.keys(one_series_units);
        for(let a_unit_abrev of the_keys) {
            if(a_unit_abrev != "base") {
                let val = one_series_units[a_unit_abrev][0];
                globalThis[a_unit_abrev] = val;
            }
        }
    }
    //don't put _nbits_cf into a series. Not for use by users.
    //it is used for converting S params: MaxSpeec StartSpeed, Accelleration
    //before sending this to Dexter hardware.
   // module.exports._nbits_cf = _nbits_cf
   // module.exports._arcsec   = _arcsec
   // module.exports._um       = _um
    if(globalThis.platform == "dde") {
        for(let series_name_core in units_data) {
            let ser = units_to_series(series_name_core, units_data[series_name_core]);
            Series.instances.push(ser);
        }
        Series.instances.push(make_temperature_series());
    }
}

function units_to_series(name, series_name_core){
        var the_keys = Object.keys(series_name_core);
        return new Series({ id: "series_" + name + "_id",
                            array: the_keys,
                            menu_insertion_string: the_keys[0],
                            menu_sel_start: true,
                            menu_sel_end: null,
                            sample: the_keys[0],
                            base: series_name_core.base
                            })
}

//[123, 456].micron() => [0.000123, 0.000456]
//assumes input array has numbers in microns, and converts
//those numbers to meters.
/* commented out by fry Jun 5, 2022 as it screws up using for(let x in [5. 6. 7]) because it iterates over "micron" and "ardsec"
Array.prototype.micron = function(){
    let result = []
    for(let elt of this) {
       if (typeof(elt) === "number") {
           elt = elt*_um
       }
       result.push(elt)
    }
    return result
}

//input array is in arcseconds, converts its angles to degrees.
Array.prototype.arcsec = function(){
    if(//Instruction.is_oplet_array(this) && //unnecessary.
    // we know its an array or this method wouldn't be called.
    //and if array is too short, a lookup returns undefined
        ["a", "P"].includes(this[Instruction.INSTRUCTION_TYPE])){
        let result = this.slice() //make copy
        for(let i = Instruction.INSTRUCTION_ARG0;
            i <= Instruction.INSTRUCTION_ARG4; i++){
            let orig_val = this[i]
            if (orig_val !== undefined){
                result[i] = orig_val * _arcsec
            }
        }
        return result
    }
    else {
        let result = []
        for(let elt of this) {
            if (typeof(elt) === "number") {
                elt = elt*_arcsec
            }
            result.push(elt)
        }
        return result
    }
}
*/
//TEMPERATURE
function deg_c_to_c(deg_c){ return deg_c }
globalThis.deg_c_to_c = deg_c_to_c;

function deg_f_to_c(deg_f){ return (deg_f-32)*5/9 }
globalThis.deg_f_to_c = deg_f_to_c;

function deg_c_to_f(deg_c){ return deg_c*9/5+32 }
globalThis.deg_c_to_f = deg_c_to_f;

function deg_k_to_c(deg_k){ return deg_k-273.15 }
globalThis.deg_k_to_c = deg_k_to_c;

function deg_c_to_k(deg_c){ return deg_c+273.15 }
globalThis.deg_c_to_k = deg_c_to_k;

function deg_f_to_k(deg_f){ return deg_c_to_k(deg_f_to_c(deg_f)) }
globalThis.deg_f_to_k = deg_f_to_k;

function deg_k_to_f(deg_k){ return deg_c_to_f(deg_k_to_c(deg_k)) }
globalThis.deg_k_to_f = deg_k_to_f;

function make_temperature_series(){
    return new Series({id:"series_temperature_id",  array: ["deg_c_to_c", "deg_f_to_c", "deg_c_to_f",
                           "deg_k_to_c", "deg_c_to_k", "deg_f_to_k", "deg_k_to_f"],
        menu_insertion_string:"deg_f_to_c()",  menu_sel_start:0, menu_sel_end:10, sample:"deg_f_to_c"})

}

/* Why Futures
Automatic garbage collection wins because it frees the programmer from having to worry about
memory management.
Futues win becuase it frees the programmer from having to worry about serial vs parallel in
optimizing the performance of their algorithm. The program just runs
as parallel as it can, very little extra work for programmer.
Programmer also doesn't have to deal with callback hell or even promises/async/await
which interact poorly (to say hte least) with normal callstack return of values.
 */
/* TODO
   - DONE implement Lisp  List.make, (cons), List.first, List.rest
   - DONE Decide if ActEval.eval and cont's get changed to keyword args
       but only for the EVAL fns. For the cont, pass by position:  val, lex_env, cont, source
       This allows me to have as the cont ordinary fns like out and inspect with  no changes.
        Note that out and inspect ignore oops: both out and inspect take more than one arg.
        grr. Inspect's 2nd arg is "source" but that's not necessarily the same source. hmmm.
        What do I do here? Problem! Look at teh cont fn's args and try to match them up?
          not pass later ones and let them default?
   - Change low leval evals: Literal, Identifier, then assign, binary, then Array
        use List fns to implement lex_env throughout
   - remainder of existing stuff for continuations
   - Call Henry to work on Futures.
 */
globalThis.ActEval = class ActEval{
    static string_to_ast(source){ //same as JS2B.string_to_ast
        if (source[0] == "{") { //esprima doesn't like so hack it
            let new_src = "var foo947 = " + source;
            let st = Espree.parse(new_src, {range: true,
                                                    loc: true,
                                                    ecmaVersion: 7 //Chrome 105 (sept 2022) supports ES7 and probably more
            });
            let new_st = st.body[0].declarations[0].init;
            return new_st
        }
        else {
            return Espree.parse(source, {range: true, loc: true, ecmaVersion: 7})
        }
    }

    static last_read_source = null

    static read_eval(source){
        let ast = ActEval.string_to_ast(source);
        this.eval({ast: ast,
                  lex_env: List.empty,
                  cont: out,
                  source: source});
    }

    //returns an array of block_elts (but might be only 1 long).
    static eval({ast, //st === ast === abstract_syntax_tree
                lex_env = List.empty,
                cont=out, //continuation. A fn of one arg.
                source}
               ){
        try {
            let switcher = ast.type;
            /*switch(switcher) {
                case "ObjectExpression": return  this[switcher].call(this, st, lex_env, cont);
                case "Program":          return  this[switcher].call(this, st, lex_env, cont);
                default: shouldnt("Can't handle exprima type: " + switcher)
            }*/
            this[switcher].call(this, ast, lex_env, cont, source);
        }
        catch(err){
            dde_error("Could not convert JavaScript to ast: " + err.message);
        }
    }
    static Program(ast, lex_env, cont, source){
        let switcher = ast.sourceType;
        switch(switcher) {
            case "module": dde_error("unimplemented: JS2B module");
            case "script": {
                let result = [];
                for(let part of ast.body) { //expect multiple top level parts.
                    result.push(this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source: source}));
                }
                return result
            }
            default: shouldnt("Can't handle exprima switcher: " + switcher);
        }
    }

    static script(ast, lex_env, cont, source){
        let switcher = st.type;
        switch(switcher){
            case "BlockStatement":      return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "ExpressionStatement": return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "ForStatement":        return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "ForOfStatement":      return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "FunctionDeclaration": return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "IfStatement":         return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "TryStatement":        return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "VariableDeclaration": return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});
            case "WhileStatement":      return this[switcher].call(this, {ast: ast, lex_env: lex_env, cont: cont, source: source});

            default: shouldnt("Can't handle exprima switcher: " + switcher);
        }
    }
    static BlockStatement({ast, lex_env, cont, source}){
        let result = undefined;
        for(let a_st of ast.body){
            if(a_st.type === "ReturnStatement") ;
            this.eval({ast: a_ast, lex_env: lex_env, cont: cont, source: source});
        }
        if(cont && result) {
            cont.call(null, result);
        }
    }


    static ExpressionStatement({ast, lex_env, cont, source}){
        let part = ast.expression;
        let switcher = part.type;
        switch(switcher){
            case "ArrayExpression":      return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "AssignmentExpression": return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "BinaryExpression":     return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "CallExpression":       return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "Identifier":           return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "Literal":              return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "LogicalExpression":    return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            case "MemberExpression":     return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source})
            //when we have a path like foo.bar.baz, st.type == "MemberExpression"
            //it will have 2 important "parts"
            // "object" the val of object will have type "MemberExpression"
            // and itself have an "object" prop that has type Identifier with name "foo"
            //              and "property" prop that has type Identifier with name "bar"
            // "property". whose val will be of type Identifier with a name == "baz".
            //note its the LAST name in foo.bar.baz.
            //whereas the "object" encompasses all path elts except the last name, ie foo.bar

            case "NewExpression":        return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source});
            case "ReturnStatement":      return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source});
            case "TemplateLiteral":      return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source});
            case "UnaryExpression":      return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source});
            case "UpdateExpression":     return JS2B[switcher].call(this,{ast: part, lex_env: lex_env, cont: cont, source:source});
            case "YieldExpression":      return this[switcher].call(this, {ast: part, lex_env: lex_env, cont: cont, source:source});
            default: shouldnt("Can't handle exprima switcher: " + switcher);
        }
    }

    /* obsolete first fry version. wrong cont handling
    static ArrayExpression(st, lex_env, cont, source){
        let result_arr = []
        for(let a_st of st.elements){
            this.eval(a_st, lex_env, function(val) {result_arr.push(val)}, source )
        }
        cont.call(null, result_arr)
    }
    */
    /* example JS:
       let a = 11
       let b = 22
       [a, b]
       so to evla "b", we have to have the lex env containing b.
    Henry's rules:
      -all calls to ActEval.eval and continuation fns are tail calls
      -no JS looping (for, etc.)
      -both ActEval and all cont get the same args execept
          eval first arg is a st, and cont first arg is a value
       - Both might take some additional values like in ArrayExpression for "vals_so_var"
    */

    static ArrayExpression({ast, lex_env, cont, source, vals_so_far=List.empty}){ //todo needs testing
        let ast_elts = ast.elements;
        if(ast_elts.length === 0) { //called after all ast_elts are done
            let result_array = List.to_array(vals_so_far).reverse();
            cont.call(null,  {ast: result_array, lex_env: lex_env, cont: cont, source:source});
        }
        else {
            let first_ast = ast.elements[0];
            rest(ast.elements); //close over this lex var.
            let new_cont = function(val, lex_env, cont, source, vals_so_far){
                let new_vals_so_far = List.make_pair(val, vals_so_far);
                ActEval.ArrayExpression({ast: rest_st, lex_env: lex_env, cont: cont, source:source, vals_so_far:new_vals_so_far});
            };
            this.eval({ast: first_ast, lex_env: lex_env, cont: new_cont, source:source});
        }
    }

    static AssignmentExpression({ast, lex_env, cont, source}){
        let right_val_ast = ast.right;
        if(ast.left.type === "Identifier") {
            let name_string = ast.left.name;
            this.eval({ast: right_val_ast,
                     lex_env:lex_env,
                     cont: function(val){
                         if (lex_env.hasOwnProperty(name_string)) {
                             lex_env[name_string] = val;
                         } else {
                             globalThis[name_string] = val;
                         }
                         cont.call(null, undefined, undefined, source);
                     },
                     source: source});



        }
        else if(ast.left.type === "MemberExpression") {
            let object_ast = ast.left.object;
            let prop_name = ast.left.property.name;
            this.eval({object_ast,
                      lex_env,
                      function(obj_val) {
                          let property_ast = ast.left.property;
                          if(property_ast.type === "Identifier") {
                              let the_prop_name = prop_name;
                              ActEval.eval({ast: right_val_ast,
                                  lex_env: lex_env,
                                  cont: function(val) {
                                      obj_val[the_prop_name] = val;
                                  },
                                  source: source});

                          }
                          else {
                              shouldnt("ActEval.eval AssignmentExpression left side needs work.");
                          }
                      },
                      source: source});
        }
    }

    static BinaryExpression(st, lex_env, cont, source){
        let operator_string = st.operator;
        let left_val;
        let right_val;
        this.eval(st.left,  lex_env, function(val){ left_val  = val;}, source);
        this.eval(st.right, lex_env, function(val){ right_val = val;}, source);
        let rock_bottom_source = left_val.toString() + operator_string + right_val.toString();
        if(Future.contains_future(left_val, right_val)){
            Future.make(function(){
                                let result = globalThis.eval(rock_bottom_source);
                                cont.call(null, result);
            });
        }
        else {
            //have to do toString and eval because no way to CALL an infix operator in JS.
            let result = globalThis.eval(rock_bottom_source);
            cont.call(null, result);
        }
    }

    static LogicalExpression(st){ return this.BinaryExpression(st) }

    /*static get_src(st) {
        this.last_read_source.substring(st.range[0], st.range[1])
        /* let switcher = st.type
         if      (switcher == "Identifier") { return st.name }
         else if (switcher == "MemberExpression") {
             return this.get_src(st.object) +  "." + this.get_src(st.property)
         }
     }
      this grabs all the possible params from the fn def of the fn call
        and supplies ALL of them in the output block (with default vals),
        not just the ones passed. BUT
       doesn't handle keyworded fns properly.
    */
    static get_src(st, source) {
         return source.substring(st.range[0], st.range[1])
    }

    //this does not add non passed args with their default vals
    // the new def
    static CallExpression(st, lex_env, cont, source) {
        let callee = st.callee; //could be a single Identifier or could be MemberExpression when its a path
        callee.type; //callee_type not bound due to a bug in Chrome
        //let meth_block   = this[callee_type].call(this, callee) //might be a path, or a single "Literal" identifier
        let meth_name = callee.name;
        let meth = value_of_path(meth_name);
        let param_arrays = null;
        if (meth) {
            param_arrays = Utils.function_param_names_and_defaults_array(meth);
        }
        //Process Args
        let new_lex_env = {};
        for (let i = 0; i < st.arguments.length; i++) {
            let arg_name = param_arrays[i][0];
            let arg_st = st.arguments[i];
            this.eval(arg_st,
                       lex_env,
                  function (arg_val) {
                               new_lex_env[arg_name] = arg_val;},
                       source);
        }

        //Process Body
        let meth_def_src = meth.toString();
        let meth_def_ast = this.string_to_ast(meth_def_src);
        let body_top_level_expressions = meth_def_ast.body[0].body.body;
        let result = undefined;
        let regular_cont = function (elt_val) {
                              result_arr.push(elt_val);};
        let return_cont  = function(elt_val){
            result = elt_val; //result closed over
        };
        for (let top_level_expr of body_top_level_expressions) {
            //let expr_type = top_level_expr.type.toString() //fails due to bug in Chrome
            this.eval(top_level_expr,
                      new_lex_env,
                      ((top_level_expr.type === "ReturnStatement") ? return_cont : regular_cont),
                       source
                      );
        }
        cont.call(null, result);
        //inspect(meth_def_ast)
    }
    static ForStatement(st){
        let init   = JS2B[st.init.type].call(undefined, st.init);
        let test   = JS2B[st.test.type].call(undefined, st.test);
        let update = JS2B[st.update.type].call(undefined, st.update);
        let body   = JS2B[st.body.type].call(undefined, st.body);
        return Root.jsdb.for.for_iter.make_dom_elt(undefined, undefined, init, test, update, body)
    }

    static ForOfStatement(st){
        let left   = JS2B[st.left.type].call(undefined, st.left);
        //but have to remove the init val and equal sign of the declaration
        if (dom_elt_block_type(left).isA(Root.jsdb.assignment)) {
            Root.jsdb.assignment.remove_init_val(left);
        }
        let of_elt = newObject({prototype: Root.jsdb.one_of,
            choices: ["of", "in"],
            value: "of",
            eval_each_choice: false,
        });
        let right  = JS2B[st.right.type].call(undefined, st.right);
        let body   = JS2B[st.body.type].call(undefined, st.body);
        return Root.jsdb.for.for_of.make_dom_elt(undefined, undefined, left, of_elt, right, body)
    }

    static WhileStatement(st){
        let test_elt   = JS2B[st.test.type].call(undefined, st.test);
        let body_elt   = JS2B[st.body.type].call(undefined, st.body);
        return Root.jsdb.rword_expr_code_body.while.make_dom_elt(undefined, undefined, test_elt, body_elt)
    }

    static FunctionDeclaration(st, lex_env, cont, source){
        let src = this.get_src(st, source);
        let result = globalThis.eval(src);
        cont.call(null, result);
    }
    /*let fn_name = "" //used in annoymous fn defs
    if (st.id) { fn_name = st.id.name }
    //else {} //handles annoymous fn defs.
    let param_arg_name_vals = [] //an array of arrays. Each inner array has the param name and the default val block elt.
    for(let param_st of st.params) {
        let param_name
        let param_val
        if (param_st.type == "Identifier"){
            param_name = param_st.name
            param_val = Root.jsdb.one_of.null_undefined.make_dom_elt(undefined, undefined, undefined)
        }
        else if(param_st.type == "AssignmentPattern"){
            param_name = param_st.left.name
            param_val = JS2B[param_st.right.type].call(undefined, param_st.right)
        }
        else if (param_st.type == "ObjectPattern"){ //happens when function foo ({a=1, b=2})
            param_name = ""
            param_val = {}
            for(let prop of param_st.properties){
                let prop_assign_pat = prop.value
                let prop_name = prop_assign_pat.left.name
                let prop_val_block_elt = JS2B[prop_assign_pat.right.type].call(undefined, prop_assign_pat.right)
                param_val[prop_name] = prop_val_block_elt
            }
        }
        else {
            shouldnt("FunctionDexlaration for: " + fn_name + " got unhandled param type of: " + param_st.type)
        }
        param_arg_name_vals.push([param_name, param_val])
    }
    let params_block_elt = Root.jsdb.function_params.make_dom_elt(undefined, undefined, param_arg_name_vals)
    let body_st = st.body
    let body_block_elt = JS2B[body_st.type].call(undefined, body_st)
    let is_generator = st.generator
    return Root.jsdb.function.make_dom_elt(undefined, undefined, fn_name, params_block_elt, body_block_elt, is_generator)
}*/

    static FunctionExpression(st, operation="if"){
        return JS2B.FunctionDeclaration.call(undefined, st)
    }

    /*let fn_name = "" //used in annoymous fn defs
    if (st.id) { fn_name = st.id.name }
    //else {} //handles annoymous fn defs.
    let param_arg_name_vals = [] //an array of arrays. Each inner array has the param name and the default val block elt.
    for(let param_st of st.params) {
        let param_name
        let param_val
        if (param_st.type == "Identifier"){
            param_name = param_st.name
            param_val = Root.jsdb.one_of.null_undefined.make_dom_elt(undefined, undefined, undefined)
        }
        else if(param_st.type == "AssignmentPattern"){
            param_name = param_st.left.name
            param_val = JS2B[param_st.right.type].call(undefined, param_st.right)
        }
        else if (param_st.type == "ObjectPattern"){ //happens when function foo ({a=1, b=2})
            param_name = ""
            param_val = {}
            for(let prop of param_st.properties){
                let prop_assign_pat = prop.value
                let prop_name = prop_assign_pat.left.name
                let prop_val_block_elt = JS2B[prop_assign_pat.right.type].call(undefined, prop_assign_pat.right)
                param_val[prop_name] = prop_val_block_elt
            }
        }
        else {
            shouldnt("FunctionDexlaration for: " + fn_name + " got unhandled param type of: " + param_st.type)
        }
        param_arg_name_vals.push([param_name, param_val])
    }
    let params_block_elt = Root.jsdb.function_params.make_dom_elt(undefined, undefined, param_arg_name_vals)
    let body_st = st.body
    let body_block_elt = JS2B[body_st.type].call(undefined, body_st)
    let is_generator = st.generator
    return Root.jsdb.function.make_dom_elt(undefined, undefined, fn_name, params_block_elt, body_block_elt, is_generator)
}*/

    static Identifier({ast, lex_env= List.empty, cont, source}){
        let name = ast.name;
        let val  = lex_env[name];
        if(val === undefined) {
            val = globalThis[name];
        }
        cont.call(null, val, lex_env, cont, source);
    }

    //always returns an array of block elts
    static IfStatement(st, lex_env, cont, source){
        let test_st = st.test;
        let action_st = st.consequent;
        st.alternate;
        let test_result;
        this.eval(test_st, lex_env, function(val) { test_result = val; });
        if(test_result) {
            this.eval(action_st, lex_env,
                     null,
                      source); //JS IF doesn't return a value
        }
    }

    static Literal({ast, lex_env= List.empty, cont, source}){
        cont.call(null, ast.value);
    }

    //called for paths
    static MemberExpression(st, lex_env, cont, source){
        let obj_st = st.object;
        let obj_val;
        this.eval(obj_st,
                  lex_env,
                  function(val) { obj_val = val;},
                  source);
        let prop_st = st.property;
        if(prop_st.type === "Identifier"){
            let result = obj_val[prop_st.name];
            cont.call(null, result);
        }
        else {
            shouldnt("ActEval.MemberExpression got unhandled property type: " + prop_st.type);
        }
    }

    static NewExpression(st) {
        let jsclassname = st.callee.name; // a string like "Job"
        let args = st.arguments; //an array
        let arg_blocks = [];
        for (let arg of args) {
            let switcher = arg.type;
            let arg_block = JS2B[switcher].call(undefined, arg); //in the case of new Job,
            //the first arg_block will be a lit_obj block containing the 14 name-val pairs of
            //a job's props.
            arg_blocks.push(arg_block);
        }
        //in the case of a Job, arg_blocks will be an array of one elt, a lit_obj block
        let the_block_type = Root.jsdb.class_instance;
        if (Root.jsdb.class_instance.hasOwnProperty(jsclassname)) { //hits when jsclassname is "Job"
            the_block_type = Root.jsdb.class_instance[jsclassname]; //needed to get the category prop out of the Job newobject.
        }
        let result_block = the_block_type.make_dom_elt(undefined, undefined, jsclassname, arg_blocks);
        return result_block
    }

    static ObjectExpression(st){
        let name_val_block_elt_lit_obj = {}; //names of strings, vals of actual block elts
        for(let prop of st.properties){
            let key = prop.key; //typically (at least) identifier
            let name;
            if (key.type == "Identifier") { name = key.name; }
                //the below turn into strings anyway, so no utility in giving them real values.
                //but I do speical case these strings in Root.jsdb.literal.object.make_dom_elt
                //if      (key.name == "null")  { name = null }
                //else if (key.name == "true")  { name = true }
                // else if (key.name == "false") { name = false }
            // else                          { name = key.name } // a string

            else if (key.type == "Literal") { name = key.value; } //works for strings a la "a str" and numbers.
            //let key_block_elt = JS2B[key.type].call(undefined, key)
            let val = prop.value;
            let value_block_elt = JS2B[val.type].call(undefined, val);
            name_val_block_elt_lit_obj[name] = value_block_elt;
        }
        let lit_obj_block = Root.jsdb.literal.object.make_dom_elt(undefined, undefined, name_val_block_elt_lit_obj);
        return lit_obj_block
    }

    static TryStatement(st){
        let block_st = st.block;
        let block_elt = JS2B[block_st.type].call(undefined, block_st);
        let try_elt = Root.jsdb.rword_code_body.try.make_dom_elt(undefined, undefined, block_elt);
        let result = [try_elt];
        if(st.handler) {
            let catch_elt = JS2B.CatchClause(st.handler);
            result.push(catch_elt);
        }
        if (st.finalizer) {
            let inner_elt = JS2B[st.finalizer.type].call(undefined, st.finalizer);
            let finally_elt = Root.jsdb.rword_code_body.finally.make_dom_elt(undefined, undefined, inner_elt);
            result.push(finally_elt);
        }
        return result
    }

    static CatchClause(st){
        let param_elt = JS2B[st.param.type].call(undefined, st.param);
        let body_elt  = JS2B[st.body.type].call(undefined, st.body);
        let catch_elt = Root.jsdb.rword_expr_code_body.catch.make_dom_elt(undefined, undefined, "catch", param_elt, body_elt);
        return catch_elt
    }
    /*   let test_elt = JS2B[test.type].call(undefined, test)
       let consequent = st.consequent
       let consequent_elt = JS2B[consequent.type].call(undefined, consequent)
       let one_clause
       if(operation == "if") {
           one_clause = [Root.jsdb.rword_expr_code_body.if.make_dom_elt(undefined, undefined, operation, test_elt, consequent_elt)]
       }
       else { //operation is "else if"
           one_clause = [Root.jsdb.rword_expr_code_body.elseif.make_dom_elt(undefined, undefined, operation, test_elt, consequent_elt)]
       }
       if(st.alternate) {
           if(st.alternate.type == "IfStatement") { //alternate is an "else if"
               return one_clause.concat(JS2B.IfStatement(st.alternate, "else if"))
           }
           else { //alternate is a "else". usually st.alternative.type is ExpressionStatement
               let bod_block_elt = JS2B[st.alternate.type].call(undefined, st.alternate)
               let block_elt = Root.jsdb.rword_code_body.else.make_dom_elt(undefined, undefined, bod_block_elt)
               one_clause.push(block_elt)
               return one_clause
           }
       }
       else { return one_clause }
   }*/

    static ReturnStatement(st, lex_env, cont, source){
        let arg = st.argument;
        this.eval(arg, lex_env, cont, source);
    }

    static ThisExpression(st){
        return Root.jsdb.identifier.identifiers.make_dom_elt(undefined, undefined, "this")
    }

    static TemplateLiteral(st){
        let part = st.quasis[0].value.raw;
        let quote_char = "`";
        return Root.jsdb.literal.string.make_dom_elt(undefined, undefined, part, quote_char)
    }

    // ie:  -23  is a Unary Expression, delete is a unary expression.
    static UnaryExpression(st){
        let op = st.operator;
        switch(op){
            case "delete":
                let arg_type = st.argument.type;
                let expr_block  = JS2B[arg_type].call(undefined, st.argument);
                return Root.jsdb.rword_expr.delete.make_dom_elt(undefined, undefined, "delete", expr_block, null)
            case "-":
                let arg = st.argument;
                if ((arg.type = "Literal") && (typeof(arg.value) == "number")){ //we've got a neg number
                    return Root.jsdb.literal.number.make_dom_elt(undefined, undefined, - arg.value)
                }
                else {
                    return JS2B.UpdateExpression(st)
                }
            default:
                return JS2B.UpdateExpression(st) //works for -23  but neg lit numbs treated above
        }
    }

    static UpdateExpression(st){
        let operator_string = st.operator;
        let arg = JS2B[st.argument.type].call(undefined, st.argument);
        let is_prefix = st.prefix;  // true if we have ++i,  false if we have i++
        if(is_prefix) {
            return Root.jsdb.identifiers_prefix.make_dom_elt(undefined, undefined, arg, operator_string)
        }
        else {
            return Root.jsdb.identifiers_postfix.make_dom_elt(undefined, undefined, arg, operator_string)
        }
    }

    static VariableDeclaration(st, lex_env, cont, source){
        let array_of_VariableDeclarator = st.declarations;
        st.kind; //"var" or "let". see AssignmentExpression for kind == ""
        for(let vdr of array_of_VariableDeclarator){
            let var_name = vdr.id.name;
            let val_st =  vdr.init;
            this.eval(val_st,
                      lex_env,
                      function(var_val) {
                              lex_env[var_name] = var_val;},
                     source);
        }
        //dont call cont
    }

    static VariableDeclarator(st, kind="var"){ //kind can also be "let"
        let name_string = st.id.name;
        let initial_value_st = st.init;
        let initial_value_block;
        if (initial_value_st === null) {
            // inititial_value_st = undefined  //not used
            initial_value_block = Root.jsdb.one_of.null_undefined.make_dom_elt(undefined, undefined, "undefined");
        }
        else { initial_value_block = JS2B[initial_value_st.type].call(undefined, initial_value_st); }
        return Root.jsdb.assignment.make_dom_elt(undefined, undefined, kind, name_string, initial_value_block)
    }

    static YieldExpression(st){
        let arg = st.argument;
        let operation = (st.delegate ? "yield*" : "yield");
        let arg_block = JS2B[arg.type].call(undefined, arg);
        return Root.jsdb.rword_expr.make_dom_elt(undefined, undefined, operation, arg_block)
    }
};

globalThis.List = class List{
    static empty = null //the empty list
    static is_empty(lst) { return lst === List.empty }

    static make_pair(a_first, a_rest){
        return [a_first, a_rest]
    }
    static make(...elts){
        if(elts.length === 0){
            return List.empty
        }
        else {
            return List.make_pair(elts[0], List.make(...elts.slice(1)))
        }
    }

    static length(lst){
        if(lst === List.empty){
            return 0
        }
        else {
            let len = List.length(List.rest(lst));
            return len + 1
        }
    }

    static first(pair){
        return pair[0]
    }
    static rest(pair){
        return pair[1]
    }
    static replace_first(pair, value){
        pair[0] = value;
        return pair
    }
    static replace_rest(pair, value){
        pair[1] = value;
        return pair
    }
    static to_array(lst){
        if(lst === List.empty) { return []}
        else {
            let arr = List.to_array(List.rest(lst));
            arr.unshift(List.first(lst));
            return arr
        }
    }
};

//this file only used when Job Engine is used as part of DDE IDE

globalThis.dde_running_in_cloud = function(){
    return (globalThis.location && globalThis.location.host === "cfry.github.io")
};
//start of Job Engine imports

globalThis.dde_version      = "not inited";
globalThis.dde_release_date = "not inited";
globalThis.operating_system = "not inited"; //"mac", "win" or "linux"(for Ubuntu)  bound in both ui and sandbox by ready
globalThis.dde_apps_folder  = "not inited";
globalThis.platform         = "not inited"; //"dde" or "node"

globalThis.default_default_ROS_URL           = "localhost:9090";
globalThis.default_default_dexter_ip_address = "192.168.1.142"; //careful globalThis.platform is not bound when this is evaled. If runing in node, this is over-written in ready_je.js/on_ready_je()
globalThis.default_default_dexter_port       = 3000; //was 50000 in dde3



globalThis.keep_alive_value = false; //true
globalThis.LongBits = LongBits; //needed by Protobuf
console.log("load_job_engine after loading longbits");
globalThis.Espree = Espree$1;
globalThis.js_beautify = js_beautify;
const config = { };
globalThis.mathjs = create(all, config);
Promise.resolve().then(function () { return instruction_control; }); //makes  class Control global


//import "../job_engine/core/messaging.js"//defined global: Messaging todo dde4, this needs to be moved to the server.

//end  of Job Engine imports

async function init_job_engine(){
    //out("out: top of init_job_engine") //DO NOT CALL "out" here. It will error.
    console.log("top of init_job_engine");
    globalThis.dde_version = package_json.version;
    globalThis.dde_release_date = package_json.release_date;
    console.log("DDE version: " + dde_version);
    Coor.init();
    //see also ./core/index.js that has this same code
    Dexter.make_ins = make_ins;
    Dexter.calibrate_build_tables = globalThis.calibrate_build_tables;
    Dexter.prototype.calibrate_build_tables = function() {
        let result = Dexter.calibrate_build_tables();
        for(let oplet_array of result){
            if(Array.isArray(oplet_array)){
                oplet_array.push(this);
            }
        }
        return result
    };

    Job.class_init();
    Dexter.class_init();
    new Brain({name: "brain0"});

    Dexter.draw_dxf = DXF.dxf_to_instructions; //see Robot.js
    Dexter.prototype.draw_dxf = function({robot = null}={}) {
        let obj_args;
        if (arguments.length == 0) { obj_args = {}; } //when no args are passed, I must do this
        else { obj_args = arguments[0]; }
        obj_args.robot = this;
        return Dexter.draw_dxf(obj_args)
    };
    if(platform === "node") { //running in the Job Engine so init the MonitorServer.
        MonitorServer.init();
    }
}

//see doc: https://nodejs.org/api/readline.html
//import {Job} from "./job.js" //now Job is global


//no examples on web of import readline, all use require.
//import * as readline from "readline" // "../../../node_modules/readline/readline.js" //todo but readline.js does require("fs") and require is undefined.
//import readline from "readline"
//globalThis.readline = readline //but since this file can ONLY be loaded in Job Engine, globalThis not accessible from DDE IDE


function set_keep_alive_value(new_val){
    globalThis.keep_alive_value = new_val; //true or false
    let active_job_count = Job.active_jobs().length;
    console.log("in set_keep_alive_value with active_job_count: " + active_job_count +
                " and new_val: " + new_val);
    //if((!new_val) && (active_job_count === 0)){//todo needs to be commented back in probably
    ///    globalThis.close_readline() //but this doesn't end the process so call:
    //    process.exit(0)  //https://stackabuse.com/how-to-exit-in-node-js/
    //}
}

function format_for_eval(src, result){
    let result_str = "" + result;
    let text = format_text_for_code(result_str, true).trim(); //defined in out.js
    //below mostly copied from out.js
    let src_formatted = "";
    let src_formatted_suffix = ""; //but could be "..."
        src_formatted = src.trim();
        let src_first_newline = src_formatted.indexOf("\n");
        if (src_first_newline != -1) {
            src_formatted = src_formatted.substring(0, src_first_newline);
            src_formatted_suffix = "...";
        }
        if (src_formatted.length > 55) {
            src_formatted = src_formatted.substring(0, 55);
            src_formatted_suffix = "...";
        }
        src_formatted = Utils.replace_substrings(src_formatted, "<", "&lt;");
        src = Utils.replace_substrings(src, "'", "&apos;");
        src_formatted = " <code style='background-color:white;' title='" + src + "'>" + src_formatted + src_formatted_suffix + "</code>";

    let src_label = "The result of evaling JS ";
    let the_html = "<div style='font-size:16px;display:inline-block'><i>" + src_label  + " </i>" + src_formatted + " <i>is...</i>" +  text + "</div>";
    return the_html
}

/*
process.stdin.on("data", data => {
    data = data.toString()
    console.log("stdin on data passed: " + data)
    data = data.trim()
    if(data.startsWith("{")){ //got a JSON object
        let json_obj = JSON.parse(data)
        globalThis.keep_alive_value = json_obj.keep_alive_value
        if(json_obj.kind === "eval") {
            let src = json_obj.code
            let result = globalThis.eval(src)
            let the_html = format_for_eval(src, result)
            process.send(the_html) //write_to_stdout(the_html)
            if (!globalThis.keep_alive_value) {
                let json_obj = {
                    kind: "job_process_button",
                    button_tooltip: "There is no job process.",
                    button_color: rgb(200, 200, 200)
                }
                write_to_stdout(JSON.stringify(json_obj))
            }
        }
    }
    else {
        console.log("eval returns: ", globalThis.eval(input))
    }
    //process.stdout.write(data + "\n")
})

 */

process.on("message", data_obj => {
        globalThis.keep_alive_value = data_obj.keep_alive_value;
        console.log("stdio.kjs top of on message with keep_alive_value: " + keep_alive_value);
        if(data_obj.kind === "get_dde_version") {
            data_obj.dde_version      = globalThis.dde_version;
            data_obj.dde_release_date = globalThis.dde_release_date;
            process.send(data_obj);
        }
        else if(data_obj.kind === "eval") {
            let src = data_obj.code;
            let result = globalThis.eval(src);
            let the_html = format_for_eval(src, result);
            console.log("stdio on message the_html: " + the_html);
            //write_to_stdout(the_html)
            let the_eval_result_obj = {
                                    kind: "eval_result",
                                    val_html:  the_html
                                   };
            process.send(the_eval_result_obj);
            /* no need for this when job_process button goes away.
             if (!globalThis.keep_alive_value) {
                let json_obj = {
                    kind: "job_process_button",
                    button_tooltip: "There is no job process.",
                    button_color: rgb(200, 200, 200)
                }
                process.send(json_obj)
            }*/
        }
        else if((data_obj.kind === "job_button_click")){
            let code = 'Job.maybe_define_and_server_job_button_click("' + data_obj.job_name_with_extension + '")';
            console.log(" stdio on message job_button_click evaling: " + code);
            out(" stdio on message job_button_click evaling: " + code);
            globalThis.eval(code);
        }
        else {
            console.log("eval returns: ", globalThis.eval(data_obj.code));
        }
    //process.stdout.write(data + "\n")
});



globalThis.set_keep_alive_value = set_keep_alive_value;

//https://stackoverflow.com/questions/4976466/difference-between-process-stdout-write-and-console-log-in-node-js
function write_to_stdout(str){
    if(!str) ;
    else if(str.trim() == "") ; //do nothing
    else {
        //if(str.startsWith("<for_server>")){
          //console.log("write_to_stdout got: " + str)
        //}
        //console.log("write_to_stdout writing: " + str)
        process.stdout.write(str); //"<br/>" + str) //same as console.log ???
    }
}

globalThis.write_to_stdout = write_to_stdout;

/*
//CAN"T GET readline to work so using simpler process.stdin.on("data" ...")
//no examples on web of import readline, all use require.


function close_readline(){
    console.log("top of job engine node stdio.js close_readline") //even wit the setTimeout,
    //I still don't see this print statement come to the JE browser interface Out pane.
    setTimeout( function() {
       // rl.close() //todo comment back in when debugged
    }, 1000)
}

globalThis.close_readline = close_readline

var rl
function init_readline() {
    console.log("top of init_readline")
    if (rl) {
        console.log("init_readline: already open")
    } else {
        console.log("init_readline: now opening")
        rl = readline.createInterface({
            input:  process.stdin,
            output: process.stdout
        })
        //examples of input:
        // 'Job.myJob.stop_for_reason("interrupted", "user stopped the job")'
        // 'Job.define_and_start_job("/srv/samba/share/dde_apps/myjob.js")'
        // 'Job.myjob.color_job_button()'
        // 'Job.myjob.server_job_button_click()'
        rl.on('line', function (input) {
            console.log("<br/>stdin got line: " + input)
            out("(out call) stdin got line: " + input + "\n")
            input = input.trim()
            if(input.startsWith("eval(")){
                let code = input.substring(5, input.length - 1)
                let result =  globalThis.eval(code)
                let result_str = "" + result
                out("the result of evaling: " + code + " is: <br/>" +
                     result_str)
            }
            else {
                console.log("eval returns: ", globalThis.eval(input))
            }
        })
        rl.on('close', function () { // can't find a rl.is_open() method or prop so this will have to do
            rl = null
        })
    }
}

globalThis.init_readline = init_readline
*/

//Only used in the Job Engine

class GrpcServer {
    static DDE4_PATH = process.cwd() //to dde4, ie the folder containing dde/build/
    static PROTO_PATH  //"/Users/Fry/WebstormProjects/dde4/dde/third_party/helloworld.proto"
                        //__dirname + '/../../protos/helloworld.proto';

    static packageDefinition

    static hello_proto

    static init_packageDefinition(){
        this.packageDefinition = protoLoader.loadSync(
            this.PROTO_PATH,
            {
                keepCase: true,
                longs:    String,
                enums:    String,
                defaults: true,
                oneofs:   true
            });
        this.hello_proto = grpc.loadPackageDefinition(this.packageDefinition).helloworld;
        //console.log("packageDefinition: " + JSON.stringify(this.packageDefinition)) //  big JSON obj, but still, a JSON obj that we COULD stick in-line without a file
        // console.log("_dirname: " + _dirname) //both _dirname and __dirname are unbound,
        // contrary to https://flaviocopes.com/node-get-current-folder/
        //console.log("process.cwd(): " + process.cwd())
        //console.log("build_path: " + this.build_path)
    }


    /*Implements the SayHello RPC method.*/
    static sayHello(call, callback) {
        console.log("top of sayHello"); //prints out in je browser out pane whenever a message comes to the server
        let passed_in_string = call.request.name; //on command line.
          // EX cmd line: node greeter_client.mjs "FRY YO"
          //then passed_in_string will be "FRY YO"  (without the double quotes).
          //default is "world"
        console.log(JSON.stringify(call));
        let instr;
        let mess;
        try {
            instr = eval(passed_in_string);
            console.log("evaled: " + passed_in_string + " to: " + instr);
            GrpcServer.define_wait_for_instruction_maybe(); //can't use "this" in sayHello.
            if(!Job.wait_for_instruction.is_active()){
                Job.wait_for_instruction.start({initial_instruction: instr});
                console.log("Started: Job.wait_for_instruction");
            }
            else {
                Job.insert_instruction(instr,
                                       {job:    "wait_for_instruction",
                                        offset: "end"
                                       });
                console.log("Inserted Instruction: passed_in_string: " + passed_in_string);
            }
            mess = "Running Instruction: " + passed_in_string + "\nstatus: [" +
                    Dexter.dexter0.robot_status + "]";
        }
        catch(err) {
            console.log("Caught error: " + err.message);
            mess = "Hello " + passed_in_string;
        }
        callback(null, {message: mess}); //you can have at most 1 call
            //to the callback. If there's a 2nd one, even the first one won't show in client,
            //and client will hang.
    }

    static define_wait_for_instruction_maybe(callback) {
        if(!Job.wait_for_instruction) {
            Dexter.dexter0.simulate = true;
            new Job({
                name: "wait_for_instruction",
                when_do_list_done: "wait",
                inter_do_item_dur: 0.1,
                do_list: [
                    IO.out("Job.wait_for_instruction is waiting for an instruction.", "green")
                ]
            });
            console.log("Defined: Job.wait_for_instruction");
        }
    }

    static handleDexterInstruction(call, callback) {
        console.log("top of handleDexterInstruction"); //prints out in je browser out pane whenever a message comes to the server
        let passed_in_string = call.request.name; //on command line.
        // EX cmd line: node greeter_client.js "FRY YO"
        //then passed_in_string will be "FRY YO"  (without the double quotes).
        //default is "world"
        console.log(JSON.stringify(call));
        callback(null, {message: 'DexIns reply: ' + passed_in_string});
    }

    /* Starts an RPC server that receives requests for the Greeter service at the sample server port */
    static init() {
        console.log("top of GrpcServer.init");
        out("OUT: top of GrpcServer.init");
        this.DDE4_PATH.lastIndexOf("/");
        //this.DDE_PATH      = this.DDE4_PATH + "/dde" //path.dirname(this.BUILD_PATH) //ie stuff/dde" no slash on end
        //this.DDE_PATH      = this.DDE4_PATH.substring(0, last_slash) //+ "/www/dde"
        if(this.DDE4_PATH.endsWith("/dde/build")) {
            this.DDE4_PATH = this.DDE4_PATH.substring(0, this.DDE4_PATH.length - ("/dde/build".length));
        }
        this.PROTO_PATH    = path$1.join(this.DDE4_PATH, "dde", "third_party", "helloworld.proto");
        console.log("DDE4_PATH: "  + this.DDE4_PATH);
        //console.log("DDE_PATH: "   + this.DDE_PATH)
        console.log("PROTO_PATH: " + this.PROTO_PATH);
        this.init_packageDefinition();
        console.log("after init_packageDefinition");
        try {
            let gserver = new grpc.Server();
            console.log("after new grpc.Server with: " + gserver);
            gserver.addService(GrpcServer.hello_proto.Greeter.service, {sayHello: GrpcServer.sayHello});
            gserver.addService(GrpcServer.hello_proto.DexterInstruction.service, {handleDexterInstruction: GrpcServer.handleDexterInstruction});

            gserver.bindAsync('127.0.0.1:50051', //'0.0.0.0:50051',
                                   grpc.ServerCredentials.createInsecure(),
                           (err, port) => {
                                      out("grpc.Server init just before start with err: " + err + " port: " + port);
                                      if(err) {
                                          out("err.message: " + err.message);
                                      }
                                      out("gserver: " + gserver);
                                      try {
                                          gserver.start(); //this line errors *sometimes* with "Error: server must be bound in order to start"
                                      }
                                      catch(err){
                                          out("grpc.Server init catch of err: " + err.message);
                                      }
                                      out("grpc init just after start");
            });
        }
        catch(err){
            console.log("GrpcServer.init errored with: " + err.message);
            out("GrpcServer.init errored with: " + err.message);
        }
        console.log("bottom of GrpcServer.init");
    }
}

globalThis.GrpcServer = GrpcServer;

//GrpcServer.init();

///this file is only used by Job Engine when it is running by itself
console.log("top of ready_je.js");

globalThis.dde_running_in_cloud = function(){
    return (globalThis.location && globalThis.location.host === "cfry.github.io")
};

globalThis.default_default_ROS_URL           = "localhost:9090";
globalThis.default_default_dexter_ip_address = "192.168.1.142";
globalThis.default_default_dexter_port       = 3000; //was 50000 in dde3
globalThis.grpc = grpc$1;
globalThis.protoLoader = protoLoader$1;
globalThis.StripsManager = StripsManager$1;
//extends and replaces StripsManager.loadCode
//do not use "this" in the body of this code
//code can be a string of PDDL or a string of JSON or an actual JSON object.
function strips_loadCode(grammarFileName, code, callback) {
    // Applies a PEG.js grammar against a code string and returns the parsed JSON result.
    if(grammarFileName === "problem") {
        grammarFileName = StripsManager$1.grammarProblemPath;
    }
    else if (grammarFileName === "domain") {
        grammarFileName = StripsManager$1.grammarDomainPath;
    }
    console.log("strips.js top of loadCode passed: " + grammarFileName + " code: " + code);
    if(typeof(code) === "object") { //assume proper JSON object
        if (callback) {
            callback(code);
        }
    }
    else if (code.startsWith("{")) {
        let json_obj;
        try {
            json_obj = JSON.parse(code);
        } catch (err) {
            throw err
        }
        if (callback) {
            callback(json_obj);
        }
    } else {
        fs$1.readFile(grammarFileName, 'utf8', function (err, grammar) {
            console.log("strips.js readFile cb passed err: " + err + " grammar: " + grammar);
            if (err) throw err;

            var parser = PEG.generate(grammar);
            console.log("strips.js readFile cb parser: " + parser);
            if (callback) {
                callback(parser.parse(code));
            }
        });
    }
}
StripsManager$1.loadCode = strips_loadCode;  //extend loadCode to be able to accept JSON string, not just PDDL
globalThis.WebSocket = WebSocket$1;
globalThis.WebSocketServer = WebSocketServer;
globalThis.child_process = child_process;

function run_node_command(args) {
    console.log("Hey, top of run_node_command with args:\n" + args);
    let cmd_name = args[2];
    console.log("run_node_command got cmd_name of: " + cmd_name);
    if (!cmd_name.startsWith("undefined(")) {
        //let fn = eval(cmd_name)
        let the_args = args.slice(3);
        //console.log("cmd_name: " + cmd_name + " args: " + the_args)
        //fn.apply(null, the_args)

        let cmd = cmd_name + "(\"" + the_args.join(", ") + "\");";
        console.log("Evaling: " + cmd);
        globalThis.eval(cmd);
    }
    else {console.log("started Job Engine without args.");} //not passed any real args so just do nothing.
}

//when there is no job_process and user clicks on job_process button
function start_je_process(){
    console.log("top of start_je_process");
    globalThis.keep_alive_settimeout = setTimeout(
        function() {
            console.log("the keep_alive setTimout timed out");
    },
    //sec    min  hour day
        (1000 * 60 * 60 * 24)
    );
    console.log("bottom of start_je_process");
}
globalThis.start_je_process = start_je_process;

function define_and_start_job(job_file_path){
    if(job_file_path.endsWith("/keep_alive")) {
        globalThis.keep_alive_value = true; //set to false by stdio readline evaling "globalThis.set_keep_alive_value(false)" made in httpd.mjs
        //and sent to job engine process stdin.
    }
    else {
        Job.define_and_start_job(job_file_path);
    }
}

globalThis.define_and_start_job = define_and_start_job; //shouldn't be necessary for the eval in



//beware, different def than in dde IDE
//see https://stackoverflow.com/questions/8683895/how-do-i-determine-the-current-operating-system-with-node-js
function set_operating_system() {
    console.log("top of set_operating_system with process: " + process);
    console.log("in set_operating_system with process.platform: " + process.platform);
    if      (process.platform === "win32")   { globalThis.operating_system="win";} //even 64 bit winos is called win32
    else if (process.platform === "darwin")  { console.log("found darwin"); globalThis.operating_system="mac";}
    else if (process.platform === "linux")   { globalThis.operating_system="linux";}
    else                                     { globalThis.operating_system=process.platform;}
    console.log("bottom of set_operating_system globalThis.operating_system: " + globalThis.operating_system);
}

async function on_ready_je(){
    console.log("top of on_ready_je");
    console.log("Using node version: " + process.versions.node);
    set_operating_system();
    console.log("globalThis.operating_system is now: " + globalThis.operating_system);
    //out("top of on_ready_je")
    globalThis.platform = "node";
    globalThis.default_default_dexter_ip_address = "localhost";
    //console.log("init_job_engine: " + init_job_engine)
    await init_job_engine();

    //for DDE_ID equivalent see ready.js on_ready function
    //In the job engine, dexter0's ip address always defaults to "localhost".
    if(!Dexter.dexter0){
        Dexter.dexter0 = new Dexter({name: "dexter0"});
    }
    if(!Dexter.dexter0.ip_address){
        //let addr = DDE_DB.get("dexter0_ip_address")
        //if(!addr || (addr === "auto")){
        //    Dexter.dexter0.ip_address = globalThis.default_default_dexter_ip_address //but in DDE_IDE this is "192.168.1.142"
        //}
        Dexter.dexter0.ip_address = Dexter.compute_default_ip_address();
    }
    Dexter.default = Dexter.dexter0;

    out("on_ready_je after init_job_engine");
    //below 3 are same as on_ready. This must be after loading series, which is only for dde IDE,
    //so can't stick the below in the shared
    init_units(); //In dde, has to be after init_series call.
    FPGA.init();  //does not depend on Series.
    Gcode.init(); //must be after init_series which calls init_units()
    //init_readline() //can't get this to work. see stdio.js
    //GrpcServer.init() //todo this errors if running job engine on my mac *I think*
    out("on_ready_je after calling GrpcServer.initGrpcServer.init");
    if (does_this_script_have_args()) {
        out("calling run_node_command with: " + process.argv);
        run_node_command(process.argv);
    }
    else {
        out("no job to run");
    }

}

on_ready_je();

function does_this_script_have_args() {
    //for process.argv, the first elt always is the "node" cmd,
    //and since we're not running in a repl,
    //2nd elt always is the js file of this script.
    //Thus, if this script is to have any args, process.argv must have more than 2 elts.
    return process.argv.length > 2
}


/* example runnning of Job engine to run a job:
node bundleje.mjs Job.define_and_start_job "/Users/Fry/Documents/dde_apps/just_prints.dde"

 */

//we import it here, just to make sure its loaded,
 //before the below code is loaded.


class Control$1{
    static is_control_instruction(arg){
        if(!this.instruction_classes_in_control) {
            this.init_classes_in_control();
        }
        for(let claz of Control$1.instruction_classes_in_control){
            if(arg instanceof claz) { return true }
        }
        return false
     }
    /*static is_control_instruction(arg){
        for(let claz of Instruction.control_classes){
            if(arg instanceof claz) { return true }
        }
        return false
    }*/
     static init_classes_in_control() {
        Control$1.instruction_classes_in_control = [
            Instruction.break,
            Instruction.continue,
            Instruction.go_to,
            Instruction.loop,
            Instruction.label,
            Instruction.suspend,
            Instruction.unsuspend,
            Instruction.sync_point,
            Instruction.wait_until,

            Instruction.include_job,
            Instruction.send_to_job,
            Instruction.sent_from_job,
            Instruction.start_job,
            Instruction.stop_job,

            Instruction.debugger,
            Instruction.step_instructions,
            Instruction.error,
            Instruction.if_any_errors
        ];
     }
}
Control$1.instruction_classes_in_control = null;

//Methods that result in an instance of a Control class
Control$1.break = Robot.break;
Control$1.continue = Robot.continue;
Control$1.go_to = Robot.go_to;
Control$1.loop = Robot.loop;
Control$1.label = Robot.label;
Control$1.set_inter_do_item_dur = Robot.set_inter_do_item_dur;
Control$1.suspend = Robot.suspend;
Control$1.unsuspend = Robot.unsuspend;
Control$1.sync_point = Robot.sync_point;
Control$1.wait_until = Robot.wait_until;

Control$1.include_job = Robot.include_job;
Control$1.send_to_job = Robot.send_to_job;
Control$1.sent_from_job = Robot.sent_from_job;
Control$1.start_job = Robot.start_job;
Control$1.stop_job = Robot.stop_job;

Control$1.debugger = Robot.debugger;
Control$1.step_instructions = Robot.step_instructions;
Control$1.error = Robot.error;
Control$1.if_any_errors = Robot.if_any_errors;

globalThis.Control = Control$1;

var instruction_control = /*#__PURE__*/Object.freeze({
  __proto__: null
});
//# sourceMappingURL=bundleje.mjs.map
